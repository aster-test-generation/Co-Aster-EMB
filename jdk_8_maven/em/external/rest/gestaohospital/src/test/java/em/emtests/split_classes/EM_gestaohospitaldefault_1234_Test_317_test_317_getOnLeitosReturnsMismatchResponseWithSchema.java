package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.mongo.dsl.MongoDsl.mongo;
import  org.evomaster.client.java.controller.api.dto.database.operations.MongoInsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.MongoInsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:43:27.165-04:00[America/New_York]
 * <br>
*  The generated test suite contains 408 tests
 * <br>
*  Covered targets: 2217
 * <br>
*  Used time: 1h 5m 2s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_gestaohospitaldefault_1234_Test_317_test_317_getOnLeitosReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.br.com.codenation.hospital.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/gestaohospital-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (400) GET:/v1/hospitais/{id}/leitos
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_317_getOnLeitosReturnsMismatchResponseWithSchema() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("HospitalDB", "hospital_collection")
                .d("{\"id\":\"GrlaykdBS\", \"name\":\"U4eU5\", \"address\":\"bhzcLzMe8kL\", \"beds\":{\"$numberInt\":\"677\"}, \"availableBeds\":{\"$numberInt\":\"156\"}, \"location\":{\"id\":\"wu6yLKik\", \"name\":\"nov4i7ma\", \"referenceId\":\"SMZEr1WeDbIk\", \"locationCategory\":\"PATIENT\", \"position\":{\"coordinates\":[{\"$numberDouble\":\"0.1827981914685849\"}, {\"$numberDouble\":\"0.03437143102103746\"}], \"type\":\"Point\"}}, \"patients\":[{\"id\":\"\", \"name\":\"vU\", \"cpf\":\"P1Rxf9\", \"birthDate\":{\"$date\":{\"$numberLong\":\"-795729600000\"}}, \"gender\":\"\", \"entryDate\":{\"$date\":{\"$numberLong\":\"2116472400000\"}}, \"exitDate\":{\"$date\":{\"$numberLong\":\"-686602800000\"}}, \"active\":true, \"location\":{\"id\":\"eZ\", \"name\":\"T4\", \"referenceId\":\"0zSjSU>dC4OwT_1\", \"locationCategory\":\"PATIENT\", \"position\":{\"coordinates\":[{\"$numberDouble\":\"0.5628273404395335\"}, {\"$numberDouble\":\"0.9028898153652739\"}], \"type\":\"Point\"}}}], \"products\":[{\"_id\":{\"timestamp\":{\"$numberInt\":\"313\"}, \"machineIdentifier\":{\"$numberInt\":\"544\"}, \"processIdentifier\":{\"$numberInt\":\"-5857\"}, \"counter\":{\"$numberInt\":\"141\"}}, \"name\":\"gQh0ArG8ho5x\", \"description\":\"HdA4Jho\", \"quantity\":{\"$numberInt\":\"775\"}, \"productType\":\"BLOOD\"}, {\"_id\":{\"timestamp\":{\"$numberInt\":\"114\"}, \"machineIdentifier\":{\"$numberInt\":\"843\"}, \"processIdentifier\":{\"$numberInt\":\"470\"}, \"counter\":{\"$numberInt\":\"637\"}}, \"name\":\"4ms\", \"description\":\"rp1I9pDewgujGn\", \"quantity\":{\"$numberInt\":\"243\"}, \"productType\":\"COMMON\"}, {\"_id\":{\"timestamp\":{\"$numberInt\":\"854\"}, \"machineIdentifier\":{\"$numberInt\":\"395\"}, \"processIdentifier\":{\"$numberInt\":\"-3355\"}, \"counter\":{\"$numberInt\":\"578\"}}, \"name\":\"uE\", \"description\":\"pe5ZIYEX19lLOb0\", \"quantity\":{\"$numberInt\":\"32916\"}, \"productType\":\"BLOOD\"}, {\"_id\":{\"timestamp\":{\"$numberInt\":\"303\"}, \"machineIdentifier\":{\"$numberInt\":\"239\"}, \"processIdentifier\":{\"$numberInt\":\"854\"}, \"counter\":{\"$numberInt\":\"653\"}}, \"name\":\"_EM_7611_XYZ_\", \"description\":\"_n7VOPK^57\", \"quantity\":{\"$numberInt\":\"508\"}, \"productType\":\"BLOOD\"}], \"_id\":{\"$oid\":\"851768c3608dffdddf87d642\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/v1/hospitais/{id}/leitos'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v1/hospitais/_EM_2314_XYZ_/leitos")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'message'", containsString("Hospital n√£o encontrado! ID:_EM_2314_XYZ_"))
                .body("'path'", containsString("/v1/hospitais/_EM_2314_XYZ_/leitos"));
    }
}
