package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.mongo.dsl.MongoDsl.mongo;
import  org.evomaster.client.java.controller.api.dto.database.operations.MongoInsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.MongoInsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:43:27.165-04:00[America/New_York]
 * <br>
*  The generated test suite contains 408 tests
 * <br>
*  Covered targets: 2217
 * <br>
*  Used time: 1h 5m 2s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_gestaohospitaldefault_1234_Test_350_test_350_getOnPacientReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.br.com.codenation.hospital.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/gestaohospital-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (200) GET:/v1/hospitais/{hospital_id}/pacientes/{patientId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_350_getOnPacientReturnsMismatchResponseWithSchema() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("HospitalDB", "patient_collection")
                .d("{\"id\":\"_EM_3283_XYZ_\", \"name\":\"woFJOYs\", \"cpf\":\"2_q5dslLlvT4yOsm\", \"birthDate\":{\"$date\":{\"$numberLong\":\"99205200000\"}}, \"gender\":\"9CCg\", \"entryDate\":{\"$date\":{\"$numberLong\":\"-1885662000000\"}}, \"exitDate\":{\"$date\":{\"$numberLong\":\"1972440000000\"}}, \"active\":false, \"location\":{\"id\":\"dToSbcirR\", \"name\":\"230om6Qj\", \"referenceId\":\"yS\", \"locationCategory\":\"PATIENT\", \"position\":{\"coordinates\":[{\"$numberDouble\":\"0.9361539556851375\"}, {\"$numberDouble\":\"0.11370485442331324\"}], \"type\":\"Point\"}}, \"_id\":{\"$oid\":\"eea8d0f664bd9e9f533492ec\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/location/id'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_489_XYZ_")
                .get(baseUrlOfSut + "/v1/hospitais/wDDp@DKk/pacientes/eea8d0f664bd9e9f533492ec?EMextraParam123=_EM_488_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("woFJOYs"))
                .body("'cpf'", containsString("2_q5dslLlvT4yOsm"))
                .body("'birthDate'", containsString("1973-02-22T05:00:00.000+0000"))
                .body("'gender'", containsString("9CCg"))
                .body("'entryDate'", containsString("1910-04-01T05:00:00.000+0000"))
                .body("'exitDate'", containsString("1910-04-01T05:00:00.000+0000"))
                .body("'active'", equalTo(false))
                .body("'location'.'name'", containsString("230om6Qj"))
                .body("'location'.'referenceId'", containsString("yS"))
                .body("'location'.'locationCategory'", containsString("PATIENT"))
                .body("'location'.'position'.'x'", numberMatches(0.9361539556851375))
                .body("'location'.'position'.'y'", numberMatches(0.11370485442331324))
                .body("'location'.'position'.'type'", containsString("Point"))
                .body("'location'.'position'.'coordinates'.size()", equalTo(2))
                .body("'location'.'position'.'coordinates'[0]", numberMatches(0.9361539556851375))
                .body("'location'.'position'.'coordinates'[1]", numberMatches(0.11370485442331324))
                .body("'location'.'location'.'x'", numberMatches(0.9361539556851375))
                .body("'location'.'location'.'y'", numberMatches(0.11370485442331324))
                .body("'location'.'location'.'type'", containsString("Point"))
                .body("'location'.'location'.'coordinates'.size()", equalTo(2))
                .body("'location'.'location'.'coordinates'[0]", numberMatches(0.9361539556851375))
                .body("'location'.'location'.'coordinates'[1]", numberMatches(0.11370485442331324));
    }
}
