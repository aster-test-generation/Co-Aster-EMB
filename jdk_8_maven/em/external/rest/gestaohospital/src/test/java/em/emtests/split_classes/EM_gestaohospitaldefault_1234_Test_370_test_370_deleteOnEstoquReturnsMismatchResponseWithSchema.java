package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.mongo.dsl.MongoDsl.mongo;
import  org.evomaster.client.java.controller.api.dto.database.operations.MongoInsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.MongoInsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:43:27.165-04:00[America/New_York]
 * <br>
*  The generated test suite contains 408 tests
 * <br>
*  Covered targets: 2217
 * <br>
*  Used time: 1h 5m 2s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_gestaohospitaldefault_1234_Test_370_test_370_deleteOnEstoquReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.br.com.codenation.hospital.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/gestaohospital-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (400) DELETE:/v1/hospitais/{hospital_id}/estoque/{produto_id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_370_deleteOnEstoquReturnsMismatchResponseWithSchema() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("HospitalDB", "product_collection")
                .d("{\"name\":\"lRyObNgPMsLiU9t\", \"description\":\"\", \"quantity\":{\"$numberInt\":\"-31835\"}, \"productType\":\"BLOOD\", \"_id\":{\"$oid\":\"0dda44108b2cbef04cc5e0a7\"}}")
            .and().insertInto("HospitalDB", "hospital_collection")
                .d("{\"id\":\"ph8Q7T\", \"name\":\"fhace3o8pp\", \"address\":\"U8s\", \"beds\":{\"$numberInt\":\"-15968\"}, \"availableBeds\":{\"$numberInt\":\"57\"}, \"location\":{\"id\":\"0CL5FHyZ39\", \"name\":\"gPZKOQ6aYae\", \"referenceId\":\"_V\", \"locationCategory\":\"HOSPITAL\", \"position\":{\"coordinates\":[{\"$numberDouble\":\"0.08397533207057395\"}, {\"$numberDouble\":\"0.9662764232007917\"}], \"type\":\"Point\"}}, \"patients\":[{\"id\":\"zHGKV_CWF_Ydl\", \"name\":\"_EM_9987_XYZ_\", \"cpf\":\"UzzS0LirT\", \"birthDate\":{\"$date\":{\"$numberLong\":\"-1421607600000\"}}, \"gender\":\"DSSdH4ZcfhqVOl\", \"entryDate\":{\"$date\":{\"$numberLong\":\"-846000000\"}}, \"exitDate\":{\"$date\":{\"$numberLong\":\"470638800000\"}}, \"active\":true, \"location\":{\"id\":\"_EM_9988_XYZ_\", \"name\":\"5FIHN2VqsM\", \"referenceId\":\"PNtD0pCt\", \"locationCategory\":\"HOSPITAL\", \"position\":{\"coordinates\":[{\"$numberDouble\":\"0.9657203028727157\"}, {\"$numberDouble\":\"1.3916835499582842\"}], \"type\":\"Point\"}}}], \"products\":[{\"_id\":{\"timestamp\":{\"$numberInt\":\"234\"}, \"machineIdentifier\":{\"$numberInt\":\"62\"}, \"processIdentifier\":{\"$numberInt\":\"610\"}, \"counter\":{\"$numberInt\":\"761\"}}, \"name\":\"kyDBZmSBfY3mv0W9\", \"description\":\"k0JRoIW8\", \"quantity\":{\"$numberInt\":\"940\"}, \"productType\":\"BLOOD\"}, {\"_id\":{\"timestamp\":{\"$numberInt\":\"880\"}, \"machineIdentifier\":{\"$numberInt\":\"885\"}, \"processIdentifier\":{\"$numberInt\":\"293\"}, \"counter\":{\"$numberInt\":\"515\"}}, \"name\":\"MG2\", \"description\":\"o8V37A4SEGZ\", \"quantity\":{\"$numberInt\":\"963\"}, \"productType\":\"BLOOD\"}, {\"_id\":{\"timestamp\":{\"$numberInt\":\"466\"}, \"machineIdentifier\":{\"$numberInt\":\"565\"}, \"processIdentifier\":{\"$numberInt\":\"341\"}, \"counter\":{\"$numberInt\":\"144\"}}, \"name\":\"k1KEQqKrs3oYKE6\", \"description\":\"pD\", \"quantity\":{\"$numberInt\":\"394\"}, \"productType\":\"BLOOD\"}], \"_id\":{\"$oid\":\"cac5e7430cae0fdd9afffada\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/v1/hospitais/{hospital_id}/estoque/{produto_id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/v1/hospitais/cac5e7430cae0fdd9afffada/estoque/_EM_1089_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
}
