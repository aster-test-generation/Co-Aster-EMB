package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.mongo.dsl.MongoDsl.mongo;
import  org.evomaster.client.java.controller.api.dto.database.operations.MongoInsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.MongoInsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:43:27.165-04:00[America/New_York]
 * <br>
*  The generated test suite contains 408 tests
 * <br>
*  Covered targets: 2217
 * <br>
*  Used time: 1h 5m 2s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_gestaohospitaldefault_1234_Test_318_test_318_getOnLeitosReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.br.com.codenation.hospital.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/gestaohospital-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (400) GET:/v1/hospitais/{id}/leitos
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_318_getOnLeitosReturnsMismatchResponseWithSchema() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("HospitalDB", "hospital_collection")
                .d("{\"id\":\"gfN4zGTdX5\", \"name\":\"XegqSsAqyGcH\", \"address\":\"CtaS=JUzN4U\", \"beds\":{\"$numberInt\":\"0\"}, \"availableBeds\":{\"$numberInt\":\"823\"}, \"location\":{\"id\":\"Uua3QBV\", \"name\":\"MWXBAfOws4l8WRf\", \"referenceId\":\"Gvdl2\", \"locationCategory\":\"HOSPITAL\", \"position\":{\"coordinates\":[{\"$numberDouble\":\"0.3935319000469899\"}, {\"$numberDouble\":\"0.2503620068644653\"}], \"type\":\"Point\"}}, \"patients\":[{\"id\":\"f\", \"name\":\"mUqV8\", \"cpf\":\"PJWyFw\", \"birthDate\":{\"$date\":{\"$numberLong\":\"-1595793600000\"}}, \"gender\":\"X\", \"entryDate\":{\"$date\":{\"$numberLong\":\"-426628800000\"}}, \"exitDate\":{\"$date\":{\"$numberLong\":\"2507083200000\"}}, \"active\":true, \"location\":{\"id\":\"of7mg1x4XWaQw1k\", \"name\":\"xAXn7gi6dPo\", \"referenceId\":\"uaM2P\", \"locationCategory\":\"PATIENT\", \"position\":{\"coordinates\":[{\"$numberDouble\":\"0.8344346209588398\"}, {\"$numberDouble\":\"0.03734686457131153\"}], \"type\":\"Point\"}}}, {\"id\":\"6usuXK4WIK2Xk\", \"name\":\"eT7z48DFmYR_lNnH\", \"cpf\":\"FE\", \"birthDate\":{\"$date\":{\"$numberLong\":\"1406606400000\"}}, \"gender\":\"iidmQGmsL9\", \"entryDate\":{\"$date\":{\"$numberLong\":\"-1952708400000\"}}, \"exitDate\":{\"$date\":{\"$numberLong\":\"828936000000\"}}, \"active\":false, \"location\":{\"id\":\"j7BksKFx7ax\", \"name\":\"UTC3j1\", \"referenceId\":\"uzsd4CD\", \"locationCategory\":\"PATIENT\", \"position\":{\"coordinates\":[{\"$numberDouble\":\"0.16064212650085496\"}, {\"$numberDouble\":\"0.9843952045043669\"}], \"type\":\"Point\"}}}, {\"id\":\"qC6LK9phId2tanP\", \"name\":\"mC4LO4rGU\", \"cpf\":\"PwQ7vw6EISi\", \"birthDate\":{\"$date\":{\"$numberLong\":\"3001467600000\"}}, \"gender\":\"ghRcx48t5\", \"entryDate\":{\"$date\":{\"$numberLong\":\"2630980800000\"}}, \"exitDate\":{\"$date\":{\"$numberLong\":\"1248408000000\"}}, \"active\":false, \"location\":{\"id\":\"I\", \"name\":\"jjoEpEK9fYcV\", \"referenceId\":\"RYo\", \"locationCategory\":\"PATIENT\", \"position\":{\"coordinates\":[{\"$numberDouble\":\"0.18467861693234766\"}, {\"$numberDouble\":\"0.051381626228438115\"}], \"type\":\"Point\"}}}, {\"id\":\"aI5YnlPlDMZ5\", \"name\":\"b\", \"cpf\":\"1X0\", \"birthDate\":{\"$date\":{\"$numberLong\":\"2887848000000\"}}, \"gender\":\"B4FdqX60aFaqi8\", \"entryDate\":{\"$date\":{\"$numberLong\":\"-706996800000\"}}, \"exitDate\":{\"$date\":{\"$numberLong\":\"-201988800000\"}}, \"active\":false, \"location\":{\"id\":\"66979pC9WM89h5NF\", \"name\":\"Htw\", \"referenceId\":\"dB9pVtHY5Owf\", \"locationCategory\":\"PATIENT\", \"position\":{\"coordinates\":[{\"$numberDouble\":\"0.8298484632954578\"}, {\"$numberDouble\":\"0.06750107811089079\"}], \"type\":\"Point\"}}}], \"products\":[], \"_id\":{\"$oid\":\"a2f12c8ad0499cbb4d2389ec\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/v1/hospitais/{id}/leitos'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v1/hospitais/_EM_2189_XYZ_/leitos")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'message'", containsString("Hospital n√£o encontrado! ID:_EM_2189_XYZ_"))
                .body("'path'", containsString("/v1/hospitais/_EM_2189_XYZ_/leitos"));
    }
}
