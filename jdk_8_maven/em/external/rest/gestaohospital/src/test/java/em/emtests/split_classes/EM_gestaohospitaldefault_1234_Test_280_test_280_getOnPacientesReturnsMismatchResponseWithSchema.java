package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.mongo.dsl.MongoDsl.mongo;
import  org.evomaster.client.java.controller.api.dto.database.operations.MongoInsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.MongoInsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:43:27.165-04:00[America/New_York]
 * <br>
*  The generated test suite contains 408 tests
 * <br>
*  Covered targets: 2217
 * <br>
*  Used time: 1h 5m 2s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_gestaohospitaldefault_1234_Test_280_test_280_getOnPacientesReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.br.com.codenation.hospital.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/gestaohospital-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (200) GET:/v1/hospitais/{hospital_id}/pacientes
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_280_getOnPacientesReturnsMismatchResponseWithSchema() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("HospitalDB", "hospital_collection")
                .d("{\"id\":\"gao6u9AaYs\", \"name\":\"_EM_3379_XYZ_\", \"address\":\"I\", \"beds\":{\"$numberInt\":\"571\"}, \"availableBeds\":{\"$numberInt\":\"8389512\"}, \"location\":{\"id\":\"_EM_3375_XYZ_\", \"name\":\"_EM_3376_XYZ_\", \"referenceId\":\"Vp1fO\", \"locationCategory\":\"HOSPITAL\", \"position\":{\"coordinates\":[{\"$numberDouble\":\"1448.6773100829841\"}, {\"$numberDouble\":\"-40114.349348212396\"}], \"type\":\"Point\"}}, \"patients\":[{\"id\":\"TjH4uqE\", \"name\":\"EqOaOn8jL\", \"cpf\":\"PU85LI\", \"birthDate\":{\"$date\":{\"$numberLong\":\"1000008000000\"}}, \"gender\":\"uP6iw4YaWXpMilDQ\", \"entryDate\":{\"$date\":{\"$numberLong\":\"2097979200000\"}}, \"exitDate\":{\"$date\":{\"$numberLong\":\"-1740682800000\"}}, \"active\":true, \"location\":{\"id\":\"di66oWUDZN\", \"name\":\"yS77WDC5YWTtoVl\", \"referenceId\":\"cMFqnbSo\", \"locationCategory\":\"PATIENT\", \"position\":{\"coordinates\":[{\"$numberDouble\":\"0.9891421274313971\"}, {\"$numberDouble\":\"0.12859755313397414\"}], \"type\":\"Point\"}}}, {\"id\":\"Ea70dPu\", \"name\":\"0L6jjQU_MQ\", \"cpf\":\"7ScawTDCK\", \"birthDate\":{\"$date\":{\"$numberLong\":\"-243457200000\"}}, \"gender\":\"wAS\", \"entryDate\":{\"$date\":{\"$numberLong\":\"2909534400000\"}}, \"exitDate\":{\"$date\":{\"$numberLong\":\"1914379200000\"}}, \"active\":true, \"location\":{\"id\":\"pa\", \"name\":\"ZkL5q_stnrUel4tV\", \"referenceId\":\"w8krSYl\", \"locationCategory\":\"PATIENT\", \"position\":{\"coordinates\":[{\"$numberDouble\":\"0.6049598048908025\"}, {\"$numberDouble\":\"0.5888469589366369\"}], \"type\":\"Point\"}}}], \"products\":[{\"_id\":{\"timestamp\":{\"$numberInt\":\"805\"}, \"machineIdentifier\":{\"$numberInt\":\"-328571226\"}, \"processIdentifier\":{\"$numberInt\":\"589\"}, \"counter\":{\"$numberInt\":\"256\"}}, \"name\":\"Fp\", \"description\":\"r\", \"quantity\":{\"$numberInt\":\"36\"}, \"productType\":\"BLOOD\"}, {\"_id\":{\"timestamp\":{\"$numberInt\":\"120\"}, \"machineIdentifier\":{\"$numberInt\":\"568919067\"}, \"processIdentifier\":{\"$numberInt\":\"1830\"}, \"counter\":{\"$numberInt\":\"532\"}}, \"name\":\"9Hxa\", \"description\":\"_EM_3380_XYZ_\", \"quantity\":{\"$numberInt\":\"1084\"}, \"productType\":\"COMMON\"}], \"_id\":{\"$oid\":\"b395898f9755bd58728b7dd2\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/0/id'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2666_XYZ_")
                .get(baseUrlOfSut + "/v1/hospitais/b395898f9755bd58728b7dd2/pacientes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("EqOaOn8jL"))
                .body("[0].'cpf'", containsString("PU85LI"))
                .body("[0].'birthDate'", containsString("2001-09-09T04:00:00.000+0000"))
                .body("[0].'gender'", containsString("uP6iw4YaWXpMilDQ"))
                .body("[0].'entryDate'", containsString("2036-06-25T04:00:00.000+0000"))
                .body("[0].'exitDate'", containsString("2036-06-25T04:00:00.000+0000"))
                .body("[0].'active'", equalTo(true))
                .body("[0].'location'.'name'", containsString("yS77WDC5YWTtoVl"))
                .body("[0].'location'.'referenceId'", containsString("cMFqnbSo"))
                .body("[0].'location'.'locationCategory'", containsString("PATIENT"))
                .body("[0].'location'.'position'.'x'", numberMatches(0.9891421274313971))
                .body("[0].'location'.'position'.'y'", numberMatches(0.12859755313397414))
                .body("[0].'location'.'position'.'type'", containsString("Point"))
                .body("[0].'location'.'position'.'coordinates'.size()", equalTo(2))
                .body("[0].'location'.'position'.'coordinates'[0]", numberMatches(0.9891421274313971))
                .body("[0].'location'.'position'.'coordinates'[1]", numberMatches(0.12859755313397414))
                .body("[0].'location'.'location'.'x'", numberMatches(0.9891421274313971))
                .body("[0].'location'.'location'.'y'", numberMatches(0.12859755313397414))
                .body("[0].'location'.'location'.'type'", containsString("Point"))
                .body("[0].'location'.'location'.'coordinates'.size()", equalTo(2))
                .body("[0].'location'.'location'.'coordinates'[0]", numberMatches(0.9891421274313971))
                .body("[0].'location'.'location'.'coordinates'[1]", numberMatches(0.12859755313397414))
                .body("[1].'name'", containsString("0L6jjQU_MQ"))
                .body("[1].'cpf'", containsString("7ScawTDCK"))
                .body("[1].'birthDate'", containsString("1962-04-15T05:00:00.000+0000"))
                .body("[1].'gender'", containsString("wAS"))
                .body("[1].'entryDate'", containsString("2062-03-14T04:00:00.000+0000"))
                .body("[1].'exitDate'", containsString("2062-03-14T04:00:00.000+0000"))
                .body("[1].'active'", equalTo(true))
                .body("[1].'location'.'name'", containsString("ZkL5q_stnrUel4tV"))
                .body("[1].'location'.'referenceId'", containsString("w8krSYl"))
                .body("[1].'location'.'locationCategory'", containsString("PATIENT"))
                .body("[1].'location'.'position'.'x'", numberMatches(0.6049598048908025))
                .body("[1].'location'.'position'.'y'", numberMatches(0.5888469589366369))
                .body("[1].'location'.'position'.'type'", containsString("Point"))
                .body("[1].'location'.'position'.'coordinates'.size()", equalTo(2))
                .body("[1].'location'.'position'.'coordinates'[0]", numberMatches(0.6049598048908025))
                .body("[1].'location'.'position'.'coordinates'[1]", numberMatches(0.5888469589366369))
                .body("[1].'location'.'location'.'x'", numberMatches(0.6049598048908025))
                .body("[1].'location'.'location'.'y'", numberMatches(0.5888469589366369))
                .body("[1].'location'.'location'.'type'", containsString("Point"))
                .body("[1].'location'.'location'.'coordinates'.size()", equalTo(2))
                .body("[1].'location'.'location'.'coordinates'[0]", numberMatches(0.6049598048908025))
                .body("[1].'location'.'location'.'coordinates'[1]", numberMatches(0.5888469589366369));
    }
}
