package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.mongo.dsl.MongoDsl.mongo;
import  org.evomaster.client.java.controller.api.dto.database.operations.MongoInsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.MongoInsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:43:27.165-04:00[America/New_York]
 * <br>
*  The generated test suite contains 408 tests
 * <br>
*  Covered targets: 2217
 * <br>
*  Used time: 1h 5m 2s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_gestaohospitaldefault_1234_Test_305_test_305_getOnEstoqueReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.br.com.codenation.hospital.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/gestaohospital-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (400) GET:/v1/hospitais/{hospital_id}/estoque
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_305_getOnEstoqueReturnsMismatchResponseWithSchema() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("HospitalDB", "hospital_collection")
                .d("{\"id\":\"_EM_1544_XYZ_\", \"name\":\"KGKraJLV8zahAxL\", \"address\":\"nwYF1\", \"beds\":{\"$numberInt\":\"-1999\"}, \"availableBeds\":{\"$numberInt\":\"739\"}, \"location\":{\"id\":\"_EM_1545_XYZ_\", \"name\":\"Aq5CZKwb5dErX\", \"referenceId\":\"Lgn79ppPY0wxj5\", \"locationCategory\":\"PATIENT\", \"position\":{\"coordinates\":[{\"$numberDouble\":\"0.31424958028068695\"}, {\"$numberDouble\":\"0.5909287780903469\"}], \"type\":\"Point\"}}, \"patients\":[{\"id\":\"0Q_vfIQhu4SJQ\", \"name\":\"Qc\", \"cpf\":\"t5lMW8\", \"birthDate\":{\"$date\":{\"$numberLong\":\"1594526400000\"}}, \"gender\":\"4rSJ5iiJpQ\", \"entryDate\":{\"$date\":{\"$numberLong\":\"3967675200000\"}}, \"exitDate\":{\"$date\":{\"$numberLong\":\"3251250000000\"}}, \"active\":false, \"location\":{\"id\":\"_O3hoXvDsxs_x\", \"name\":\"kt9bKInX\", \"referenceId\":\"coIBfB69MpuTkpw\", \"locationCategory\":\"HOSPITAL\", \"position\":{\"coordinates\":[{\"$numberDouble\":\"0.35703961256466366\"}, {\"$numberDouble\":\"0.7411789984629326\"}], \"type\":\"Point\"}}}, {\"id\":\"gj5mTnKw7WbSmau\", \"name\":\"H1\", \"cpf\":\"FXsxd5PbNESwwjgm\", \"birthDate\":{\"$date\":{\"$numberLong\":\"1879300800000\"}}, \"gender\":\"ABf\", \"entryDate\":{\"$date\":{\"$numberLong\":\"-1419274800000\"}}, \"exitDate\":{\"$date\":{\"$numberLong\":\"2406686400000\"}}, \"active\":true, \"location\":{\"id\":\"PT0\", \"name\":\"NpH4\", \"referenceId\":\"9x6kqO98\", \"locationCategory\":\"PATIENT\", \"position\":{\"coordinates\":[{\"$numberDouble\":\"0.5914006626919066\"}, {\"$numberDouble\":\"0.3466718912986331\"}], \"type\":\"Point\"}}}, {\"id\":\"47rZ_dEm\", \"name\":\"nNpk\", \"cpf\":\"mzNTBSVY4AB\", \"birthDate\":{\"$date\":{\"$numberLong\":\"-636836400000\"}}, \"gender\":\"8G\", \"entryDate\":{\"$date\":{\"$numberLong\":\"-1934391600000\"}}, \"exitDate\":{\"$date\":{\"$numberLong\":\"3137716800000\"}}, \"active\":true, \"location\":{\"id\":\"nyf9j3LOzzE1tOeR\", \"name\":\"\", \"referenceId\":\"jFtGL6\", \"locationCategory\":\"HOSPITAL\", \"position\":{\"coordinates\":[{\"$numberDouble\":\"0.8289158551204834\"}, {\"$numberDouble\":\"0.22153579604685525\"}], \"type\":\"Point\"}}}], \"products\":[{\"_id\":{\"timestamp\":{\"$numberInt\":\"145\"}, \"machineIdentifier\":{\"$numberInt\":\"255\"}, \"processIdentifier\":{\"$numberInt\":\"885\"}, \"counter\":{\"$numberInt\":\"930\"}}, \"name\":\"1R62iDJVKGdaI\", \"description\":\"0\", \"quantity\":{\"$numberInt\":\"148\"}, \"productType\":\"BLOOD\"}], \"_id\":{\"$oid\":\"1bbc37243f33d2fd595e62ff\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/v1/hospitais/{hospital_id}/estoque'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v1/hospitais/_EM_1340_XYZ_/estoque?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
}
