package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.mongo.dsl.MongoDsl.mongo;
import  org.evomaster.client.java.controller.api.dto.database.operations.MongoInsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.MongoInsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:43:27.165-04:00[America/New_York]
 * <br>
*  The generated test suite contains 408 tests
 * <br>
*  Covered targets: 2217
 * <br>
*  Used time: 1h 5m 2s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_gestaohospitaldefault_1234_Test_355_test_355_putOnPacientReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.br.com.codenation.hospital.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/gestaohospital-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (200) PUT:/v1/hospitais/{hospital_id}/pacientes/{patientId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_355_putOnPacientReturnsMismatchResponseWithSchema() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("HospitalDB", "patient_collection")
                .d("{\"id\":\"DCDiwo5eLu\", \"name\":\"Ezjx96c12\", \"cpf\":\"dRU_KXTx\", \"birthDate\":{\"$date\":{\"$numberLong\":\"902030400000\"}}, \"gender\":\"nLZfT16NYJ41\", \"entryDate\":{\"$date\":{\"$numberLong\":\"4031697600000\"}}, \"exitDate\":{\"$date\":{\"$numberLong\":\"-132350400000\"}}, \"active\":false, \"location\":{\"id\":\"xtD4W7zCBrSbY_m8\", \"name\":\"16qBBEJj\", \"referenceId\":\"TYXo\", \"locationCategory\":\"PATIENT\", \"position\":{\"coordinates\":[{\"$numberDouble\":\"0.43949912382946643\"}, {\"$numberDouble\":\"0.9340899984938708\"}], \"type\":\"Point\"}}, \"_id\":{\"$oid\":\"e8b19e80feeaaf1a383e409a\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/gender'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"active\": true, " + 
                    " \"birthDate\": \"1958-10-27T03:13:33-01:17\", " + 
                    " \"cpf\": \"twhR9EniKfRGP\", " + 
                    " \"exitDate\": \"1918-12-24T10:31:25-13:55\", " + 
                    " \"id\": \"_EM_8094_XYZ_\", " + 
                    " \"location\": { " + 
                    " \"id\": \"_EM_3001_XYZ_\", " + 
                    " \"location\": {}, " + 
                    " \"locationCategory\": \"HOSPITAL\", " + 
                    " \"name\": \"04j0KeMAvZJOI1J\", " + 
                    " \"position\": { " + 
                    " \"type\": \"_EM_3003_XYZ_\", " + 
                    " \"x\": 0.053108819932903284 " + 
                    " } " + 
                    " }, " + 
                    " \"name\": \"Rwznrf8Ib5k\" " + 
                    " } ")
                .put(baseUrlOfSut + "/v1/hospitais/_EM_8092_XYZ_/pacientes/e8b19e80feeaaf1a383e409a")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("Rwznrf8Ib5k"))
                .body("'cpf'", containsString("twhR9EniKfRGP"))
                .body("'birthDate'", containsString("1958-10-27T04:30:33.000+0000"))
                .body("'gender'", nullValue())
                .body("'entryDate'", containsString("2097-10-04T04:00:00.000+0000"))
                .body("'exitDate'", containsString("2097-10-04T04:00:00.000+0000"))
                .body("'active'", equalTo(false))
                .body("'location'.'name'", containsString("16qBBEJj"))
                .body("'location'.'referenceId'", containsString("TYXo"))
                .body("'location'.'locationCategory'", containsString("PATIENT"))
                .body("'location'.'position'.'x'", numberMatches(0.43949912382946643))
                .body("'location'.'position'.'y'", numberMatches(0.9340899984938708))
                .body("'location'.'position'.'type'", containsString("Point"))
                .body("'location'.'position'.'coordinates'.size()", equalTo(2))
                .body("'location'.'position'.'coordinates'[0]", numberMatches(0.43949912382946643))
                .body("'location'.'position'.'coordinates'[1]", numberMatches(0.9340899984938708))
                .body("'location'.'location'.'x'", numberMatches(0.43949912382946643))
                .body("'location'.'location'.'y'", numberMatches(0.9340899984938708))
                .body("'location'.'location'.'type'", containsString("Point"))
                .body("'location'.'location'.'coordinates'.size()", equalTo(2))
                .body("'location'.'location'.'coordinates'[0]", numberMatches(0.43949912382946643))
                .body("'location'.'location'.'coordinates'[1]", numberMatches(0.9340899984938708));
    }
}
