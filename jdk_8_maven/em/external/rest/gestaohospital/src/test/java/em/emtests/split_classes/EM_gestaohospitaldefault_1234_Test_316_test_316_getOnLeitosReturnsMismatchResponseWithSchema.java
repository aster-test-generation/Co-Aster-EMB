package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.mongo.dsl.MongoDsl.mongo;
import  org.evomaster.client.java.controller.api.dto.database.operations.MongoInsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.MongoInsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:43:27.165-04:00[America/New_York]
 * <br>
*  The generated test suite contains 408 tests
 * <br>
*  Covered targets: 2217
 * <br>
*  Used time: 1h 5m 2s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_gestaohospitaldefault_1234_Test_316_test_316_getOnLeitosReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.br.com.codenation.hospital.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/gestaohospital-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (400) GET:/v1/hospitais/{id}/leitos
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_316_getOnLeitosReturnsMismatchResponseWithSchema() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("HospitalDB", "hospital_collection")
                .d("{\"id\":\"_EM_2243_XYZ_\", \"name\":\"_EM_2244_XYZ_\", \"address\":\"_EM_2245_XYZ_\", \"beds\":{\"$numberInt\":\"318\"}, \"availableBeds\":{\"$numberInt\":\"4142\"}, \"location\":{\"id\":\"BE\", \"name\":\"F3prr9prcf\", \"referenceId\":\"_EM_2337_XYZ_\", \"locationCategory\":\"HOSPITAL\", \"position\":{\"coordinates\":[{\"$numberDouble\":\"0.8170308131452698\"}, {\"$numberDouble\":\"0.06606055120611787\"}], \"type\":\"Point\"}}, \"patients\":[{\"id\":\"J\", \"name\":\"3e92\", \"cpf\":\"F9Z9PG\", \"birthDate\":{\"$date\":{\"$numberLong\":\"2239246800000\"}}, \"gender\":\"vToAaIEyNsiXOC\", \"entryDate\":{\"$date\":{\"$numberLong\":\"1321246800000\"}}, \"exitDate\":{\"$date\":{\"$numberLong\":\"-2033578800000\"}}, \"active\":false, \"location\":{\"id\":\"_EM_2338_XYZ_\", \"name\":\"tjKFcaMJZi_9\", \"referenceId\":\"bu4b_4E9dt0H39T\", \"locationCategory\":\"PATIENT\", \"position\":{\"coordinates\":[{\"$numberDouble\":\"0.5397477870327111\"}, {\"$numberDouble\":\"1.3471113468898626\"}], \"type\":\"Point\"}}}, {\"id\":\"UDJUcxTryoHxL0P\", \"name\":\"3ABi5o76\", \"cpf\":\"eN_sw903l8HMxly\", \"birthDate\":{\"$date\":{\"$numberLong\":\"2372475600000\"}}, \"gender\":\"izgy8z\", \"entryDate\":{\"$date\":{\"$numberLong\":\"-1428609600000\"}}, \"exitDate\":{\"$date\":{\"$numberLong\":\"1367640000000\"}}, \"active\":true, \"location\":{\"id\":\"lRxoMpLhflT219\", \"name\":\"1SXBSBjG\", \"referenceId\":\"crn\", \"locationCategory\":\"PATIENT\", \"position\":{\"coordinates\":[{\"$numberDouble\":\"0.32181698384058144\"}, {\"$numberDouble\":\"0.8047974473537722\"}], \"type\":\"Point\"}}}, {\"id\":\"0AT\", \"name\":\"A2M9P\", \"cpf\":\"vJrx9VI9797ohDUV\", \"birthDate\":{\"$date\":{\"$numberLong\":\"3793838400000\"}}, \"gender\":\"aJ6eu3YEW\", \"entryDate\":{\"$date\":{\"$numberLong\":\"619848000000\"}}, \"exitDate\":{\"$date\":{\"$numberLong\":\"3614212800000\"}}, \"active\":false, \"location\":{\"id\":\"kZg2itDbNJ7PQN\", \"name\":\"MujbECEyKf4W\", \"referenceId\":\"_EM_2339_XYZ_\", \"locationCategory\":\"PATIENT\", \"position\":{\"coordinates\":[{\"$numberDouble\":\"0.6767156132349581\"}, {\"$numberDouble\":\"0.4704168645120459\"}], \"type\":\"Point\"}}}, {\"id\":\"_EM_2340_XYZ_\", \"name\":\"_EM_2341_XYZ_\", \"cpf\":\"5g_nN2Ig7KH83NDk\", \"birthDate\":{\"$date\":{\"$numberLong\":\"-614721600000\"}}, \"gender\":\"1_1\", \"entryDate\":{\"$date\":{\"$numberLong\":\"-1159210800000\"}}, \"exitDate\":{\"$date\":{\"$numberLong\":\"-2162574000000\"}}, \"active\":false, \"location\":{\"id\":\"GFR_UntKclrc\", \"name\":\"gxTklSh\", \"referenceId\":\"ksNwgzr\", \"locationCategory\":\"PATIENT\", \"position\":{\"coordinates\":[{\"$numberDouble\":\"0.13536894956593037\"}, {\"$numberDouble\":\"0.7807083830499484\"}], \"type\":\"Point\"}}}, {\"id\":\"7AVn2gEdSchPT\", \"name\":\"jqg3c4nZ\", \"cpf\":\"fkpVwlpEJr1h\", \"birthDate\":{\"$date\":{\"$numberLong\":\"197355600000\"}}, \"gender\":\"JyQHO\", \"entryDate\":{\"$date\":{\"$numberLong\":\"-1512846000000\"}}, \"exitDate\":{\"$date\":{\"$numberLong\":\"-2070817200000\"}}, \"active\":true, \"location\":{\"id\":\"ENLndtTrCpWKhWN\", \"name\":\"unlkA9xNhrDQ9Bo7\", \"referenceId\":\"q78\", \"locationCategory\":\"PATIENT\", \"position\":{\"coordinates\":[{\"$numberDouble\":\"0.8136691366402646\"}, {\"$numberDouble\":\"0.05471087801219321\"}], \"type\":\"Point\"}}}], \"products\":[{\"_id\":{\"timestamp\":{\"$numberInt\":\"369287457\"}, \"machineIdentifier\":{\"$numberInt\":\"326\"}, \"processIdentifier\":{\"$numberInt\":\"452\"}, \"counter\":{\"$numberInt\":\"548\"}}, \"name\":\"Rjq\", \"description\":\"DeAvsqw\", \"quantity\":{\"$numberInt\":\"516\"}, \"productType\":\"BLOOD\"}, {\"_id\":{\"timestamp\":{\"$numberInt\":\"1625149917\"}, \"machineIdentifier\":{\"$numberInt\":\"633\"}, \"processIdentifier\":{\"$numberInt\":\"702\"}, \"counter\":{\"$numberInt\":\"1199929647\"}}, \"name\":\"pDgz8YAFqQrAI\", \"description\":\"bRCQkc0a\", \"quantity\":{\"$numberInt\":\"955\"}, \"productType\":\"COMMON\"}], \"_id\":{\"$oid\":\"20db1f0f9f4814defdbeca80\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/v1/hospitais/{id}/leitos'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2209_XYZ_")
                .get(baseUrlOfSut + "/v1/hospitais/_EM_2246_XYZ_/leitos")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'message'", containsString("Hospital n√£o encontrado! ID:_EM_2246_XYZ_"))
                .body("'path'", containsString("/v1/hospitais/_EM_2246_XYZ_/leitos"));
    }
}
