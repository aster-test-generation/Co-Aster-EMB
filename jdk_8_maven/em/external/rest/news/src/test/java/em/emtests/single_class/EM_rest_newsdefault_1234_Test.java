/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-04T15:29:43.623-04:00[America/New_York]
 * <br>
*  The generated test suite contains 66 tests
 * <br>
*  Covered targets: 619
 * <br>
*  Used time: 1h 0m 46s
 * <br>
*  Needed budget for current results: 85%
 * <br>
*  
*/
public class EM_rest_newsdefault_1234_Test {

    
    private static final SutHandler controller = new em.external.org.tsdes.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/rest-news-sut.jar");
    private static String baseUrlOfSut;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("NEWS_ENTITY","news_entity"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (500) POST:/news
    * Found 1 potential fault of type-code 100
    */
    @Test @Timeout(60)
    public void test_0_postOnNewsCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/tsdes/spring/examples/news/api/NewsRestApi_123_createNews.
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "_EM_2606_XYZ_")
                .contentType("application/json;charset=UTF-8")
                .body(" { " + 
                    " \"authorId\": \"_EM_2604_XYZ_\", " + 
                    " \"country\": \"NF26_gAgZqKI\", " + 
                    " \"text\": \"LIdduD\" " + 
                    " } ")
                .post(baseUrlOfSut + "/news?EMextraParam123=_EM_2605_XYZ_")
                .then()
                .statusCode(500)// org/tsdes/spring/examples/news/api/NewsRestApi_123_createNews
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Could not commit JPA transaction; nested exception is javax.persistence.RollbackException: Error while committing the transaction"))
                .body("'path'", containsString("/news"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/news
    */
    @Test @Timeout(60)
    public void test_1_getOnNewsReturns1Element() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 69L)
                .d("ID", "790")
                .d("AUTHOR_ID", "\"usleEtqD1kGKu\"")
                .d("COUNTRY", "\"_EM_10288_XYZ_\"")
                .d("CREATION_TIME", "\"2094-12-01 02:12:00\"")
                .d("TEXT", "\"\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news?country=_EM_10288_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(1))
                .body("[0].'newsId'", containsString("790"))
                .body("[0].'authorId'", containsString("usleEtqD1kGKu"))
                .body("[0].'text'", containsString(""))
                .body("[0].'country'", containsString("_EM_10288_XYZ_"))
                .body("[0].'creationTime'", containsString("2094-12-01T02:12:00-05:00"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/countries
    */
    @Test @Timeout(60)
    public void test_2_getOnCountriesReturns247Elements() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 170L)
                .d("ID", "657")
                .d("AUTHOR_ID", "\"0IWv2n6NP1\"")
                .d("COUNTRY", "\"8OAQCD_o\"")
                .d("CREATION_TIME", "\"1945-11-26 15:59:13\"")
                .d("TEXT", "\"ytsw\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/countries?authorId=0IWv2n6NP1")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(247))
                .body("", hasItems("Afghanistan", "Åland Islands", "Albania", "Algeria", "American Samoa", "Andorra", "Angola", "Anguilla", "Antigua and Barbuda", "Argentina", "Armenia", "Aruba", "Australia", "Austria", "Azerbaijan", "The Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bermuda", "Bhutan", "Bolivia", "Bonaire", "Bosnia and Herzegovina", "Botswana", "Bouvet Island", "Brazil", "British Indian Ocean Territory", "United States Minor Outlying Islands", "British Virgin Islands", "Brunei", "Bulgaria", "Burkina Faso", "Burundi", "Cambodia", "Cameroon", "Canada", "Cape Verde", "Cayman Islands", "Central African Republic", "Chad", "Chile", "China", "Christmas Island", "Cocos (Keeling) Islands", "Colombia", "Comoros", "Republic of the Congo", "Democratic Republic of the Congo", "Cook Islands", "Costa Rica", "Croatia", "Cuba", "Curaçao", "Cyprus", "Czech Republic", "Denmark", "Djibouti", "Dominica", "Dominican Republic", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Ethiopia", "Falkland Islands", "Faroe Islands", "Fiji", "Finland", "France", "French Guiana", "French Polynesia", "French Southern and Antarctic Lands", "Gabon", "The Gambia", "Georgia", "Germany", "Ghana", "Gibraltar", "Greece", "Greenland", "Grenada", "Guadeloupe", "Guam", "Guatemala", "Guernsey", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Heard Island and McDonald Islands", "Honduras", "Hong Kong", "Hungary", "Iceland", "India", "Indonesia", "Ivory Coast", "Iran", "Iraq", "Republic of Ireland", "Isle of Man", "Israel", "Italy", "Jamaica", "Japan", "Jersey", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Kuwait", "Kyrgyzstan", "Laos", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libya", "Liechtenstein", "Lithuania", "Luxembourg", "Macau", "Republic of Macedonia", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands", "Martinique", "Mauritania", "Mauritius", "Mayotte", "Mexico", "Federated States of Micronesia", "Moldova", "Monaco", "Mongolia", "Montenegro", "Montserrat", "Morocco", "Mozambique", "Myanmar", "Namibia", "Nauru", "Nepal", "Netherlands", "New Caledonia", "New Zealand", "Nicaragua", "Niger", "Nigeria", "Niue", "Norfolk Island", "North Korea", "Northern Mariana Islands", "Norway", "Oman", "Pakistan", "Palau", "Palestine", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Pitcairn Islands", "Poland", "Portugal", "Puerto Rico", "Qatar", "Republic of Kosovo", "Réunion", "Romania", "Russia", "Rwanda", "Saint Barthélemy", "Saint Helena", "Saint Kitts and Nevis", "Saint Lucia", "Saint Martin", "Saint Pierre and Miquelon", "Saint Vincent and the Grenadines", "Samoa", "San Marino", "São Tomé and Príncipe", "Saudi Arabia", "Senegal", "Serbia", "Seychelles", "Sierra Leone", "Singapore", "Sint Maarten", "Slovakia", "Slovenia", "Solomon Islands", "Somalia", "South Africa", "South Georgia", "South Korea", "South Sudan", "Spain", "Sri Lanka", "Sudan", "Suriname", "Svalbard and Jan Mayen", "Swaziland", "Sweden", "Switzerland", "Syria", "Taiwan", "Tajikistan", "Tanzania", "Thailand", "East Timor", "Togo", "Tokelau", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", "Turks and Caicos Islands", "Tuvalu", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "United States", "Uruguay", "Uzbekistan", "Vanuatu", "Venezuela", "Vietnam", "Wallis and Futuna", "Western Sahara", "Yemen", "Zambia", "Zimbabwe"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/news
    */
    @Test @Timeout(60)
    public void test_3_getOnNewsReturnsEmptyList() throws Exception {
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news?EMextraParam123=_EM_5_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/news
    */
    @Test @Timeout(60)
    public void test_4_getOnNewsReturns1Element() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 78L)
                .d("ID", "755")
                .d("AUTHOR_ID", "\"_EM_13708_XYZ_\"")
                .d("COUNTRY", "\"FX9XJ\"")
                .d("CREATION_TIME", "\"2069-10-11 08:48:39\"")
                .d("TEXT", "\"zpU8kImBl\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news?authorId=_EM_13708_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(1))
                .body("[0].'newsId'", containsString("755"))
                .body("[0].'authorId'", containsString("_EM_13708_XYZ_"))
                .body("[0].'text'", containsString("zpU8kImBl"))
                .body("[0].'country'", containsString("FX9XJ"))
                .body("[0].'creationTime'", containsString("2069-10-11T08:48:39-04:00"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/news
    */
    @Test @Timeout(60)
    public void test_5_getOnNewsReturnsEmptyList() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 767L)
                .d("ID", "-6175604196891111424")
                .d("AUTHOR_ID", "\"Qg2mpbAkwDKpVT\"")
                .d("COUNTRY", "\"K01zZmqZBoDKV\"")
                .d("CREATION_TIME", "\"2067-06-30 10:33:30\"")
                .d("TEXT", "\"H5qLBwlI13c3\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news?" + 
                    "authorId=_EM_13416_XYZ_&" + 
                    "country=_EM_13416_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/news
    */
    @Test @Timeout(60)
    public void test_6_getOnNewsReturnsEmptyList() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 645L)
                .d("ID", "-1770579428212384768")
                .d("AUTHOR_ID", "\"OohB4L4ORyQJGn0\"")
                .d("COUNTRY", "\"GFt8rQyuXw0\"")
                .d("CREATION_TIME", "\"2048-09-05 13:16:27\"")
                .d("TEXT", "\"AzHAg\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news?country=_EM_11876_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/news
    */
    @Test @Timeout(60)
    public void test_7_getOnNewsReturnsEmptyList() throws Exception {
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "_EM_909_XYZ_")
                .get(baseUrlOfSut + "/news?" + 
                    "authorId=_EM_908_XYZ_&" + 
                    "country=SU2cuUuiA49m&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/news
    */
    @Test @Timeout(60)
    public void test_8_getOnNewsReturnsEmptyList() throws Exception {
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/news?" + 
                    "authorId=M2iGoDydjGN&" + 
                    "country=_EM_1830_XYZ_&" + 
                    "EMextraParam123=_EM_1831_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/news
    */
    @Test @Timeout(60)
    public void test_9_getOnNewsReturnsEmptyList() throws Exception {
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "_EM_2032_XYZ_")
                .get(baseUrlOfSut + "/news?authorId=_EM_2029_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/news
    */
    @Test @Timeout(60)
    public void test_10_getOnNewsReturnsEmptyList() throws Exception {
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news?" + 
                    "authorId=f&" + 
                    "country=_EM_3723_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/news
    */
    @Test @Timeout(60)
    public void test_11_getOnNewsReturnsEmptyList() throws Exception {
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news?" + 
                    "authorId=nH&" + 
                    "country=_EM_4204_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/news
    */
    @Test @Timeout(60)
    public void test_12_getOnNewsReturnsEmptyList() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 35L)
                .d("ID", "0")
                .d("AUTHOR_ID", "\"ELPZSqoj89iE02_x\"")
                .d("COUNTRY", "\"Q330yjVeET\"")
                .d("CREATION_TIME", "\"1910-04-22 02:35:38\"")
                .d("TEXT", "\"89rewRotfzAgzt\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news?authorId=_EM_4224_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/news
    */
    @Test @Timeout(60)
    public void test_13_getOnNewsReturnsEmptyList() throws Exception {
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news?" + 
                    "authorId=_EM_4656_XYZ_&" + 
                    "country=3EgIyupMR")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/news
    */
    @Test @Timeout(60)
    public void test_14_getOnNewsReturnsEmptyList() throws Exception {
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news?authorId=_EM_4840_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/news
    */
    @Test @Timeout(60)
    public void test_15_getOnNewsReturnsEmptyList() throws Exception {
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news?" + 
                    "authorId=_EM_4884_XYZ_&" + 
                    "country=_EM_4885_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/countries
    */
    @Test @Timeout(60)
    public void test_16_getOnCountriesReturns247Elements() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/countries?country=_EM_5267_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(247))
                .body("", hasItems("Afghanistan", "Åland Islands", "Albania", "Algeria", "American Samoa", "Andorra", "Angola", "Anguilla", "Antigua and Barbuda", "Argentina", "Armenia", "Aruba", "Australia", "Austria", "Azerbaijan", "The Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bermuda", "Bhutan", "Bolivia", "Bonaire", "Bosnia and Herzegovina", "Botswana", "Bouvet Island", "Brazil", "British Indian Ocean Territory", "United States Minor Outlying Islands", "British Virgin Islands", "Brunei", "Bulgaria", "Burkina Faso", "Burundi", "Cambodia", "Cameroon", "Canada", "Cape Verde", "Cayman Islands", "Central African Republic", "Chad", "Chile", "China", "Christmas Island", "Cocos (Keeling) Islands", "Colombia", "Comoros", "Republic of the Congo", "Democratic Republic of the Congo", "Cook Islands", "Costa Rica", "Croatia", "Cuba", "Curaçao", "Cyprus", "Czech Republic", "Denmark", "Djibouti", "Dominica", "Dominican Republic", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Ethiopia", "Falkland Islands", "Faroe Islands", "Fiji", "Finland", "France", "French Guiana", "French Polynesia", "French Southern and Antarctic Lands", "Gabon", "The Gambia", "Georgia", "Germany", "Ghana", "Gibraltar", "Greece", "Greenland", "Grenada", "Guadeloupe", "Guam", "Guatemala", "Guernsey", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Heard Island and McDonald Islands", "Honduras", "Hong Kong", "Hungary", "Iceland", "India", "Indonesia", "Ivory Coast", "Iran", "Iraq", "Republic of Ireland", "Isle of Man", "Israel", "Italy", "Jamaica", "Japan", "Jersey", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Kuwait", "Kyrgyzstan", "Laos", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libya", "Liechtenstein", "Lithuania", "Luxembourg", "Macau", "Republic of Macedonia", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands", "Martinique", "Mauritania", "Mauritius", "Mayotte", "Mexico", "Federated States of Micronesia", "Moldova", "Monaco", "Mongolia", "Montenegro", "Montserrat", "Morocco", "Mozambique", "Myanmar", "Namibia", "Nauru", "Nepal", "Netherlands", "New Caledonia", "New Zealand", "Nicaragua", "Niger", "Nigeria", "Niue", "Norfolk Island", "North Korea", "Northern Mariana Islands", "Norway", "Oman", "Pakistan", "Palau", "Palestine", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Pitcairn Islands", "Poland", "Portugal", "Puerto Rico", "Qatar", "Republic of Kosovo", "Réunion", "Romania", "Russia", "Rwanda", "Saint Barthélemy", "Saint Helena", "Saint Kitts and Nevis", "Saint Lucia", "Saint Martin", "Saint Pierre and Miquelon", "Saint Vincent and the Grenadines", "Samoa", "San Marino", "São Tomé and Príncipe", "Saudi Arabia", "Senegal", "Serbia", "Seychelles", "Sierra Leone", "Singapore", "Sint Maarten", "Slovakia", "Slovenia", "Solomon Islands", "Somalia", "South Africa", "South Georgia", "South Korea", "South Sudan", "Spain", "Sri Lanka", "Sudan", "Suriname", "Svalbard and Jan Mayen", "Swaziland", "Sweden", "Switzerland", "Syria", "Taiwan", "Tajikistan", "Tanzania", "Thailand", "East Timor", "Togo", "Tokelau", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", "Turks and Caicos Islands", "Tuvalu", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "United States", "Uruguay", "Uzbekistan", "Vanuatu", "Venezuela", "Vietnam", "Wallis and Futuna", "Western Sahara", "Yemen", "Zambia", "Zimbabwe"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/countries
    */
    @Test @Timeout(60)
    public void test_17_getOnCountriesReturns247Elements() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 175L)
                .d("ID", "989")
                .d("AUTHOR_ID", "\"N6K2e\"")
                .d("COUNTRY", "\"0t4Ci4JobHn\"")
                .d("CREATION_TIME", "\"1991-04-18 06:25:31\"")
                .d("TEXT", "\"Vf\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/countries")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(247))
                .body("", hasItems("Afghanistan", "Åland Islands", "Albania", "Algeria", "American Samoa", "Andorra", "Angola", "Anguilla", "Antigua and Barbuda", "Argentina", "Armenia", "Aruba", "Australia", "Austria", "Azerbaijan", "The Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bermuda", "Bhutan", "Bolivia", "Bonaire", "Bosnia and Herzegovina", "Botswana", "Bouvet Island", "Brazil", "British Indian Ocean Territory", "United States Minor Outlying Islands", "British Virgin Islands", "Brunei", "Bulgaria", "Burkina Faso", "Burundi", "Cambodia", "Cameroon", "Canada", "Cape Verde", "Cayman Islands", "Central African Republic", "Chad", "Chile", "China", "Christmas Island", "Cocos (Keeling) Islands", "Colombia", "Comoros", "Republic of the Congo", "Democratic Republic of the Congo", "Cook Islands", "Costa Rica", "Croatia", "Cuba", "Curaçao", "Cyprus", "Czech Republic", "Denmark", "Djibouti", "Dominica", "Dominican Republic", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Ethiopia", "Falkland Islands", "Faroe Islands", "Fiji", "Finland", "France", "French Guiana", "French Polynesia", "French Southern and Antarctic Lands", "Gabon", "The Gambia", "Georgia", "Germany", "Ghana", "Gibraltar", "Greece", "Greenland", "Grenada", "Guadeloupe", "Guam", "Guatemala", "Guernsey", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Heard Island and McDonald Islands", "Honduras", "Hong Kong", "Hungary", "Iceland", "India", "Indonesia", "Ivory Coast", "Iran", "Iraq", "Republic of Ireland", "Isle of Man", "Israel", "Italy", "Jamaica", "Japan", "Jersey", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Kuwait", "Kyrgyzstan", "Laos", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libya", "Liechtenstein", "Lithuania", "Luxembourg", "Macau", "Republic of Macedonia", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands", "Martinique", "Mauritania", "Mauritius", "Mayotte", "Mexico", "Federated States of Micronesia", "Moldova", "Monaco", "Mongolia", "Montenegro", "Montserrat", "Morocco", "Mozambique", "Myanmar", "Namibia", "Nauru", "Nepal", "Netherlands", "New Caledonia", "New Zealand", "Nicaragua", "Niger", "Nigeria", "Niue", "Norfolk Island", "North Korea", "Northern Mariana Islands", "Norway", "Oman", "Pakistan", "Palau", "Palestine", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Pitcairn Islands", "Poland", "Portugal", "Puerto Rico", "Qatar", "Republic of Kosovo", "Réunion", "Romania", "Russia", "Rwanda", "Saint Barthélemy", "Saint Helena", "Saint Kitts and Nevis", "Saint Lucia", "Saint Martin", "Saint Pierre and Miquelon", "Saint Vincent and the Grenadines", "Samoa", "San Marino", "São Tomé and Príncipe", "Saudi Arabia", "Senegal", "Serbia", "Seychelles", "Sierra Leone", "Singapore", "Sint Maarten", "Slovakia", "Slovenia", "Solomon Islands", "Somalia", "South Africa", "South Georgia", "South Korea", "South Sudan", "Spain", "Sri Lanka", "Sudan", "Suriname", "Svalbard and Jan Mayen", "Swaziland", "Sweden", "Switzerland", "Syria", "Taiwan", "Tajikistan", "Tanzania", "Thailand", "East Timor", "Togo", "Tokelau", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", "Turks and Caicos Islands", "Tuvalu", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "United States", "Uruguay", "Uzbekistan", "Vanuatu", "Venezuela", "Vietnam", "Wallis and Futuna", "Western Sahara", "Yemen", "Zambia", "Zimbabwe"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/news
    */
    @Test @Timeout(60)
    public void test_18_getOnNewsReturnsEmptyList() throws Exception {
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news?country=_EM_6518_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/news
    */
    @Test @Timeout(60)
    public void test_19_getOnNewsReturnsEmptyList() throws Exception {
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news?authorId=_EM_6929_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/news
    */
    @Test @Timeout(60)
    public void test_20_getOnNewsReturnsEmptyList() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 502L)
                .d("ID", "894")
                .d("AUTHOR_ID", "\"i_9Gq6rjkvhvLZ5\"")
                .d("COUNTRY", "\"Hp1Kp39GEYlh0N\"")
                .d("CREATION_TIME", "\"2018-01-20 08:39:56\"")
                .d("TEXT", "\"KaMgjzdw6\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news?" + 
                    "authorId=td2dblPg&" + 
                    "country=_EM_10122_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/news
    */
    @Test @Timeout(60)
    public void test_21_getOnNewsReturnsEmptyList() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 813L)
                .d("ID", "812")
                .d("AUTHOR_ID", "\"zcHSa0QY239n0fnG\"")
                .d("COUNTRY", "\"L2mr7jW6Ik3C_xl\"")
                .d("CREATION_TIME", "\"2079-08-18 15:15:34\"")
                .d("TEXT", "\"p7mMtDQ7sIR\"")
            .and().insertInto("NEWS_ENTITY", 173L)
                .d("ID", "377")
                .d("AUTHOR_ID", "\"rJJlkBbPPR8MsbIr\"")
                .d("COUNTRY", "\"1x1p0Fko\"")
                .d("CREATION_TIME", "\"1921-09-20 17:09:19\"")
                .d("TEXT", "\"EpHccSsfiFA5rXPN\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news?authorId=_EM_13825_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/news
    */
    @Test @Timeout(60)
    public void test_22_getOnNewsReturnsEmptyList() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 525L)
                .d("ID", "-1007")
                .d("AUTHOR_ID", "\"h\"")
                .d("COUNTRY", "\"Bz5GyBx6\"")
                .d("CREATION_TIME", "\"2017-04-06 14:58:50\"")
                .d("TEXT", "\"h6BtH5WSkaG_ej\"")
            .and().insertInto("NEWS_ENTITY", 89L)
                .d("ID", "-1548346320298437632")
                .d("AUTHOR_ID", "\"_EM_2528_XYZ_\"")
                .d("COUNTRY", "\"7nyyZBBC\"")
                .d("CREATION_TIME", "\"1978-11-04 16:25:09\"")
                .d("TEXT", "\"J8e1hpEobH6j2Qg\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news?" + 
                    "authorId=_EM_10274_XYZ_&" + 
                    "country=edbjLCnDGbRc18")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/news
    */
    @Test @Timeout(60)
    public void test_23_getOnNewsReturnsEmptyList() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 544L)
                .d("ID", "9174")
                .d("AUTHOR_ID", "\"fti7viSp9m75C4_\"")
                .d("COUNTRY", "\"hK60WZDVXD\"")
                .d("CREATION_TIME", "\"1998-02-21 21:04:21\"")
                .d("TEXT", "\"w\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news?" + 
                    "authorId=_EM_10646_XYZ_&" + 
                    "country=dT_VPpyi")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/news
    */
    @Test @Timeout(60)
    public void test_24_getOnNewsReturnsEmptyList() throws Exception {
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news?country=_EM_11728_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/news
    */
    @Test @Timeout(60)
    public void test_25_getOnNewsReturnsEmptyList() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 629L)
                .d("ID", "85")
                .d("AUTHOR_ID", "\"BuxIXB3PHmgNjV\"")
                .d("COUNTRY", "\"\"")
                .d("CREATION_TIME", "\"2039-01-21 04:39:19\"")
                .d("TEXT", "\"rXcTNv\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news?authorId=_EM_11753_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/news
    */
    @Test @Timeout(60)
    public void test_26_getOnNewsReturnsEmptyList() throws Exception {
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news?authorId=_EM_12138_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/news
    */
    @Test @Timeout(60)
    public void test_27_getOnNewsReturnsEmptyList() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 712L)
                .d("ID", "353")
                .d("AUTHOR_ID", "\"uiuoOiT0R1tCpSXS\"")
                .d("COUNTRY", "\"yUfRmbA7F9\"")
                .d("CREATION_TIME", "\"1918-10-28 02:53:34\"")
                .d("TEXT", "\"SxpFXOn\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news?country=_EM_13479_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/news
    */
    @Test @Timeout(60)
    public void test_28_getOnNewsReturnsEmptyList() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 801L)
                .d("ID", "108")
                .d("AUTHOR_ID", "\"PvpZ8GvKJ\"")
                .d("COUNTRY", "\"pohrZpFvr0aLje\"")
                .d("CREATION_TIME", "\"2080-10-20 10:01:00\"")
                .d("TEXT", "\"fNBlBTlxR\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news?" + 
                    "authorId=_EM_13798_XYZ_&" + 
                    "country=5JPkNkhrghXBU")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/news
    */
    @Test @Timeout(60)
    public void test_29_getOnNewsReturnsEmptyList() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 839L)
                .d("ID", "460")
                .d("AUTHOR_ID", "\"7UhiD1olnnwGJ\"")
                .d("COUNTRY", "\"h4jk8QycRPDLo4Y\"")
                .d("CREATION_TIME", "\"2010-06-16 23:17:43\"")
                .d("TEXT", "\"svEzKV5VXdaEIgY\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news?" + 
                    "authorId=QUoheSVVEIii&" + 
                    "country=_EM_14180_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (201) POST:/news
    */
    @Test @Timeout(60)
    public void test_30_postOnNewsWithQueryParamReturns201() throws Exception {
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .contentType("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .body(" { " + 
                    " \"authorId\": \"_EM_2093_XYZ_\", " + 
                    " \"country\": \"Tonga\", " + 
                    " \"text\": \"xsOs5Tk\" " + 
                    " } ")
                .post(baseUrlOfSut + "/news?EMextraParam123=42")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body(containsString("1"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/news
    */
    @Test @Timeout(60)
    public void test_31_postOnNewsWithQueryParamsEmptyCountryReturns201() throws Exception {
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json;charset=UTF-8")
                .body(" { " + 
                    " \"authorId\": \"_EM_2093_XYZ_\", " + 
                    " \"country\": \"Tonga\", " + 
                    " \"text\": \"xsOs5Tk\" " + 
                    " } ")
                .post(baseUrlOfSut + "/news?" + 
                    "country=&" + 
                    "authorId=b")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body(containsString("1"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/news
    */
    @Test @Timeout(60)
    public void test_32_postOnNewsReturns400() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 544L)
                .d("ID", "9174")
                .d("AUTHOR_ID", "\"fti7viSp9m75C4_\"")
                .d("COUNTRY", "\"hK60WZDVXD\"")
                .d("CREATION_TIME", "\"1998-02-21 21:04:21\"")
                .d("TEXT", "\"w\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json;charset=UTF-8")
                .body(" { " + 
                    " \"authorId\": \"_EM_10646_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/news")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/news
    */
    @Test @Timeout(60)
    public void test_33_postOnNewsWithQueryParamReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .body(" { " + 
                    " \"country\": \"\", " + 
                    " \"creationTime\": \"2038-08-08T09:35:29-02:34\", " + 
                    " \"id\": \"\", " + 
                    " \"newsId\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/news?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/news
    */
    @Test @Timeout(60)
    public void test_34_postOnNewsReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json;charset=UTF-8")
                .body(" { " + 
                    " \"authorId\": \"K\", " + 
                    " \"country\": \"uKUS536FIU2w\", " + 
                    " \"newsId\": \"_EM_7363_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/news")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/news
    */
    @Test @Timeout(60)
    public void test_35_postOnNewsReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json;charset=UTF-8")
                .body(" { " + 
                    " \"text\": \"8w80\" " + 
                    " } ")
                .post(baseUrlOfSut + "/news")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (500) PUT:/news/{id}
    * Found 1 potential fault of type-code 100
    */
    @Test @Timeout(60)
    public void test_36_putOnNewCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 324L)
                .d("ID", "912")
                .d("AUTHOR_ID", "\"_EM_7112_XYZ_\"")
                .d("COUNTRY", "\"Wallis and Futuna\"")
                .d("CREATION_TIME", "\"2037-08-07 19:35:04\"")
                .d("TEXT", "\"pEVEf\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/tsdes/spring/examples/news/api/NewsRestApi_204_update.
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"authorId\": \"qAR2OgCnRfX9p\", " + 
                    " \"country\": \"xT29XmiP\", " + 
                    " \"creationTime\": \"1907-01-01T16:20:15+04:16\", " + 
                    " \"id\": \"912\", " + 
                    " \"newsId\": \"912\", " + 
                    " \"text\": \"gqOtkZA_yhTto5M_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/news/912")
                .then()
                .statusCode(500)// org/tsdes/spring/examples/news/api/NewsRestApi_204_update
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Could not commit JPA transaction; nested exception is javax.persistence.RollbackException: Error while committing the transaction"))
                .body("'path'", containsString("/news/912"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/news/{id}
    */
    @Test @Timeout(60)
    public void test_37_getOnNewReturnsObject() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 813L)
                .d("ID", "812")
                .d("AUTHOR_ID", "\"zcHSa0QY239n0fnG\"")
                .d("COUNTRY", "\"L2mr7jW6Ik3C_xl\"")
                .d("CREATION_TIME", "\"2079-08-18 15:15:34\"")
                .d("TEXT", "\"p7mMtDQ7sIR\"")
            .and().insertInto("NEWS_ENTITY", 173L)
                .d("ID", "377")
                .d("AUTHOR_ID", "\"rJJlkBbPPR8MsbIr\"")
                .d("COUNTRY", "\"1x1p0Fko\"")
                .d("CREATION_TIME", "\"1921-09-20 17:09:19\"")
                .d("TEXT", "\"EpHccSsfiFA5rXPN\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news/377")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("'newsId'", containsString("377"))
                .body("'authorId'", containsString("rJJlkBbPPR8MsbIr"))
                .body("'text'", containsString("EpHccSsfiFA5rXPN"))
                .body("'country'", containsString("1x1p0Fko"))
                .body("'creationTime'", containsString("1921-09-20T17:09:19-04:00"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/news/{id}
    */
    @Test @Timeout(60)
    public void test_38_getOnNewWithQueryParamsReturnsObject() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 525L)
                .d("ID", "-1007")
                .d("AUTHOR_ID", "\"h\"")
                .d("COUNTRY", "\"Bz5GyBx6\"")
                .d("CREATION_TIME", "\"2017-04-06 14:58:50\"")
                .d("TEXT", "\"h6BtH5WSkaG_ej\"")
            .and().insertInto("NEWS_ENTITY", 89L)
                .d("ID", "-1548346320298437632")
                .d("AUTHOR_ID", "\"_EM_2528_XYZ_\"")
                .d("COUNTRY", "\"7nyyZBBC\"")
                .d("CREATION_TIME", "\"1978-11-04 16:25:09\"")
                .d("TEXT", "\"J8e1hpEobH6j2Qg\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news/-1548346320298437632?" + 
                    "country=oGqy1ud&" + 
                    "authorId=Tq7FgJCRSCjFSlLp")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("'newsId'", containsString("-1548346320298437632"))
                .body("'authorId'", containsString("_EM_2528_XYZ_"))
                .body("'text'", containsString("J8e1hpEobH6j2Qg"))
                .body("'country'", containsString("7nyyZBBC"))
                .body("'creationTime'", containsString("1978-11-04T16:25:09-05:00"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/v2/api-docs
    */
    @Test @Timeout(60)
    public void test_39_getOnApi_docsReturnsObject() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs")
                .then()
                .statusCode(200);
    }
    
    
    /**
    * Calls:
    * (204) DELETE:/news/{id}
    */
    @Test @Timeout(60)
    public void test_40_deleteOnNewWithQueryParamReturns204() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 268L)
                .d("ID", "746")
                .d("AUTHOR_ID", "\"bJU61lnFXRhq\"")
                .d("COUNTRY", "\"Ku66diLDsE\"")
                .d("CREATION_TIME", "\"1996-12-28 07:03:49\"")
                .d("TEXT", "\"LFH8WIg\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/news/746?authorId=bJU61lnFXRhq")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (204) DELETE:/news/{id}
    */
    @Test @Timeout(60)
    public void test_41_deleteOnNewReturns204() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 100L)
                .d("ID", "870")
                .d("AUTHOR_ID", "\"2B\"")
                .d("COUNTRY", "\"HDrdI3dYUP\"")
                .d("CREATION_TIME", "\"1983-12-18 21:59:28\"")
                .d("TEXT", "\"fauEnry_zMe156Qy\"")
            .and().insertInto("NEWS_ENTITY", 82L)
                .d("ID", "867")
                .d("AUTHOR_ID", "\"BONkoRhutiOP\"")
                .d("COUNTRY", "\"_EM_2394_XYZ_\"")
                .d("CREATION_TIME", "\"1936-06-12 17:44:36\"")
                .d("TEXT", "\"O5nU\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2396_XYZ_")
                .delete(baseUrlOfSut + "/news/867")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (204) DELETE:/news/{id}
    */
    @Test @Timeout(60)
    public void test_42_deleteOnNewWithQueryParamsReturns204() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 100L)
                .d("ID", "806")
                .d("AUTHOR_ID", "\"_EM_4970_XYZ_\"")
                .d("COUNTRY", "\"_EM_4971_XYZ_\"")
                .d("CREATION_TIME", "\"2000-10-16 23:51:29\"")
                .d("TEXT", "\"fauEnry^zMe156Qy\"")
            .and().insertInto("NEWS_ENTITY", 82L)
                .d("ID", "888")
                .d("AUTHOR_ID", "\"BONkoRhutiOP\"")
                .d("COUNTRY", "\"_EM_3965_XYZ_\"")
                .d("CREATION_TIME", "\"1936-06-12 17:44:36\"")
                .d("TEXT", "\"O5nU\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/news/888?" + 
                    "country=lTQO7DnW2cJogP2&" + 
                    "authorId=jy_zPNi0G6y")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) PUT:/news/{id}
    */
    @Test @Timeout(60)
    public void test_43_putOnNewReturns400() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 100L)
                .d("ID", "0")
                .d("AUTHOR_ID", "\"2B\"")
                .d("COUNTRY", "\"_EM_3935_XYZ_\"")
                .d("CREATION_TIME", "\"2100-08-18 13:25:24\"")
                .d("TEXT", "\"fcuEnry_zMe156Qy\"")
            .and().insertInto("NEWS_ENTITY", 82L)
                .d("ID", "867")
                .d("AUTHOR_ID", "\"BONkoRhutiOP\"")
                .d("COUNTRY", "\"_EM_2394_XYZ_\"")
                .d("CREATION_TIME", "\"1936-06-16 17:29:36\"")
                .d("TEXT", "\"K5nU\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"authorId\": \"4sVzKZEqKlsMny\", " + 
                    " \"country\": \"OUkEC\", " + 
                    " \"id\": \"0\", " + 
                    " \"text\": \"uhwJ\" " + 
                    " } ")
                .put(baseUrlOfSut + "/news/0")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) PUT:/news/{id}
    */
    @Test @Timeout(60)
    public void test_44_putOnNewReturns400() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 35L)
                .d("ID", "0")
                .d("AUTHOR_ID", "\"ELPZSqoj89iE02_x\"")
                .d("COUNTRY", "\"_EM_4392_XYZ_\"")
                .d("CREATION_TIME", "\"1910-01-18 02:35:38\"")
                .d("TEXT", "\"89rewRotfzAgzt\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"country\": \"L9uUc9\", " + 
                    " \"id\": \"0\", " + 
                    " \"text\": \"mNoOGEvNmFW\" " + 
                    " } ")
                .put(baseUrlOfSut + "/news/0")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/news/{id}
    */
    @Test @Timeout(60)
    public void test_45_deleteOnNewReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/news/_EM_12298_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/news/{id}
    */
    @Test @Timeout(60)
    public void test_46_deleteOnNewWithQueryParamReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/news/_EM_981_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/news/{id}
    */
    @Test @Timeout(60)
    public void test_47_getOnNewWithQueryParamsReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news/_EM_10832_XYZ_?" + 
                    "country=3dPws5II75ywW&" + 
                    "authorId=_EM_10833_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/news/{id}
    */
    @Test @Timeout(60)
    public void test_48_getOnNewReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news/532?EMextraParam123=_EM_596_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/news/{id}
    */
    @Test @Timeout(60)
    public void test_49_getOnNewReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news/_EM_130_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) PUT:/news/{id}
    */
    @Test @Timeout(60)
    public void test_50_putOnNewReturns404() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 712L)
                .d("ID", "353")
                .d("AUTHOR_ID", "\"uiuoOiT0R1tCpSXS\"")
                .d("COUNTRY", "\"yUfRmbA7F9\"")
                .d("CREATION_TIME", "\"1918-10-28 02:53:34\"")
                .d("TEXT", "\"SxpFXOn\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"authorId\": \"_EM_13479_XYZ_\", " + 
                    " \"country\": \"_EM_13479_XYZ_\", " + 
                    " \"creationTime\": \"1976-01-16T02:10:24Z\", " + 
                    " \"newsId\": \"_EM_13479_XYZ_\", " + 
                    " \"text\": \"wxwilZsXzDF\" " + 
                    " } ")
                .put(baseUrlOfSut + "/news/_EM_13479_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) PUT:/news/{id}
    */
    @Test @Timeout(60)
    public void test_51_putOnNewWithQueryParamReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": \"7744786668533561397\" " + 
                    " } ")
                .put(baseUrlOfSut + "/news/7744786668533561397?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) PUT:/news/{id}
    */
    @Test @Timeout(60)
    public void test_52_putOnNewReturns404() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 368L)
                .d("ID", "722")
                .d("AUTHOR_ID", "\"uYv\"")
                .d("COUNTRY", "\"Vd\"")
                .d("CREATION_TIME", "\"2076-07-12 02:23:51\"")
                .d("TEXT", "\"zlEvDhUvlYhxxG\"")
            .and().insertInto("NEWS_ENTITY", 324L)
                .d("ID", "912")
                .d("AUTHOR_ID", "\"_EM_8157_XYZ_\"")
                .d("COUNTRY", "\"Wallis and Futuna\"")
                .d("CREATION_TIME", "\"2037-08-07 19:35:04\"")
                .d("TEXT", "\"pEVEf\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"authorId\": \"qAR2OgCnRfX9p\", " + 
                    " \"country\": \"xT29XmiP\", " + 
                    " \"creationTime\": \"1907-01-01T16:20:15+04:16\", " + 
                    " \"id\": \"_EM_8156_XYZ_\", " + 
                    " \"newsId\": \"_EM_8156_XYZ_\", " + 
                    " \"text\": \"gqOtkZA_yhTto5M_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/news/_EM_8156_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/news/{id}
    */
    @Test @Timeout(60)
    public void test_53_deleteOnNewReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/news/135?EMextraParam123=_EM_285_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (405) PUT:/news/{id}
    */
    @Test @Timeout(60)
    public void test_54_putOnNewReturns405() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 324L)
                .d("ID", "912")
                .d("AUTHOR_ID", "\"pChL_1yAdi\"")
                .d("COUNTRY", "\"Wallis and Futuna\"")
                .d("CREATION_TIME", "\"2037-08-07 19:51:00\"")
                .d("TEXT", "\"_EM_9328_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"authorId\": \"qAR2OgCnRfX9p\", " + 
                    " \"country\": \"xT29XmiP\", " + 
                    " \"creationTime\": \"1907-01-01T16:20:15+04:16\", " + 
                    " \"id\": \";12\", " + 
                    " \"newsId\": \";12\", " + 
                    " \"text\": \"gqOtkZA_yhTto5M_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/news/;12")
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("'status'", numberMatches(405.0))
                .body("'error'", containsString("Method Not Allowed"))
                .body("'message'", containsString("Request method 'PUT' not supported"))
                .body("'path'", containsString("/news/;12"));
    }
    
    
    /**
    * Calls:
    * (409) PUT:/news/{id}
    */
    @Test @Timeout(60)
    public void test_55_putOnNewReturns409() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 35L)
                .d("ID", "748")
                .d("AUTHOR_ID", "\"_EM_3752_XYZ_\"")
                .d("COUNTRY", "\"Q330yjVeET\"")
                .d("CREATION_TIME", "\"1910-06-22 02:35:38\"")
                .d("TEXT", "\"89rewRotfzAgzt\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"country\": \"L9uUc9\", " + 
                    " \"id\": \"414\", " + 
                    " \"text\": \"mNoOGEvNmFW\" " + 
                    " } ")
                .put(baseUrlOfSut + "/news/_EM_3751_XYZ_")
                .then()
                .statusCode(409)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (409) PUT:/news/{id}
    */
    @Test @Timeout(60)
    public void test_56_putOnNewReturns409() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 98L)
                .d("ID", "0")
                .d("AUTHOR_ID", "\"gLuMI9xICex\"")
                .d("COUNTRY", "\"pV\"")
                .d("CREATION_TIME", "\"1949-05-26 03:53:02\"")
                .d("TEXT", "\"6zKAC\"")
            .and().insertInto("NEWS_ENTITY", 82L)
                .d("ID", "867")
                .d("AUTHOR_ID", "\"_EM_4383_XYZ_\"")
                .d("COUNTRY", "\"_EM_2394_XYZ_\"")
                .d("CREATION_TIME", "\"1936-06-12 11:44:29\"")
                .d("TEXT", "\"O5nU\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"authorId\": \"IxlwpA704SkA\", " + 
                    " \"id\": \"545\", " + 
                    " \"text\": \"RnHQ9lf\" " + 
                    " } ")
                .put(baseUrlOfSut + "/news/_EM_4381_XYZ_")
                .then()
                .statusCode(409)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (409) PUT:/news/{id}
    */
    @Test @Timeout(60)
    public void test_57_putOnNewReturns409() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 100L)
                .d("ID", "870")
                .d("AUTHOR_ID", "\"_EM_5228_XYZ_\"")
                .d("COUNTRY", "\"42\"")
                .d("CREATION_TIME", "\"1983-04-18 19:57:24\"")
                .d("TEXT", "\"fauEnry_zMe156Qy\"")
            .and().insertInto("NEWS_ENTITY", 82L)
                .d("ID", "867")
                .d("AUTHOR_ID", "\"BONkoRhutiOP\"")
                .d("COUNTRY", "\"_EM_2394_XYZ_\"")
                .d("CREATION_TIME", "\"1936-06-16 17:29:36\"")
                .d("TEXT", "\"O5nU\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"authorId\": \"4sVzKZEqLlsMny\", " + 
                    " \"country\": \"PUkEC\", " + 
                    " \"id\": \"16777216\", " + 
                    " \"text\": \"uhwJ\" " + 
                    " } ")
                .put(baseUrlOfSut + "/news/_EM_5227_XYZ_")
                .then()
                .statusCode(409)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (409) PUT:/news/{id}
    */
    @Test @Timeout(60)
    public void test_58_putOnNewReturns409() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 98L)
                .d("ID", "782")
                .d("AUTHOR_ID", "\"gLuMI9xICex\"")
                .d("COUNTRY", "\"_EM_5381_XYZ_\"")
                .d("CREATION_TIME", "\"1949-05-26 03:53:02\"")
                .d("TEXT", "\"6zK=C\"")
            .and().insertInto("NEWS_ENTITY", 82L)
                .d("ID", "867")
                .d("AUTHOR_ID", "\"BONkoRhutiOP\"")
                .d("COUNTRY", "\"_EM_2394_XYZ_\"")
                .d("CREATION_TIME", "\"2000-06-16 17:29:29\"")
                .d("TEXT", "\"O5nU\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"authorId\": \"s30_GoBo\", " + 
                    " \"id\": \"675\" " + 
                    " } ")
                .put(baseUrlOfSut + "/news/_EM_5380_XYZ_")
                .then()
                .statusCode(409)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (409) PUT:/news/{id}
    */
    @Test @Timeout(60)
    public void test_59_putOnNewReturns409() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 98L)
                .d("ID", "0")
                .d("AUTHOR_ID", "\"gLuMI9xICex\"")
                .d("COUNTRY", "\"pV9K\"")
                .d("CREATION_TIME", "\"1949-04-24 03:53:29\"")
                .d("TEXT", "\"6zKAC\"")
            .and().insertInto("NEWS_ENTITY", 82L)
                .d("ID", "867")
                .d("AUTHOR_ID", "\"BONkoRhutiOP\"")
                .d("COUNTRY", "\"_EM_2394_XYZ_\"")
                .d("CREATION_TIME", "\"2000-12-12 19:59:33\"")
                .d("TEXT", "\"O5nU\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"authorId\": \"IxlwpA704SkC\", " + 
                    " \"country\": \"yxCoL\", " + 
                    " \"creationTime\": \"1993-02-22T13:49:28.377+17:42\", " + 
                    " \"id\": \"0\", " + 
                    " \"text\": \"RnHR9lf\" " + 
                    " } ")
                .put(baseUrlOfSut + "/news/_EM_5776_XYZ_")
                .then()
                .statusCode(409)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (409) PUT:/news/{id}
    */
    @Test @Timeout(60)
    public void test_60_putOnNewReturns409() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"authorId\": \"Vu18dMnE9Fhp_\", " + 
                    " \"country\": \"IT2mpvXd\", " + 
                    " \"creationTime\": \"1962-10-15T14:54:29Z\", " + 
                    " \"id\": \"467\", " + 
                    " \"text\": \"QyNLezc2I\" " + 
                    " } ")
                .put(baseUrlOfSut + "/news/_EM_10958_XYZ_")
                .then()
                .statusCode(409)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (500) PUT:/news/{id}/text
    * Found 1 potential fault of type-code 100
    */
    @Test @Timeout(60)
    public void test_61_putOnTextCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 1L)
                .d("ID", "889")
                .d("AUTHOR_ID", "\"o7TCozi01JKrC3h9\"")
                .d("COUNTRY", "\"8Y2QQGoG5On3e4F\"")
                .d("CREATION_TIME", "\"2048-05-19 13:06:02\"")
                .d("TEXT", "\"2\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/tsdes/spring/examples/news/api/NewsRestApi_233_updateText.
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .contentType("text/plain")
                .body("416")
                .put(baseUrlOfSut + "/news/889/text")
                .then()
                .statusCode(500)// org/tsdes/spring/examples/news/api/NewsRestApi_233_updateText
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Could not commit JPA transaction; nested exception is javax.persistence.RollbackException: Error while committing the transaction"))
                .body("'path'", containsString("/news/889/text"));
    }
    
    
    /**
    * Calls:
    * (204) PUT:/news/{id}/text
    */
    @Test @Timeout(60)
    public void test_62_putOnNewTextReturns204() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 689L)
                .d("ID", "451")
                .d("AUTHOR_ID", "\"3y8Nfv\"")
                .d("COUNTRY", "\"mUKF\"")
                .d("CREATION_TIME", "\"2069-05-14 22:01:33\"")
                .d("TEXT", "\"XVBEF1tcTMf92vBf\"")
            .and().insertInto("NEWS_ENTITY", 234L)
                .d("ID", "698")
                .d("AUTHOR_ID", "\"cZHvyb4n\"")
                .d("COUNTRY", "\"United States\"")
                .d("CREATION_TIME", "\"2099-06-20 04:36:55\"")
                .d("TEXT", "\"H\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("text/plain")
                .body("-1108659753")
                .put(baseUrlOfSut + "/news/698/text")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (204) PUT:/news/{id}/text
    */
    @Test @Timeout(60)
    public void test_63_putOnNewTextWithQueryParamReturns204() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 50L)
                .d("ID", "-31937")
                .d("AUTHOR_ID", "\"G28tMxO13\"")
                .d("COUNTRY", "\"Tunisia\"")
                .d("CREATION_TIME", "\"2026-08-01 22:11:46\"")
                .d("TEXT", "\"_EM_1913_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1335_XYZ_")
                .contentType("text/plain")
                .body("AO3B")
                .put(baseUrlOfSut + "/news/-31937/text?EMextraParam123=42")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) PUT:/news/{id}/text
    */
    @Test @Timeout(60)
    public void test_64_putOnTextReturns400() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 712L)
                .d("ID", "353")
                .d("AUTHOR_ID", "\"uiuoOiT0R1tCpSXS\"")
                .d("COUNTRY", "\"yUfRmbA7F9\"")
                .d("CREATION_TIME", "\"1918-10-28 02:53:34\"")
                .d("TEXT", "\"SxpFXOn\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .contentType("text/plain")
                .body()
                .put(baseUrlOfSut + "/news/353/text?" + 
                    "country=_EM_13479_XYZ_&" + 
                    "authorId=_EM_13479_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'message'", containsString("Required request body is missing: public org.springframework.http.ResponseEntity<java.lang.Object> org.tsdes.spring.examples.news.api.NewsRestApi.updateText(java.lang.Long,java.lang.String)"))
                .body("'path'", containsString("/news/353/text"));
    }
    
    
    /**
    * Calls:
    * (404) PUT:/news/{id}/text
    */
    @Test @Timeout(60)
    public void test_65_putOnTextReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("text/plain")
                .body("K96")
                .put(baseUrlOfSut + "/news/-8368038219887878031/text?" + 
                    "country=XRXVmh38SSw&" + 
                    "authorId=_EM_14264_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
