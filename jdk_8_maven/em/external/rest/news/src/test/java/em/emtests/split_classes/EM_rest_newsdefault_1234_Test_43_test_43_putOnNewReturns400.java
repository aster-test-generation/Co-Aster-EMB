package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-04T15:29:43.623-04:00[America/New_York]
 * <br>
*  The generated test suite contains 66 tests
 * <br>
*  Covered targets: 619
 * <br>
*  Used time: 1h 0m 46s
 * <br>
*  Needed budget for current results: 85%
 * <br>
*  
*/

public class EM_rest_newsdefault_1234_Test_43_test_43_putOnNewReturns400 {
    

    
    private static final SutHandler controller = new em.external.org.tsdes.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/rest-news-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("NEWS_ENTITY","news_entity"));
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (400) PUT:/news/{id}
    */
    @Test @Timeout(60)
    public void test_43_putOnNewReturns400() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 100L)
                .d("ID", "0")
                .d("AUTHOR_ID", "\"2B\"")
                .d("COUNTRY", "\"_EM_3935_XYZ_\"")
                .d("CREATION_TIME", "\"2100-08-18 13:25:24\"")
                .d("TEXT", "\"fcuEnry_zMe156Qy\"")
            .and().insertInto("NEWS_ENTITY", 82L)
                .d("ID", "867")
                .d("AUTHOR_ID", "\"BONkoRhutiOP\"")
                .d("COUNTRY", "\"_EM_2394_XYZ_\"")
                .d("CREATION_TIME", "\"1936-06-16 17:29:36\"")
                .d("TEXT", "\"K5nU\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"authorId\": \"4sVzKZEqKlsMny\", " + 
                    " \"country\": \"OUkEC\", " + 
                    " \"id\": \"0\", " + 
                    " \"text\": \"uhwJ\" " + 
                    " } ")
                .put(baseUrlOfSut + "/news/0")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
}
