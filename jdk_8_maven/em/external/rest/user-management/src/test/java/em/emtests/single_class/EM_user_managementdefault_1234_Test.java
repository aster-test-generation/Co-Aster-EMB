package em.emtests.single_class;

/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-17T15:42:15.758-04:00[America/New_York]
 * <br>
*  The generated test suite contains 108 tests
 * <br>
*  Covered targets: 918
 * <br>
*  Used time: 1h 3m 17s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/
public class EM_user_managementdefault_1234_Test {

    
    private static final SutHandler controller = new em.external.com.giassi.microservice.demo2.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/user-management-sut.jar");
    private static String baseUrlOfSut;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("addresses","contacts","permissions","permissions_roles","roles","users","users_roles"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (500) GET:/users
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_0_getOnUsersShowsFaults_100_101() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("users", 2179L)
                .d("username", "\"4VcSiOmjWGu\"")
                .d("password", "\"XKRVZbu\"")
                .d("enabled", "-48")
                .d("creation_dt", "\"1996-09-16 21:05:56\"")
                .d("secured", "-62")
            .and().insertInto("roles", 2178L)
                .d("role", "\"bm\"")
            .and().insertInto("users_roles", 2177L)
                .r("user_id", 2179L)
                .d("role_id", "1")
            .and().insertInto("users", 2181L)
                .d("username", "\"oXulqyD\"")
                .d("password", "\"WeoGJHGlwnQFK\"")
                .d("enabled", "-52")
                .d("creation_dt", "\"1999-09-25 18:29:07\"")
                .d("secured", "-67")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. com/giassi/microservice/demo2/rest/users/dtos/UserDTO_28_<init>.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/users'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/users")
                .then()
                .statusCode(500)// com/giassi/microservice/demo2/rest/users/dtos/UserDTO_28_<init>
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/users"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/users
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_1_getOnUsersWithQueryParamShowsFaults_100_101() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("users", 212L)
                .d("username", "\"OqqfM\"")
                .d("password", "\"d3UXbHgBsLj0MU\"")
                .d("name", "\"O0wrXgEbEIpr\"")
                .d("surname", "NULL")
                .d("gender", "-78")
                .d("birth_date", "\"1981-09-04\"")
                .d("enabled", "-76")
                .d("creation_dt", "\"2035-04-03 01:25:29\"")
                .d("updated_dt", "NULL")
                .d("login_dt", "NULL")
                .d("note", "\"xbCAzAJtwvlEBEy\"")
                .d("secured", "115")
            .and().insertInto("roles", 456L)
                .d("role", "\"v6G0\"")
            .and().insertInto("users", 458L)
                .d("username", "\"SCkWsHX\"")
                .d("password", "\"_dGBJf7Rpv5X\"")
                .d("enabled", "-98")
                .d("creation_dt", "\"1980-12-18 10:18:12\"")
                .d("secured", "61")
            .and().insertInto("contacts", 457L)
                .r("user_id", 458L)
                .d("email", "\"DInd\"")
                .d("phone", "\"tnPgprRdS\"")
                .d("skype", "\"l3JUsfnV8hD6D\"")
                .d("facebook", "\"\"")
                .d("linkedin", "\"Z_ibFVJjpqTtc\"")
                .d("website", "NULL")
                .d("note", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. com/giassi/microservice/demo2/rest/users/services/UserService_338_getUserList.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/users'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/users?EMextraParam123=42")
                .then()
                .statusCode(500)// com/giassi/microservice/demo2/rest/users/services/UserService_338_getUserList
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("-78"))
                .body("'path'", containsString("/users"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/login
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_2_postOnLoginShowsFaults_100_101() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5B8I4aG\"")
                .d("enabled", "-4")
                .d("note", "\"qfR8CkDE\"")
            .and().insertInto("users", 597L)
                .d("username", "\"4Yc\"")
                .d("password", "\"_EM_5364_XYZ_\"")
                .d("name", "\"fnbSDEHEJqpegF\"")
                .d("surname", "\"S\"")
                .d("gender", "120")
                .d("birth_date", "\"2019-06-19\"")
                .d("enabled", "-90")
                .d("creation_dt", "\"2003-06-22 17:36:38\"")
                .d("updated_dt", "\"1997-06-16 03:34:08\"")
                .d("login_dt", "\"1999-05-07 07:59:36\"")
                .d("note", "\"_EM_5361_XYZ_w\"")
                .d("secured", "121")
            .and().insertInto("roles", 653L)
                .d("role", "\"\"126\"\"")
            .and().insertInto("users", 722L)
                .d("username", "\"aGo21m\"")
                .d("password", "\"RDUb_UU\"")
                .d("enabled", "11")
                .d("creation_dt", "\"2007-04-02 16:57:51\"")
                .d("secured", "-92")
            .and().insertInto("addresses", 721L)
                .d("user_id", "1")
                .d("address", "\"\"")
                .d("address2", "\"iU74n\"")
                .d("city", "\"f7Basz3\"")
                .d("country", "\"bMlg3UH:\"")
                .d("zip_code", "\"CVbtdH\"")
            .and().insertInto("users", 725L)
                .d("username", "\"2CzWtdw3\"")
                .d("password", "\"SEKW_IZN\"")
                .d("enabled", "-96")
                .d("creation_dt", "\"2009-04-12 23:19:22\"")
                .d("secured", "61")
            .and().insertInto("roles", 724L)
                .d("role", "\"MFZ3Yq\"")
            .and().insertInto("users_roles", 723L)
                .r("user_id", 725L)
                .d("role_id", "1")
            .and().insertInto("users", 727L)
                .d("username", "\"TlOur9k8km\"")
                .d("password", "\"_EM_9581_XYZ_\"")
                .d("enabled", "127")
                .d("creation_dt", "\"2008-06-01 09:29:30\"")
                .d("secured", "-80")
            .and().insertInto("contacts", 726L)
                .r("user_id", 725L)
                .d("email", "\"_EM_5369_XYZ_\"")
                .d("phone", "\"_EM_5373_XYZ_\"")
                .d("skype", "\"4DJUFOF7gJH1prIH\"")
                .d("facebook", "\"tKmIdrGJqoB\"")
                .d("linkedin", "\"IMrwpZA\"")
                .d("website", "\"Bk8gDpX\"")
                .d("note", "\"G11s\"")
            .and().insertInto("roles", 730L)
                .d("role", "\"_EM_5374_XYZ_\"")
            .and().insertInto("permissions", 729L)
                .d("permission", "\"Nfezx\"")
                .d("enabled", "-128")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. com/giassi/microservice/demo2/rest/users/services/UserService_78_getUserByUsername.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/login'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"password\": \"bvwb0R218WM\u003d1114k\", " + 
                    " \"username\": \"4Yc\" " + 
                    " } ")
                .post(baseUrlOfSut + "/login")
                .then()
                .statusCode(500)// com/giassi/microservice/demo2/rest/users/services/UserService_78_getUserByUsername
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("120"))
                .body("'path'", containsString("/login"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/users
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_3_postOnUsersShowsFaults_100_101() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5B8I4aGi\"")
                .d("enabled", "0")
                .d("note", "\"qfR8CkDEk\"")
            .and().insertInto("users", 597L)
                .d("username", "\"4Yc\"")
                .d("password", "\"_EM_5364_XYZ_\"")
                .d("name", "\"fn`SDEHEHqpeg\"")
                .d("surname", "\"R\"")
                .d("gender", "120")
                .d("birth_date", "\"2019-06-19\"")
                .d("enabled", "-82")
                .d("creation_dt", "\"2000-05-22 15:36:38\"")
                .d("updated_dt", "\"1997-06-16 11:31:29\"")
                .d("login_dt", "\"1999-06-07 07:51:20\"")
                .d("note", "\"_EM_5365_XYZ_\"")
                .d("secured", "117")
            .and().insertInto("roles", 653L)
                .d("role", "\"_EM_5366_XYZ_\"")
            .and().insertInto("users", 722L)
                .d("username", "\"aCo21m\"")
                .d("password", "\"RD7b_n0\"")
                .d("enabled", "9")
                .d("creation_dt", "\"2007-04-02 16:57:51\"")
                .d("secured", "-62")
            .and().insertInto("addresses", 721L)
                .d("user_id", "1")
                .d("address", "\"_EM_9123_XYZ_\"")
                .d("address2", "\"w0XkKsf7ZUVnrR\"")
                .d("city", "\"f7Basx3\"")
                .d("country", "\"bNlg3bHB\"")
                .d("zip_code", "NULL")
            .and().insertInto("users", 725L)
                .d("username", "\"2C|Wtdw3\"")
                .d("password", "\"MMKcDwI\"")
                .d("enabled", "-126")
                .d("creation_dt", "\"2009-04-28 15:15:22\"")
                .d("secured", "62")
            .and().insertInto("roles", 724L)
                .d("role", "\"LFZ3Yq\"")
            .and().insertInto("users_roles", 723L)
                .d("user_id", "3")
                .r("role_id", 653L)
            .and().insertInto("users", 727L)
                .d("username", "\"TlOur9k8km\"")
                .d("password", "\"Q\"")
                .d("enabled", "118")
                .d("creation_dt", "\"2008-10-09 09:29:18\"")
                .d("secured", "-84")
            .and().insertInto("contacts", 726L)
                .r("user_id", 597L)
                .d("email", "\"V\"")
                .d("phone", "\"WQpfHD\"")
                .d("skype", "NULL")
                .d("facebook", "\"tKmIdrGJqoB\"")
                .d("linkedin", "\"IMrwpZ\"")
                .d("website", "\"s25mIw8_\"")
                .d("note", "\"G11s\"")
            .and().insertInto("roles", 730L)
                .d("role", "\"_EM_5370_XYZ_\"")
            .and().insertInto("permissions", 729L)
                .d("permission", "\"UUUzx\"")
                .d("enabled", "0")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. com/giassi/microservice/demo2/rest/users/services/UserService_85_getUserByEmail.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/users'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"BMaH5S82mNAp\", " + 
                    " \"birthDate\": \"1956-10-18\", " + 
                    " \"city\": \"ClPh9uoU0\", " + 
                    " \"contactNote\": \"I72f\", " + 
                    " \"country\": \"k\", " + 
                    " \"email\": \"V\", " + 
                    " \"enabled\": true, " + 
                    " \"facebook\": \"GtmLWAwfVd1F2DqL\", " + 
                    " \"name\": \"iIEFfi7G9V9IC\", " + 
                    " \"note\": \"NT1DNnQAYM1tk7\", " + 
                    " \"password\": \"A\", " + 
                    " \"phone\": \"uhfz\", " + 
                    " \"username\": \"\", " + 
                    " \"website\": \"R0wc4CnP\", " + 
                    " \"zipCode\": \"hQ3t5\" " + 
                    " } ")
                .post(baseUrlOfSut + "/users")
                .then()
                .statusCode(500)// com/giassi/microservice/demo2/rest/users/services/UserService_85_getUserByEmail
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("120"))
                .body("'path'", containsString("/users"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/users
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_4_postOnUsersShowsFaults_100_101() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("users", 89L)
                .d("username", "\"\"")
                .d("password", "\"\"")
                .d("name", "NULL")
                .d("surname", "NULL")
                .d("gender", "-48")
                .d("birth_date", "\"1981-10-10\"")
                .d("enabled", "-117")
                .d("creation_dt", "\"2009-08-04 05:59:11\"")
                .d("updated_dt", "NULL")
                .d("login_dt", "\"1985-04-03 06:22:07\"")
                .d("note", "\"WY2Vio\"")
                .d("secured", "-99")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. com/giassi/microservice/demo2/rest/users/services/UserService_78_getUserByUsername.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/users'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"_EM_670_XYZ_\", " + 
                    " \"address2\": \"Gran canal\", " + 
                    " \"email\": \"zy6DdIUwW6ycy_q\", " + 
                    " \"facebook\": \"_EM_672_XYZ_\", " + 
                    " \"name\": \"K\", " + 
                    " \"note\": \"WY2Vio\", " + 
                    " \"secured\": true, " + 
                    " \"skype\": \"9AdcEFHSYkBHu\", " + 
                    " \"surname\": \"wp149b9ms\", " + 
                    " \"username\": \"\", " + 
                    " \"zipCode\": \"6e7IEZ5TsQ8fMtp\" " + 
                    " } ")
                .post(baseUrlOfSut + "/users")
                .then()
                .statusCode(500)// com/giassi/microservice/demo2/rest/users/services/UserService_78_getUserByUsername
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("-48"))
                .body("'path'", containsString("/users"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/users
    */
    @Test @Timeout(60)
    public void test_5_getOnUsersReturnsObject() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/users")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'userList'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (400) POST:/login
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_6_postOnLoginReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5B8I4aGi\"")
                .d("enabled", "0")
                .d("note", "\"qfR8CkDEk\"")
            .and().insertInto("users", 597L)
                .d("username", "\"4Yc\"")
                .d("password", "\"Ij3Az\"")
                .d("name", "\"fnbSDEHEJqpeg\"")
                .d("surname", "\"R\"")
                .d("gender", "NULL")
                .d("birth_date", "\"2019-06-19\"")
                .d("enabled", "-82")
                .d("creation_dt", "\"2000-05-22 17:36:38\"")
                .d("updated_dt", "\"1997-10-30 03:34:08\"")
                .d("login_dt", "\"1999-05-07 07:59:36\"")
                .d("note", "\"tdOI\"")
                .d("secured", "113")
            .and().insertInto("roles", 653L)
                .d("role", "\"PC7z1hiKqkK\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/login'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"password\": \"_EM_4593_XYZ_\", " + 
                    " \"username\": \"4Yc\" " + 
                    " } ")
                .post(baseUrlOfSut + "/login")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Invalid username or password"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/login
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_7_postOnLoginReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 423L)
                .d("permission", "\"fbx3YZe\"")
                .d("enabled", "-45")
                .d("note", "\"hxMMUQ\"")
            .and().insertInto("roles", 424L)
                .d("role", "\"GsTMS\"")
            .and().insertInto("users", 425L)
                .d("username", "\"GrCj5fkkjcvG\"")
                .d("password", "\"K2Hy4FdVybHIqiTk\"")
                .d("name", "\"\"")
                .d("surname", "\"7WSa\"")
                .d("gender", "-45")
                .d("birth_date", "NULL")
                .d("enabled", "-111")
                .d("creation_dt", "\"1986-02-02 09:11:35\"")
                .d("updated_dt", "\"2015-07-08 05:22:00\"")
                .d("login_dt", "NULL")
                .d("note", "\"\"")
                .d("secured", "-84")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/login'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"username\": \"_EM_897_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/login")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Username or Password cannot be null or empty"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/login
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_8_postOnLoginReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("users", 212L)
                .d("username", "\"OqqfM\"")
                .d("password", "\"U3UXbHgBsLjUMU\"")
                .d("name", "\"_EM_7014_XYZ_\"")
                .d("surname", "NULL")
                .d("gender", "-78")
                .d("birth_date", "\"1981-06-04\"")
                .d("enabled", "-76")
                .d("creation_dt", "\"2037-03-17 03:25:29\"")
                .d("updated_dt", "NULL")
                .d("login_dt", "NULL")
                .d("note", "\"xbCAzAJtwvlEBEy\"")
                .d("secured", "115")
            .and().insertInto("roles", 456L)
                .d("role", "\"v6G0\"")
            .and().insertInto("users", 464L)
                .d("username", "\"CFz0WEX\"")
                .d("password", "\"_wFhyGA\"")
                .d("enabled", "98")
                .d("creation_dt", "\"1985-11-08 11:27:52\"")
                .d("secured", "78")
            .and().insertInto("contacts", 463L)
                .r("user_id", 212L)
                .d("email", "\"FDbTlo\"")
                .d("phone", "NULL")
                .d("skype", "\"\"")
                .d("facebook", "NULL")
                .d("linkedin", "\"f;QHYafRX_8S\"")
                .d("website", "\"lB5kfF\"")
                .d("note", "\"C2woH\"")
            .and().insertInto("permissions", 1322L)
                .d("permission", "\"_EM_8353_XYZ_\"")
                .d("enabled", "-99")
                .d("note", "\"dJCw\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/login'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"password\": \"K\", " + 
                    " \"username\": \"Q1V8nQHnoXUi\" " + 
                    " } ")
                .post(baseUrlOfSut + "/login")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Invalid username or password"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/login
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_9_postOnLoginReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"_EM_7142_XYZ_\"")
                .d("enabled", "127")
                .d("note", "\"qfR9CkDEk\"")
            .and().insertInto("users", 597L)
                .d("username", "\"6YcU\"")
                .d("password", "\"aHkT0e1\"")
                .d("name", "\"_EU_5037UUYZU\"")
                .d("surname", "\"R3e\"")
                .d("gender", "NULL")
                .d("birth_date", "\"2019-01-19\"")
                .d("enabled", "-82")
                .d("creation_dt", "\"2000-06-22 17:36:06\"")
                .d("updated_dt", "\"1997-10-30 19:34:00\"")
                .d("login_dt", "\"1999-05-07 07:59:36\"")
                .d("note", "\"_EM_7143_XYZ_\"")
                .d("secured", "113")
            .and().insertInto("roles", 653L)
                .d("role", "\"_EM_7144_XYZ_\"")
            .and().insertInto("users", 655L)
                .d("username", "\"_EM_7145_XYZ_\"")
                .d("password", "\"XjCzpxIoxLaD\"")
                .d("enabled", "-128")
                .d("creation_dt", "\"1986-05-01 03:57:38\"")
                .d("secured", "-81")
            .and().insertInto("addresses", 654L)
                .d("user_id", "1")
                .d("address", "\"_EM_7146_XYZ_\"")
                .d("address2", "NULL")
                .d("city", "\"mdP\"")
                .d("country", "\"t0W\"")
                .d("zip_code", "\"ahtWKz1HEt\"")
            .and().insertInto("users", 658L)
                .d("username", "\"j8DAC37hPtFng\"")
                .d("password", "\"\"")
                .d("enabled", "107")
                .d("creation_dt", "\"2003-06-20 02:31:29\"")
                .d("secured", "-77")
            .and().insertInto("roles", 657L)
                .d("role", "\"GYD1R0VH2CAF\"")
            .and().insertInto("users_roles", 656L)
                .r("user_id", 655L)
                .d("role_id", "2")
            .and().insertInto("users", 660L)
                .d("username", "\"24Wr1mpYoJUQ0k\"")
                .d("password", "\"MIfuAEaoaaTwbik4\"")
                .d("enabled", "-52")
                .d("creation_dt", "\"1997-10-22 17:29:50\"")
                .d("secured", "65")
            .and().insertInto("contacts", 659L)
                .r("user_id", 597L)
                .d("email", "\"9iA5SaUiVkGVkl8\"")
                .d("phone", "\"2\"")
                .d("skype", "NULL")
                .d("facebook", "\"GjdcSJjj0UyC_7m\"")
                .d("linkedin", "\"Ra7VmwNW0Oh\"")
                .d("website", "\"_EM_7138_XYZ_\"")
                .d("note", "\"30Y2\"")
            .and().insertInto("roles", 663L)
                .d("role", "\"JexU2WU0S\"")
            .and().insertInto("permissions", 662L)
                .d("permission", "\"PgiGb_YPwJmC\"")
                .d("enabled", "-103")
            .and().insertInto("permissions_roles", 661L)
                .r("permission_id", 596L)
                .d("role_id", "1")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/login'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"password\": \"_EM_4593_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/login")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Username or Password cannot be null or empty"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/users
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_10_postOnUsersReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/users'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"address2\": \"3hnrhjCvR8h5cn5e\", " + 
                    " \"birthDate\": \"1904-09-18\", " + 
                    " \"email\": \"_EM_28_XYZ_\", " + 
                    " \"facebook\": \"xWPOHd9zocgFGn\", " + 
                    " \"linkedin\": \"_EM_29_XYZ_\", " + 
                    " \"note\": \"tqTS\", " + 
                    " \"password\": \"nS8mJiDpQS\", " + 
                    " \"secured\": false, " + 
                    " \"surname\": \"Ya7zB\", " + 
                    " \"username\": \"3_\", " + 
                    " \"website\": \"_EM_32_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/users")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Password must to be at least 8 chars, 1 number, 1 upper case, 1 lower case letter, 1 special char, no spaces"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/users
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_11_postOnUsersReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("users", 2179L)
                .d("username", "\"4VcSiOmjWGu\"")
                .d("password", "\"XKRVZbu\"")
                .d("enabled", "-48")
                .d("creation_dt", "\"1996-09-16 21:05:56\"")
                .d("secured", "-62")
            .and().insertInto("roles", 2178L)
                .d("role", "\"bm\"")
            .and().insertInto("users_roles", 2177L)
                .r("user_id", 2179L)
                .d("role_id", "1")
            .and().insertInto("users", 2181L)
                .d("username", "\"oXulqyD\"")
                .d("password", "\"WeoGJHGlwnQFK\"")
                .d("enabled", "-52")
                .d("creation_dt", "\"1999-09-25 18:29:07\"")
                .d("secured", "-67")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/users'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"birthDate\": \"1901-11-26\", " + 
                    " \"city\": \"_EM_158_XYZ_\", " + 
                    " \"contactNote\": \"jE3\", " + 
                    " \"email\": \"_EM_160_XYZ_\", " + 
                    " \"linkedin\": \"_EM_161_XYZ_\", " + 
                    " \"note\": \"_EM_162_XYZ_\", " + 
                    " \"phone\": \"_EM_164_XYZ_\", " + 
                    " \"secured\": false, " + 
                    " \"skype\": \"_EM_165_XYZ_\", " + 
                    " \"surname\": \"_EM_166_XYZ_\", " + 
                    " \"username\": \"mario\" " + 
                    " } ")
                .post(baseUrlOfSut + "/users")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Password cannot be null or empty"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/users
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_12_postOnUsersReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/users'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"address2\": \"D0Y9Gj8wrzFv2\", " + 
                    " \"birthDate\": \"2006-06-28\", " + 
                    " \"city\": \"on4VVJqczuG23\", " + 
                    " \"contactNote\": \"BDvbMCEAgvmboD\", " + 
                    " \"country\": \"LDeyo2\", " + 
                    " \"enabled\": true, " + 
                    " \"name\": \"F8MFNHuxHqDOmsxg\", " + 
                    " \"note\": \"LqPvfAmea2qRCLEA\", " + 
                    " \"secured\": true, " + 
                    " \"skype\": \"3F0k\", " + 
                    " \"zipCode\": \"8\" " + 
                    " } ")
                .post(baseUrlOfSut + "/users?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("username cannot be null"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/users
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_13_postOnUsersReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5B8I4aGi\"")
                .d("enabled", "0")
                .d("note", "\"qfR8CkDEk\"")
            .and().insertInto("users", 597L)
                .d("username", "\"4Yc\"")
                .d("password", "\"_EM_5364_XYZ_\"")
                .d("name", "\"fn`SDEHEJqpeg\"")
                .d("surname", "\"R\"")
                .d("gender", "NULL")
                .d("birth_date", "\"2019-06-19\"")
                .d("enabled", "-82")
                .d("creation_dt", "\"2000-05-22 15:36:38\"")
                .d("updated_dt", "\"1997-06-16 11:31:29\"")
                .d("login_dt", "\"1999-06-07 07:51:20\"")
                .d("note", "\"_EM_5365_XYZ_\"")
                .d("secured", "117")
            .and().insertInto("roles", 653L)
                .d("role", "\"_EM_5366_XYZ_\"")
            .and().insertInto("users", 722L)
                .d("username", "\"aCo21m\"")
                .d("password", "\"RD7b_n0\"")
                .d("enabled", "9")
                .d("creation_dt", "\"2007-04-02 16:57:51\"")
                .d("secured", "-62")
            .and().insertInto("addresses", 721L)
                .d("user_id", "1")
                .d("address", "\"_EM_9123_XYZ_\"")
                .d("address2", "\"w0XkKsf7ZUVnrR\"")
                .d("city", "\"f7Basx3\"")
                .d("country", "\"bNlg3bHB\"")
                .d("zip_code", "NULL")
            .and().insertInto("users", 725L)
                .d("username", "\"2C|Wtdw3\"")
                .d("password", "\"MMKcDwI\"")
                .d("enabled", "-126")
                .d("creation_dt", "\"2009-04-28 15:15:22\"")
                .d("secured", "62")
            .and().insertInto("roles", 724L)
                .d("role", "\"LFZ3Yq\"")
            .and().insertInto("users_roles", 723L)
                .d("user_id", "3")
                .r("role_id", 653L)
            .and().insertInto("users", 727L)
                .d("username", "\"TlOur9k8km\"")
                .d("password", "\"Q\"")
                .d("enabled", "118")
                .d("creation_dt", "\"2008-10-09 09:29:18\"")
                .d("secured", "-84")
            .and().insertInto("contacts", 726L)
                .r("user_id", 597L)
                .d("email", "\"V\"")
                .d("phone", "\"WQpfHD\"")
                .d("skype", "NULL")
                .d("facebook", "\"tKmIdrGJqoB\"")
                .d("linkedin", "\"IMrwpZ\"")
                .d("website", "\"_EM_9124_XYZ_\"")
                .d("note", "\"G11s\"")
            .and().insertInto("roles", 730L)
                .d("role", "\"_EM_5370_XYZ_\"")
            .and().insertInto("permissions", 729L)
                .d("permission", "\"UUUzx\"")
                .d("enabled", "0")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/users'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"BMaH5S82mNAp\", " + 
                    " \"birthDate\": \"1956-10-18\", " + 
                    " \"city\": \"ClPh9uoU0\", " + 
                    " \"contactNote\": \"I72f\", " + 
                    " \"country\": \"k\", " + 
                    " \"email\": \"V\", " + 
                    " \"enabled\": true, " + 
                    " \"facebook\": \"GtmLWAwfVd1F2DqL\", " + 
                    " \"name\": \"iIEFfi7G9V9IC\", " + 
                    " \"note\": \"NT1DNnQAYM1tk7\", " + 
                    " \"password\": \"A\", " + 
                    " \"phone\": \"uhfz\", " + 
                    " \"username\": \"\", " + 
                    " \"website\": \"R0wc4CnP\", " + 
                    " \"zipCode\": \"hQ3t5\" " + 
                    " } ")
                .post(baseUrlOfSut + "/users")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("This email V it's already in use."));
    }
    
    
    /**
    * Calls:
    * (400) POST:/users
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_14_postOnUsersReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/users'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"_EM_456_XYZ_\", " + 
                    " \"city\": \"Florence\", " + 
                    " \"contactNote\": \"test contact note on mario rossi\", " + 
                    " \"facebook\": \"_EM_459_XYZ_\", " + 
                    " \"phone\": \"_EM_461_XYZ_\", " + 
                    " \"skype\": \"ZRBC41zCA3m\", " + 
                    " \"username\": \"3\", " + 
                    " \"website\": \"rMbjAhEPZb\" " + 
                    " } ")
                .post(baseUrlOfSut + "/users?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("email cannot be null"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/users/register
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_15_postOnRegisterShowsFaults_100_101() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"_EM_7963_XYZ_\"")
                .d("enabled", "-128")
                .d("note", "\"_EM_4775_XYZ_\"")
            .and().insertInto("users", 597L)
                .d("username", "\"GDv0mF\"")
                .d("password", "\"Ij3Az\"")
                .d("name", "\"fnbSDEHEJqpeg\"")
                .d("surname", "\"U\"")
                .d("gender", "8")
                .d("birth_date", "\"2000-06-03\"")
                .d("enabled", "-64")
                .d("creation_dt", "\"2005-01-15 17:29:38\"")
                .d("updated_dt", "\"1999-10-29 02:24:09\"")
                .d("login_dt", "\"1999-10-07 07:43:38\"")
                .d("note", "\"ndUG\"")
                .d("secured", "0")
            .and().insertInto("roles", 607L)
                .d("role", "\"_EU_4U<3_XYU_\"")
            .and().insertInto("roles", 646L)
                .d("role", "\"jjIQJSn1Q\"")
            .and().insertInto("permissions", 645L)
                .d("permission", "\"VFZ9\"")
                .d("enabled", "-126")
            .and().insertInto("permissions_roles", 644L)
                .r("permission_id", 645L)
                .d("role_id", "1")
            .and().insertInto("users", 1211L)
                .d("username", "\"VjPe0j6Sd8sqpBTc\"")
                .d("password", "\"z74dgObrphi0\"")
                .d("creation_dt", "\"2001-03-23 05:01:07\"")
            .and().insertInto("users", 1214L)
                .d("username", "\"c0fNnQ5jcHj\"")
                .d("password", "\"yS8\"")
                .d("enabled", "96")
                .d("creation_dt", "\"2015-08-25 11:45:19\"")
                .d("secured", "0")
            .and().insertInto("roles", 1213L)
                .d("role", "\"kWbTPUb\"")
            .and().insertInto("users_roles", 1212L)
                .r("user_id", 597L)
                .d("role_id", "2")
            .and().insertInto("users", 1216L)
                .d("username", "\"e\"")
                .d("password", "\"T5em2SA\"")
                .d("enabled", "-69")
                .d("creation_dt", "\"2037-06-05 12:09:08\"")
                .d("secured", "60")
            .and().insertInto("contacts", 1215L)
                .r("user_id", 1214L)
                .d("email", "\"fr8pqCS2YlB\"")
                .d("phone", "\"doSM77oImR\"")
                .d("skype", "\"QqLy\"")
                .d("facebook", "\"1orQVeyF\"")
                .d("linkedin", "\"IzK4OUXMobB\"")
                .d("website", "\"YYnmN\"")
                .d("note", "\"GX\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. com/giassi/microservice/demo2/rest/users/services/UserService_78_getUserByUsername.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/users/register'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"gender\": \"k\", " + 
                    " \"surname\": \"_EM_4781_XYZ_\", " + 
                    " \"username\": \"GDv0mF\" " + 
                    " } ")
                .post(baseUrlOfSut + "/users/register")
                .then()
                .statusCode(500)// com/giassi/microservice/demo2/rest/users/services/UserService_78_getUserByUsername
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("8"))
                .body("'path'", containsString("/users/register"));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/users/{id}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_16_putOnUserShowsFaults_100_101() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("users", 212L)
                .d("username", "\"OqqfM\"")
                .d("password", "\"U3UXbHgBsLjUMU\"")
                .d("name", "\"_EM_7014_XYZ_\"")
                .d("surname", "NULL")
                .d("gender", "-78")
                .d("birth_date", "\"1949-10-04\"")
                .d("enabled", "-76")
                .d("creation_dt", "\"2037-03-17 03:25:29\"")
                .d("updated_dt", "NULL")
                .d("login_dt", "\"2003-08-14 02:04:11\"")
                .d("note", "\"xbCAzAJtwvlEBEy\"")
                .d("secured", "115")
            .and().insertInto("roles", 456L)
                .d("role", "\"v6G0\"")
            .and().insertInto("users", 464L)
                .d("username", "\"CFz0WEX\"")
                .d("password", "\"_wFhyGA\"")
                .d("enabled", "98")
                .d("creation_dt", "\"1985-11-08 11:27:52\"")
                .d("secured", "78")
            .and().insertInto("contacts", 463L)
                .r("user_id", 464L)
                .d("email", "\"FDbTlo\"")
                .d("phone", "NULL")
                .d("skype", "\"\"")
                .d("facebook", "NULL")
                .d("linkedin", "\"f;QHYafRX_8S\"")
                .d("website", "\"lB5kfF\"")
                .d("note", "\"C2woH\"")
            .and().insertInto("permissions", 1322L)
                .d("permission", "\"c\"")
                .d("enabled", "-99")
                .d("note", "\"dJCw\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. com/giassi/microservice/demo2/rest/users/services/UserService_254_updateUser.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/users/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"JoUzBG52\", " + 
                    " \"address2\": \"WdzMpOqKSls9\", " + 
                    " \"birthDate\": \"1956-01-27\", " + 
                    " \"contactNote\": \"F_\", " + 
                    " \"country\": \"8Ds6J1\", " + 
                    " \"email\": \"\", " + 
                    " \"facebook\": \"S\", " + 
                    " \"note\": \"yAi\", " + 
                    " \"password\": \"alW6bMJPpfMNw\", " + 
                    " \"secured\": true " + 
                    " } ")
                .put(baseUrlOfSut + "/users/1")
                .then()
                .statusCode(500)// com/giassi/microservice/demo2/rest/users/services/UserService_254_updateUser
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("-78"))
                .body("'path'", containsString("/users/1"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/v2/api-docs
    */
    @Test @Timeout(60)
    public void test_17_getOnApi_docsReturnsObject() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs")
                .then()
                .statusCode(200);
    }
    
    
    /**
    * Calls:
    * (400) POST:/users/register
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_18_postOnRegisterReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/users/register'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"email\": \"_EM_22_XYZ_\", " + 
                    " \"password\": \"beI7apN\", " + 
                    " \"username\": \"veronica\" " + 
                    " } ")
                .post(baseUrlOfSut + "/users/register")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Password must to be at least 8 chars, 1 number, 1 upper case, 1 lower case letter, 1 special char, no spaces"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/users/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_19_putOnUserReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("roles", 46L)
                .d("role", "\"gIarFEe18\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/users/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"jxJ66uxgBNtZEy\", " + 
                    " \"birthDate\": \"2009-13-09\", " + 
                    " \"contactNote\": \"o2at3CjhzSuizsPK\", " + 
                    " \"country\": \"i0QKZrdhRi\", " + 
                    " \"email\": \"1B\", " + 
                    " \"linkedin\": \"cQ5gms\", " + 
                    " \"name\": \"SSL\", " + 
                    " \"note\": \"B\", " + 
                    " \"password\": \"N7jiB4\", " + 
                    " \"skype\": \"4hNLeb6n4IbX\" " + 
                    " } ")
                .put(baseUrlOfSut + "/users/886?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'message'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"2009-13-09\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text '2009-13-09' could not be parsed: Invalid value for MonthOfYear (valid values 1 - 12): 13; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"2009-13-09\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text '2009-13-09' could not be parsed: Invalid value for MonthOfYear (valid values 1 - 12): 13\n at [Source: (ByteArrayInputStream); line: 1, column: 42] (through reference chain: com.giassi.microservice.demo2.rest.users.dtos.requests.CreateOrUpdateUserDTO[\"birthDate\"])"))
                .body("'path'", containsString("/users/886"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/users/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_20_getOnUserWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/users/951?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("User not found for Id = 951"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/users/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_21_getOnUserReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/users/-7587183313500224247")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("User not found for Id = -7587183313500224247"));
    }
    
    
    /**
    * Calls:
    * (404) PUT:/users/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_22_putOnUserReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"address2\": \"Gran canal\", " + 
                    " \"city\": \"_EM_46_XYZ_\", " + 
                    " \"country\": \"Italy\", " + 
                    " \"enabled\": true, " + 
                    " \"linkedin\": \"Czu1N6\", " + 
                    " \"name\": \"YsslZWfG0c05l3\", " + 
                    " \"note\": \"View statistical graphs\", " + 
                    " \"password\": \"2F3Q89TW3J\", " + 
                    " \"phone\": \"_EM_48_XYZ_\", " + 
                    " \"secured\": true, " + 
                    " \"skype\": \"RQLhZnh\", " + 
                    " \"surname\": \"_EM_49_XYZ_\", " + 
                    " \"username\": \"_EM_50_XYZ_\", " + 
                    " \"website\": \"_EM_51_XYZ_\", " + 
                    " \"zipCode\": \"ZdyOK\" " + 
                    " } ")
                .put(baseUrlOfSut + "/users/-9000481438797955247?EMextraParam123=_EM_52_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("The user with Id = -9000481438797955247 doesn't exists"));
    }
    
    
    /**
    * Calls:
    * (404) PUT:/users/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_23_putOnUserReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"birthDate\": \"1977-03-29\", " + 
                    " \"contactNote\": \"tT\", " + 
                    " \"country\": \"_EM_353_XYZ_\", " + 
                    " \"facebook\": \"9IiyEiCF9DSoZT\", " + 
                    " \"name\": \"_EM_357_XYZ_\", " + 
                    " \"note\": \"J\", " + 
                    " \"password\": \"_EM_358_XYZ_\", " + 
                    " \"secured\": false, " + 
                    " \"website\": \"_EM_361_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/users/771")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("The user with Id = 771 doesn't exists"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_24_deleteOnUserWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_13_XYZ_")
                .delete(baseUrlOfSut + "/users/954?EMextraParam123=_EM_12_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("User not found with Id = 954"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_25_deleteOnUserReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/-636939483196054520")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("User not found with Id = -636939483196054520"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/users/rbac/permissions
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_26_getOnPermissionsShowsFaults_100_101() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("users", 970L)
                .d("username", "\"HM0b9_\"")
                .d("password", "\"MbXqut9c\"")
                .d("name", "NULL")
                .d("surname", "\"m9ZUPkao\"")
                .d("gender", "NULL")
                .d("birth_date", "NULL")
                .d("enabled", "-106")
                .d("creation_dt", "\"2034-09-01 02:22:21\"")
                .d("updated_dt", "NULL")
                .d("login_dt", "NULL")
                .d("note", "\"KND260UCHchKg\"")
                .d("secured", "65")
            .and().insertInto("permissions", 1020L)
                .d("permission", "\"ZpeXENIM\"")
                .d("enabled", "NULL")
                .d("note", "\"mWa\"")
            .and().insertInto("users", 109L)
                .d("username", "\"stefania\"")
                .d("password", "\"_EM_839_XYZ_\"")
                .d("name", "\"_EM_840_XYZ_\"")
                .d("surname", "NULL")
                .d("gender", "-99")
                .d("birth_date", "NULL")
                .d("enabled", "-100")
                .d("creation_dt", "\"1980-08-20 05:16:40\"")
                .d("updated_dt", "NULL")
                .d("login_dt", "\"2015-06-08 12:49:35\"")
                .d("note", "NULL")
                .d("secured", "38")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. com/giassi/microservice/demo2/rest/users/services/PermissionService_25_getPermissionList.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/users/rbac/permissions'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/users/rbac/permissions")
                .then()
                .statusCode(500)// com/giassi/microservice/demo2/rest/users/services/PermissionService_25_getPermissionList
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Null value was assigned to a property [class com.giassi.microservice.demo2.rest.users.entities.Permission.enabled] of primitive type setter of com.giassi.microservice.demo2.rest.users.entities.Permission.enabled; nested exception is org.hibernate.PropertyAccessException: Null value was assigned to a property [class com.giassi.microservice.demo2.rest.users.entities.Permission.enabled] of primitive type setter of com.giassi.microservice.demo2.rest.users.entities.Permission.enabled"))
                .body("'path'", containsString("/users/rbac/permissions"));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/users/rbac/permissions
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_27_putOnPermissionsShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. com/giassi/microservice/demo2/rest/users/services/PermissionService_77_updatePermission.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/users/rbac/permissions'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .put(baseUrlOfSut + "/users/rbac/permissions")
                .then()
                .statusCode(500)// com/giassi/microservice/demo2/rest/users/services/PermissionService_77_updatePermission
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!"))
                .body("'path'", containsString("/users/rbac/permissions"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/users/rbac/permissions
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_28_getOnPermissionsReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5B8E4aGi\"")
                .d("enabled", "47")
                .d("note", "\"_EM_4925_XYZ_\"")
            .and().insertInto("users", 597L)
                .d("username", "\"XTIdtkI0P\"")
                .d("password", "\"Ij3Az\"")
                .d("name", "\"fnbSDEHEJqpeg\"")
                .d("surname", "\"RQ\"")
                .d("gender", "127")
                .d("birth_date", "\"2019-06-19\"")
                .d("enabled", "-74")
                .d("creation_dt", "\"2000-05-22 17:32:38\"")
                .d("updated_dt", "NULL")
                .d("login_dt", "\"1999-03-07 07:27:38\"")
                .d("note", "\"tUOU\"")
                .d("secured", "0")
            .and().insertInto("roles", 607L)
                .d("role", "\"G\"")
            .and().insertInto("roles", 646L)
                .d("role", "\"jjIQJSn1j\"")
            .and().insertInto("permissions", 645L)
                .d("permission", "\"VFZ9\"")
                .d("enabled", "-53")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/1/note'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/users/rbac/permissions")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'permission'", containsString("5B8E4aGi"))
                .body("[0].'enabled'", equalTo(true))
                .body("[0].'note'", containsString("_EM_4925_XYZ_"))
                .body("[1].'permission'", containsString("VFZ9"))
                .body("[1].'enabled'", equalTo(false))
                .body("[1].'note'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/users/rbac/roles
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_29_getOnRolesReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"_EM_7963_XYZ_\"")
                .d("enabled", "-128")
                .d("note", "\"_EM_4775_XYZ_\"")
            .and().insertInto("users", 597L)
                .d("username", "\"GDv0mF\"")
                .d("password", "\"Ij3Az\"")
                .d("name", "\"fnbSDEHEJqpeg\"")
                .d("surname", "\"U\"")
                .d("gender", "8")
                .d("birth_date", "\"2000-06-03\"")
                .d("enabled", "-64")
                .d("creation_dt", "\"2005-01-15 17:29:38\"")
                .d("updated_dt", "\"1999-10-29 02:24:09\"")
                .d("login_dt", "\"1999-10-07 07:43:38\"")
                .d("note", "\"ndUG\"")
                .d("secured", "0")
            .and().insertInto("roles", 607L)
                .d("role", "\"_EU_4U<3_XYU_\"")
            .and().insertInto("roles", 646L)
                .d("role", "\"jjIQJSn1Q\"")
            .and().insertInto("permissions", 645L)
                .d("permission", "\"VFZ9\"")
                .d("enabled", "-126")
            .and().insertInto("permissions_roles", 644L)
                .r("permission_id", 645L)
                .d("role_id", "1")
            .and().insertInto("users", 1211L)
                .d("username", "\"VjPe0j6Sd8sqpBTc\"")
                .d("password", "\"z74dgObrphi0\"")
                .d("creation_dt", "\"2001-03-23 05:01:07\"")
            .and().insertInto("users", 1214L)
                .d("username", "\"c0fNnQ5jcHj\"")
                .d("password", "\"yS8\"")
                .d("enabled", "96")
                .d("creation_dt", "\"2015-08-25 11:45:19\"")
                .d("secured", "0")
            .and().insertInto("roles", 1213L)
                .d("role", "\"kWbTPUb\"")
            .and().insertInto("users_roles", 1212L)
                .r("user_id", 597L)
                .d("role_id", "2")
            .and().insertInto("users", 1216L)
                .d("username", "\"e\"")
                .d("password", "\"T5em2SA\"")
                .d("enabled", "-69")
                .d("creation_dt", "\"2037-06-05 12:09:08\"")
                .d("secured", "60")
            .and().insertInto("contacts", 1215L)
                .r("user_id", 1214L)
                .d("email", "\"fr8pqCS2YlB\"")
                .d("phone", "\"doSM77oImR\"")
                .d("skype", "\"QqLy\"")
                .d("facebook", "\"1orQVeyF\"")
                .d("linkedin", "\"IzK4OUXMobB\"")
                .d("website", "\"YYnmN\"")
                .d("note", "\"GX\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/0/permissions/0/note'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/users/rbac/roles")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'role'", containsString("_EU_4U<3_XYU_"))
                .body("[0].'permissions'.size()", equalTo(1))
                .body("[0].'permissions'[0].'permission'", containsString("VFZ9"))
                .body("[0].'permissions'[0].'enabled'", equalTo(false))
                .body("[0].'permissions'[0].'note'", nullValue())
                .body("[1].'role'", containsString("jjIQJSn1Q"))
                .body("[1].'permissions'.size()", equalTo(0))
                .body("[2].'role'", containsString("kWbTPUb"))
                .body("[2].'permissions'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (201) GET:/users/rbac/salt
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_30_getOnSaltReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 201 not defined for path '/users/rbac/salt'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/users/rbac/salt?EMextraParam123=_EM_11_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("nMBeTtYpoJedaeVNPumLpxF0S0ixshud"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/users/rbac/permissions
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_31_postOnPermissionsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -1652176393, " + 
                    " \"note\": \"_EM_16_XYZ_\", " + 
                    " \"permission\": \"_EM_17_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/users/rbac/permissions?EMextraParam123=_EM_18_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'permission'", containsString("_EM_17_XYZ_"))
                .body("'enabled'", equalTo(false))
                .body("'note'", containsString("_EM_16_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/users/rbac/roles
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_32_postOnRbacRolesWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_21_XYZ_")
                .contentType("application/json")
                .body(" \"_EM_19_XYZ_\" ")
                .post(baseUrlOfSut + "/users/rbac/roles?EMextraParam123=_EM_20_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'role'", containsString("\"_EM_19_XYZ_\""))
                .body("'permissions'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * 1 - (201) POST:/users/rbac/permissions
    * 2 - (405) POST:/users/rbac/roles
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_33_postOnRolesReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 567, " + 
                    " \"permission\": \"pDgGedbbHdtqpLwp\" " + 
                    " } ")
                .post(baseUrlOfSut + "/users/rbac/permissions")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'permission'", containsString("pDgGedbbHdtqpLwp"))
                .body("'enabled'", equalTo(false))
                .body("'note'", nullValue());
        String 
        location_permissions__2 = "/users/rbac/permissions" + "/" + res_0.extract().body().path("id").toString();
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 405 not defined for path '/users/rbac/roles'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"616\" ")
                .post(resolveLocation(location_permissions__2, baseUrlOfSut + "/users/rbac/roles"))
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(405.0))
                .body("'error'", containsString("Method Not Allowed"))
                .body("'message'", containsString("Request method 'POST' not supported"))
                .body("'path'", containsString("/users/rbac/permissions/1"));
    }
    
    
    /**
    * Calls:
    * 1 - (201) POST:/users/rbac/permissions
    * 2 - (404) POST:/users/rbac/permissions
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_34_postOnPermissionsReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("users", 160L)
                .d("username", "\"CPb2ipq\"")
                .d("password", "\"1FcozPgjXzd\"")
                .d("name", "NULL")
                .d("surname", "NULL")
                .d("gender", "NULL")
                .d("birth_date", "NULL")
                .d("enabled", "6")
                .d("creation_dt", "\"2012-01-23 11:33:53\"")
                .d("updated_dt", "\"1979-09-03 10:38:02\"")
                .d("login_dt", "NULL")
                .d("note", "\"CGWhzOvSjSGkWRaG\"")
                .d("secured", "78")
            .and().insertInto("permissions", 161L)
                .d("permission", "\"mL4RXr77o_vVauy\"")
                .d("enabled", "2")
                .d("note", "\"NUuPZDTtqz\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"enabled\": true, " + 
                    " \"note\": \"2ss0is__eL1x\", " + 
                    " \"permission\": \"7sK4\" " + 
                    " } ")
                .post(baseUrlOfSut + "/users/rbac/permissions")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'permission'", containsString("7sK4"))
                .body("'enabled'", equalTo(true))
                .body("'note'", containsString("2ss0is__eL1x"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"enabled\": true, " + 
                    " \"permission\": \"7sK4\" " + 
                    " } ")
                .post(baseUrlOfSut + "/users/rbac/permissions?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission 7sK4 already existing with the same key with Id = 2"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/users/rbac/permissions
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_35_postOnPermissionsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/users/rbac/permissions'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 526, " + 
                    " \"note\": \"XU25m1vwg2gOPo\" " + 
                    " } ")
                .post(baseUrlOfSut + "/users/rbac/permissions?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission key cannot be null or empty"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/users/rbac/roles
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_36_postOnRolesReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("roles", 611L)
                .d("role", "\"954\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/users/rbac/roles'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" 954 ")
                .post(baseUrlOfSut + "/users/rbac/roles")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("The role 954 already exists"));
    }
    
    
    /**
    * Calls:
    * (404) PUT:/users/rbac/permissions
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_37_putOnPermissionsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 739, " + 
                    " \"note\": \"dgGiF293g\" " + 
                    " } ")
                .put(baseUrlOfSut + "/users/rbac/permissions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("The permission with the id = 739 has not been found"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/users/{id}/roles/{roleId}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_38_postOnRoleShowsFaults_100_101() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("users", 212L)
                .d("username", "\"OqqfM\"")
                .d("password", "\"U3UXbHgBsLjUMU\"")
                .d("name", "\"_EM_7014_XYZ_\"")
                .d("surname", "NULL")
                .d("gender", "-78")
                .d("birth_date", "\"1949-10-04\"")
                .d("enabled", "-76")
                .d("creation_dt", "\"2037-03-17 03:25:29\"")
                .d("updated_dt", "NULL")
                .d("login_dt", "\"2003-08-14 02:04:11\"")
                .d("note", "\"xbCAzAJtwvlEBEy\"")
                .d("secured", "115")
            .and().insertInto("roles", 456L)
                .d("role", "\"v6G0\"")
            .and().insertInto("users", 464L)
                .d("username", "\"CFz0WEX\"")
                .d("password", "\"_wFhyGA\"")
                .d("enabled", "98")
                .d("creation_dt", "\"1985-11-08 11:27:52\"")
                .d("secured", "78")
            .and().insertInto("contacts", 463L)
                .r("user_id", 464L)
                .d("email", "\"FDbTlo\"")
                .d("phone", "NULL")
                .d("skype", "\"\"")
                .d("facebook", "NULL")
                .d("linkedin", "\"f;QHYafRX_8S\"")
                .d("website", "\"lB5kfF\"")
                .d("note", "\"C2woH\"")
            .and().insertInto("permissions", 1322L)
                .d("permission", "\"c\"")
                .d("enabled", "-99")
                .d("note", "\"dJCw\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. com/giassi/microservice/demo2/rest/users/services/UserService_400_addRole.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/users/{id}/roles/{roleId}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/users/1/roles/234")
                .then()
                .statusCode(500)// com/giassi/microservice/demo2/rest/users/services/UserService_400_addRole
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("-78"))
                .body("'path'", containsString("/users/1/roles/234"));
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/users/{id}/roles/{roleId}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_39_deleteOnRoleShowsFaults_100_101() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("users", 212L)
                .d("username", "\"OqqfM\"")
                .d("password", "\"U3UXbHgBsLjUMU\"")
                .d("name", "\"_EM_7014_XYZ_\"")
                .d("surname", "NULL")
                .d("gender", "-78")
                .d("birth_date", "\"1981-06-04\"")
                .d("enabled", "-76")
                .d("creation_dt", "\"2037-03-17 03:25:29\"")
                .d("updated_dt", "NULL")
                .d("login_dt", "NULL")
                .d("note", "\"xbCAzAJtwvlEBEy\"")
                .d("secured", "115")
            .and().insertInto("roles", 456L)
                .d("role", "\"v6G0\"")
            .and().insertInto("users", 464L)
                .d("username", "\"CFz0WEX\"")
                .d("password", "\"_wFhyGA\"")
                .d("enabled", "98")
                .d("creation_dt", "\"1985-11-08 11:27:52\"")
                .d("secured", "78")
            .and().insertInto("contacts", 463L)
                .r("user_id", 212L)
                .d("email", "\"FDbTlo\"")
                .d("phone", "NULL")
                .d("skype", "\"\"")
                .d("facebook", "NULL")
                .d("linkedin", "\"f;QHYafRX_8S\"")
                .d("website", "\"lB5kfF\"")
                .d("note", "\"C2woH\"")
            .and().insertInto("permissions", 1322L)
                .d("permission", "\"_EM_8353_XYZ_\"")
                .d("enabled", "-99")
                .d("note", "\"dJCw\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. com/giassi/microservice/demo2/rest/users/services/UserService_426_removeRole.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/users/{id}/roles/{roleId}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/1/roles/500")
                .then()
                .statusCode(500)// com/giassi/microservice/demo2/rest/users/services/UserService_426_removeRole
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("-78"))
                .body("'path'", containsString("/users/1/roles/500"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/users/rbac/permissions/{permissionKey}
    */
    @Test @Timeout(60)
    public void test_40_getOnPermissReturnsObject() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 64L)
                .d("permission", "\"Kx3lKUi6RNYFnuV\"")
                .d("enabled", "2")
                .d("note", "\"_EM_474_XYZ\"")
            .and().insertInto("users", 741L)
                .d("username", "\"6l3He3S1Qa4\"")
                .d("password", "\"Kidonvm\"")
                .d("name", "\"_EM_5470_XYZ_\"")
                .d("surname", "\"n\"")
                .d("gender", "-33")
                .d("birth_date", "\"1929-04-22\"")
                .d("enabled", "-126")
                .d("creation_dt", "\"1974-02-06 11:46:29\"")
                .d("updated_dt", "\"2027-10-29 17:45:11\"")
                .d("login_dt", "\"1974-08-27 17:40:25\"")
                .d("note", "\"VJUVjU\"")
                .d("secured", "0")
            .and().insertInto("users", 745L)
                .d("username", "\"1q5TycBKwBgjrwE\"")
                .d("password", "\"5\"")
                .d("enabled", "89")
                .d("creation_dt", "\"2011-07-14 17:04:32\"")
                .d("secured", "118")
            .and().insertInto("contacts", 744L)
                .r("user_id", 741L)
                .d("email", "\"Y_LNK5k8aa\"")
                .d("phone", "\"UGjDUUYuaNtxUs\"")
                .d("skype", "NULL")
                .d("facebook", "\"FIeTpa6Ytb1\"")
                .d("linkedin", "\"f3EsBy\"")
                .d("website", "\"YvhHFeT_\"")
                .d("note", "\"A7\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/users/rbac/permissions/Kx3lKUi6RNYFnuV")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'permission'", containsString("Kx3lKUi6RNYFnuV"))
                .body("'enabled'", equalTo(true))
                .body("'note'", containsString("_EM_474_XYZ"));
    }
    
    
    /**
    * Calls:
    * 1 - (201) POST:/users/rbac/roles
    * 2 - (200) GET:/users/rbac/roles/{roleId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_41_getOnRoleReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" 165 ")
                .post(baseUrlOfSut + "/users/rbac/roles")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'role'", containsString("165"))
                .body("'permissions'.size()", equalTo(0));
        String 
        location_roles__2 = "/users/rbac/roles" + "/" + res_0.extract().body().path("id").toString();
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(resolveLocation(location_roles__2, baseUrlOfSut + "/users/rbac/roles/165"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'role'", containsString("165"))
                .body("'permissions'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * 1 - (201) POST:/users/rbac/roles
    * 2 - (200) GET:/users/rbac/roles/{roleId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_42_getOnRoleReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" -3912931708666332272 ")
                .post(baseUrlOfSut + "/users/rbac/roles")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'role'", containsString("-3912931708666332272"))
                .body("'permissions'.size()", equalTo(0));
        String 
        location_roles__2 = "/users/rbac/roles" + "/" + res_0.extract().body().path("id").toString();
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(resolveLocation(location_roles__2, baseUrlOfSut + "/users/rbac/roles/-3912931708666332272"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'role'", containsString("-3912931708666332272"))
                .body("'permissions'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_43_getOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 295L)
                .d("permission", "\"ZI\"")
                .d("enabled", "-85")
                .d("note", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/note'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/users/rbac/permissions/ZI")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'permission'", containsString("ZI"))
                .body("'enabled'", equalTo(false))
                .body("'note'", nullValue());
    }
    
    
    /**
    * Calls:
    * 1 - (201) POST:/users/rbac/roles
    * 2 - (204) DELETE:/users/rbac/roles/{roleId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_44_deleteOnRoleReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" 870 ")
                .post(baseUrlOfSut + "/users/rbac/roles")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'role'", containsString("870"))
                .body("'permissions'.size()", equalTo(0));
        String 
        location_roles__2 = "/users/rbac/roles" + "/" + res_0.extract().body().path("id").toString();
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(resolveLocation(location_roles__2, baseUrlOfSut + "/users/rbac/roles/870"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * 1 - (201) POST:/users/rbac/roles
    * 2 - (204) DELETE:/users/rbac/roles/{roleId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_45_deleteOnRoleReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" \"-1808423009\" ")
                .post(baseUrlOfSut + "/users/rbac/roles")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'role'", containsString("\"-1808423009\""))
                .body("'permissions'.size()", equalTo(0));
        String 
        location_roles__2 = "/users/rbac/roles" + "/" + res_0.extract().body().path("id").toString();
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(resolveLocation(location_roles__2, baseUrlOfSut + "/users/rbac/roles/-1808423009?EMextraParam123=42"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (204) DELETE:/users/rbac/permissions/{permissionKey}
    */
    @Test @Timeout(60)
    public void test_46_deleteOnPermissReturns204() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"_EM_5422_XYZ_\"")
                .d("enabled", "45")
                .d("note", "\"sURUCkUEU\"")
            .and().insertInto("users", 597L)
                .d("username", "\"_EM_4395_XYZ_\"")
                .d("password", "\"_EM_5324_XYZ_\"")
                .d("name", "\"fnbSDEHEJqpef\"")
                .d("surname", "\"_EM_5327_XYZ_\"")
                .d("gender", "-1")
                .d("birth_date", "\"2019-08-31\"")
                .d("enabled", "0")
                .d("creation_dt", "\"1970-06-15 17:36:38\"")
                .d("updated_dt", "\"1997-10-30 03:34:08\"")
                .d("login_dt", "\"1999-03-07 07:43:38\"")
                .d("note", "\"tdOI\"")
                .d("secured", "-1")
            .and().insertInto("roles", 607L)
                .d("role", "\"G\"")
            .and().insertInto("roles", 718L)
                .d("role", "\"kWbiBt90JbP\"")
            .and().insertInto("permissions", 717L)
                .d("permission", "\"SaUeUUUzuUMWR\"")
                .d("enabled", "70")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/SaUeUUUzuUMWR")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (204) DELETE:/users/rbac/permissions/{permissionKey}
    */
    @Test @Timeout(60)
    public void test_47_deleteOnPermissReturns204() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5B8I4aGi\"")
                .d("enabled", "0")
                .d("note", "\"qfR8CkDEk\"")
            .and().insertInto("users", 597L)
                .d("username", "\"4Yc\"")
                .d("password", "\"5\\E(r|R)(r|R)(l|L)(s|S)(a|A)\\Q1\\E(t|T)(k|K)(w|W)(y|Y)(t|T)\\Q+\\E(l|L)(y|Y)\\Q9\\E(u|U)(q|Q)(r|R)(h|H)(p|P)(s|S)(r|R)(v|V)(e|E)(a|A)\\Q2\\E(a|A)(b|B)(y|Y)\\Q1\\E(k|K)(r|R)\\Q8\\E(h|H)(m|M)(u|U)(c|C)\\Q5\\E(g|G)(f|F)\\Q+\\E(s|S)\\Q=\"")
                .d("name", "\"fnbSDEHEJqpeg\"")
                .d("surname", "\"R\"")
                .d("gender", "120")
                .d("birth_date", "\"2019-06-19\"")
                .d("enabled", "-82")
                .d("creation_dt", "\"2000-05-22 11:36:29\"")
                .d("updated_dt", "\"1997-11-30 11:34:08\"")
                .d("login_dt", "\"1999-05-07 07:59:36\"")
                .d("note", "\"V3amyhUV\"")
                .d("secured", "121")
            .and().insertInto("roles", 653L)
                .d("role", "\"_EM_5366_XYZ_\"")
            .and().insertInto("users", 722L)
                .d("username", "\"aCo21m\"")
                .d("password", "\"RD7b_n0\"")
                .d("enabled", "13")
                .d("creation_dt", "\"2007-04-02 16:57:51\"")
                .d("secured", "-76")
            .and().insertInto("addresses", 721L)
                .r("user_id", 597L)
                .d("address", "\"n\"")
                .d("address2", "\"_EM_5367_XYZ_\"")
                .d("city", "NULL")
                .d("country", "\"bNlg3bHB\"")
                .d("zip_code", "\"CVbtdH\"")
            .and().insertInto("users", 725L)
                .d("username", "\"2C|Wtdw3\"")
                .d("password", "\"PP5M\"")
                .d("enabled", "-126")
                .d("creation_dt", "\"2010-04-12 23:19:22\"")
                .d("secured", "62")
            .and().insertInto("roles", 724L)
                .d("role", "\"MFZ3Yq\"")
            .and().insertInto("users_roles", 723L)
                .d("user_id", "3")
                .r("role_id", 653L)
            .and().insertInto("users", 727L)
                .d("username", "\"TlOur9k8km\"")
                .d("password", "\"U\"")
                .d("enabled", "127")
                .d("creation_dt", "\"2008-10-09 09:06:22\"")
                .d("secured", "-84")
            .and().insertInto("contacts", 726L)
                .r("user_id", 725L)
                .d("email", "\"_EM_5369_XYZ_\"")
                .d("phone", "\"WQnfHD\"")
                .d("skype", "NULL")
                .d("facebook", "\"tKmIdrGJqoB\"")
                .d("linkedin", "\"IMrwpZA\"")
                .d("website", "\"Bk8gDpX\"")
                .d("note", "\"G11s\"")
            .and().insertInto("roles", 730L)
                .d("role", "\"_EM_5370_XYZ_\"")
            .and().insertInto("permissions", 729L)
                .d("permission", "\"UfUzx\"")
                .d("enabled", "-128")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/5B8I4aGi")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (204) DELETE:/users/rbac/permissions/{permissionKey}
    */
    @Test @Timeout(60)
    public void test_48_deleteOnRbacPermissWithQueryParamReturns204() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 180L)
                .d("permission", "\"VmPuHUa60_12HRrg\"")
                .d("enabled", "-28")
                .d("note", "\"fR0Mo_g_r\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_4_XYZ_")
                .delete(baseUrlOfSut + "/users/rbac/permissions/VmPuHUa60_12HRrg?EMextraParam123=42")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (204) DELETE:/users/rbac/permissions/{permissionKey}
    */
    @Test @Timeout(60)
    public void test_49_deleteOnPermissReturns204() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 426L)
                .d("permission", "\"\"")
                .d("enabled", "-112")
                .d("note", "\"SP50d\"")
            .and().insertInto("roles", 429L)
                .d("role", "\"wQ\"")
            .and().insertInto("permissions", 428L)
                .d("permission", "\"jKeqU\"")
                .d("enabled", "-12")
            .and().insertInto("permissions_roles", 427L)
                .r("permission_id", 426L)
                .d("role_id", "1")
            .and().insertInto("permissions", 67L)
                .d("permission", "\"_EM_3438_XYZ_\"")
                .d("enabled", "-58")
                .d("note", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/_EM_3438_XYZ_")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (204) DELETE:/users/rbac/permissions/{permissionKey}
    */
    @Test @Timeout(60)
    public void test_50_deleteOnPermissReturns204() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5B8E4aGi\"")
                .d("enabled", "47")
                .d("note", "\"_EM_4925_XYZ_\"")
            .and().insertInto("users", 597L)
                .d("username", "\"XVIdtkI0P\"")
                .d("password", "\"Ij3Az\"")
                .d("name", "\"fnbSDEHEJqpeg\"")
                .d("surname", "\"RQ\"")
                .d("gender", "127")
                .d("birth_date", "\"2019-06-19\"")
                .d("enabled", "-74")
                .d("creation_dt", "\"2003-05-22 17:32:29\"")
                .d("updated_dt", "NULL")
                .d("login_dt", "\"1983-11-07 11:27:38\"")
                .d("note", "\"tUQV\"")
                .d("secured", "0")
            .and().insertInto("roles", 607L)
                .d("role", "\"_EM_5104_XYZ_\"")
            .and().insertInto("roles", 646L)
                .d("role", "\"_EM_5105_XYZ_\"")
            .and().insertInto("permissions", 645L)
                .d("permission", "\"VFZ9\"")
                .d("enabled", "-128")
            .and().insertInto("permissions_roles", 644L)
                .r("permission_id", 645L)
                .r("role_id", 607L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/5B8E4aGi")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (204) DELETE:/users/rbac/permissions/{permissionKey}
    */
    @Test @Timeout(60)
    public void test_51_deleteOnPermissReturns204() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5B8I4aGi\"")
                .d("enabled", "-4")
                .d("note", "\"qfR8CkDEk\"")
            .and().insertInto("users", 597L)
                .d("username", "\"4Yc\"")
                .d("password", "\"Ij3A\"")
                .d("name", "\"fnbSDEHEJqpe\"")
                .d("surname", "\"U\"")
                .d("gender", "NULL")
                .d("birth_date", "\"2020-01-19\"")
                .d("enabled", "0")
                .d("creation_dt", "\"2000-09-22 23:38:38\"")
                .d("updated_dt", "\"1997-10-30 03:34:08\"")
                .d("login_dt", "\"1999-05-14 07:59:36\"")
                .d("note", "\"_EM_8047_XYZ_\"")
                .d("secured", "97")
            .and().insertInto("roles", 653L)
                .d("role", "\"sbGRgSU40ToBBk\"")
            .and().insertInto("users", 655L)
                .d("username", "\"LCODe\"")
                .d("password", "\"N\"")
                .d("enabled", "-109")
                .d("creation_dt", "\"1986-05-01 03:57:38\"")
                .d("secured", "-79")
            .and().insertInto("addresses", 654L)
                .d("user_id", "1")
                .d("address", "\"1dnCO3j\"")
                .d("address2", "\"vqcpqvp5uki\"")
                .d("city", "\"mdN\"")
                .d("country", "NULL")
                .d("zip_code", "\"_EM_8062_XYZ_\"")
            .and().insertInto("users", 658L)
                .d("username", "\"_EM_8048_XYZ_\"")
                .d("password", "\"\"")
                .d("enabled", "111")
                .d("creation_dt", "\"2031-10-20 02:29:45\"")
                .d("secured", "-84")
            .and().insertInto("roles", 657L)
                .d("role", "\"CYE1R0VH2CAF\"")
            .and().insertInto("users", 660L)
                .d("username", "\"24Wr1mpYoJUQ0k\"")
                .d("password", "\"MIfuAEaoaaXwbik4\"")
                .d("enabled", "-38")
                .d("creation_dt", "\"1997-10-22 15:52:50\"")
                .d("secured", "33")
            .and().insertInto("contacts", 659L)
                .r("user_id", 597L)
                .d("email", "\"cp_pC6l15iBsB0M\"")
                .d("phone", "NULL")
                .d("skype", "NULL")
                .d("facebook", "\"GjdcSJjj0UyC_7m\"")
                .d("linkedin", "\"Ra7VmwNU0Oh\"")
                .d("website", "\"PdwNKACLFtC9:A\"")
                .d("note", "\"30Y2\"")
            .and().insertInto("roles", 663L)
                .d("role", "\"JexU2WT0S\"")
            .and().insertInto("permissions", 662L)
                .d("permission", "\"LgiGb_YPwJmC\"")
                .d("enabled", "-101")
            .and().insertInto("permissions_roles", 661L)
                .r("permission_id", 662L)
                .d("role_id", "1")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/5B8I4aGi")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_52_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5B8I4aGi\"")
                .d("enabled", "-19")
                .d("note", "\"qfR8CjDEk2\"")
            .and().insertInto("users", 597L)
                .d("username", "\"_EM_4335_XYZ_\"")
                .d("password", "\"_EM_4342_XYZ_\"")
                .d("name", "\"fnbSDEHEJqpe_\"")
                .d("surname", "NULL")
                .d("gender", "NULL")
                .d("birth_date", "\"2019-10-19\"")
                .d("enabled", "0")
                .d("creation_dt", "\"2000-05-22 17:36:38\"")
                .d("updated_dt", "NULL")
                .d("login_dt", "\"1999-05-07 07:59:36\"")
                .d("note", "\"tdUI\"")
                .d("secured", "0")
            .and().insertInto("roles", 614L)
                .d("role", "\"ZkHiVnaCNVl9m1e\"")
            .and().insertInto("permissions", 613L)
                .d("permission", "\"\"")
                .d("enabled", "-123")
            .and().insertInto("permissions_roles", 612L)
                .r("permission_id", 596L)
                .r("role_id", 614L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/users/rbac/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/5B8I4aGi")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("The permission with key 5B8I4aGi is in used (1 configuration rows)"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_53_getOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 64L)
                .d("permission", "\"Kx3lKUi6RNWFnu\"")
                .d("enabled", "0")
                .d("note", "\"_EM_474_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/users/rbac/permissions/_EM_2375_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission not found for permission key = _EM_2375_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/users/rbac/roles/{roleId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_54_getOnRoleReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_6_XYZ_")
                .get(baseUrlOfSut + "/users/rbac/roles/706")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Role not found for Id = 706"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/users/rbac/roles/{roleId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_55_getOnRoleReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_173_XYZ_")
                .get(baseUrlOfSut + "/users/rbac/roles/-6184857400158823075")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Role not found for Id = -6184857400158823075"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_56_getOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 65L)
                .d("permission", "\"7\"")
                .d("enabled", "0")
                .d("note", "\"RH\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/users/rbac/permissions/_EM_2_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission not found for permission key = _EM_2_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_57_getOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 68L)
                .d("permission", "\"bhlQy\"")
                .d("enabled", "35")
                .d("note", "\"qLxDgdCWVJ0\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/users/rbac/permissions/_EM_548_XYZ_?EMextraParam123=_EM_450_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission not found for permission key = _EM_548_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_58_getOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 129L)
                .d("permission", "\"yhlbGb\"")
                .d("enabled", "-128")
                .d("note", "\"FkI4Rx2\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_535_XYZ_")
                .get(baseUrlOfSut + "/users/rbac/permissions/_EM_534_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission not found for permission key = _EM_534_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_59_getOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 247L)
                .d("permission", "\"mPa3mI0qnnWerYO\"")
                .d("enabled", "107")
                .d("note", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/users/rbac/permissions/_EM_2_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission not found for permission key = _EM_2_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_60_getOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 285L)
                .d("permission", "\"O\"")
                .d("enabled", "31")
                .d("note", "\"bYVz3nV63k3s0\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_3_XYZ_")
                .get(baseUrlOfSut + "/users/rbac/permissions/_EM_2_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission not found for permission key = _EM_2_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_61_getOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("users", 160L)
                .d("username", "\"CPb2ipq\"")
                .d("password", "\"_EM_2878_XYZ_\"")
                .d("name", "\"rs\"")
                .d("surname", "NULL")
                .d("gender", "-77")
                .d("birth_date", "\"1947-07-15\"")
                .d("enabled", "6")
                .d("creation_dt", "\"2012-01-23 11:33:53\"")
                .d("updated_dt", "\"1979-09-03 10:38:02\"")
                .d("login_dt", "NULL")
                .d("note", "\"CGWhzOvSjSGkWRaG\"")
                .d("secured", "78")
            .and().insertInto("permissions", 161L)
                .d("permission", "\"mL4RXr77o_vVauy\"")
                .d("enabled", "2")
                .d("note", "\"NUuPZDTtqz\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/users/rbac/permissions/_EM_2877_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission not found for permission key = _EM_2877_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_62_getOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("users", 50L)
                .d("username", "\"2LUB\"")
                .d("password", "\"RKfab0\"")
                .d("name", "NULL")
                .d("surname", "\"7PoUhCR24Qm\"")
                .d("gender", "NULL")
                .d("birth_date", "\"1951-03-24\"")
                .d("enabled", "-124")
                .d("creation_dt", "\"2037-06-03 23:16:21\"")
                .d("updated_dt", "\"1975-09-08 04:20:49\"")
                .d("login_dt", "\"1985-01-31 11:54:40\"")
                .d("note", "\"_EM_5740_XYZ_\"")
                .d("secured", "91")
            .and().insertInto("roles", 51L)
                .d("role", "\"7EPtPJKdNR1\"")
            .and().insertInto("users", 53L)
                .d("username", "\"-\"")
                .d("password", "\"_EM_5741_XYZ_\"")
                .d("enabled", "-116")
                .d("creation_dt", "\"2033-09-11 03:05:50\"")
                .d("secured", "55")
            .and().insertInto("users", 56L)
                .d("username", "\"wt7KC9Tk7QGpS\"")
                .d("password", "\"MN8Gan1q\"")
                .d("enabled", "-66")
                .d("creation_dt", "\"2003-08-05 15:29:29\"")
                .d("secured", "16")
            .and().insertInto("roles", 55L)
                .d("role", "\"Ap2nXidkDQTgacv\"")
            .and().insertInto("users_roles", 54L)
                .r("user_id", 56L)
                .d("role_id", "1")
            .and().insertInto("permissions", 57L)
                .d("permission", "\"\"")
                .d("enabled", "52")
                .d("note", "NULL")
            .and().insertInto("roles", 102L)
                .d("role", "\"gzVNj\"")
            .and().insertInto("permissions", 101L)
                .d("permission", "\"85fI9\"")
                .d("enabled", "48")
            .and().insertInto("permissions_roles", 100L)
                .r("permission_id", 57L)
                .d("role_id", "2")
            .and().insertInto("users", 104L)
                .d("username", "\"_EM_5743_XYZ_\"")
                .d("password", "\"slrBjm\"")
                .d("enabled", "1")
                .d("creation_dt", "\"2005-04-19 08:32:10\"")
                .d("secured", "-5")
            .and().insertInto("contacts", 103L)
                .r("user_id", 53L)
                .d("email", "\"_EM_5744_XYZ_\"")
                .d("phone", "\"tv\"")
                .d("skype", "\"ioB0msyG4tVzT1f\"")
                .d("facebook", "\"5l97W\"")
                .d("linkedin", "\"6wjOZesT\"")
                .d("website", "\"Ymd8\"")
                .d("note", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/users/rbac/permissions/_EM_5739_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission not found for permission key = _EM_5739_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_63_getOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5B8I4aGi\"")
                .d("enabled", "0")
                .d("note", "\"_EM_7172_XYZ_\"")
            .and().insertInto("users", 597L)
                .d("username", "\"4Yc\"")
                .d("password", "\"5\\E(r|R)(r|R)(l|L)(s|S)(a|A)\\Q1\\E(t|T)(k|K)(w|W)(y|Y)(t|T)\\Q+\\E(l|L)(y|Y)\\Q9\\E(u|U)(q|Q)(r|R)(h|H)(p|P)(s|S)(r|R)(v|V)(e|E)(a|A)\\Q2\\E(a|A)(b|B)(y|Y)\\Q1\\E(k|K)(r|R)\\Q8\\E(h|H)(m|M)(u|U)(c|C)\\Q5\\E(g|G)(f|F)\\Q+\\E(s|S)\\Q=\"")
                .d("name", "\"fnbSDEHEJqpegF\"")
                .d("surname", "\"S\"")
                .d("gender", "NULL")
                .d("birth_date", "\"2019-06-19\"")
                .d("enabled", "-96")
                .d("creation_dt", "\"2003-06-22 19:20:38\"")
                .d("updated_dt", "\"1997-10-30 03:34:08\"")
                .d("login_dt", "\"1999-05-07 07:59:36\"")
                .d("note", "\"_EM_7173_XYZ_\"")
                .d("secured", "121")
            .and().insertInto("roles", 653L)
                .d("role", "\"_EM_5366_XYZ_\"")
            .and().insertInto("users", 722L)
                .d("username", "\"aGo21m\"")
                .d("password", "\"RD7b_n0\"")
                .d("enabled", "0")
                .d("creation_dt", "\"2007-01-02 16:57:51\"")
                .d("secured", "-92")
            .and().insertInto("users", 725L)
                .d("username", "\"2CzWtdw3\"")
                .d("password", "\"SEKW_IY\"")
                .d("enabled", "-128")
                .d("creation_dt", "\"2010-04-12 23:19:22\"")
                .d("secured", "61")
            .and().insertInto("roles", 724L)
                .d("role", "\"MFZ3Yq\"")
            .and().insertInto("users_roles", 723L)
                .r("user_id", 722L)
                .d("role_id", "1")
            .and().insertInto("users", 727L)
                .d("username", "\"TlOur9k8km\"")
                .d("password", "\"U\"")
                .d("enabled", "118")
                .d("creation_dt", "\"2008-06-09 09:06:29\"")
                .d("secured", "-84")
            .and().insertInto("contacts", 726L)
                .r("user_id", 725L)
                .d("email", "\"_EM_5369_XYZ_\"")
                .d("phone", "\"_EM_5373_XYZ_\"")
                .d("skype", "\"4DJUFOF7gJH1prIH\"")
                .d("facebook", "\"_EM_7174_XYZ_\"")
                .d("linkedin", "\"IOrwpZA\"")
                .d("website", "\"Bk8gDpX\"")
                .d("note", "\"G11s\"")
            .and().insertInto("roles", 730L)
                .d("role", "\"_EM_5374_XYZ_\"")
            .and().insertInto("permissions", 729L)
                .d("permission", "\"Nfezx\"")
                .d("enabled", "0")
            .and().insertInto("permissions_roles", 728L)
                .r("permission_id", 596L)
                .d("role_id", "2")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/users/rbac/permissions/_EM_7171_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission not found for permission key = _EM_7171_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_64_getOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5B8I4aGi\"")
                .d("enabled", "0")
                .d("note", "\"qfR8CkDEk\"")
            .and().insertInto("users", 597L)
                .d("username", "\"4Yc\"")
                .d("password", "\"_EM_5364_XYZ_\"")
                .d("name", "\"fn`SDEHEHqpeg\"")
                .d("surname", "\"R\"")
                .d("gender", "120")
                .d("birth_date", "\"2019-06-19\"")
                .d("enabled", "-82")
                .d("creation_dt", "\"2000-05-22 15:36:38\"")
                .d("updated_dt", "\"1997-06-16 11:31:29\"")
                .d("login_dt", "\"1999-06-07 07:51:20\"")
                .d("note", "\"_EM_5365_XYZ_\"")
                .d("secured", "117")
            .and().insertInto("roles", 653L)
                .d("role", "\"_EM_5366_XYZ_\"")
            .and().insertInto("users", 722L)
                .d("username", "\"aCo21m\"")
                .d("password", "\"RD7b_n0\"")
                .d("enabled", "9")
                .d("creation_dt", "\"2007-04-02 16:57:51\"")
                .d("secured", "-62")
            .and().insertInto("addresses", 721L)
                .d("user_id", "1")
                .d("address", "\"_EM_9123_XYZ_\"")
                .d("address2", "\"w0XkKsf7ZUVnrR\"")
                .d("city", "\"f7Basx3\"")
                .d("country", "\"bNlg3bHB\"")
                .d("zip_code", "NULL")
            .and().insertInto("users", 725L)
                .d("username", "\"2C|Wtdw3\"")
                .d("password", "\"MMKcDwI\"")
                .d("enabled", "-126")
                .d("creation_dt", "\"2009-04-28 15:15:22\"")
                .d("secured", "62")
            .and().insertInto("roles", 724L)
                .d("role", "\"LFZ3Yq\"")
            .and().insertInto("users", 727L)
                .d("username", "\"TlOur9k8km\"")
                .d("password", "\"Q\"")
                .d("enabled", "118")
                .d("creation_dt", "\"2008-10-09 09:29:18\"")
                .d("secured", "-84")
            .and().insertInto("contacts", 726L)
                .r("user_id", 597L)
                .d("email", "\"V\"")
                .d("phone", "\"WQpfHD\"")
                .d("skype", "NULL")
                .d("facebook", "\"tKmIdrGJqoB\"")
                .d("linkedin", "\"IMrwpZ\"")
                .d("website", "\"s25mIw8_\"")
                .d("note", "\"G11s\"")
            .and().insertInto("roles", 730L)
                .d("role", "\"\"_EM_9113_XYZ_\"\"")
            .and().insertInto("permissions", 729L)
                .d("permission", "\"UUUzx\"")
                .d("enabled", "0")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/users/rbac/permissions/_EM_10037_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission not found for permission key = _EM_10037_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (404) POST:/users/{id}/roles/{roleId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_65_postOnUserRoleWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/users/760/roles/654?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("User not found with Id = 760"));
    }
    
    
    /**
    * Calls:
    * (404) POST:/users/{id}/roles/{roleId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_66_postOnRoleReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5B8I4aG\"")
                .d("enabled", "-4")
                .d("note", "\"qfR8CkDE\"")
            .and().insertInto("users", 597L)
                .d("username", "\"4Yc\"")
                .d("password", "\"_EM_5364_XYZ_\"")
                .d("name", "\"fnbSDEHEJqpegF\"")
                .d("surname", "\"S\"")
                .d("gender", "120")
                .d("birth_date", "\"2019-06-19\"")
                .d("enabled", "-90")
                .d("creation_dt", "\"2003-06-22 17:36:38\"")
                .d("updated_dt", "\"1997-06-16 03:34:08\"")
                .d("login_dt", "\"1999-05-07 07:59:36\"")
                .d("note", "\"_EM_5361_XYZ_w\"")
                .d("secured", "121")
            .and().insertInto("roles", 653L)
                .d("role", "\"\"126\"\"")
            .and().insertInto("users", 722L)
                .d("username", "\"aGo21m\"")
                .d("password", "\"RDUb_UU\"")
                .d("enabled", "11")
                .d("creation_dt", "\"2007-04-02 16:57:51\"")
                .d("secured", "-92")
            .and().insertInto("addresses", 721L)
                .d("user_id", "1")
                .d("address", "\"\"")
                .d("address2", "\"iU74n\"")
                .d("city", "\"f7Basz3\"")
                .d("country", "\"bMlg3UH:\"")
                .d("zip_code", "\"CVbtdH\"")
            .and().insertInto("users", 725L)
                .d("username", "\"2CzWtdw3\"")
                .d("password", "\"SEKW_IZN\"")
                .d("enabled", "-96")
                .d("creation_dt", "\"2009-04-12 23:19:22\"")
                .d("secured", "61")
            .and().insertInto("roles", 724L)
                .d("role", "\"MFZ3Yq\"")
            .and().insertInto("users_roles", 723L)
                .r("user_id", 725L)
                .d("role_id", "1")
            .and().insertInto("users", 727L)
                .d("username", "\"TlOur9k8km\"")
                .d("password", "\"_EM_9581_XYZ_\"")
                .d("enabled", "127")
                .d("creation_dt", "\"2008-06-01 09:29:30\"")
                .d("secured", "-80")
            .and().insertInto("contacts", 726L)
                .r("user_id", 725L)
                .d("email", "\"_EM_5369_XYZ_\"")
                .d("phone", "\"_EM_5373_XYZ_\"")
                .d("skype", "\"4DJUFOF7gJH1prIH\"")
                .d("facebook", "\"tKmIdrGJqoB\"")
                .d("linkedin", "\"IMrwpZA\"")
                .d("website", "\"Bk8gDpX\"")
                .d("note", "\"G11s\"")
            .and().insertInto("roles", 730L)
                .d("role", "\"_EM_5374_XYZ_\"")
            .and().insertInto("permissions", 729L)
                .d("permission", "\"Nfezx\"")
                .d("enabled", "-128")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/users/-3750/roles/1018")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("User not found with Id = -3750"));
    }
    
    
    /**
    * Calls:
    * (404) POST:/users/{id}/roles/{roleId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_67_postOnRoleReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5B8I4aGi\"")
                .d("enabled", "-19")
                .d("note", "\"qfR8CjDEk2\"")
            .and().insertInto("users", 597L)
                .d("username", "\"_EM_4335_XYZ_\"")
                .d("password", "\"_EM_4342_XYZ_\"")
                .d("name", "\"fnbSDEHEJqpe_\"")
                .d("surname", "NULL")
                .d("gender", "NULL")
                .d("birth_date", "\"2019-10-19\"")
                .d("enabled", "0")
                .d("creation_dt", "\"2000-05-22 17:36:38\"")
                .d("updated_dt", "NULL")
                .d("login_dt", "\"1999-05-07 07:59:36\"")
                .d("note", "\"tdUI\"")
                .d("secured", "0")
            .and().insertInto("roles", 614L)
                .d("role", "\"ZkHiVnaCNVl9m1e\"")
            .and().insertInto("permissions", 613L)
                .d("permission", "\"\"")
                .d("enabled", "-123")
            .and().insertInto("permissions_roles", 612L)
                .r("permission_id", 596L)
                .r("role_id", 614L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/users/-1702/roles/-3879")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("User not found with Id = -1702"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/{id}/roles/{roleId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_68_deleteOnRoleReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("users", 212L)
                .d("username", "\"OqqfM\"")
                .d("password", "\"U3UXbHgBsLjUMU\"")
                .d("name", "\"_EM_8634_XYZ_\"")
                .d("surname", "NULL")
                .d("gender", "0")
                .d("birth_date", "\"1981-06-04\"")
                .d("enabled", "-76")
                .d("creation_dt", "\"2037-01-17 03:25:29\"")
                .d("updated_dt", "\"1995-05-25 16:21:56\"")
                .d("login_dt", "NULL")
                .d("note", "\"xbCAzAJtxvlEBEy\"")
                .d("secured", "115")
            .and().insertInto("roles", 456L)
                .d("role", "\"_EM_8635_XYZ_\"")
            .and().insertInto("users", 464L)
                .d("username", "\"CFz0WEX\"")
                .d("password", "\"_wFhyGA\"")
                .d("enabled", "127")
                .d("creation_dt", "\"1985-11-08 11:27:52\"")
                .d("secured", "110")
            .and().insertInto("contacts", 463L)
                .r("user_id", 212L)
                .d("email", "\"FDbTlo\"")
                .d("phone", "\"AYNF3WbZCF\"")
                .d("skype", "\"W\"")
                .d("facebook", "NULL")
                .d("linkedin", "\"f;UHYafeRX_8S\"")
                .d("website", "\"_EM_8636_XYZ_\"")
                .d("note", "\"C2woH\"")
            .and().insertInto("permissions", 1322L)
                .d("permission", "\"2\"")
                .d("enabled", "-128")
                .d("note", "\"dJCw\"")
            .and().insertInto("roles", 1342L)
                .d("role", "\"Kc6TtzOq\"")
            .and().insertInto("permissions", 1341L)
                .d("permission", "\"8SjGtn3\"")
                .d("enabled", "16")
            .and().insertInto("permissions_roles", 1340L)
                .r("permission_id", 1322L)
                .d("role_id", "1")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/{id}/roles/{roleId}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/1/roles/500")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Role not found with Id = 500"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_69_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5C8I4_Gi\"")
                .d("enabled", "109")
                .d("note", "\"_EM_5358_XYZ_\"")
            .and().insertInto("users", 597L)
                .d("username", "\"_EM_4395_XYZ_\"")
                .d("password", "\"_EM_5324_XYZ_j\"")
                .d("name", "NULL")
                .d("surname", "\"_EM_5327_XYZ_\"")
                .d("gender", "-5")
                .d("birth_date", "\"2019-08-31\"")
                .d("enabled", "0")
                .d("creation_dt", "\"2003-06-14 17:36:38\"")
                .d("updated_dt", "\"1997-10-30 03:34:08\"")
                .d("login_dt", "\"1999-03-07 05:27:37\"")
                .d("note", "\"_EM_5353_XYZ_\"")
                .d("secured", "-5")
            .and().insertInto("roles", 607L)
                .d("role", "\"G\"")
            .and().insertInto("roles", 718L)
                .d("role", "\"_EM_5359_XYZ_\"")
            .and().insertInto("permissions", 717L)
                .d("permission", "\"SaUeUUUzuUM[R\"")
                .d("enabled", "70")
            .and().insertInto("permissions_roles", 716L)
                .r("permission_id", 596L)
                .r("role_id", 718L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/_EM_5323_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission _EM_5323_XYZ_ not found"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/roles/{roleId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_70_deleteOnRoleReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/roles/{roleId}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/roles/879")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Role not found for Id = 879 cannot be deleted"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/{id}/roles/{roleId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_71_deleteOnRoleReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/{id}/roles/{roleId}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/103/roles/3184733028249599173?EMextraParam123=_EM_7_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("User not found with Id = 103"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/{id}/roles/{roleId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_72_deleteOnRoleReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/{id}/roles/{roleId}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/13/roles/-4905275998070721705?EMextraParam123=_EM_635_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("User not found with Id = 13"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/roles/{roleId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_73_deleteOnRoleReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/roles/{roleId}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/roles/-1808423009?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Role not found for Id = -1808423009 cannot be deleted"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/{id}/roles/{roleId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_74_deleteOnRoleReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/{id}/roles/{roleId}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/users/-1383345956/roles/-7467162103759257270")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("User not found with Id = -1383345956"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_75_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/users/rbac/permissions/_EM_2495_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission _EM_2495_XYZ_ not found"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_76_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/users/rbac/permissions/_EM_2755_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission _EM_2755_XYZ_ not found"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_77_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 180L)
                .d("permission", "\"VmPuHUa60_12HRzg\"")
                .d("enabled", "-28")
                .d("note", "\"fR0Mo_g_r\"")
            .and().insertInto("roles", 422L)
                .d("role", "\"7\"")
            .and().insertInto("permissions", 421L)
                .d("permission", "\"_EM_3425_XYZ_\"")
                .d("enabled", "-76")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/_EM_1886_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission _EM_1886_XYZ_ not found"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_78_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 423L)
                .d("permission", "\"fbx3YZe\"")
                .d("enabled", "-45")
                .d("note", "\"hxMMUQ\"")
            .and().insertInto("roles", 424L)
                .d("role", "\"GsTMS\"")
            .and().insertInto("users", 425L)
                .d("username", "\"GrCj5fkkjcvG\"")
                .d("password", "\"K2Hy4FdVybHIqiTk\"")
                .d("name", "\"\"")
                .d("surname", "\"7WSa\"")
                .d("gender", "-45")
                .d("birth_date", "NULL")
                .d("enabled", "-111")
                .d("creation_dt", "\"1986-02-02 09:11:35\"")
                .d("updated_dt", "\"2015-07-08 05:22:00\"")
                .d("login_dt", "NULL")
                .d("note", "\"\"")
                .d("secured", "-84")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/users/rbac/permissions/_EM_886_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission _EM_886_XYZ_ not found"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_79_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 180L)
                .d("permission", "\"VmPuHUa60_12HRrg\"")
                .d("enabled", "-28")
                .d("note", "\"fR0Mo_g_r\"")
            .and().insertInto("roles", 432L)
                .d("role", "\"CJqL]vM0p\"")
            .and().insertInto("permissions", 431L)
                .d("permission", "\"3i0M%J2\"")
                .d("enabled", "-60")
            .and().insertInto("permissions_roles", 430L)
                .d("permission_id", "1")
                .r("role_id", 432L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/_EM_1886_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission _EM_1886_XYZ_ not found"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_80_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5B8I4aHi\"")
                .d("enabled", "0")
                .d("note", "\"qfR6UjEUlU\"")
            .and().insertInto("users", 597L)
                .d("username", "\"_EM_4335_XYZ_\"")
                .d("password", "\"_EM_4342_XYZ_\"")
                .d("name", "\"_EM_4346_XYZ_\"")
                .d("surname", "NULL")
                .d("gender", "NULL")
                .d("birth_date", "\"2019-10-19\"")
                .d("enabled", "-64")
                .d("creation_dt", "\"2000-05-22 17:36:38\"")
                .d("updated_dt", "NULL")
                .d("login_dt", "\"1999-05-07 07:59:36\"")
                .d("note", "\"tdUI\"")
                .d("secured", "0")
            .and().insertInto("roles", 600L)
                .d("role", "\"6\"")
            .and().insertInto("permissions", 599L)
                .d("permission", "\"ws7LwyGVwl7pI\"")
                .d("enabled", "-29")
            .and().insertInto("permissions_roles", 598L)
                .r("permission_id", 596L)
                .r("role_id", 600L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/_EM_3672_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission _EM_3672_XYZ_ not found"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_81_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"42\"")
                .d("enabled", "0")
                .d("note", "\"qNfR8CjDEk2\"")
            .and().insertInto("users", 597L)
                .d("username", "\"_EM_4335_XYZ_\"")
                .d("password", "\"4mT2MFX5y1v\"")
                .d("name", "\"fnbSDEHEJqpe_\"")
                .d("surname", "NULL")
                .d("gender", "NULL")
                .d("birth_date", "\"1900-06-19\"")
                .d("enabled", "-128")
                .d("creation_dt", "\"2000-05-22 17:36:38\"")
                .d("updated_dt", "\"1997-10-30 03:34:08\"")
                .d("login_dt", "\"1970-09-07 07:59:36\"")
                .d("note", "\"_EM_4350_XYZ_\"")
                .d("secured", "0")
            .and().insertInto("roles", 600L)
                .d("role", "\"6\"")
            .and().insertInto("permissions", 599L)
                .d("permission", "\"ws7LwyGVwl7pI\"")
                .d("enabled", "-61")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/_EM_3672_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission _EM_3672_XYZ_ not found"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_82_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5B8I4aGi\"")
                .d("enabled", "-19")
                .d("note", "\"qfR8CjDEk2\"")
            .and().insertInto("users", 597L)
                .d("username", "\"_EM_4335_XYZ_\"")
                .d("password", "\"_EM_4388_XYZ_\"")
                .d("name", "\"_EM_4389_XYZ_\"")
                .d("surname", "\"R\"")
                .d("gender", "120")
                .d("birth_date", "\"2011-10-19\"")
                .d("enabled", "0")
                .d("creation_dt", "\"2000-05-22 17:36:38\"")
                .d("updated_dt", "NULL")
                .d("login_dt", "\"1999-05-07 07:59:36\"")
                .d("note", "\"tdUI\"")
                .d("secured", "-2")
            .and().insertInto("roles", 606L)
                .d("role", "\"\"")
            .and().insertInto("permissions", 605L)
                .d("permission", "\"8n\"")
                .d("enabled", "34")
            .and().insertInto("permissions_roles", 604L)
                .r("permission_id", 605L)
                .r("role_id", 606L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/_EM_3672_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission _EM_3672_XYZ_ not found"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_83_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5B8I4aGi\"")
                .d("enabled", "0")
                .d("note", "\"_EM_4720_XYZ_\"")
            .and().insertInto("users", 597L)
                .d("username", "\"_EM_4395_XYZ_\"")
                .d("password", "\"Ij3A{\"")
                .d("name", "\"fnbSDEHEJqpeg\"")
                .d("surname", "\"R\"")
                .d("gender", "120")
                .d("birth_date", "\"2019-06-19\"")
                .d("enabled", "-74")
                .d("creation_dt", "\"2000-05-22 17:36:38\"")
                .d("updated_dt", "NULL")
                .d("login_dt", "\"1999-03-07 07:27:38\"")
                .d("note", "\"tdOI\"")
                .d("secured", "0")
            .and().insertInto("roles", 607L)
                .d("role", "\"_EM_4721_XYZ_\"")
            .and().insertInto("roles", 610L)
                .d("role", "\"Ui6njNmf_jya\"")
            .and().insertInto("permissions", 609L)
                .d("permission", "\"5hqrEyHG26jdCPU6\"")
            .and().insertInto("permissions_roles", 608L)
                .r("permission_id", 609L)
                .r("role_id", 607L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/_EM_4719_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission _EM_4719_XYZ_ not found"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_84_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 180L)
                .d("permission", "\"VmPuHUa60_12HRrg\"")
                .d("enabled", "-28")
                .d("note", "\"fR0Mo_g_r\"")
            .and().insertInto("roles", 636L)
                .d("role", "\"_EM_4467_XYZ_\"")
            .and().insertInto("permissions", 635L)
                .d("permission", "\"8S4BGBBo4nj\"")
                .d("enabled", "-15")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/_EM_1886_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission _EM_1886_XYZ_ not found"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_85_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5B8I4aGin\"")
                .d("enabled", "0")
                .d("note", "\"_EM_4490_XYZ_\"")
            .and().insertInto("users", 597L)
                .d("username", "\"_EM_4335_XYZ_\"")
                .d("password", "\"_EM_4342_XYZ_\"")
                .d("name", "\"fnbSDEHEJqpe_\"")
                .d("surname", "\"R\"")
                .d("gender", "NULL")
                .d("birth_date", "\"2019-10-19\"")
                .d("enabled", "-16")
                .d("creation_dt", "\"2000-05-22 17:36:38\"")
                .d("updated_dt", "NULL")
                .d("login_dt", "\"1999-05-07 07:59:36\"")
                .d("note", "\"tdUI\"")
                .d("secured", "0")
            .and().insertInto("roles", 614L)
                .d("role", "\"ZkHiVnaCNVl9m1e\"")
            .and().insertInto("permissions", 613L)
                .d("permission", "\"\"")
                .d("enabled", "-123")
            .and().insertInto("permissions_roles", 612L)
                .r("permission_id", 596L)
                .r("role_id", 614L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/_EM_3672_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission _EM_3672_XYZ_ not found"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_86_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"_EM_4514_XYZ_\"")
                .d("enabled", "61")
                .d("note", "\"qfR:CkDFk\"")
            .and().insertInto("users", 597L)
                .d("username", "\",Yc\"")
                .d("password", "\"Ij3Az\"")
                .d("name", "NULL")
                .d("surname", "NULL")
                .d("gender", "120")
                .d("birth_date", "\"2019-06-19\"")
                .d("enabled", "-82")
                .d("creation_dt", "\"2000-05-22 17:36:38\"")
                .d("updated_dt", "\"1997-10-30 03:34:08\"")
                .d("login_dt", "\"2003-01-07 07:59:36\"")
                .d("note", "\"tdOM\"")
                .d("secured", "0")
            .and().insertInto("roles", 649L)
                .d("role", "\"eSURLjAhzC\"")
            .and().insertInto("permissions", 648L)
                .d("permission", "\"XV4v2yps7WoOd9\"")
                .d("enabled", "114")
            .and().insertInto("permissions_roles", 647L)
                .r("permission_id", 648L)
                .r("role_id", 649L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/_EM_3672_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission _EM_3672_XYZ_ not found"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_87_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5B8I4aG\"")
                .d("enabled", "45")
                .d("note", "\"qfR8CkDEj\"")
            .and().insertInto("users", 597L)
                .d("username", "\"4Yc\"")
                .d("password", "\"Ij3Az\"")
                .d("name", "NULL")
                .d("surname", "\"R\"")
                .d("gender", "120")
                .d("birth_date", "\"2019-06-19\"")
                .d("enabled", "-82")
                .d("creation_dt", "\"2000-05-22 17:36:38\"")
                .d("updated_dt", "\"1997-10-30 03:34:08\"")
                .d("login_dt", "\"1999-05-07 07:59:36\"")
                .d("note", "NULL")
                .d("secured", "113")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/_EM_3672_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission _EM_3672_XYZ_ not found"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_88_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5B8I4aGiR\"")
                .d("enabled", "47")
                .d("note", "\"qfR8CkDEiI\"")
            .and().insertInto("users", 597L)
                .d("username", "\"XTIdtkI0P\"")
                .d("password", "\"Ij3Uz\"")
                .d("name", "\"fnbSDEHEJqteg\"")
                .d("surname", "\"R\"")
                .d("gender", "NULL")
                .d("birth_date", "\"2019-02-16\"")
                .d("enabled", "-42")
                .d("creation_dt", "\"2003-06-21 17:28:29\"")
                .d("updated_dt", "NULL")
                .d("login_dt", "\"1999-03-07 11:29:38\"")
                .d("note", "\"_EM_4708_XYZ_\"")
                .d("secured", "32")
            .and().insertInto("roles", 607L)
                .d("role", "\"G\"")
            .and().insertInto("roles", 646L)
                .d("role", "\"fjIQJSn1\"")
            .and().insertInto("permissions", 645L)
                .d("permission", "\"GDv0mF\"")
                .d("enabled", "0")
            .and().insertInto("permissions_roles", 644L)
                .r("permission_id", 596L)
                .r("role_id", 646L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/_EM_3672_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission _EM_3672_XYZ_ not found"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_89_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"_EM_4815_XYZ_\"")
                .d("enabled", "47")
                .d("note", "\"qfR8CkDEkI\"")
            .and().insertInto("users", 597L)
                .d("username", "\"XTIdtkI0P\"")
                .d("password", "\"UUUAz\"")
                .d("name", "\"fnbSDEHEJqpeg\"")
                .d("surname", "\"R\"")
                .d("gender", "127")
                .d("birth_date", "\"2015-02-19\"")
                .d("enabled", "-74")
                .d("creation_dt", "\"2000-05-22 11:24:29\"")
                .d("updated_dt", "\"1997-10-30 03:34:08\"")
                .d("login_dt", "\"1999-03-07 07:27:38\"")
                .d("note", "\"tdOI\"")
                .d("secured", "16")
            .and().insertInto("roles", 607L)
                .d("role", "\"_EM_4816_XYZ_\"")
            .and().insertInto("roles", 646L)
                .d("role", "\"jjIQJSn1\"")
            .and().insertInto("permissions", 645L)
                .d("permission", "\"VJU9\"")
                .d("enabled", "-49")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/_EM_3672_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission _EM_3672_XYZ_ not found"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_90_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5B8I4aGi\"")
                .d("enabled", "47")
                .d("note", "\"qfR8CkDEkI\"")
            .and().insertInto("users", 597L)
                .d("username", "\"XTIdtkI0P\"")
                .d("password", "\"Ij3Az\"")
                .d("name", "NULL")
                .d("surname", "\"N\"")
                .d("gender", "111")
                .d("birth_date", "\"2019-06-19\"")
                .d("enabled", "-74")
                .d("creation_dt", "\"2000-05-22 17:32:38\"")
                .d("updated_dt", "NULL")
                .d("login_dt", "\"1970-01-03 09:27:38\"")
                .d("note", "\"tdOI\"")
                .d("secured", "16")
            .and().insertInto("roles", 607L)
                .d("role", "\"G\"")
            .and().insertInto("roles", 646L)
                .d("role", "\"jjIQJSn1M\"")
            .and().insertInto("permissions", 645L)
                .d("permission", "\"UFZ9\"")
                .d("enabled", "-49")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/_EM_3672_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission _EM_3672_XYZ_ not found"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_91_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5B8I4aGi\"")
                .d("enabled", "45")
                .d("note", "\"qfR8CkDEkI\"")
            .and().insertInto("users", 597L)
                .d("username", "\"zBcbalLZ\"")
                .d("password", "\"Ij3A{\"")
                .d("name", "NULL")
                .d("surname", "NULL")
                .d("gender", "0")
                .d("birth_date", "\"2019-06-19\"")
                .d("enabled", "-74")
                .d("creation_dt", "\"2000-05-22 17:36:38\"")
                .d("updated_dt", "NULL")
                .d("login_dt", "\"1999-03-07 07:27:38\"")
                .d("note", "\"tdOI\"")
                .d("secured", "-8")
            .and().insertInto("roles", 607L)
                .d("role", "\"G\"")
            .and().insertInto("roles", 693L)
                .d("role", "\"La\"")
            .and().insertInto("permissions", 692L)
                .d("permission", "\"n55yv44kXg_Zq0P8\"")
                .d("enabled", "-101")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/_EM_3672_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission _EM_3672_XYZ_ not found"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_92_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5B8I4aGi\"")
                .d("enabled", "45")
                .d("note", "\"qfR8CkDEkI\"")
            .and().insertInto("users", 597L)
                .d("username", "\"_EM_4395_XYZ_\"")
                .d("password", "\"Ij3A{\"")
                .d("name", "NULL")
                .d("surname", "NULL")
                .d("gender", "120")
                .d("birth_date", "\"2019-06-19\"")
                .d("enabled", "-74")
                .d("creation_dt", "\"2000-05-22 17:36:38\"")
                .d("updated_dt", "NULL")
                .d("login_dt", "\"1999-03-07 07:27:38\"")
                .d("note", "NULL")
                .d("secured", "0")
            .and().insertInto("roles", 607L)
                .d("role", "\"G\"")
            .and().insertInto("roles", 702L)
                .d("role", "\"rFK6z\"")
            .and().insertInto("permissions", 701L)
                .d("permission", "\"SRngiUnp\"")
                .d("enabled", "20")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/_EM_3672_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission _EM_3672_XYZ_ not found"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_93_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5B8I4aGi\"")
                .d("enabled", "47")
                .d("note", "\"qfR@CkDEkI\"")
            .and().insertInto("users", 597L)
                .d("username", "\"XTIdtkI0P\"")
                .d("password", "\"Ij3Az\"")
                .d("name", "\"fnbSDEHEJqpeg\"")
                .d("surname", "\"R\"")
                .d("gender", "127")
                .d("birth_date", "\"1955-06-19\"")
                .d("enabled", "-42")
                .d("creation_dt", "\"2000-05-22 17:32:38\"")
                .d("updated_dt", "\"1997-10-30 03:34:08\"")
                .d("login_dt", "\"1999-02-07 07:27:38\"")
                .d("note", "\"tdOI\"")
                .d("secured", "32")
            .and().insertInto("roles", 607L)
                .d("role", "\"G\"")
            .and().insertInto("roles", 646L)
                .d("role", "\"jjIQJSn)\"")
            .and().insertInto("permissions", 645L)
                .d("permission", "\"VFZ9Y\"")
                .d("enabled", "-49")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/_EM_3672_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission _EM_3672_XYZ_ not found"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_94_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5BUI4_Uq\"")
                .d("enabled", "45")
                .d("note", "\"_EM_5320_XYZ_\"")
            .and().insertInto("users", 597L)
                .d("username", "\"_EM_4395_XYZ_\"")
                .d("password", "\"Ij3I{\"")
                .d("name", "NULL")
                .d("surname", "\"R\"")
                .d("gender", "120")
                .d("birth_date", "\"2019-06-16\"")
                .d("enabled", "-74")
                .d("creation_dt", "\"2000-01-22 11:29:38\"")
                .d("updated_dt", "\"1997-10-30 03:34:08\"")
                .d("login_dt", "\"1999-03-16 07:27:38\"")
                .d("note", "\"tdOI\"")
                .d("secured", "0")
            .and().insertInto("roles", 607L)
                .d("role", "\"K0\"")
            .and().insertInto("roles", 715L)
                .d("role", "\"Hl6BEVjdqbY\"")
            .and().insertInto("permissions", 714L)
                .d("permission", "\"UUUURIUqe\"")
                .d("enabled", "9")
            .and().insertInto("permissions_roles", 713L)
                .r("permission_id", 596L)
                .d("role_id", "2")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/_EM_5316_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission _EM_5316_XYZ_ not found"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_95_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5C8I4aG\"")
                .d("enabled", "45")
                .d("note", "\"sURUCkUEU\"")
            .and().insertInto("users", 597L)
                .d("username", "\"_EM_4395_XYZ_\"")
                .d("password", "\"_EM_5324_XYZ_\"")
                .d("name", "\"fnaSDEHEJUpUf\"")
                .d("surname", "\"_EM_5327_X]^_\"")
                .d("gender", "-1")
                .d("birth_date", "\"2019-08-31\"")
                .d("enabled", "0")
                .d("creation_dt", "\"2003-02-14 17:36:38\"")
                .d("updated_dt", "NULL")
                .d("login_dt", "\"1999-03-07 07:27:38\"")
                .d("note", "\"tdOI\"")
                .d("secured", "-1")
            .and().insertInto("roles", 607L)
                .d("role", "\"G\"")
            .and().insertInto("roles", 718L)
                .d("role", "\"kUUhBt90UbP\"")
            .and().insertInto("permissions", 717L)
                .d("permission", "\"SaUeUUUzuUMWR\"")
                .d("enabled", "70")
            .and().insertInto("permissions_roles", 716L)
                .r("permission_id", 596L)
                .d("role_id", "1")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/_EM_5323_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission _EM_5323_XYZ_ not found"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_96_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5B8I4aGm\"")
                .d("enabled", "0")
                .d("note", "\"qfR8CkDEk\"")
            .and().insertInto("users", 597L)
                .d("username", "\"_EM_7351_XYZ_\"")
                .d("password", "\"Ij3Az\"")
                .d("name", "\"fnbSDEHEJqpeg\"")
                .d("surname", "\"V\"")
                .d("gender", "NULL")
                .d("birth_date", "\"2019-07-19\"")
                .d("enabled", "-90")
                .d("creation_dt", "\"2000-05-22 17:36:38\"")
                .d("updated_dt", "\"1993-08-30 03:34:08\"")
                .d("login_dt", "\"1970-06-16 11:29:29\"")
                .d("note", "\"tUOI\"")
                .d("secured", "113")
            .and().insertInto("roles", 653L)
                .d("role", "\"PC7z1hiKqkK\"")
            .and().insertInto("users", 655L)
                .d("username", "\"LCOEe\"")
                .d("password", "\"\"")
                .d("enabled", "-128")
                .d("creation_dt", "\"1986-05-01 03:57:38\"")
                .d("secured", "-79")
            .and().insertInto("addresses", 654L)
                .r("user_id", 655L)
                .d("address", "\"iytvE1zxx5ZLR_H\"")
                .d("address2", "NULL")
                .d("city", "\"mdN\"")
                .d("country", "\"t0\"")
                .d("zip_code", "\"ahtWKz1HE\"")
            .and().insertInto("users", 658L)
                .d("username", "\"j8DAC37hPtFng\"")
                .d("password", "\"\"")
                .d("enabled", "119")
                .d("creation_dt", "\"2031-10-16 01:52:00\"")
                .d("secured", "-85")
            .and().insertInto("roles", 657L)
                .d("role", "\"CYD1R0VH2CAFd\"")
            .and().insertInto("users_roles", 656L)
                .r("user_id", 655L)
                .r("role_id", 653L)
            .and().insertInto("users", 660L)
                .d("username", "\"24Wr1mpYoJUQ0k\"")
                .d("password", "\"MIftUEUoUaXUdil4\"")
                .d("enabled", "-118")
                .d("creation_dt", "\"1997-10-22 17:52:50\"")
                .d("secured", "33")
            .and().insertInto("contacts", 659L)
                .r("user_id", 658L)
                .d("email", "\"9mA5SaUiVkGVkl8\"")
                .d("phone", "\"2\"")
                .d("skype", "NULL")
                .d("facebook", "NULL")
                .d("linkedin", "\"_EM_7355_XYZ_\"")
                .d("website", "\"PdwNKACLFtC99A\"")
                .d("note", "\"30Y2\"")
            .and().insertInto("roles", 663L)
                .d("role", "\"JexU2WU0S\"")
            .and().insertInto("permissions", 662L)
                .d("permission", "\"PciGb_YPwJmC\"")
                .d("enabled", "-73")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/_EM_3672_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission _EM_3672_XYZ_ not found"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_97_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5B8WI4aGi\"")
                .d("enabled", "4")
                .d("note", "\"qfR8CkHEk\"")
            .and().insertInto("users", 597L)
                .d("username", "\"4Yc\"")
                .d("password", "\"Ij3Az\"")
                .d("name", "\"fnbSDEHEJqpeg\"")
                .d("surname", "\"_EM_8025_XYZ_\"")
                .d("gender", "-8")
                .d("birth_date", "\"2051-06-01\"")
                .d("enabled", "-98")
                .d("creation_dt", "\"2002-05-23 17:36:38\"")
                .d("updated_dt", "\"2029-12-30 03:34:08\"")
                .d("login_dt", "\"2003-09-11 07:58:36\"")
                .d("note", "\"_EM_8029_XYZ_\"")
                .d("secured", "16")
            .and().insertInto("roles", 653L)
                .d("role", "\"PC7z1hiKqkK\"")
            .and().insertInto("users", 655L)
                .d("username", "\"LCODf\"")
                .d("password", "\"A\"")
                .d("enabled", "-95")
                .d("creation_dt", "\"1982-01-02 03:59:38\"")
                .d("secured", "-79")
            .and().insertInto("addresses", 654L)
                .d("user_id", "1")
                .d("address", "\"iytvE1zxx5ZLR_HQ\"")
                .d("address2", "NULL")
                .d("city", "\"_EM_8020_XYZ_\"")
                .d("country", "NULL")
                .d("zip_code", "\"ahtWKz1HI\"")
            .and().insertInto("users", 658L)
                .d("username", "\"j8DAC37hPtFng\"")
                .d("password", "\"_EM_8021_XYZ_\"")
                .d("enabled", "103")
                .d("creation_dt", "\"2031-10-20 00:56:29\"")
                .d("secured", "-85")
            .and().insertInto("roles", 657L)
                .d("role", "\"_EM_8022_XYZ_\"")
            .and().insertInto("users_roles", 656L)
                .r("user_id", 655L)
                .d("role_id", "1")
            .and().insertInto("users", 660L)
                .d("username", "\"24Wr1mpYoJUQ0\"")
                .d("password", "\"MIfuAEaoaaXwbik4\"")
                .d("enabled", "-54")
                .d("creation_dt", "\"1997-12-22 17:52:59\"")
                .d("secured", "32")
            .and().insertInto("contacts", 659L)
                .r("user_id", 597L)
                .d("email", "\"9mC5SaUiVkGVkl8\"")
                .d("phone", "NULL")
                .d("skype", "\"XjCzpxIoxLaD\"")
                .d("facebook", "NULL")
                .d("linkedin", "\"Ra7VmwNW0Oh\"")
                .d("website", "\"PdwNKACLFtC99A\"")
                .d("note", "\"30Y2\"")
            .and().insertInto("roles", 663L)
                .d("role", "\"JexU2XU0S\"")
            .and().insertInto("permissions", 662L)
                .d("permission", "\"PgiGb_YPwJnC\"")
                .d("enabled", "-73")
            .and().insertInto("permissions_roles", 661L)
                .r("permission_id", 596L)
                .r("role_id", 657L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/_EM_3672_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission _EM_3672_XYZ_ not found"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_98_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("users", 212L)
                .d("username", "\"OqqfM\"")
                .d("password", "\"U3UXbHgBsLjUMU\"")
                .d("name", "\"_EM_7014_XYZ_\"")
                .d("surname", "\"jCHA\"")
                .d("gender", "-78")
                .d("birth_date", "\"1981-06-04\"")
                .d("enabled", "-76")
                .d("creation_dt", "\"2037-03-17 03:25:29\"")
                .d("updated_dt", "NULL")
                .d("login_dt", "\"2003-08-14 02:04:11\"")
                .d("note", "\"xbCAzAJtwvlEBEy\"")
                .d("secured", "115")
            .and().insertInto("roles", 456L)
                .d("role", "\"v6G0E\"")
            .and().insertInto("users", 464L)
                .d("username", "\"CFz0WEX\"")
                .d("password", "\"[wFhUGU\"")
                .d("enabled", "98")
                .d("creation_dt", "\"1985-11-08 11:27:52\"")
                .d("secured", "78")
            .and().insertInto("contacts", 463L)
                .r("user_id", 212L)
                .d("email", "\"FDbTlo\"")
                .d("phone", "\"AYNF3WbZCF\"")
                .d("skype", "\"\"")
                .d("facebook", "NULL")
                .d("linkedin", "\"f;QHYafRX_8S\"")
                .d("website", "\"lB5kfF\"")
                .d("note", "\"C2woH\"")
            .and().insertInto("permissions", 1322L)
                .d("permission", "\"_EM_8353_XYZ_\"")
                .d("enabled", "-100")
                .d("note", "\"dJCw\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/_EM_8664_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission _EM_8664_XYZ_ not found"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_99_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5B8U4aGi\"")
                .d("enabled", "4")
                .d("note", "\"qfR8CkDEk\"")
            .and().insertInto("users", 597L)
                .d("username", "\"4Yc\"")
                .d("password", "\"Ij/Az\"")
                .d("name", "\"fnbSDEHEJqpe\"")
                .d("surname", "\"R\"")
                .d("gender", "120")
                .d("birth_date", "\"2019-06-20\"")
                .d("enabled", "-82")
                .d("creation_dt", "\"2000-05-22 17:36:38\"")
                .d("updated_dt", "\"1997-10-30 03:34:08\"")
                .d("login_dt", "\"1999-05-07 07:59:28\"")
                .d("note", "\"teOI\"")
                .d("secured", "127")
            .and().insertInto("roles", 653L)
                .d("role", "\"PC7z1hiKqkK\"")
            .and().insertInto("users", 655L)
                .d("username", "\"9p0g1EcJgN_OwX9R\"")
                .d("password", "\"_EM_8783_XYZ_\"")
                .d("enabled", "-93")
                .d("creation_dt", "\"1986-05-01 03:57:38\"")
                .d("secured", "-79")
            .and().insertInto("addresses", 654L)
                .d("user_id", "1")
                .d("address", "\"iytvE5zxx5ZLR_H\"")
                .d("address2", "NULL")
                .d("city", "\"mdTN\"")
                .d("country", "NULL")
                .d("zip_code", "\"ahtWKz1HE\"")
            .and().insertInto("users", 658L)
                .d("username", "\"j8DAC37hPtFng\"")
                .d("password", "\"z\"")
                .d("enabled", "0")
                .d("creation_dt", "\"2031-10-20 00:56:29\"")
                .d("secured", "-85")
            .and().insertInto("roles", 657L)
                .d("role", "\"CYD1R0VH2CAF\"")
            .and().insertInto("users_roles", 656L)
                .r("user_id", 655L)
                .r("role_id", 653L)
            .and().insertInto("users", 660L)
                .d("username", "\"_EM_8778_XYZ_\"")
                .d("password", "\"MIfuAEaoaaXwbik4\"")
                .d("enabled", "-54")
                .d("creation_dt", "\"1997-10-22 17:51:50\"")
                .d("secured", "-19")
            .and().insertInto("contacts", 659L)
                .r("user_id", 658L)
                .d("email", "\"9mA5SaUiVkGVkl8\"")
                .d("phone", "NULL")
                .d("skype", "NULL")
                .d("facebook", "\"GjdcSJjj0UyC_7m\"")
                .d("linkedin", "\"Ra7VmwNW0Nh\"")
                .d("website", "\"PdwNKACMFtC99A\"")
                .d("note", "\"30Y2\"")
            .and().insertInto("roles", 663L)
                .d("role", "\"JexU2WW0S\"")
            .and().insertInto("permissions", 662L)
                .d("permission", "\"PgiGb_YPwJmC\"")
                .d("enabled", "-105")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/_EM_3672_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission _EM_3672_XYZ_ not found"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_100_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5B8I4aGi\"")
                .d("enabled", "0")
                .d("note", "\"qfR8CkDEk\"")
            .and().insertInto("users", 597L)
                .d("username", "\"4Yc\"")
                .d("password", "\"_EM_5364_XYZ_\"")
                .d("name", "\"fnbSDEHEJqpeg\"")
                .d("surname", "\"R\"")
                .d("gender", "NULL")
                .d("birth_date", "\"2019-06-19\"")
                .d("enabled", "-82")
                .d("creation_dt", "\"2000-05-22 15:36:38\"")
                .d("updated_dt", "\"1997-11-30 11:29:29\"")
                .d("login_dt", "\"1999-05-07 07:59:36\"")
                .d("note", "\"_EM_5365_XYZ_\"")
                .d("secured", "117")
            .and().insertInto("roles", 653L)
                .d("role", "\"_EM_5366_XYZ_\"")
            .and().insertInto("users", 722L)
                .d("username", "\"aCo21m\"")
                .d("password", "\"RD7b_n0\"")
                .d("enabled", "13")
                .d("creation_dt", "\"2007-04-02 16:57:51\"")
                .d("secured", "-68")
            .and().insertInto("addresses", 721L)
                .d("user_id", "1")
                .d("address", "\"n\"")
                .d("address2", "\"_EM_5367_XYZ_\"")
                .d("city", "NULL")
                .d("country", "\"bNlg3bHB\"")
                .d("zip_code", "NULL")
            .and().insertInto("users", 725L)
                .d("username", "\"2C|Wtdw3\"")
                .d("password", "\"_EM_5368_XYZ_\"")
                .d("enabled", "-126")
                .d("creation_dt", "\"2010-04-12 23:19:22\"")
                .d("secured", "62")
            .and().insertInto("roles", 724L)
                .d("role", "\"MFZ3Yq\"")
            .and().insertInto("users_roles", 723L)
                .d("user_id", "3")
                .r("role_id", 653L)
            .and().insertInto("users", 727L)
                .d("username", "\"TlOur9k8km\"")
                .d("password", "\"U\"")
                .d("enabled", "118")
                .d("creation_dt", "\"2008-10-09 09:06:22\"")
                .d("secured", "-84")
            .and().insertInto("contacts", 726L)
                .r("user_id", 725L)
                .d("email", "\"_EM_5369_XYZ_\"")
                .d("phone", "\"WQnfHD\"")
                .d("skype", "NULL")
                .d("facebook", "\"tKmIdrGJqoB\"")
                .d("linkedin", "\"IMrwpZA\"")
                .d("website", "\"Bk8gDpX\"")
                .d("note", "\"G11s\"")
            .and().insertInto("roles", 730L)
                .d("role", "\"_EM_5370_XYZ_\"")
            .and().insertInto("permissions", 729L)
                .d("permission", "\"UUUzx\"")
                .d("enabled", "0")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/_EM_3672_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission _EM_3672_XYZ_ not found"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_101_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5C8I4aGi\"")
                .d("enabled", "45")
                .d("note", "\"sURUCkUEU\"")
            .and().insertInto("users", 597L)
                .d("username", "\"_EM_4395_XYZ_\"")
                .d("password", "\"_EM_5324_XYZ_\"")
                .d("name", "\"fnbSDEHEJqpef\"")
                .d("surname", "\"_EM_5327_XYZ_\"")
                .d("gender", "-1")
                .d("birth_date", "\"2019-08-31\"")
                .d("enabled", "8")
                .d("creation_dt", "\"2003-01-14 17:36:38\"")
                .d("updated_dt", "NULL")
                .d("login_dt", "\"1999-03-07 07:27:38\"")
                .d("note", "\"tdOI\"")
                .d("secured", "-1")
            .and().insertInto("roles", 607L)
                .d("role", "\"G\"")
            .and().insertInto("roles", 718L)
                .d("role", "\"kWbiBt90JbP\"")
            .and().insertInto("permissions", 717L)
                .d("permission", "\"SaUeUUUzuUMWRM\"")
                .d("enabled", "70")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/_EM_5323_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission _EM_5323_XYZ_ not found"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_102_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 64L)
                .d("permission", "\"Kz3lKUi6RNYFnuV\"")
                .d("enabled", "0")
                .d("note", "\"JrxRXHDr6zjLaq\"")
            .and().insertInto("users", 741L)
                .d("username", "\"6l3He3S1Qa4\"")
                .d("password", "\"Kidonvm\"")
                .d("name", "\"QoP4T\"")
                .d("surname", "\"m\"")
                .d("gender", "NULL")
                .d("birth_date", "\"1929-04-22\"")
                .d("enabled", "-126")
                .d("creation_dt", "\"1974-02-06 11:46:29\"")
                .d("updated_dt", "\"2027-10-29 17:45:11\"")
                .d("login_dt", "\"2002-04-29 17:36:25\"")
                .d("note", "\"VJUUjU\"")
                .d("secured", "0")
            .and().insertInto("users", 745L)
                .d("username", "\"1q5TycBKwBgjrwE\"")
                .d("password", "\"5\"")
                .d("enabled", "105")
                .d("creation_dt", "\"2011-07-14 17:04:32\"")
                .d("secured", "118")
            .and().insertInto("contacts", 744L)
                .r("user_id", 741L)
                .d("email", "\"Y_LNK5k8aa\"")
                .d("phone", "\"yGhDYVYuaNtxbr\"")
                .d("skype", "NULL")
                .d("facebook", "\"FIeTha6Ytb1\"")
                .d("linkedin", "\"f3EsByh\"")
                .d("website", "\"YvhHEeT\"")
                .d("note", "\"A7\"")
            .and().insertInto("users", 967L)
                .d("username", "\"oPgxz_XY3pTWGtu9\"")
                .d("password", "\"Z7xhBaw\"")
                .d("enabled", "88")
                .d("creation_dt", "\"2024-08-01 05:50:37\"")
                .d("secured", "55")
            .and().insertInto("roles", 966L)
                .d("role", "\"kHJo\"")
            .and().insertInto("users_roles", 965L)
                .d("user_id", "1")
                .r("role_id", 966L)
            .and().insertInto("users", 1587L)
                .d("username", "\"GdIlUKBuSSpK\"")
                .d("password", "\"jyllO3b2z\"")
                .d("enabled", "123")
                .d("creation_dt", "\"1971-08-17 13:06:22\"")
                .d("secured", "-1")
            .and().insertInto("addresses", 1586L)
                .d("user_id", "4")
                .d("address", "\"5udB08nsrylIE\"")
                .d("address2", "\"9okrUe\"")
                .d("city", "\"rjm_\"")
                .d("country", "\"bgeKLz9cmcVrt\"")
                .d("zip_code", "\"\"")
            .and().insertInto("roles", 1590L)
                .d("role", "\"bPUOmh2Rlg\"")
            .and().insertInto("permissions", 1589L)
                .d("permission", "\"reHtr7urTcOJ8\"")
                .d("enabled", "-119")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/_EM_9557_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission _EM_9557_XYZ_ not found"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_103_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5C8I4aGi\"")
                .d("enabled", "45")
                .d("note", "\"sURUCkUEU\"")
            .and().insertInto("users", 597L)
                .d("username", "\"_EM_4395_XYZ_\"")
                .d("password", "\"_EM_5324_XYZ_\"")
                .d("name", "\"fnbSDEHEJqpef\"")
                .d("surname", "\"_EM_5327_XYZ_\"")
                .d("gender", "-1")
                .d("birth_date", "\"2019-08-31\"")
                .d("enabled", "0")
                .d("creation_dt", "\"2003-01-14 17:36:38\"")
                .d("updated_dt", "NULL")
                .d("login_dt", "\"1999-03-07 07:27:38\"")
                .d("note", "\"tfOI\"")
                .d("secured", "-1")
            .and().insertInto("roles", 607L)
                .d("role", "\"G\"")
            .and().insertInto("roles", 718L)
                .d("role", "\"kWbiBt90JbP\"")
            .and().insertInto("permissions", 717L)
                .d("permission", "\"SaUeUUU{uUMWR\"")
                .d("enabled", "70")
            .and().insertInto("permissions_roles", 716L)
                .r("permission_id", 596L)
                .d("role_id", "1")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/_EM_5323_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission _EM_5323_XYZ_ not found"));
    }
    
    
    /**
    * Calls:
    * (404) POST:/users/rbac/roles/{roleId}/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_104_postOnRolePermissWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/users/rbac/roles/903/permissions/LOGIN?EMextraParam123=_EM_15_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Role not found with Id = 903"));
    }
    
    
    /**
    * Calls:
    * (404) POST:/users/rbac/roles/{roleId}/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_105_postOnRolePermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("roles", 557L)
                .d("role", "\"_EM_4183_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/users/rbac/roles/-130169/permissions/_EM_4182_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Role not found with Id = -130169"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/roles/{roleId}/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_106_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/roles/{roleId}/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/roles/12/permissions/oh7FJcNXfPo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Role not found with Id = 12"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/users/rbac/roles/{roleId}/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_107_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("roles", 47L)
                .d("role", "\"_EM_318_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/roles/{roleId}/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/users/rbac/roles/-261370/permissions/qbCNu88j57g6q")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Role not found with Id = -261370"));
    }


}
