package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-17T15:42:15.758-04:00[America/New_York]
 * <br>
*  The generated test suite contains 108 tests
 * <br>
*  Covered targets: 918
 * <br>
*  Used time: 1h 3m 17s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_user_managementdefault_1234_Test_16_test_16_putOnUserShowsFaults_100_101 {
    

    
    private static final SutHandler controller = new em.external.com.giassi.microservice.demo2.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/user-management-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("addresses","contacts","permissions","permissions_roles","roles","users","users_roles"));
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (500) PUT:/users/{id}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_16_putOnUserShowsFaults_100_101() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("users", 212L)
                .d("username", "\"OqqfM\"")
                .d("password", "\"U3UXbHgBsLjUMU\"")
                .d("name", "\"_EM_7014_XYZ_\"")
                .d("surname", "NULL")
                .d("gender", "-78")
                .d("birth_date", "\"1949-10-04\"")
                .d("enabled", "-76")
                .d("creation_dt", "\"2037-03-17 03:25:29\"")
                .d("updated_dt", "NULL")
                .d("login_dt", "\"2003-08-14 02:04:11\"")
                .d("note", "\"xbCAzAJtwvlEBEy\"")
                .d("secured", "115")
            .and().insertInto("roles", 456L)
                .d("role", "\"v6G0\"")
            .and().insertInto("users", 464L)
                .d("username", "\"CFz0WEX\"")
                .d("password", "\"_wFhyGA\"")
                .d("enabled", "98")
                .d("creation_dt", "\"1985-11-08 11:27:52\"")
                .d("secured", "78")
            .and().insertInto("contacts", 463L)
                .r("user_id", 464L)
                .d("email", "\"FDbTlo\"")
                .d("phone", "NULL")
                .d("skype", "\"\"")
                .d("facebook", "NULL")
                .d("linkedin", "\"f;QHYafRX_8S\"")
                .d("website", "\"lB5kfF\"")
                .d("note", "\"C2woH\"")
            .and().insertInto("permissions", 1322L)
                .d("permission", "\"c\"")
                .d("enabled", "-99")
                .d("note", "\"dJCw\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. com/giassi/microservice/demo2/rest/users/services/UserService_254_updateUser.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/users/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"JoUzBG52\", " + 
                    " \"address2\": \"WdzMpOqKSls9\", " + 
                    " \"birthDate\": \"1956-01-27\", " + 
                    " \"contactNote\": \"F_\", " + 
                    " \"country\": \"8Ds6J1\", " + 
                    " \"email\": \"\", " + 
                    " \"facebook\": \"S\", " + 
                    " \"note\": \"yAi\", " + 
                    " \"password\": \"alW6bMJPpfMNw\", " + 
                    " \"secured\": true " + 
                    " } ")
                .put(baseUrlOfSut + "/users/1")
                .then()
                .statusCode(500)// com/giassi/microservice/demo2/rest/users/services/UserService_254_updateUser
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("-78"))
                .body("'path'", containsString("/users/1"));
    }
}
