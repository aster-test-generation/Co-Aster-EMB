package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-17T15:42:15.758-04:00[America/New_York]
 * <br>
*  The generated test suite contains 108 tests
 * <br>
*  Covered targets: 918
 * <br>
*  Used time: 1h 3m 17s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_user_managementdefault_1234_Test_51_test_51_deleteOnPermissReturns204 {
    

    
    private static final SutHandler controller = new em.external.com.giassi.microservice.demo2.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/user-management-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("addresses","contacts","permissions","permissions_roles","roles","users","users_roles"));
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (204) DELETE:/users/rbac/permissions/{permissionKey}
    */
    @Test @Timeout(60)
    public void test_51_deleteOnPermissReturns204() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5B8I4aGi\"")
                .d("enabled", "-4")
                .d("note", "\"qfR8CkDEk\"")
            .and().insertInto("users", 597L)
                .d("username", "\"4Yc\"")
                .d("password", "\"Ij3A\"")
                .d("name", "\"fnbSDEHEJqpe\"")
                .d("surname", "\"U\"")
                .d("gender", "NULL")
                .d("birth_date", "\"2020-01-19\"")
                .d("enabled", "0")
                .d("creation_dt", "\"2000-09-22 23:38:38\"")
                .d("updated_dt", "\"1997-10-30 03:34:08\"")
                .d("login_dt", "\"1999-05-14 07:59:36\"")
                .d("note", "\"_EM_8047_XYZ_\"")
                .d("secured", "97")
            .and().insertInto("roles", 653L)
                .d("role", "\"sbGRgSU40ToBBk\"")
            .and().insertInto("users", 655L)
                .d("username", "\"LCODe\"")
                .d("password", "\"N\"")
                .d("enabled", "-109")
                .d("creation_dt", "\"1986-05-01 03:57:38\"")
                .d("secured", "-79")
            .and().insertInto("addresses", 654L)
                .d("user_id", "1")
                .d("address", "\"1dnCO3j\"")
                .d("address2", "\"vqcpqvp5uki\"")
                .d("city", "\"mdN\"")
                .d("country", "NULL")
                .d("zip_code", "\"_EM_8062_XYZ_\"")
            .and().insertInto("users", 658L)
                .d("username", "\"_EM_8048_XYZ_\"")
                .d("password", "\"\"")
                .d("enabled", "111")
                .d("creation_dt", "\"2031-10-20 02:29:45\"")
                .d("secured", "-84")
            .and().insertInto("roles", 657L)
                .d("role", "\"CYE1R0VH2CAF\"")
            .and().insertInto("users", 660L)
                .d("username", "\"24Wr1mpYoJUQ0k\"")
                .d("password", "\"MIfuAEaoaaXwbik4\"")
                .d("enabled", "-38")
                .d("creation_dt", "\"1997-10-22 15:52:50\"")
                .d("secured", "33")
            .and().insertInto("contacts", 659L)
                .r("user_id", 597L)
                .d("email", "\"cp_pC6l15iBsB0M\"")
                .d("phone", "NULL")
                .d("skype", "NULL")
                .d("facebook", "\"GjdcSJjj0UyC_7m\"")
                .d("linkedin", "\"Ra7VmwNU0Oh\"")
                .d("website", "\"PdwNKACLFtC9:A\"")
                .d("note", "\"30Y2\"")
            .and().insertInto("roles", 663L)
                .d("role", "\"JexU2WT0S\"")
            .and().insertInto("permissions", 662L)
                .d("permission", "\"LgiGb_YPwJmC\"")
                .d("enabled", "-101")
            .and().insertInto("permissions_roles", 661L)
                .r("permission_id", 662L)
                .d("role_id", "1")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/5B8I4aGi")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
}
