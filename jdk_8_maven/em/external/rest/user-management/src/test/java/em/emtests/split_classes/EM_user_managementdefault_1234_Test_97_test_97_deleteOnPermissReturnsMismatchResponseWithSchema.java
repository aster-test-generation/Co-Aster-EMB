package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-17T15:42:15.758-04:00[America/New_York]
 * <br>
*  The generated test suite contains 108 tests
 * <br>
*  Covered targets: 918
 * <br>
*  Used time: 1h 3m 17s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_user_managementdefault_1234_Test_97_test_97_deleteOnPermissReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.com.giassi.microservice.demo2.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/user-management-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("addresses","contacts","permissions","permissions_roles","roles","users","users_roles"));
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (404) DELETE:/users/rbac/permissions/{permissionKey}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_97_deleteOnPermissReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"5B8WI4aGi\"")
                .d("enabled", "4")
                .d("note", "\"qfR8CkHEk\"")
            .and().insertInto("users", 597L)
                .d("username", "\"4Yc\"")
                .d("password", "\"Ij3Az\"")
                .d("name", "\"fnbSDEHEJqpeg\"")
                .d("surname", "\"_EM_8025_XYZ_\"")
                .d("gender", "-8")
                .d("birth_date", "\"2051-06-01\"")
                .d("enabled", "-98")
                .d("creation_dt", "\"2002-05-23 17:36:38\"")
                .d("updated_dt", "\"2029-12-30 03:34:08\"")
                .d("login_dt", "\"2003-09-11 07:58:36\"")
                .d("note", "\"_EM_8029_XYZ_\"")
                .d("secured", "16")
            .and().insertInto("roles", 653L)
                .d("role", "\"PC7z1hiKqkK\"")
            .and().insertInto("users", 655L)
                .d("username", "\"LCODf\"")
                .d("password", "\"A\"")
                .d("enabled", "-95")
                .d("creation_dt", "\"1982-01-02 03:59:38\"")
                .d("secured", "-79")
            .and().insertInto("addresses", 654L)
                .d("user_id", "1")
                .d("address", "\"iytvE1zxx5ZLR_HQ\"")
                .d("address2", "NULL")
                .d("city", "\"_EM_8020_XYZ_\"")
                .d("country", "NULL")
                .d("zip_code", "\"ahtWKz1HI\"")
            .and().insertInto("users", 658L)
                .d("username", "\"j8DAC37hPtFng\"")
                .d("password", "\"_EM_8021_XYZ_\"")
                .d("enabled", "103")
                .d("creation_dt", "\"2031-10-20 00:56:29\"")
                .d("secured", "-85")
            .and().insertInto("roles", 657L)
                .d("role", "\"_EM_8022_XYZ_\"")
            .and().insertInto("users_roles", 656L)
                .r("user_id", 655L)
                .d("role_id", "1")
            .and().insertInto("users", 660L)
                .d("username", "\"24Wr1mpYoJUQ0\"")
                .d("password", "\"MIfuAEaoaaXwbik4\"")
                .d("enabled", "-54")
                .d("creation_dt", "\"1997-12-22 17:52:59\"")
                .d("secured", "32")
            .and().insertInto("contacts", 659L)
                .r("user_id", 597L)
                .d("email", "\"9mC5SaUiVkGVkl8\"")
                .d("phone", "NULL")
                .d("skype", "\"XjCzpxIoxLaD\"")
                .d("facebook", "NULL")
                .d("linkedin", "\"Ra7VmwNW0Oh\"")
                .d("website", "\"PdwNKACLFtC99A\"")
                .d("note", "\"30Y2\"")
            .and().insertInto("roles", 663L)
                .d("role", "\"JexU2XU0S\"")
            .and().insertInto("permissions", 662L)
                .d("permission", "\"PgiGb_YPwJnC\"")
                .d("enabled", "-73")
            .and().insertInto("permissions_roles", 661L)
                .r("permission_id", 596L)
                .r("role_id", 657L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/users/rbac/permissions/{permissionKey}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/users/rbac/permissions/_EM_3672_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Permission _EM_3672_XYZ_ not found"));
    }
}
