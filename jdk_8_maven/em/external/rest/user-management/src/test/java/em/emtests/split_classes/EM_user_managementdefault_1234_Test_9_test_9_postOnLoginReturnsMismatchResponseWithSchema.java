package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-17T15:42:15.758-04:00[America/New_York]
 * <br>
*  The generated test suite contains 108 tests
 * <br>
*  Covered targets: 918
 * <br>
*  Used time: 1h 3m 17s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_user_managementdefault_1234_Test_9_test_9_postOnLoginReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.com.giassi.microservice.demo2.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/user-management-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("addresses","contacts","permissions","permissions_roles","roles","users","users_roles"));
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (400) POST:/login
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_9_postOnLoginReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("permissions", 596L)
                .d("permission", "\"_EM_7142_XYZ_\"")
                .d("enabled", "127")
                .d("note", "\"qfR9CkDEk\"")
            .and().insertInto("users", 597L)
                .d("username", "\"6YcU\"")
                .d("password", "\"aHkT0e1\"")
                .d("name", "\"_EU_5037UUYZU\"")
                .d("surname", "\"R3e\"")
                .d("gender", "NULL")
                .d("birth_date", "\"2019-01-19\"")
                .d("enabled", "-82")
                .d("creation_dt", "\"2000-06-22 17:36:06\"")
                .d("updated_dt", "\"1997-10-30 19:34:00\"")
                .d("login_dt", "\"1999-05-07 07:59:36\"")
                .d("note", "\"_EM_7143_XYZ_\"")
                .d("secured", "113")
            .and().insertInto("roles", 653L)
                .d("role", "\"_EM_7144_XYZ_\"")
            .and().insertInto("users", 655L)
                .d("username", "\"_EM_7145_XYZ_\"")
                .d("password", "\"XjCzpxIoxLaD\"")
                .d("enabled", "-128")
                .d("creation_dt", "\"1986-05-01 03:57:38\"")
                .d("secured", "-81")
            .and().insertInto("addresses", 654L)
                .d("user_id", "1")
                .d("address", "\"_EM_7146_XYZ_\"")
                .d("address2", "NULL")
                .d("city", "\"mdP\"")
                .d("country", "\"t0W\"")
                .d("zip_code", "\"ahtWKz1HEt\"")
            .and().insertInto("users", 658L)
                .d("username", "\"j8DAC37hPtFng\"")
                .d("password", "\"\"")
                .d("enabled", "107")
                .d("creation_dt", "\"2003-06-20 02:31:29\"")
                .d("secured", "-77")
            .and().insertInto("roles", 657L)
                .d("role", "\"GYD1R0VH2CAF\"")
            .and().insertInto("users_roles", 656L)
                .r("user_id", 655L)
                .d("role_id", "2")
            .and().insertInto("users", 660L)
                .d("username", "\"24Wr1mpYoJUQ0k\"")
                .d("password", "\"MIfuAEaoaaTwbik4\"")
                .d("enabled", "-52")
                .d("creation_dt", "\"1997-10-22 17:29:50\"")
                .d("secured", "65")
            .and().insertInto("contacts", 659L)
                .r("user_id", 597L)
                .d("email", "\"9iA5SaUiVkGVkl8\"")
                .d("phone", "\"2\"")
                .d("skype", "NULL")
                .d("facebook", "\"GjdcSJjj0UyC_7m\"")
                .d("linkedin", "\"Ra7VmwNW0Oh\"")
                .d("website", "\"_EM_7138_XYZ_\"")
                .d("note", "\"30Y2\"")
            .and().insertInto("roles", 663L)
                .d("role", "\"JexU2WU0S\"")
            .and().insertInto("permissions", 662L)
                .d("permission", "\"PgiGb_YPwJmC\"")
                .d("enabled", "-103")
            .and().insertInto("permissions_roles", 661L)
                .r("permission_id", 596L)
                .d("role_id", "1")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/login'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"password\": \"_EM_4593_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/login")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Username or Password cannot be null or empty"));
    }
}
