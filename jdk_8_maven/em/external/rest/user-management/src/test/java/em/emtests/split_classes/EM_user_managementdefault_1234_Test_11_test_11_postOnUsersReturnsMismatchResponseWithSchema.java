package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-17T15:42:15.758-04:00[America/New_York]
 * <br>
*  The generated test suite contains 108 tests
 * <br>
*  Covered targets: 918
 * <br>
*  Used time: 1h 3m 17s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_user_managementdefault_1234_Test_11_test_11_postOnUsersReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.com.giassi.microservice.demo2.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/user-management-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("addresses","contacts","permissions","permissions_roles","roles","users","users_roles"));
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (400) POST:/users
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_11_postOnUsersReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("users", 2179L)
                .d("username", "\"4VcSiOmjWGu\"")
                .d("password", "\"XKRVZbu\"")
                .d("enabled", "-48")
                .d("creation_dt", "\"1996-09-16 21:05:56\"")
                .d("secured", "-62")
            .and().insertInto("roles", 2178L)
                .d("role", "\"bm\"")
            .and().insertInto("users_roles", 2177L)
                .r("user_id", 2179L)
                .d("role_id", "1")
            .and().insertInto("users", 2181L)
                .d("username", "\"oXulqyD\"")
                .d("password", "\"WeoGJHGlwnQFK\"")
                .d("enabled", "-52")
                .d("creation_dt", "\"1999-09-25 18:29:07\"")
                .d("secured", "-67")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/users'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"birthDate\": \"1901-11-26\", " + 
                    " \"city\": \"_EM_158_XYZ_\", " + 
                    " \"contactNote\": \"jE3\", " + 
                    " \"email\": \"_EM_160_XYZ_\", " + 
                    " \"linkedin\": \"_EM_161_XYZ_\", " + 
                    " \"note\": \"_EM_162_XYZ_\", " + 
                    " \"phone\": \"_EM_164_XYZ_\", " + 
                    " \"secured\": false, " + 
                    " \"skype\": \"_EM_165_XYZ_\", " + 
                    " \"surname\": \"_EM_166_XYZ_\", " + 
                    " \"username\": \"mario\" " + 
                    " } ")
                .post(baseUrlOfSut + "/users")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Password cannot be null or empty"));
    }
}
