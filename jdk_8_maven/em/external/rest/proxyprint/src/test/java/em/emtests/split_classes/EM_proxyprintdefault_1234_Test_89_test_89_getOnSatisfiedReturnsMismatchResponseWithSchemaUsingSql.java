package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-04T17:14:24.264-04:00[America/New_York]
 * <br>
*  The generated test suite contains 425 tests
 * <br>
*  Covered targets: 3113
 * <br>
*  Used time: 1h 8m 36s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  
*/

public class EM_proxyprintdefault_1234_Test_89_test_89_getOnSatisfiedReturnsMismatchResponseWithSchemaUsingSql {
    

    
    private static final SutHandler controller = new em.external.io.github.proxyprint.kitchen.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/proxyprint-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (403) POST:/printshops/{id}/pricetable/deletecover
    * 2 - (403) POST:/printshops/{id}/pricetable/deletecover
    * 3 - (404) POST:/consumer/subscribe
    * 4 - (404) DELETE:/consumer/subscribe
    * 5 - (200) GET:/printshops/nearest
    * 6 - (403) POST:/printshops/{id}/reviews
    * 7 - (200) GET:/printshops/satisfied
    * Found 4 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_89_getOnSatisfiedReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 572L)
                .d("ADDRESS", "\"_EM_1678_XYZ_\"")
                .d("AVG_RATING", "0.33982196255170083")
                .d("BALANCE_CURRENCY", "\"_EM_1679_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "918")
                .d("BALANCE_INTEGER_PART", "458")
                .d("LATITUDE", "0.4268017269651153")
                .d("LOGO", "\"EL2DW0xoBEWcDI\"")
                .d("LONGITUDE", "0.22688338376552974")
                .d("NAME", "\"D15\"")
                .d("NIF", "\"25n\"")
            .and().insertInto("USERS", 573L)
                .d("PASSWORD", "\"hCQLQ_gpEGb7D\"")
                .d("USERNAME", "\"Fw8wA_JK7aq3igE\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/printshops/714/pricetable/deletecover")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/714/pricetable/deletecover"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA3\": \"\", " + 
                    " \"priceA4\": \"rv\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/714/pricetable/deletecover")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/714/pricetable/deletecover"));
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=hCQLQ_gpEGb7D&" + 
                    "username=Fw8wA_JK7aq3igE")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/nearest")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/printshops/714/reviews")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/714/reviews"));
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/satisfied?username=Fw8wA_JK7aq3igE")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"satisfiedrequests\":[],\"success\":true}"));
    }
}
