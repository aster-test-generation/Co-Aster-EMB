package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-04T17:14:24.264-04:00[America/New_York]
 * <br>
*  The generated test suite contains 425 tests
 * <br>
*  Covered targets: 3113
 * <br>
*  Used time: 1h 8m 36s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  
*/

public class EM_proxyprintdefault_1234_Test_58_test_58_postOnSubscribeShowsFaults_100_101UsingSql {
    

    
    private static final SutHandler controller = new em.external.io.github.proxyprint.kitchen.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/proxyprint-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (403) POST:/printshops/{id}/pricetable/rings
    * 2 - (403) POST:/printshops/{id}/pricetable/rings
    * 3 - (200) GET:/consumer/balance
    * 4 - (500) DELETE:/consumer/{username}/notifications
    * 5 - (500) GET:/consumer/satisfied
    * 6 - (500) POST:/consumer/{consumerID}/printingschemas
    * 7 - (500) GET:/consumer/{consumerID}/printingschemas
    * 8 - (200) DELETE:/consumer/requests/cancel/{id}
    * 9 - (403) POST:/printshops/{printShopID}/employees
    * 10 - (403) PUT:/printshops/{printShopID}/employees
    * 11 - (404) POST:/consumer/subscribe
    * Found 12 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_58_postOnSubscribeShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 525L)
                .d("PASSWORD", "\"PNT9f\"")
                .d("USERNAME", "\"Pav\"")
            .and().insertInto("CONSUMERS", 524L)
                .d("BALANCE_CURRENCY", "\"U4UUsGGr1dyEUY\"")
                .d("BALANCE_FRACTIONAL_PART", "779")
                .d("BALANCE_INTEGER_PART", "820")
                .d("EMAIL", "\"buQPEWiQ\"")
                .d("LATITUDE", "\"_EM_1850_XYZ_\"")
                .d("LONGITUDE", "\"_EM_1752_XYZ_\"")
                .d("NAME", "\"sNIbFgCf\"")
                .r("ID", 525L)
            .and().insertInto("PRINTSHOPS", 526L)
                .d("ADDRESS", "\"i4uD2H2jPMZCM\"")
                .d("AVG_RATING", "1.6220689011225924")
                .d("BALANCE_CURRENCY", "\"H7ipPC33jJ_R\"")
                .d("BALANCE_FRACTIONAL_PART", "8912")
                .d("BALANCE_INTEGER_PART", "131632")
                .d("LATITUDE", "0.8421963006263061")
                .d("LOGO", "\"YU\"")
                .d("LONGITUDE", "0.0")
                .d("NAME", "\"_EM_1753_XYZ_\"")
                .d("NIF", "\"_EM_1754_XYZ_\"")
            .and().insertInto("PRINTSHOPS", 571L)
                .d("ADDRESS", "\"HEUIOH8SOnEvt\"")
                .d("AVG_RATING", "80.4134294615699")
                .d("BALANCE_CURRENCY", "\"lWU58zUUiUMl7SU2\"")
                .d("BALANCE_FRACTIONAL_PART", "0")
                .d("BALANCE_INTEGER_PART", "0")
                .d("LATITUDE", "0.812396276858")
                .d("LOGO", "\"JmnkdVQjNf\"")
                .d("LONGITUDE", "0.004150172221460496")
                .d("NAME", "\"ddtXLqGRMvzc\"")
                .d("NIF", "\"nrjx_XIF9bi\"")
            .and().insertInto("PRINTSHOPS", 570L)
                .d("ADDRESS", "\"Qp_QlpRZB2qC\"")
                .d("AVG_RATING", "0.4610897802055609")
                .d("BALANCE_CURRENCY", "\"_EM_1841_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "87")
                .d("BALANCE_INTEGER_PART", "33228")
                .d("LATITUDE", "260543.2863017224")
                .d("LOGO", "\"1Le5cCnuFUn\"")
                .d("LONGITUDE", "51511.626")
                .d("NAME", "\"_EM_1842_XYZ_\"")
                .d("NIF", "\"_EM_1843_XYZ_\"")
            .and().insertInto("USERS", 569L)
                .d("PASSWORD", "\"KZbvcOPVkQ\"")
                .d("USERNAME", "\"0XNKjiHE9_\"")
            .and().insertInto("CONSUMERS", 568L)
                .d("BALANCE_CURRENCY", "\"_EM_1844_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "343")
                .d("BALANCE_INTEGER_PART", "0")
                .d("NAME", "\"PUvuCryZg3jO8\"")
                .r("ID", 569L)
            .and().insertInto("PRINT_REQUESTS", 565L)
                .d("COST", "0.6981489210014662")
            .and().insertInto("DOCUMENTS", 564L)
                .d("FILE_NAME", "\"\"")
                .d("TOTAL_PAGES", "711")
                .r("PRINT_REQUEST_ID", 565L)
            .and().insertInto("USERS", 448L)
                .d("PASSWORD", "\"_EM_1756_XYZ_\"")
                .d("USERNAME", "\"CyclFn\"")
            .and().insertInto("PRINTSHOPS", 452L)
                .d("ADDRESS", "\"SUvi06gHboUtXNQ4\"")
                .d("AVG_RATING", "0.8376245991855458")
                .d("BALANCE_CURRENCY", "\"_EM_1275_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "-16216")
                .d("BALANCE_INTEGER_PART", "0")
                .d("LATITUDE", "-0.24753955652266635")
                .d("LOGO", "\"gyMzpJrduln\"")
                .d("LONGITUDE", "0.8316951183968223")
                .d("NAME", "\"_EM_1276_XYZ_\"")
                .d("NIF", "\"kyc9x\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 110679109, " + 
                    " \"price\": \"388\", " + 
                    " \"ringType\": \"p_mVRC48zfST\", " + 
                    " \"supLim\": 577 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/905/pricetable/rings?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/905/pricetable/rings"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"ringType\": \"BntbO2d3\", " + 
                    " \"supLim\": 261 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/905/pricetable/rings?" + 
                    "EMextraParam123=42&" + 
                    "username=3rgxvXs")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/905/pricetable/rings"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GDHmxSCfQr")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"jI\", " + 
                    " \"printShop\": { " + 
                    " \"id\": 6084038343344369159, " + 
                    " \"name\": \"7tGuijZGIg95E8\", " + 
                    " \"latitude\": 0.9591696587607235, " + 
                    " \"longitude\": 0.009530814676049881, " + 
                    " \"avgRating\": 0.111144826 " + 
                    " }, " + 
                    " \"id\": 358, " + 
                    " \"username\": \"0XNKjiHE9_\", " + 
                    " \"roles\": [ " + 
                    " \"ANl3\" " + 
                    " ] " + 
                    " } ")
                .get(baseUrlOfSut + "/consumer/balance?" + 
                    "password=9G7xI&" + 
                    "username=04LS9_YpXg&" + 
                    "charset=5821&" + 
                    "txn_type=&" + 
                    "transaction_type=&" + 
                    "mc_gross=rXDDJ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"success\":true}"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_220_deleteAllNotifications.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{username}/notifications'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GDHmxSCfQr")
                .delete(baseUrlOfSut + "/consumer/Vo/notifications?" + 
                    "password=1nKmWvYu&" + 
                    "username=4S7X3f7d")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_220_deleteAllNotifications
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/Vo/notifications"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/satisfied'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "NpQQZZDFahyMgY7")
                .get(baseUrlOfSut + "/consumer/satisfied?" + 
                    "password=7diSKEM&" + 
                    "username=NxafGngOyrIEzbJ4")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/satisfied"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_71_addNewConsumerPrintingSchema.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"_EM_1271_XYZ_\", " + 
                    " \"coverSpecs\": \"_EM_1272_XYZ_\", " + 
                    " \"deleted\": false, " + 
                    " \"paperSpecs\": \"_EM_1273_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/-1106/printingschemas")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_71_addNewConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/consumer/-1106/printingschemas"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GDHmxSCfQr")
                .get(baseUrlOfSut + "/consumer/-1106/printingschemas")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/-1106/printingschemas"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GDHmxSCfQr")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/14?" + 
                    "password=9G7xI&" + 
                    "username=04LS9_YpXg")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/407/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/407/employees"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GDHmxSCfQr")
                .put(baseUrlOfSut + "/printshops/407/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/407/employees"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
}
