package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-04T17:14:24.264-04:00[America/New_York]
 * <br>
*  The generated test suite contains 425 tests
 * <br>
*  Covered targets: 3113
 * <br>
*  Used time: 1h 8m 36s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  
*/

public class EM_proxyprintdefault_1234_Test_235_test_235_postOnPrintingschemasReturnsMismatchResponseWithSchemaUsingSql {
    

    
    private static final SutHandler controller = new em.external.io.github.proxyprint.kitchen.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/proxyprint-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (403) POST:/printshops/requests/cancel/{id}
    * 2 - (400) POST:/printshops/requests/cancel/{id}
    * 3 - (403) DELETE:/consumer/requests/cancel/{id}
    * 4 - (200) GET:/requests/pending
    * 5 - (403) GET:/printshops/stats
    * 6 - (200) POST:/request/accept/{id}
    * 7 - (200) POST:/request/accept/{id}
    * 8 - (403) POST:/printshops/{id}/pricetable/deletecover
    * 9 - (403) POST:/consumer/{consumerID}/printingschemas
    * Found 7 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_235_postOnPrintingschemasReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 517L)
                .d("ADDRESS", "\"lBCCWIEWz\"")
                .d("AVG_RATING", "0.859506440209461")
                .d("BALANCE_CURRENCY", "\"DMbp0YREXIM\"")
                .d("BALANCE_FRACTIONAL_PART", "398")
                .d("BALANCE_INTEGER_PART", "165")
                .d("LATITUDE", "0.09494481436125157")
                .d("LOGO", "\"_EM_1410_XYZ_\"")
                .d("LONGITUDE", "0.8171682706741005")
                .d("NAME", "\"_EM_1411_XYZ_\"")
                .d("NIF", "\"aBHIv\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" 579 ")
                .post(baseUrlOfSut + "/printshops/requests/cancel/579")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/requests/cancel/579"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/printshops/requests/cancel/{id}'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .post(baseUrlOfSut + "/printshops/requests/cancel/579")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.http.converter.HttpMessageNotReadableException"))
                .body("'message'", containsString("Required request body is missing: public java.lang.String io.github.proxyprint.kitchen.controllers.printshops.PrintShopController.cancelPrintShopRequests(long,java.security.Principal,java.lang.String) throws java.io.IOException"))
                .body("'path'", containsString("/printshops/requests/cancel/579"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "579")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/579?" + 
                    "password=1234&" + 
                    "username=ana")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/requests/cancel/579"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/0/pShopDateRequestAccepted'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/requests/pending")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'managerName'", containsString("Jorge Caldas"))
                .body("[0].'managerUsername'", containsString("jcaldas"))
                .body("[0].'managerEmail'", containsString("proxyprint.pt.printshop@gmail.com"))
                .body("[0].'managerPassword'", containsString("1234"))
                .body("[0].'pShopAddress'", containsString("Rua das Cruzes n31"))
                .body("[0].'pShopLatitude'", numberMatches(43.221))
                .body("[0].'pShopLongitude'", numberMatches(41.121))
                .body("[0].'pShopNIF'", containsString("124555321"))
                .body("[0].'pShopName'", containsString("Printer Style"))
                .body("[0].'pShopDateRequest'", containsString("04/09/2025 05:12"))
                .body("[0].'pShopDateRequestAccepted'", nullValue())
                .body("[1].'managerName'", containsString("Martim da Silva"))
                .body("[1].'managerUsername'", containsString("msilva"))
                .body("[1].'managerEmail'", containsString("proxyprint.pt.printshop@gmail.com"))
                .body("[1].'managerPassword'", containsString("1234"))
                .body("[1].'pShopAddress'", containsString("Rua das Cruzes n32"))
                .body("[1].'pShopLatitude'", numberMatches(43.221))
                .body("[1].'pShopLongitude'", numberMatches(41.121))
                .body("[1].'pShopNIF'", containsString("124555321"))
                .body("[1].'pShopName'", containsString("Print More"))
                .body("[1].'pShopDateRequest'", containsString("04/09/2025 05:12"))
                .body("[1].'pShopDateRequestAccepted'", nullValue())
                .body("[2].'managerName'", containsString("Carlos Pinto"))
                .body("[2].'managerUsername'", containsString("cpin"))
                .body("[2].'managerEmail'", containsString("proxyprint.pt.printshop@gmail.com"))
                .body("[2].'managerPassword'", containsString("1234"))
                .body("[2].'pShopAddress'", containsString("Rua n33"))
                .body("[2].'pShopLatitude'", numberMatches(43.221))
                .body("[2].'pShopLongitude'", numberMatches(41.121))
                .body("[2].'pShopNIF'", containsString("124555321"))
                .body("[2].'pShopName'", containsString("Papelaria Pinto"))
                .body("[2].'pShopDateRequest'", containsString("04/09/2025 05:12"))
                .body("[2].'pShopDateRequestAccepted'", nullValue())
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/stats")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/stats"));
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/request/accept/579")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/request/accept/579")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"_EM_1412_XYZ_\", " + 
                    " \"priceA3\": \"Mfzl\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/579/pricetable/deletecover")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/579/pricetable/deletecover"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 956, " + 
                    " \"name\": \"_EM_1413_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/47/printingschemas")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/47/printingschemas"));
    }
}
