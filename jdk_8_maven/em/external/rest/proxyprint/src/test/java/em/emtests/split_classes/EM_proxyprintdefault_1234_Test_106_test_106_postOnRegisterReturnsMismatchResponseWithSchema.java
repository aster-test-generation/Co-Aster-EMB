package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-04T17:14:24.264-04:00[America/New_York]
 * <br>
*  The generated test suite contains 425 tests
 * <br>
*  Covered targets: 3113
 * <br>
*  Used time: 1h 8m 36s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  
*/

public class EM_proxyprintdefault_1234_Test_106_test_106_postOnRegisterReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.io.github.proxyprint.kitchen.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/proxyprint-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (400) POST:/admin/register
    * 2 - (400) POST:/admin/register
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_106_postOnRegisterReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/admin/register'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"balance\": { " + 
                    " \"currency\": \"_EM_195_XYZ_\", " + 
                    " \"fractionalPart\": 532, " + 
                    " \"integerPart\": 112, " + 
                    " \"valid\": true " + 
                    " }, " + 
                    " \"email\": \"JHsp0E3r\", " + 
                    " \"roles\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " }, " + 
                    " \"username\": \"y\" " + 
                    " } ")
                .post(baseUrlOfSut + "/admin/register?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.http.converter.HttpMessageNotReadableException"))
                .body("'message'", containsString("Could not read document: Can not deserialize instance of java.util.HashSet out of START_OBJECT token\n at [Source: java.io.ByteArrayInputStream@402fec75; line: 1, column: 124] (through reference chain: io.github.proxyprint.kitchen.models.Admin[\"roles\"]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Can not deserialize instance of java.util.HashSet out of START_OBJECT token\n at [Source: java.io.ByteArrayInputStream@402fec75; line: 1, column: 124] (through reference chain: io.github.proxyprint.kitchen.models.Admin[\"roles\"])"))
                .body("'path'", containsString("/admin/register"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/admin/register'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"balance\": { " + 
                    " \"currency\": \"_EM_199_XYZ_\", " + 
                    " \"fractionalPart\": 532, " + 
                    " \"integerPart\": 112, " + 
                    " \"valid\": true " + 
                    " }, " + 
                    " \"roles\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " }, " + 
                    " \"rolesSet\": [ " + 
                    " \"_EM_200_XYZ_\", " + 
                    " \"uM\", " + 
                    " \"_EM_201_XYZ_\", " + 
                    " \"opu09My3AsA\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/admin/register")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.http.converter.HttpMessageNotReadableException"))
                .body("'message'", containsString("Could not read document: Can not deserialize instance of java.util.HashSet out of START_OBJECT token\n at [Source: java.io.ByteArrayInputStream@6f0aa964; line: 1, column: 104] (through reference chain: io.github.proxyprint.kitchen.models.Admin[\"roles\"]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Can not deserialize instance of java.util.HashSet out of START_OBJECT token\n at [Source: java.io.ByteArrayInputStream@6f0aa964; line: 1, column: 104] (through reference chain: io.github.proxyprint.kitchen.models.Admin[\"roles\"])"))
                .body("'path'", containsString("/admin/register"));
    }
}
