package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-04T17:14:24.264-04:00[America/New_York]
 * <br>
*  The generated test suite contains 425 tests
 * <br>
*  Covered targets: 3113
 * <br>
*  Used time: 1h 8m 36s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  
*/

public class EM_proxyprintdefault_1234_Test_212_test_212_postOnEmployeesShowsFaults_100_101UsingSql {
    

    
    private static final SutHandler controller = new em.external.io.github.proxyprint.kitchen.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/proxyprint-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (403) POST:/printshops/{id}/pricetable/covers
    * 2 - (403) GET:/consumer/balance
    * 3 - (404) POST:/consumer/subscribe
    * 4 - (404) DELETE:/consumer/subscribe
    * 5 - (500) POST:/admin/register
    * 6 - (500) POST:/admin/register
    * 7 - (403) POST:/printshops/{id}/pricetable/papers
    * 8 - (403) POST:/printshops/{id}/pricetable/papers
    * 9 - (403) POST:/printshops/{printShopID}/employees
    * 10 - (403) POST:/printshops/{printShopID}/employees
    * Found 11 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_212_postOnEmployeesShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 584L)
                .d("ADDRESS", "\"_EM_1715_XYZ_\"")
                .d("AVG_RATING", "0.00699256756261335")
                .d("BALANCE_CURRENCY", "\"AzTmr59Kp4K9Xbug\"")
                .d("BALANCE_FRACTIONAL_PART", "891")
                .d("BALANCE_INTEGER_PART", "826")
                .d("LATITUDE", "0.36228690905124883")
                .d("LOGO", "\"Qwanlc4pvGi4\"")
                .d("LONGITUDE", "0.6285008665273222")
                .d("NAME", "\"_EM_1716_XYZ_\"")
                .d("NIF", "\"6jk\"")
            .and().insertInto("USERS", 587L)
                .d("PASSWORD", "\"Yr_geS7blUGR1\"")
                .d("USERNAME", "\"h1T9p9AYRdDp\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"f\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/654/pricetable/covers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/654/pricetable/covers"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/balance")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/balance"));
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/subscribe?" + 
                    "username=_EM_1720_XYZ_&" + 
                    "latitude=ZbFiNokVeGtvzs")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/admin/AdminController_77_newAdmin.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/admin/register'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"email\": \"b0MODSvskEfmX\", " + 
                    " \"id\": 159, " + 
                    " \"rolesSet\": [ " + 
                    " \"_EM_1722_XYZ_\", " + 
                    " \"_EM_1723_XYZ_\" " + 
                    " ], " + 
                    " \"username\": \"IvZ\" " + 
                    " } ")
                .post(baseUrlOfSut + "/admin/register")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/admin/AdminController_77_newAdmin
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/admin/register"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/admin/AdminController_77_newAdmin.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/admin/register'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"balance\": { " + 
                    " \"fractionalPart\": 343 " + 
                    " }, " + 
                    " \"email\": \"b0MODSvskEfmX\", " + 
                    " \"username\": \"IvZ\" " + 
                    " } ")
                .post(baseUrlOfSut + "/admin/register")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/admin/AdminController_77_newAdmin
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/admin/register"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 98, " + 
                    " \"priceA3DUPLEX\": \"D3R5JUl\", " + 
                    " \"priceA4DUPLEX\": \"BX1oWMolyvfluwA\", " + 
                    " \"supLim\": 843 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/654/pricetable/papers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/654/pricetable/papers"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA4SIMPLEX\": \"5RE44FGYm\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/654/pricetable/papers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/654/pricetable/papers"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/162/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/162/employees"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "MfII8NFzwWuT_KB")
                .post(baseUrlOfSut + "/printshops/162/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/162/employees"));
    }
}
