package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-04T17:14:24.264-04:00[America/New_York]
 * <br>
*  The generated test suite contains 425 tests
 * <br>
*  Covered targets: 3113
 * <br>
*  Used time: 1h 8m 36s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  
*/

public class EM_proxyprintdefault_1234_Test_240_test_240_putOnUpdateReturnsMismatchResponseWithSchemaUsingSql {
    

    
    private static final SutHandler controller = new em.external.io.github.proxyprint.kitchen.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/proxyprint-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (404) GET:/printshops/{id}
    * 2 - (200) PUT:/printshops/{printShopID}/pricetable/editstapling
    * 3 - (200) PUT:/printshops/{printShopID}/pricetable/editstapling
    * 4 - (200) PUT:/printshops/{id}/pricetable/covers
    * 5 - (200) PUT:/printshops/{id}/pricetable/covers
    * 6 - (200) POST:/printshops/{printShopID}/employees
    * 7 - (200) DELETE:/printshops/{printShopID}/employees/{employeeID}
    * 8 - (403) PUT:/consumer/info/update
    * 9 - (403) PUT:/consumer/info/update
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_240_putOnUpdateReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 401L)
                .d("ADDRESS", "\"ckMRUUD\"")
                .d("AVG_RATING", "0.5008999415945338")
                .d("BALANCE_CURRENCY", "\"3XACZKV\"")
                .d("BALANCE_FRACTIONAL_PART", "574")
                .d("BALANCE_INTEGER_PART", "0")
                .d("LATITUDE", "0.3334122407600587")
                .d("LOGO", "\"FbCwZxnhcMPu\"")
                .d("LONGITUDE", "0.6217520925596541")
                .d("NAME", "\"n\"")
                .d("NIF", "\"6o4\"")
            .and().insertInto("USERS", 422L)
                .d("PASSWORD", "\"vTVvMlMWqDs\"")
                .d("USERNAME", "\"_EM_1177_XYZ_\"")
            .and().insertInto("PRINTSHOPS", 421L)
                .d("ADDRESS", "\"0u4tOwtUsLZV3Fy\"")
                .d("AVG_RATING", "0.97680561")
                .d("BALANCE_CURRENCY", "\"U\"")
                .d("BALANCE_FRACTIONAL_PART", "20")
                .d("BALANCE_INTEGER_PART", "-2096782")
                .d("LATITUDE", "-0.8555683866146537")
                .d("LOGO", "\"0Sv8JQf6ko4C1\"")
                .d("LONGITUDE", "0.0")
                .d("NAME", "\"yUxJ\"")
                .d("NIF", "\"\"")
            .and().insertInto("EMPLOYEES", 420L)
                .d("NAME", "\"pUi__RV7jKqUl7h2\"")
                .d("ID", "2")
                .d("PRINTSHOP_ID", "4")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/223")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"-1174\" ")
                .put(baseUrlOfSut + "/printshops/-1174/pricetable/editstapling")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "-1174")
                .contentType("application/json")
                .body(" fis7ZGY0VP1_Q ")
                .put(baseUrlOfSut + "/printshops/-1174/pricetable/editstapling")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"1YKo8Ls\", " + 
                    " \"priceA3\": \"eZI\", " + 
                    " \"priceA4\": \"G9q\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/223/pricetable/covers")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "-1174")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"NC7zlH4WQKvs\", " + 
                    " \"priceA3\": \"\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/223/pricetable/covers")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/-1174/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        String location_employees__1049 = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_employees__1049));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .delete(resolveLocation(location_employees__1049, baseUrlOfSut + "/printshops/-1174/employees/195"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/info/update")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/info/update"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/info/update")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/info/update"));
    }
}
