package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-04T17:14:24.264-04:00[America/New_York]
 * <br>
*  The generated test suite contains 425 tests
 * <br>
*  Covered targets: 3113
 * <br>
*  Used time: 1h 8m 36s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  
*/

public class EM_proxyprintdefault_1234_Test_47_test_47_postOnRegisterShowsFaults_100_101UsingSql {
    

    
    private static final SutHandler controller = new em.external.io.github.proxyprint.kitchen.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/proxyprint-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (403) POST:/printshops/{id}/pricetable/deletepaper
    * 2 - (403) POST:/printshops/{id}/pricetable/deletepaper
    * 3 - (200) GET:/printshops
    * 4 - (500) POST:/consumer/register
    * 5 - (200) POST:/consumer/register
    * Found 4 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_47_postOnRegisterShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 360L)
                .d("ADDRESS", "\"hBu\"")
                .d("AVG_RATING", "0.4078607320534454")
                .d("BALANCE_CURRENCY", "\"x1EhwEmlKQh7\"")
                .d("BALANCE_FRACTIONAL_PART", "982")
                .d("BALANCE_INTEGER_PART", "705")
                .d("LATITUDE", "0.6812586575634574")
                .d("LOGO", "\"kYWIVU\"")
                .d("LONGITUDE", "0.6166568855173237")
                .d("NAME", "\"kPqWHB\"")
                .d("NIF", "\"\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 561, " + 
                    " \"priceA4DUPLEX\": \"SEORYmiP6L8fjv\", " + 
                    " \"supLim\": 245 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/-1841837029170439606/pricetable/deletepaper")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-1841837029170439606/pricetable/deletepaper"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"y6BK4YPYS6\", " + 
                    " \"infLim\": 209, " + 
                    " \"priceA3DUPLEX\": \"mjv7q\", " + 
                    " \"priceA3SIMPLEX\": \"jes\", " + 
                    " \"priceA4DUPLEX\": \"8kN\", " + 
                    " \"priceA4SIMPLEX\": \"xACpTAM0ErV6a\", " + 
                    " \"supLim\": 830 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/-1841837029170439606/pricetable/deletepaper?EMextraParam123=_EM_48_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-1841837029170439606/pricetable/deletepaper"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops?password=ct")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("[{\"id\":1,\"name\":\"Copy Scan\",\"address\":\"Rua Quinta dos Órfãos 16 S. Vitor (Junto à Universidade do Minho), Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_1\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":2,\"name\":\"Flash Vidius - Gomes \\u0026 Santana, Lda.\",\"address\":\"R. Manuel Silva, 20 - R/C. C.P. 4490000, Povoa de Varzim, Porto\",\"latitude\":41.379392,\"longitude\":-8.761458,\"nif\":\"199111333\",\"logo\":\"logo_3\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":3,\"name\":\"CopyGraphe\",\"address\":\"R. Ramalho Ortigão C Com Pescador - lj 12. C.P. 4490678, Povoa de Varzim, Porto\",\"latitude\":41.383314,\"longitude\":-8.761942,\"nif\":\"123098333\",\"logo\":\"logo_4\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":4,\"name\":\"Nelson Costa Santos\",\"address\":\"Tv. Senra, 22 - Póvoa de Varzim. C.P. 4490000, Povoa de Varzim, Porto.\",\"latitude\":41.38207,\"longitude\":-8.763069,\"nif\":\"153655378\",\"logo\":\"logo_5\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":5,\"name\":\"Gráfica Editora Poveira, Lda.\",\"address\":\"R. Manuel Silva, 18. C.P. 4490657, Povoa de Varzim, Porto.\",\"latitude\":41.379605,\"longitude\":-8.761047,\"nif\":\"133555378\",\"logo\":\"logo_6\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":6,\"name\":\"Staples Vila do Conde\",\"address\":\"Avenida General Humberto Delgado 2, Vila do Conde\",\"latitude\":41.370674,\"longitude\":-8.744176,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":7,\"name\":\"Staples Vila da Maia\",\"address\":\"Rua Comendador Valentim dos Santos Dinis 570, Maia\",\"latitude\":41.246159,\"longitude\":-8.625225,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":8,\"name\":\"Video Norte\",\"address\":\"Rua Nova de Santa Cruz\",\"latitude\":41.5594,\"longitude\":-8.3972,\"nif\":\"123444378\",\"logo\":\"logo_8\",\"avgRating\":4.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":9,\"name\":\"SmartPrint\",\"address\":\"Rua dos Peões, Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_2\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":10,\"name\":\"kPqWHB\",\"address\":\"hBu\",\"latitude\":0.6812586575634574,\"longitude\":0.6166568855173237,\"nif\":\"\",\"logo\":\"kYWIVU\",\"avgRating\":0.40786073,\"balance\":{\"currency\":\"x1EhwEmlKQh7\",\"integerPart\":705,\"fractionalPart\":982}}]"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_83_addUser.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/register'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/consumer/register")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_83_addUser
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/consumer/register"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/register?" + 
                    "EMextraParam123=_EM_86_XYZ_&" + 
                    "password=H34qQaXulAYN&" + 
                    "name=m4xiXJXO&" + 
                    "username=ti4aqVsTFbolk&" + 
                    "longitude=P")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"consumer\":{\"name\":\"m4xiXJXO\",\"longitude\":\"P\",\"printingSchemas\":[],\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0},\"id\":21,\"username\":\"ti4aqVsTFbolk\",\"password\":\"H34qQaXulAYN\",\"roles\":[\"ROLE_USER\"]},\"success\":true}"));
    }
}
