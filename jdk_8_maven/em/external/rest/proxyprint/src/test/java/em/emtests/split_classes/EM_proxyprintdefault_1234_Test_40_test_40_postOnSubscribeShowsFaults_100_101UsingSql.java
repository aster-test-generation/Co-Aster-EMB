package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-04T17:14:24.264-04:00[America/New_York]
 * <br>
*  The generated test suite contains 425 tests
 * <br>
*  Covered targets: 3113
 * <br>
*  Used time: 1h 8m 36s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  
*/

public class EM_proxyprintdefault_1234_Test_40_test_40_postOnSubscribeShowsFaults_100_101UsingSql {
    

    
    private static final SutHandler controller = new em.external.io.github.proxyprint.kitchen.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/proxyprint-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (500) POST:/consumer/{consumerID}/printingschemas
    * 2 - (500) GET:/consumer/{consumerID}/printingschemas
    * 3 - (500) DELETE:/consumer/requests/cancel/{id}
    * 4 - (403) POST:/printshops/{printShopID}/employees
    * 5 - (403) PUT:/printshops/{printShopID}/employees
    * 6 - (404) POST:/consumer/subscribe
    * Found 8 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_40_postOnSubscribeShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 538L)
                .d("PASSWORD", "\"7G\"")
                .d("USERNAME", "\"WR7b7RBLNculuGVZ\"")
            .and().insertInto("CONSUMERS", 537L)
                .d("BALANCE_CURRENCY", "\"s1Gy82znOTc\"")
                .d("BALANCE_FRACTIONAL_PART", "623")
                .d("BALANCE_INTEGER_PART", "518")
                .d("EMAIL", "\"6OX\"")
                .d("LATITUDE", "\"89j\"")
                .d("LONGITUDE", "\"VyVR\"")
                .d("NAME", "\"_EM_1447_XYZ_\"")
                .r("ID", 538L)
            .and().insertInto("PRINTSHOPS", 539L)
                .d("ADDRESS", "\"gbf6ulYVz\"")
                .d("AVG_RATING", "-31.345955493177264")
                .d("BALANCE_CURRENCY", "\"RhBkl\"")
                .d("BALANCE_FRACTIONAL_PART", "177")
                .d("BALANCE_INTEGER_PART", "132033")
                .d("LATITUDE", "-9590.741261811761")
                .d("LOGO", "\"Q9rA54WXNe5s\"")
                .d("LONGITUDE", "0.233456537195")
                .d("NAME", "\"\"")
                .d("NIF", "\"O5s5WBKO1b\"")
            .and().insertInto("PRINTSHOPS", 546L)
                .d("ADDRESS", "\"zwmzIZOHNk\"")
                .d("AVG_RATING", "0.4948823195041506")
                .d("BALANCE_CURRENCY", "\"Jwc6u3YYs\"")
                .d("BALANCE_FRACTIONAL_PART", "-1724121902")
                .d("BALANCE_INTEGER_PART", "293")
                .d("LATITUDE", "0.4010968529253416")
                .d("LOGO", "\"42\"")
                .d("LONGITUDE", "0.08196379732054926")
                .d("NAME", "\"\"")
                .d("NIF", "\"DugYguY0\"")
            .and().insertInto("PRINTSHOPS", 545L)
                .d("ADDRESS", "\"\"")
                .d("AVG_RATING", "0.08046586447279624")
                .d("BALANCE_CURRENCY", "\"O3NP4gHtdvMX\"")
                .d("BALANCE_FRACTIONAL_PART", "824")
                .d("BALANCE_INTEGER_PART", "638984258")
                .d("LATITUDE", "-0.8906226210368844")
                .d("LOGO", "\"U2Gfcq55blFU4e\"")
                .d("LONGITUDE", "0.3921778785013531")
                .d("NAME", "\"jx7F5\"")
                .d("NIF", "\"rIS9SZu5vl\"")
            .and().insertInto("USERS", 544L)
                .d("PASSWORD", "\"5ZV7WU4nf4s1z\"")
                .d("USERNAME", "\"=9iSJiv\"")
            .and().insertInto("CONSUMERS", 543L)
                .d("BALANCE_CURRENCY", "\"uabG\"")
                .d("BALANCE_FRACTIONAL_PART", "710")
                .d("BALANCE_INTEGER_PART", "688")
                .d("NAME", "\"fCu_l\"")
                .r("ID", 544L)
            .and().insertInto("PRINT_REQUESTS", 540L)
                .d("ARRIVAL", "NULL")
                .d("COST", "0.9061887206570978")
                .d("DELIVERED", "\"2087-07-31 22:21:27\"")
                .d("EMPATTENDED", "\"Edzr5PFj_5a\"")
                .d("EMPDELIVERED", "NULL")
                .d("FINISHED", "NULL")
                .d("PAYPAL_SALE_ID", "\"ykL_LVo_\"")
                .d("PAYMENT_TYPE", "\"w8BB\"")
                .d("STATUS", "\"NOT_PAYED\"")
                .r("CONSUMER_ID", 537L)
                .d("PRINTSHOP_ID", "NULL")
                .d("PRINTSHOP", "NULL")
                .d("CONSUMER", "NULL")
            .and().insertInto("USERS", 448L)
                .d("PASSWORD", "\"vp\"")
                .d("USERNAME", "\"CyclFn\"")
            .and().insertInto("PRINTSHOPS", 452L)
                .d("ADDRESS", "\"TbKF7VOTe0]p0\"")
                .d("AVG_RATING", "5.640419705783357")
                .d("BALANCE_CURRENCY", "\"3U]\"")
                .d("BALANCE_FRACTIONAL_PART", "164")
                .d("BALANCE_INTEGER_PART", "8647")
                .d("LATITUDE", "0.7553308906207568")
                .d("LOGO", "\"_EM_1449_XYZ_\"")
                .d("LONGITUDE", "0.8316951183968223")
                .d("NAME", "\"_EM_1276_XYZ_\"")
                .d("NIF", "\"cyc9xU\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_72_addNewConsumerPrintingSchema.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"_EM_1271_XYZ_\", " + 
                    " \"coverSpecs\": \"_EM_1272_XYZ_\", " + 
                    " \"deleted\": true, " + 
                    " \"name\": \"bEn2tB4sZqgIWIT\", " + 
                    " \"paperSpecs\": \"h\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/0/printingschemas")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_72_addNewConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/0/printingschemas"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/0/printingschemas?" + 
                    "password=eQ5Byx9VWjnxnsvl&" + 
                    "username=PNM")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/0/printingschemas"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_289_cancelRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/requests/cancel/{id}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1453_XYZ_")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/16?" + 
                    "password=THH1rSXWb6Z3q&" + 
                    "username=VOHYgrZPWWdUnsgF")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_289_cancelRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/requests/cancel/16"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/-3690/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-3690/employees"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/printshops/-3690/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-3690/employees"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
}
