package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-04T17:14:24.264-04:00[America/New_York]
 * <br>
*  The generated test suite contains 425 tests
 * <br>
*  Covered targets: 3113
 * <br>
*  Used time: 1h 8m 36s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  
*/

public class EM_proxyprintdefault_1234_Test_194_test_194_getOnPricetableShowsFaults_100_101UsingSql {
    

    
    private static final SutHandler controller = new em.external.io.github.proxyprint.kitchen.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/proxyprint-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (500) POST:/consumer/{consumerID}/printingschemas
    * 2 - (500) GET:/consumer/{consumerID}/printingschemas
    * 3 - (500) GET:/consumer/satisfied
    * 4 - (200) DELETE:/consumer/requests/cancel/{id}
    * 5 - (403) POST:/printshops/{printShopID}/employees
    * 6 - (403) PUT:/printshops/{printShopID}/employees
    * 7 - (404) POST:/consumer/subscribe
    * 8 - (200) GET:/printshops/{id}/pricetable
    * Found 8 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_194_getOnPricetableShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 525L)
                .d("PASSWORD", "\"PNT9f\"")
                .d("USERNAME", "\"_EM_1427_XYZ_\"")
            .and().insertInto("CONSUMERS", 524L)
                .d("BALANCE_CURRENCY", "\"_EM_1428_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "1291")
                .d("BALANCE_INTEGER_PART", "820")
                .d("EMAIL", "\"buQPEWiQ\"")
                .d("LATITUDE", "\"XvzS52rKdFum\"")
                .d("LONGITUDE", "\"_EM_1429_XYZ_\"")
                .d("NAME", "\"sNIbFgCf\"")
                .r("ID", 525L)
            .and().insertInto("PRINTSHOPS", 526L)
                .d("ADDRESS", "\"i4uE2H2jPMZCM\"")
                .d("AVG_RATING", "0.1")
                .d("BALANCE_CURRENCY", "\"H7kpPC33jJ_R\"")
                .d("BALANCE_FRACTIONAL_PART", "720")
                .d("BALANCE_INTEGER_PART", "560")
                .d("LATITUDE", "0.8")
                .d("LOGO", "\"Yb\"")
                .d("LONGITUDE", "-1.3789422468146784")
                .d("NAME", "\"5r__z^vBXeNqE3\"")
                .d("NIF", "\"MtqZqUm4aWNChg\"")
            .and().insertInto("PRINTSHOPS", 534L)
                .d("ADDRESS", "\"Lgipfn\"")
                .d("AVG_RATING", "0.8451562255403866")
                .d("BALANCE_CURRENCY", "\"MXCupPkRwNSqmh\"")
                .d("BALANCE_FRACTIONAL_PART", "1138887505")
                .d("BALANCE_INTEGER_PART", "622")
                .d("LATITUDE", "0.9961341038269936")
                .d("LOGO", "\"PAP2DQ4zi_qIh\"")
                .d("LONGITUDE", "0.3528196565039424")
                .d("NAME", "\"h36Syl3r6bSKM\"")
                .d("NIF", "\"73K\"")
            .and().insertInto("PRINTSHOPS", 533L)
                .d("ADDRESS", "\"wAl9ZHt4arD\"")
                .d("AVG_RATING", "0.4679692920373635")
                .d("BALANCE_CURRENCY", "\"\"")
                .d("BALANCE_FRACTIONAL_PART", "15")
                .d("BALANCE_INTEGER_PART", "155")
                .d("LATITUDE", "-1.0666867367356923")
                .d("LOGO", "\"UPUHmX\"")
                .d("LONGITUDE", "0.347562983512437")
                .d("NAME", "\"RdBqAX09IWHAe\"")
                .d("NIF", "\"_EM_1430_XYZ_\"")
            .and().insertInto("USERS", 532L)
                .d("PASSWORD", "\"ugJN\"")
                .d("USERNAME", "\"518n681\"")
            .and().insertInto("CONSUMERS", 531L)
                .d("BALANCE_CURRENCY", "\"WM8iq5mr0jrqw104\"")
                .d("BALANCE_FRACTIONAL_PART", "954")
                .d("BALANCE_INTEGER_PART", "-16332")
                .d("NAME", "\"B\"")
                .r("ID", 532L)
            .and().insertInto("USERS", 530L)
                .d("PASSWORD", "\"SBn8\"")
                .d("USERNAME", "\"\"")
            .and().insertInto("CONSUMERS", 529L)
                .d("BALANCE_CURRENCY", "\"frV\"")
                .d("BALANCE_FRACTIONAL_PART", "-147")
                .d("BALANCE_INTEGER_PART", "694")
                .d("NAME", "\"_EM_1431_XYZ_\"")
                .r("ID", 530L)
            .and().insertInto("PRINT_REQUESTS", 528L)
                .d("COST", "0.39")
            .and().insertInto("DOCUMENTS", 527L)
                .d("FILE_NAME", "\"RBV\"")
                .d("TOTAL_PAGES", "879")
                .d("PRINT_REQUEST_ID", "NULL")
            .and().insertInto("USERS", 448L)
                .d("PASSWORD", "\"vp\"")
                .d("USERNAME", "\"CyclFn\"")
            .and().insertInto("PRINTSHOPS", 452L)
                .d("ADDRESS", "\"aslHKbIwiZX\"")
                .d("AVG_RATING", "0.059259826931341575")
                .d("BALANCE_CURRENCY", "\"_EM_1275_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "2097316")
                .d("BALANCE_INTEGER_PART", "455")
                .d("LATITUDE", "0.7553308906207568")
                .d("LOGO", "\"gyMzpJrduln\"")
                .d("LONGITUDE", "0.8316951183968223")
                .d("NAME", "\"_EM_1276_XYZ_\"")
                .d("NIF", "\"kyc9xU\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_71_addNewConsumerPrintingSchema.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"_EM_1271_XYZ_\", " + 
                    " \"coverSpecs\": \"_EM_1272_XYZ_\", " + 
                    " \"deleted\": false, " + 
                    " \"paperSpecs\": \"_EM_1273_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/422/printingschemas")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_71_addNewConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/consumer/422/printingschemas"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1426_XYZ_")
                .get(baseUrlOfSut + "/consumer/422/printingschemas")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/422/printingschemas"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/satisfied'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "NpQQZZDFahyMgY7")
                .get(baseUrlOfSut + "/consumer/satisfied?" + 
                    "password=7diSKEO&" + 
                    "username=hyAMHO2jwvq")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/satisfied"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1426_XYZ_")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/13?" + 
                    "password=THH1rSXWb6Z3q&" + 
                    "username=VOHYgrZPWWdUnsgF")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/-106/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-106/employees"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1426_XYZ_")
                .put(baseUrlOfSut + "/printshops/-106/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-106/employees"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1426_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"Xp\", " + 
                    " \"printShop\": { " + 
                    " \"id\": 589, " + 
                    " \"address\": \"EB9ufRPek\", " + 
                    " \"longitude\": -0.0534214493681231, " + 
                    " \"nif\": \"_EM_1277_XYZ_\", " + 
                    " \"logo\": \"_EM_1278_XYZ_\", " + 
                    " \"avgRating\": 0.14049183, " + 
                    " \"balance\": {} " + 
                    " }, " + 
                    " \"username\": \"VD\", " + 
                    " \"roles\": [] " + 
                    " } ")
                .get(baseUrlOfSut + "/printshops/13/pricetable")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"printcopy\":{},\"rings\":{},\"stapling\":0.0,\"covers\":{},\"success\":true}"));
    }
}
