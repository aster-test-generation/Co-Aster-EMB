package em.emtests.single_class;

/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-04T17:14:24.264-04:00[America/New_York]
 * <br>
*  The generated test suite contains 425 tests
 * <br>
*  Covered targets: 3113
 * <br>
*  Used time: 1h 8m 36s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  
*/
public class EM_proxyprintdefault_1234_Test {

    
    private static final SutHandler controller = new em.external.io.github.proxyprint.kitchen.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/proxyprint-sut.jar");
    private static String baseUrlOfSut;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * 1 - (403) GET:/api/secured
    * 2 - (403) GET:/consumer/balance
    * 3 - (404) POST:/consumer/subscribe
    * 4 - (500) POST:/printdocument
    * 5 - (200) GET:/printshops/nearest
    * 6 - (200) GET:/
    * Found 4 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_0_getOnRootShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 240L)
                .d("ADDRESS", "\"YNxuvzUmZhB\"")
                .d("AVG_RATING", "0.3465404928269479")
                .d("BALANCE_CURRENCY", "\"_EM_863_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "707")
                .d("BALANCE_INTEGER_PART", "861")
                .d("LATITUDE", "0.20467897804796908")
                .d("LOGO", "\"_EM_864_XYZ_\"")
                .d("LONGITUDE", "0.4581774298342023")
                .d("NAME", "\"_EM_865_XYZ_\"")
                .d("NIF", "\"_EM_866_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "yjPFni3VeF")
                .get(baseUrlOfSut + "/api/secured")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/api/secured"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "yjPFni3VeF")
                .get(baseUrlOfSut + "/consumer/balance")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/balance"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_107_processSumitedFiles.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/printdocument'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printdocument")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_107_processSumitedFiles
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.ClassCastException"))
                .body("'message'", containsString("org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper cannot be cast to org.springframework.web.multipart.MultipartHttpServletRequest"))
                .body("'path'", containsString("/printdocument"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/nearest?" + 
                    "latitude=0.20467897804796908&" + 
                    "longitude=0.4581774298342023")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":true,\"printshops\":{\"0.0\":{\"id\":10,\"name\":\"_EM_865_XYZ_\",\"address\":\"YNxuvzUmZhB\",\"latitude\":0.20467897804796908,\"longitude\":0.4581774298342023,\"nif\":\"_EM_866_XYZ_\",\"logo\":\"_EM_864_XYZ_\",\"avgRating\":0.34654048,\"balance\":{\"currency\":\"_EM_863_XYZ_\",\"integerPart\":861,\"fractionalPart\":707}},\"4654.352875534901\":{\"id\":7,\"name\":\"Staples Vila da Maia\",\"address\":\"Rua Comendador Valentim dos Santos Dinis 570, Maia\",\"latitude\":41.246159,\"longitude\":-8.625225,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},\"4670.16376158267\":{\"id\":6,\"name\":\"Staples Vila do Conde\",\"address\":\"Avenida General Humberto Delgado 2, Vila do Conde\",\"latitude\":41.370674,\"longitude\":-8.744176,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},\"4671.449941934517\":{\"id\":2,\"name\":\"Flash Vidius - Gomes \\u0026 Santana, Lda.\",\"address\":\"R. Manuel Silva, 20 - R/C. C.P. 4490000, Povoa de Varzim, Porto\",\"latitude\":41.379392,\"longitude\":-8.761458,\"nif\":\"199111333\",\"logo\":\"logo_3\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},\"4671.464729611045\":{\"id\":5,\"name\":\"Gráfica Editora Poveira, Lda.\",\"address\":\"R. Manuel Silva, 18. C.P. 4490657, Povoa de Varzim, Porto.\",\"latitude\":41.379605,\"longitude\":-8.761047,\"nif\":\"133555378\",\"logo\":\"logo_6\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},\"4671.771241188935\":{\"id\":4,\"name\":\"Nelson Costa Santos\",\"address\":\"Tv. Senra, 22 - Póvoa de Varzim. C.P. 4490000, Povoa de Varzim, Porto.\",\"latitude\":41.38207,\"longitude\":-8.763069,\"nif\":\"153655378\",\"logo\":\"logo_5\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},\"4671.883035779042\":{\"id\":3,\"name\":\"CopyGraphe\",\"address\":\"R. Ramalho Ortigão C Com Pescador - lj 12. C.P. 4490678, Povoa de Varzim, Porto\",\"latitude\":41.383314,\"longitude\":-8.761942,\"nif\":\"123098333\",\"logo\":\"logo_4\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},\"4683.660774437021\":{\"id\":9,\"name\":\"SmartPrint\",\"address\":\"Rua dos Peões, Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_2\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},\"4683.792333142023\":{\"id\":8,\"name\":\"Video Norte\",\"address\":\"Rua Nova de Santa Cruz\",\"latitude\":41.5594,\"longitude\":-8.3972,\"nif\":\"123444378\",\"logo\":\"logo_8\",\"avgRating\":4.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}}}}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"message\":\"Olá Mundo!\"}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/
    */
    @Test @Timeout(60)
    public void test_1_getOnRootWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"message\":\"Olá Mundo!\"}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/
    */
    @Test @Timeout(60)
    public void test_2_getOnRootReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"message\":\"Olá Mundo!\"}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/
    */
    @Test @Timeout(60)
    public void test_3_getOnRootReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"message\":\"Olá Mundo!\"}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/
    */
    @Test @Timeout(60)
    public void test_4_getOnRootReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"message\":\"Olá Mundo!\"}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/
    */
    @Test @Timeout(60)
    public void test_5_getOnRootReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"message\":\"Olá Mundo!\"}"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/printdocument
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_6_postOnPrintdocumentShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_107_processSumitedFiles.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/printdocument'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_92_XYZ_")
                .post(baseUrlOfSut + "/printdocument")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_107_processSumitedFiles
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.ClassCastException"))
                .body("'message'", containsString("org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper cannot be cast to org.springframework.web.multipart.MultipartHttpServletRequest"))
                .body("'path'", containsString("/printdocument"));
    }
    
    
    /**
    * Calls:
    * 1 - (500) POST:/consumer/{id}/notify
    * 2 - (500) POST:/consumer/{id}/notify
    * 3 - (500) POST:/paypal/ipn/consumer/{consumerID}
    * 4 - (500) POST:/paypal/ipn/consumer/{consumerID}
    * 5 - (500) POST:/printdocument
    * Found 10 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_7_postOnPrintdocumentShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 583L)
                .d("PASSWORD", "\"OMNr\"")
                .d("USERNAME", "\"tPZv\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{id}/notify'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/-7186359147030274231/notify")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/-7186359147030274231/notify"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{id}/notify'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/-7186359147030274231/notify")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/-7186359147030274231/notify"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/paypal/ipn/consumer/{consumerID}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/paypal/ipn/consumer/326")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/paypal/ipn/consumer/326"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/paypal/ipn/consumer/{consumerID}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/paypal/ipn/consumer/326?payer_email=_EM_1713_XYZ_")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/paypal/ipn/consumer/326"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_107_processSumitedFiles.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/printdocument'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printdocument")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_107_processSumitedFiles
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.ClassCastException"))
                .body("'message'", containsString("org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper cannot be cast to org.springframework.web.multipart.MultipartHttpServletRequest"))
                .body("'path'", containsString("/printdocument"));
    }
    
    
    /**
    * Calls:
    * 1 - (500) POST:/printdocument
    * 2 - (500) POST:/printdocument
    * 3 - (404) GET:/printshops/{id}
    * 4 - (200) DELETE:/consumer/requests/cancel/{id}
    * 5 - (200) GET:/
    * 6 - (500) POST:/printdocument
    * Found 6 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_8_postOnPrintdocumentShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_107_processSumitedFiles.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/printdocument'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printdocument")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_107_processSumitedFiles
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.ClassCastException"))
                .body("'message'", containsString("org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper cannot be cast to org.springframework.web.multipart.MultipartHttpServletRequest"))
                .body("'path'", containsString("/printdocument"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_107_processSumitedFiles.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/printdocument'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printdocument")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_107_processSumitedFiles
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.ClassCastException"))
                .body("'message'", containsString("org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper cannot be cast to org.springframework.web.multipart.MultipartHttpServletRequest"))
                .body("'path'", containsString("/printdocument"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/224")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "F_vOEr")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/924?username=l8uG9")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"message\":\"Olá Mundo!\"}"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_107_processSumitedFiles.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/printdocument'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printdocument")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_107_processSumitedFiles
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.ClassCastException"))
                .body("'message'", containsString("org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper cannot be cast to org.springframework.web.multipart.MultipartHttpServletRequest"))
                .body("'path'", containsString("/printdocument"));
    }
    
    
    /**
    * Calls:
    * 1 - (500) PUT:/consumer/{username}/notifications
    * 2 - (500) PUT:/consumer/{username}/notifications
    * 3 - (500) POST:/paypal/ipn/consumer/{consumerID}
    * 4 - (500) POST:/paypal/ipn/consumer/{consumerID}
    * 5 - (204) OPTIONS:/*
    * Found 8 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_9_optionsOn_ShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1660L)
                .d("PASSWORD", "\"B_a\"")
                .d("USERNAME", "\"MDhCqST2\"")
            .and().insertInto("USERS", 1690L)
                .d("PASSWORD", "\"9BFYO3kkHKR_HYga\"")
                .d("USERNAME", "\"5sQVwZOOqFm5ky1\"")
            .and().insertInto("CONSUMERS", 1689L)
                .d("BALANCE_CURRENCY", "\"hVBFYu7fXkX4Tm0R\"")
                .d("BALANCE_FRACTIONAL_PART", "102")
                .d("BALANCE_INTEGER_PART", "581")
                .d("EMAIL", "\"jlGje\"")
                .d("LATITUDE", "NULL")
                .d("LONGITUDE", "NULL")
                .d("NAME", "\"26kRpofJT9yg\"")
                .d("ID", "9")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_234_readAllNotifications.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{username}/notifications'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/_jRiuIL/notifications")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_234_readAllNotifications
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/_jRiuIL/notifications"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_234_readAllNotifications.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{username}/notifications'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/_jRiuIL/notifications")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_234_readAllNotifications
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/_jRiuIL/notifications"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/paypal/ipn/consumer/{consumerID}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/paypal/ipn/consumer/555878792")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/paypal/ipn/consumer/555878792"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/paypal/ipn/consumer/{consumerID}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/paypal/ipn/consumer/555878792?" + 
                    "EMextraParam123=_EM_35_XYZ_&" + 
                    "charset=JIZV0DTRt&" + 
                    "transaction_type=iHduTDK1tiFG&" + 
                    "mc_gross=D_BZMwmQq")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NumberFormatException"))
                .body("'message'", containsString("For input string: \"D_BZMwmQq\""))
                .body("'path'", containsString("/paypal/ipn/consumer/555878792"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .options(baseUrlOfSut + "/*")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshop
    */
    @Test @Timeout(60)
    public void test_10_getOnPrintshopReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"printshop\":{\"id\":8,\"name\":\"Video Norte\",\"address\":\"Rua Nova de Santa Cruz\",\"latitude\":41.5594,\"longitude\":-8.3972,\"nif\":\"123444378\",\"logo\":\"logo_8\",\"avgRating\":4.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},\"success\":true}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops
    */
    @Test @Timeout(60)
    public void test_11_getOnPrintshopsReturnsContentUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 432L)
                .d("PASSWORD", "\"9\"")
                .d("USERNAME", "\"1E\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops?password=9")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("[{\"id\":1,\"name\":\"Copy Scan\",\"address\":\"Rua Quinta dos Órfãos 16 S. Vitor (Junto à Universidade do Minho), Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_1\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":2,\"name\":\"Flash Vidius - Gomes \\u0026 Santana, Lda.\",\"address\":\"R. Manuel Silva, 20 - R/C. C.P. 4490000, Povoa de Varzim, Porto\",\"latitude\":41.379392,\"longitude\":-8.761458,\"nif\":\"199111333\",\"logo\":\"logo_3\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":3,\"name\":\"CopyGraphe\",\"address\":\"R. Ramalho Ortigão C Com Pescador - lj 12. C.P. 4490678, Povoa de Varzim, Porto\",\"latitude\":41.383314,\"longitude\":-8.761942,\"nif\":\"123098333\",\"logo\":\"logo_4\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":4,\"name\":\"Nelson Costa Santos\",\"address\":\"Tv. Senra, 22 - Póvoa de Varzim. C.P. 4490000, Povoa de Varzim, Porto.\",\"latitude\":41.38207,\"longitude\":-8.763069,\"nif\":\"153655378\",\"logo\":\"logo_5\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":5,\"name\":\"Gráfica Editora Poveira, Lda.\",\"address\":\"R. Manuel Silva, 18. C.P. 4490657, Povoa de Varzim, Porto.\",\"latitude\":41.379605,\"longitude\":-8.761047,\"nif\":\"133555378\",\"logo\":\"logo_6\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":6,\"name\":\"Staples Vila do Conde\",\"address\":\"Avenida General Humberto Delgado 2, Vila do Conde\",\"latitude\":41.370674,\"longitude\":-8.744176,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":7,\"name\":\"Staples Vila da Maia\",\"address\":\"Rua Comendador Valentim dos Santos Dinis 570, Maia\",\"latitude\":41.246159,\"longitude\":-8.625225,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":8,\"name\":\"Video Norte\",\"address\":\"Rua Nova de Santa Cruz\",\"latitude\":41.5594,\"longitude\":-8.3972,\"nif\":\"123444378\",\"logo\":\"logo_8\",\"avgRating\":4.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":9,\"name\":\"SmartPrint\",\"address\":\"Rua dos Peões, Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_2\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}}]"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops
    */
    @Test @Timeout(60)
    public void test_12_getOnPrintshopsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printshops")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("[{\"id\":1,\"name\":\"Copy Scan\",\"address\":\"Rua Quinta dos Órfãos 16 S. Vitor (Junto à Universidade do Minho), Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_1\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":2,\"name\":\"Flash Vidius - Gomes \\u0026 Santana, Lda.\",\"address\":\"R. Manuel Silva, 20 - R/C. C.P. 4490000, Povoa de Varzim, Porto\",\"latitude\":41.379392,\"longitude\":-8.761458,\"nif\":\"199111333\",\"logo\":\"logo_3\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":3,\"name\":\"CopyGraphe\",\"address\":\"R. Ramalho Ortigão C Com Pescador - lj 12. C.P. 4490678, Povoa de Varzim, Porto\",\"latitude\":41.383314,\"longitude\":-8.761942,\"nif\":\"123098333\",\"logo\":\"logo_4\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":4,\"name\":\"Nelson Costa Santos\",\"address\":\"Tv. Senra, 22 - Póvoa de Varzim. C.P. 4490000, Povoa de Varzim, Porto.\",\"latitude\":41.38207,\"longitude\":-8.763069,\"nif\":\"153655378\",\"logo\":\"logo_5\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":5,\"name\":\"Gráfica Editora Poveira, Lda.\",\"address\":\"R. Manuel Silva, 18. C.P. 4490657, Povoa de Varzim, Porto.\",\"latitude\":41.379605,\"longitude\":-8.761047,\"nif\":\"133555378\",\"logo\":\"logo_6\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":6,\"name\":\"Staples Vila do Conde\",\"address\":\"Avenida General Humberto Delgado 2, Vila do Conde\",\"latitude\":41.370674,\"longitude\":-8.744176,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":7,\"name\":\"Staples Vila da Maia\",\"address\":\"Rua Comendador Valentim dos Santos Dinis 570, Maia\",\"latitude\":41.246159,\"longitude\":-8.625225,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":8,\"name\":\"Video Norte\",\"address\":\"Rua Nova de Santa Cruz\",\"latitude\":41.5594,\"longitude\":-8.3972,\"nif\":\"123444378\",\"logo\":\"logo_8\",\"avgRating\":4.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":9,\"name\":\"SmartPrint\",\"address\":\"Rua dos Peões, Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_2\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}}]"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/printshops/{id}/pricetable/deletecover
    * 2 - (200) GET:/printshops
    */
    @Test @Timeout(60)
    public void test_13_getOnPrintshopsReturnsContentUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1119L)
                .d("ADDRESS", "\"jLG6\"")
                .d("AVG_RATING", "0.620961388658797")
                .d("BALANCE_CURRENCY", "\"y2chCReh4peHMAa4\"")
                .d("BALANCE_FRACTIONAL_PART", "653")
                .d("BALANCE_INTEGER_PART", "650")
                .d("LATITUDE", "0.09343226824294293")
                .d("LOGO", "\"XpV_0\"")
                .d("LONGITUDE", "0.7728585604783199")
                .d("NAME", "\"MzZrxLi1NviHL\"")
                .d("NIF", "\"CA55wtU3uqS\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"X\", " + 
                    " \"priceA4\": \"vfEXDuBI\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/-7886/pricetable/deletecover")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops?username=MMsesDaXQPsDIbA")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("[{\"id\":1,\"name\":\"Copy Scan\",\"address\":\"Rua Quinta dos Órfãos 16 S. Vitor (Junto à Universidade do Minho), Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_1\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":2,\"name\":\"Flash Vidius - Gomes \\u0026 Santana, Lda.\",\"address\":\"R. Manuel Silva, 20 - R/C. C.P. 4490000, Povoa de Varzim, Porto\",\"latitude\":41.379392,\"longitude\":-8.761458,\"nif\":\"199111333\",\"logo\":\"logo_3\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":3,\"name\":\"CopyGraphe\",\"address\":\"R. Ramalho Ortigão C Com Pescador - lj 12. C.P. 4490678, Povoa de Varzim, Porto\",\"latitude\":41.383314,\"longitude\":-8.761942,\"nif\":\"123098333\",\"logo\":\"logo_4\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":4,\"name\":\"Nelson Costa Santos\",\"address\":\"Tv. Senra, 22 - Póvoa de Varzim. C.P. 4490000, Povoa de Varzim, Porto.\",\"latitude\":41.38207,\"longitude\":-8.763069,\"nif\":\"153655378\",\"logo\":\"logo_5\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":5,\"name\":\"Gráfica Editora Poveira, Lda.\",\"address\":\"R. Manuel Silva, 18. C.P. 4490657, Povoa de Varzim, Porto.\",\"latitude\":41.379605,\"longitude\":-8.761047,\"nif\":\"133555378\",\"logo\":\"logo_6\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":6,\"name\":\"Staples Vila do Conde\",\"address\":\"Avenida General Humberto Delgado 2, Vila do Conde\",\"latitude\":41.370674,\"longitude\":-8.744176,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":7,\"name\":\"Staples Vila da Maia\",\"address\":\"Rua Comendador Valentim dos Santos Dinis 570, Maia\",\"latitude\":41.246159,\"longitude\":-8.625225,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":8,\"name\":\"Video Norte\",\"address\":\"Rua Nova de Santa Cruz\",\"latitude\":41.5594,\"longitude\":-8.3972,\"nif\":\"123444378\",\"logo\":\"logo_8\",\"avgRating\":4.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":9,\"name\":\"SmartPrint\",\"address\":\"Rua dos Peões, Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_2\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":10,\"name\":\"MzZrxLi1NviHL\",\"address\":\"jLG6\",\"latitude\":0.09343226824294293,\"longitude\":0.7728585604783199,\"nif\":\"CA55wtU3uqS\",\"logo\":\"XpV_0\",\"avgRating\":0.62096137,\"balance\":{\"currency\":\"y2chCReh4peHMAa4\",\"integerPart\":650,\"fractionalPart\":653}}]"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops
    */
    @Test @Timeout(60)
    public void test_14_getOnPrintshopsWithQueryParamsReturnsContentUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 831L)
                .d("PASSWORD", "\"M3JcOn427cb\"")
                .d("USERNAME", "\"xzHL7kBSP\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops?" + 
                    "password=M3JcOn427cb&" + 
                    "username=xzHL7kBSP")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("[{\"id\":1,\"name\":\"Copy Scan\",\"address\":\"Rua Quinta dos Órfãos 16 S. Vitor (Junto à Universidade do Minho), Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_1\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":2,\"name\":\"Flash Vidius - Gomes \\u0026 Santana, Lda.\",\"address\":\"R. Manuel Silva, 20 - R/C. C.P. 4490000, Povoa de Varzim, Porto\",\"latitude\":41.379392,\"longitude\":-8.761458,\"nif\":\"199111333\",\"logo\":\"logo_3\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":3,\"name\":\"CopyGraphe\",\"address\":\"R. Ramalho Ortigão C Com Pescador - lj 12. C.P. 4490678, Povoa de Varzim, Porto\",\"latitude\":41.383314,\"longitude\":-8.761942,\"nif\":\"123098333\",\"logo\":\"logo_4\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":4,\"name\":\"Nelson Costa Santos\",\"address\":\"Tv. Senra, 22 - Póvoa de Varzim. C.P. 4490000, Povoa de Varzim, Porto.\",\"latitude\":41.38207,\"longitude\":-8.763069,\"nif\":\"153655378\",\"logo\":\"logo_5\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":5,\"name\":\"Gráfica Editora Poveira, Lda.\",\"address\":\"R. Manuel Silva, 18. C.P. 4490657, Povoa de Varzim, Porto.\",\"latitude\":41.379605,\"longitude\":-8.761047,\"nif\":\"133555378\",\"logo\":\"logo_6\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":6,\"name\":\"Staples Vila do Conde\",\"address\":\"Avenida General Humberto Delgado 2, Vila do Conde\",\"latitude\":41.370674,\"longitude\":-8.744176,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":7,\"name\":\"Staples Vila da Maia\",\"address\":\"Rua Comendador Valentim dos Santos Dinis 570, Maia\",\"latitude\":41.246159,\"longitude\":-8.625225,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":8,\"name\":\"Video Norte\",\"address\":\"Rua Nova de Santa Cruz\",\"latitude\":41.5594,\"longitude\":-8.3972,\"nif\":\"123444378\",\"logo\":\"logo_8\",\"avgRating\":4.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":9,\"name\":\"SmartPrint\",\"address\":\"Rua dos Peões, Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_2\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}}]"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops
    */
    @Test @Timeout(60)
    public void test_15_getOnPrintshopsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("[{\"id\":1,\"name\":\"Copy Scan\",\"address\":\"Rua Quinta dos Órfãos 16 S. Vitor (Junto à Universidade do Minho), Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_1\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":2,\"name\":\"Flash Vidius - Gomes \\u0026 Santana, Lda.\",\"address\":\"R. Manuel Silva, 20 - R/C. C.P. 4490000, Povoa de Varzim, Porto\",\"latitude\":41.379392,\"longitude\":-8.761458,\"nif\":\"199111333\",\"logo\":\"logo_3\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":3,\"name\":\"CopyGraphe\",\"address\":\"R. Ramalho Ortigão C Com Pescador - lj 12. C.P. 4490678, Povoa de Varzim, Porto\",\"latitude\":41.383314,\"longitude\":-8.761942,\"nif\":\"123098333\",\"logo\":\"logo_4\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":4,\"name\":\"Nelson Costa Santos\",\"address\":\"Tv. Senra, 22 - Póvoa de Varzim. C.P. 4490000, Povoa de Varzim, Porto.\",\"latitude\":41.38207,\"longitude\":-8.763069,\"nif\":\"153655378\",\"logo\":\"logo_5\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":5,\"name\":\"Gráfica Editora Poveira, Lda.\",\"address\":\"R. Manuel Silva, 18. C.P. 4490657, Povoa de Varzim, Porto.\",\"latitude\":41.379605,\"longitude\":-8.761047,\"nif\":\"133555378\",\"logo\":\"logo_6\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":6,\"name\":\"Staples Vila do Conde\",\"address\":\"Avenida General Humberto Delgado 2, Vila do Conde\",\"latitude\":41.370674,\"longitude\":-8.744176,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":7,\"name\":\"Staples Vila da Maia\",\"address\":\"Rua Comendador Valentim dos Santos Dinis 570, Maia\",\"latitude\":41.246159,\"longitude\":-8.625225,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":8,\"name\":\"Video Norte\",\"address\":\"Rua Nova de Santa Cruz\",\"latitude\":41.5594,\"longitude\":-8.3972,\"nif\":\"123444378\",\"logo\":\"logo_8\",\"avgRating\":4.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":9,\"name\":\"SmartPrint\",\"address\":\"Rua dos Peões, Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_2\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}}]"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops
    */
    @Test @Timeout(60)
    public void test_16_getOnPrintshopsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("[{\"id\":1,\"name\":\"Copy Scan\",\"address\":\"Rua Quinta dos Órfãos 16 S. Vitor (Junto à Universidade do Minho), Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_1\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":2,\"name\":\"Flash Vidius - Gomes \\u0026 Santana, Lda.\",\"address\":\"R. Manuel Silva, 20 - R/C. C.P. 4490000, Povoa de Varzim, Porto\",\"latitude\":41.379392,\"longitude\":-8.761458,\"nif\":\"199111333\",\"logo\":\"logo_3\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":3,\"name\":\"CopyGraphe\",\"address\":\"R. Ramalho Ortigão C Com Pescador - lj 12. C.P. 4490678, Povoa de Varzim, Porto\",\"latitude\":41.383314,\"longitude\":-8.761942,\"nif\":\"123098333\",\"logo\":\"logo_4\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":4,\"name\":\"Nelson Costa Santos\",\"address\":\"Tv. Senra, 22 - Póvoa de Varzim. C.P. 4490000, Povoa de Varzim, Porto.\",\"latitude\":41.38207,\"longitude\":-8.763069,\"nif\":\"153655378\",\"logo\":\"logo_5\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":5,\"name\":\"Gráfica Editora Poveira, Lda.\",\"address\":\"R. Manuel Silva, 18. C.P. 4490657, Povoa de Varzim, Porto.\",\"latitude\":41.379605,\"longitude\":-8.761047,\"nif\":\"133555378\",\"logo\":\"logo_6\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":6,\"name\":\"Staples Vila do Conde\",\"address\":\"Avenida General Humberto Delgado 2, Vila do Conde\",\"latitude\":41.370674,\"longitude\":-8.744176,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":7,\"name\":\"Staples Vila da Maia\",\"address\":\"Rua Comendador Valentim dos Santos Dinis 570, Maia\",\"latitude\":41.246159,\"longitude\":-8.625225,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":8,\"name\":\"Video Norte\",\"address\":\"Rua Nova de Santa Cruz\",\"latitude\":41.5594,\"longitude\":-8.3972,\"nif\":\"123444378\",\"logo\":\"logo_8\",\"avgRating\":4.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":9,\"name\":\"SmartPrint\",\"address\":\"Rua dos Peões, Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_2\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}}]"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/printshops/{id}/pricetable/deletecover
    * 2 - (200) POST:/printshops/{id}/pricetable/deletecover
    * 3 - (200) GET:/printshops
    */
    @Test @Timeout(60)
    public void test_17_getOnPrintshopsReturnsContentUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1119L)
                .d("ADDRESS", "\"jLG6\"")
                .d("AVG_RATING", "0.620961388658797")
                .d("BALANCE_CURRENCY", "\"y2chCReh4peHMAa4\"")
                .d("BALANCE_FRACTIONAL_PART", "653")
                .d("BALANCE_INTEGER_PART", "650")
                .d("LATITUDE", "0.09343226824294293")
                .d("LOGO", "\"XpV_0\"")
                .d("LONGITUDE", "0.7728585604783199")
                .d("NAME", "\"MzZrxLi1NviHL\"")
                .d("NIF", "\"CA55wtU3uqS\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"ILZ9s0K_x2\", " + 
                    " \"priceA3\": \"D9O\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/4831949707225068835/pricetable/deletecover?EMextraParam123=_EM_43_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA3\": \"It\", " + 
                    " \"priceA4\": \"Z6AoZQ_Yp\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/4831949707225068835/pricetable/deletecover")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops?username=MMsesDaXQPsDIbA")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("[{\"id\":1,\"name\":\"Copy Scan\",\"address\":\"Rua Quinta dos Órfãos 16 S. Vitor (Junto à Universidade do Minho), Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_1\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":2,\"name\":\"Flash Vidius - Gomes \\u0026 Santana, Lda.\",\"address\":\"R. Manuel Silva, 20 - R/C. C.P. 4490000, Povoa de Varzim, Porto\",\"latitude\":41.379392,\"longitude\":-8.761458,\"nif\":\"199111333\",\"logo\":\"logo_3\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":3,\"name\":\"CopyGraphe\",\"address\":\"R. Ramalho Ortigão C Com Pescador - lj 12. C.P. 4490678, Povoa de Varzim, Porto\",\"latitude\":41.383314,\"longitude\":-8.761942,\"nif\":\"123098333\",\"logo\":\"logo_4\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":4,\"name\":\"Nelson Costa Santos\",\"address\":\"Tv. Senra, 22 - Póvoa de Varzim. C.P. 4490000, Povoa de Varzim, Porto.\",\"latitude\":41.38207,\"longitude\":-8.763069,\"nif\":\"153655378\",\"logo\":\"logo_5\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":5,\"name\":\"Gráfica Editora Poveira, Lda.\",\"address\":\"R. Manuel Silva, 18. C.P. 4490657, Povoa de Varzim, Porto.\",\"latitude\":41.379605,\"longitude\":-8.761047,\"nif\":\"133555378\",\"logo\":\"logo_6\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":6,\"name\":\"Staples Vila do Conde\",\"address\":\"Avenida General Humberto Delgado 2, Vila do Conde\",\"latitude\":41.370674,\"longitude\":-8.744176,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":7,\"name\":\"Staples Vila da Maia\",\"address\":\"Rua Comendador Valentim dos Santos Dinis 570, Maia\",\"latitude\":41.246159,\"longitude\":-8.625225,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":8,\"name\":\"Video Norte\",\"address\":\"Rua Nova de Santa Cruz\",\"latitude\":41.5594,\"longitude\":-8.3972,\"nif\":\"123444378\",\"logo\":\"logo_8\",\"avgRating\":4.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":9,\"name\":\"SmartPrint\",\"address\":\"Rua dos Peões, Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_2\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":10,\"name\":\"MzZrxLi1NviHL\",\"address\":\"jLG6\",\"latitude\":0.09343226824294293,\"longitude\":0.7728585604783199,\"nif\":\"CA55wtU3uqS\",\"logo\":\"XpV_0\",\"avgRating\":0.62096137,\"balance\":{\"currency\":\"y2chCReh4peHMAa4\",\"integerPart\":650,\"fractionalPart\":653}}]"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/login
    */
    @Test @Timeout(60)
    public void test_18_postOnLoginReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/login")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/login
    */
    @Test @Timeout(60)
    public void test_19_postOnLoginWithQueryParamReturns200() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/login?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/login
    */
    @Test @Timeout(60)
    public void test_20_postOnLoginReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/login")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/login
    */
    @Test @Timeout(60)
    public void test_21_postOnLoginReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/login")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/login
    */
    @Test @Timeout(60)
    public void test_22_postOnLoginReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/login")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (204) OPTIONS:/*
    */
    @Test @Timeout(60)
    public void test_23_optionsOn_Returns204() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "42")
                .options(baseUrlOfSut + "/*")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (204) OPTIONS:/*
    */
    @Test @Timeout(60)
    public void test_24_optionsOn_Returns204() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .options(baseUrlOfSut + "/*?EMextraParam123=42")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (204) OPTIONS:/*
    */
    @Test @Timeout(60)
    public void test_25_optionsOn_Returns204() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .options(baseUrlOfSut + "/*?EMextraParam123=42")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (204) OPTIONS:/*
    */
    @Test @Timeout(60)
    public void test_26_optionsOn_Returns204() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .options(baseUrlOfSut + "/*")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (204) OPTIONS:/*
    */
    @Test @Timeout(60)
    public void test_27_optionsOn_Returns204() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .options(baseUrlOfSut + "/*")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (401) GET:/printshop
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_28_getOnPrintshopReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_33_XYZ_")
                .get(baseUrlOfSut + "/printshop")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshop"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshop
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_29_getOnPrintshopReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_248_XYZ_")
                .get(baseUrlOfSut + "/printshop")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshop"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshop
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_30_getOnPrintshopWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshop?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshop"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshop
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_31_getOnPrintshopReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshop")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshop"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/consumer/satisfied
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_32_getOnSatisfiedShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 947L)
                .d("PASSWORD", "\"PBLeOin\"")
                .d("USERNAME", "\"gEQsd32z8mqfmj\"")
            .and().insertInto("CONSUMERS", 946L)
                .d("BALANCE_CURRENCY", "\"HiLVttaBMOcYPOl\"")
                .d("BALANCE_FRACTIONAL_PART", "926")
                .d("BALANCE_INTEGER_PART", "747")
                .d("NAME", "\"jJ3qjt_JJX6\"")
                .d("ID", "14")
            .and().insertInto("NOTIFICATION", 945L)
                .d("EMAIL", "NULL")
                .d("READ", "true")
                .d("TIMESTAMP", "\"2064-08-21 23:10:42\"")
                .d("CONSUMER", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/satisfied'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "_EM_18_XYZ_")
                .header("X-Requested-With", "POu")
                .get(baseUrlOfSut + "/consumer/satisfied")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/satisfied"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/printshops/history
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_33_getOnHistoryShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_311_getPrintShopHistoryRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/printshops/history'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/history")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_311_getPrintShopHistoryRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/printshops/history"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/printshops/requests
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_34_getOnRequestsShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_283_getPrintShopRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/printshops/requests'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/requests")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_283_getPrintShopRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/printshops/requests"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/printshops/satisfied
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_35_getOnSatisfiedShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_338_getPrintShopSatisfiedRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/printshops/satisfied'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/satisfied")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_338_getPrintShopSatisfiedRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/printshops/satisfied"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/printshops/{id}/pricetable/deletering
    * 2 - (500) POST:/consumer/{id}/notify
    * 3 - (500) POST:/consumer/{id}/notify
    * 4 - (200) GET:/printshops/nearest
    * 5 - (403) GET:/admin/printshops
    * Found 5 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_36_getOnPrintshopsShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 556L)
                .d("ADDRESS", "\"mcPXvj5dy4wRoQOw\"")
                .d("AVG_RATING", "0.6562737446162582")
                .d("BALANCE_CURRENCY", "\"_EM_1568_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "675")
                .d("BALANCE_INTEGER_PART", "813")
                .d("LATITUDE", "0.7749737174105423")
                .d("LOGO", "\"_EM_1569_XYZ_\"")
                .d("LONGITUDE", "0.049628839011045534")
                .d("NAME", "\"QCmSfvTCN8rWCQuL\"")
                .d("NIF", "\"mxya\"")
            .and().insertInto("USERS", 558L)
                .d("PASSWORD", "\"ou4glDw\"")
                .d("USERNAME", "\"_EM_1571_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"supLim\": 140 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/309/pricetable/deletering")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{id}/notify'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/309/notify")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/309/notify"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{id}/notify'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/309/notify")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/309/notify"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/nearest?latitude=pJ1E0yW")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "sf73PQolU")
                .get(baseUrlOfSut + "/admin/printshops")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/admin/printshops"));
    }
    
    
    /**
    * Calls:
    * 1 - (500) POST:/paypal/ipn/consumer/{consumerID}
    * 2 - (500) POST:/paypal/ipn/consumer/{consumerID}
    * 3 - (403) GET:/api/secured
    * Found 5 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_37_getOnSecuredShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/paypal/ipn/consumer/{consumerID}'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/paypal/ipn/consumer/709")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/paypal/ipn/consumer/709"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/paypal/ipn/consumer/{consumerID}'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/paypal/ipn/consumer/709?" + 
                    "charset=J73LV3BSXJC40l&" + 
                    "txn_type=gSXt2SKcMb")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/paypal/ipn/consumer/709"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/secured")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/api/secured"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/login
    * 2 - (500) POST:/login
    * 3 - (200) GET:/consumer/balance
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_38_getOnBalanceShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 315L)
                .d("ADDRESS", "\"gjyt\"")
                .d("AVG_RATING", "0.35168793259164144")
                .d("BALANCE_CURRENCY", "\"S]bGjYzZL\"")
                .d("BALANCE_FRACTIONAL_PART", "234")
                .d("BALANCE_INTEGER_PART", "-1687006025")
                .d("LATITUDE", "0.27480142497135185")
                .d("LOGO", "\"sxGhfpNugECYhiw\"")
                .d("LONGITUDE", "0.26223059113526614")
                .d("NAME", "\"KEWdLArFaF\"")
                .d("NIF", "\"5GoaAZcLK3dQG\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/login")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/DefaultController_101_login.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/login'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/login?" + 
                    "password=D8ahj7vq2CBnt&" + 
                    "username=mu8tyLdJ_BtdV")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/DefaultController_101_login
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/login"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"printShop\": { " + 
                    " \"name\": \"wwK\", " + 
                    " \"longitude\": 0.30783713659296263, " + 
                    " \"nif\": \"Jh5h5lN\", " + 
                    " \"logo\": \"FNSXSL\", " + 
                    " \"avgRating\": 0.28777096, " + 
                    " \"balance\": {} " + 
                    " }, " + 
                    " \"id\": 287, " + 
                    " \"username\": \"aDR@\", " + 
                    " \"roles\": [ " + 
                    " \"hXD\" " + 
                    " ] " + 
                    " } ")
                .get(baseUrlOfSut + "/consumer/balance?" + 
                    "password=D8ahj7vq2CBnt&" + 
                    "username=mu8tyLdJ_BtdV")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"success\":true}"));
    }
    
    
    /**
    * Calls:
    * 1 - (500) POST:/consumer/printrequest/{printRequestID}/submit
    * 2 - (403) POST:/request/reject/{printRequestID}
    * 3 - (404) PUT:/printshops/{printShopId}/reviews/{reviewId}
    * 4 - (404) PUT:/printshops/{printShopId}/reviews/{reviewId}
    * 5 - (404) POST:/consumer/subscribe
    * 6 - (404) DELETE:/consumer/subscribe
    * 7 - (200) GET:/consumer/info
    * Found 4 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_39_getOnInfoShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1893L)
                .d("ADDRESS", "\"mZMZzeyAgB\"")
                .d("AVG_RATING", "0.5741377011283946")
                .d("BALANCE_CURRENCY", "\"\"")
                .d("BALANCE_FRACTIONAL_PART", "874599372")
                .d("BALANCE_INTEGER_PART", "738")
                .d("LATITUDE", "0.24456255493823853")
                .d("LOGO", "\"VCYRQhTsDldk4\"")
                .d("LONGITUDE", "0.20409727891347018")
                .d("NAME", "\"\"")
                .d("NIF", "\"j\"")
            .and().insertInto("PRINTSHOPS", 1892L)
                .d("ADDRESS", "\"tD5\"")
                .d("AVG_RATING", "0.2005883695111652")
                .d("BALANCE_CURRENCY", "\"bj2JLGV4\"")
                .d("BALANCE_FRACTIONAL_PART", "699")
                .d("BALANCE_INTEGER_PART", "874")
                .d("LATITUDE", "0.6417331127062529")
                .d("LOGO", "\"0kLsSEImIIz5kw\"")
                .d("LONGITUDE", "0.6732302340842691")
                .d("NAME", "\"zGZd\"")
                .d("NIF", "\"3FoEwyp3VwvH\"")
            .and().insertInto("USERS", 1891L)
                .d("PASSWORD", "\"ivMhJrDKWcg\"")
                .d("USERNAME", "\"_ZZCgQDrSdzyH\"")
            .and().insertInto("CONSUMERS", 1890L)
                .d("BALANCE_CURRENCY", "\"41_M\"")
                .d("BALANCE_FRACTIONAL_PART", "508")
                .d("BALANCE_INTEGER_PART", "122")
                .d("NAME", "\"vcS599nzqzyM\"")
                .d("ID", "18")
            .and().insertInto("USERS", 1889L)
                .d("PASSWORD", "\"dppmDAlpUf\"")
                .d("USERNAME", "\"61FtDk2aY0Va2\"")
            .and().insertInto("CONSUMERS", 1888L)
                .d("BALANCE_CURRENCY", "\"aadK\"")
                .d("BALANCE_FRACTIONAL_PART", "721")
                .d("BALANCE_INTEGER_PART", "564")
                .d("NAME", "\"nnxO7fEegiyH\"")
                .d("ID", "10")
            .and().insertInto("PRINT_REQUESTS", 1887L)
                .d("ARRIVAL", "\"2072-05-14 19:43:01\"")
                .d("COST", "0.9748480318943591")
                .d("DELIVERED", "\"1915-11-29 10:06:00\"")
                .d("EMPATTENDED", "NULL")
                .d("EMPDELIVERED", "NULL")
                .d("FINISHED", "NULL")
                .d("PAYPAL_SALE_ID", "NULL")
                .d("PAYMENT_TYPE", "NULL")
                .d("STATUS", "NULL")
                .d("CONSUMER_ID", "NULL")
                .d("PRINTSHOP_ID", "NULL")
                .d("PRINTSHOP", "NULL")
                .d("CONSUMER", "NULL")
            .and().insertInto("PRINTSHOPS", 295L)
                .d("ADDRESS", "\"o_FPgR4n\"")
                .d("AVG_RATING", "0.21209766649224182")
                .d("BALANCE_CURRENCY", "\"DFQ\"")
                .d("BALANCE_FRACTIONAL_PART", "165")
                .d("BALANCE_INTEGER_PART", "486")
                .d("LATITUDE", "0.780571869044891")
                .d("LOGO", "\"_EM_952_XYZ_\"")
                .d("LONGITUDE", "0.5464508201073996")
                .d("NAME", "\"WNWX1ft\"")
                .d("NIF", "\"_EM_953_XYZ_\"")
            .and().insertInto("PRINTSHOPS", 294L)
                .d("ADDRESS", "\"Tyh\"")
                .d("AVG_RATING", "0.14734468628813557")
                .d("BALANCE_CURRENCY", "\"_EM_954_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "448")
                .d("BALANCE_INTEGER_PART", "829")
                .d("LATITUDE", "0.12455652847270271")
                .d("LOGO", "\"T3xQdNTGjLL2uv\"")
                .d("LONGITUDE", "0.23041151571593155")
                .d("NAME", "\"9QCRvs_TcXD0yy\"")
                .d("NIF", "\"_EM_955_XYZ_\"")
            .and().insertInto("USERS", 293L)
                .d("PASSWORD", "\"6InR6fG84L\"")
                .d("USERNAME", "\"_EM_956_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_210_finishAndSubmitPrintRequest.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/printrequest/{printRequestID}/submit'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/printrequest/788/submit")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_210_finishAndSubmitPrintRequest
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/printrequest/788/submit"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" _EM_957_XYZ_ ")
                .post(baseUrlOfSut + "/request/reject/788")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/request/reject/788"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/printshops/644/reviews/774")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GRxkUcce4_YNQobv")
                .put(baseUrlOfSut + "/printshops/644/reviews/774")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=7rmr4m&" + 
                    "username=&" + 
                    "latitude=5JL&" + 
                    "longitude=X6m")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GRxkUcce4_YNQobv")
                .get(baseUrlOfSut + "/consumer/info")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"consumer\":{\"name\":\"João dos Santos\",\"email\":\"proxyprint.pt.consumer@gmail.com\",\"latitude\":\"69\",\"longitude\":\"69\",\"printingSchemas\":[{\"id\":2,\"name\":\"A4+2LAD+CORES+Encaderna\",\"paperSpecs\":\"PAPER,COLOR,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_OPAQUE,A3\",\"deleted\":false},{\"id\":5,\"name\":\"A4+SIMPLEX+COLOR\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":3,\"name\":\"A4+SIMPLEX+PW+Encadernar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_TRANSPARENT,A4\",\"deleted\":false},{\"id\":4,\"name\":\"A4+2LAD+PB\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":1,\"name\":\"A4+2LAD+PB+Agrafar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,STAPLING,0,0\",\"coverSpecs\":\"\",\"deleted\":false}],\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"id\":2,\"username\":\"joao\",\"password\":\"1234\",\"roles\":[\"ROLE_USER\"]},\"success\":true}"));
    }
    
    
    /**
    * Calls:
    * 1 - (500) POST:/consumer/{consumerID}/printingschemas
    * 2 - (500) GET:/consumer/{consumerID}/printingschemas
    * 3 - (500) DELETE:/consumer/requests/cancel/{id}
    * 4 - (403) POST:/printshops/{printShopID}/employees
    * 5 - (403) PUT:/printshops/{printShopID}/employees
    * 6 - (404) POST:/consumer/subscribe
    * Found 8 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_40_postOnSubscribeShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 538L)
                .d("PASSWORD", "\"7G\"")
                .d("USERNAME", "\"WR7b7RBLNculuGVZ\"")
            .and().insertInto("CONSUMERS", 537L)
                .d("BALANCE_CURRENCY", "\"s1Gy82znOTc\"")
                .d("BALANCE_FRACTIONAL_PART", "623")
                .d("BALANCE_INTEGER_PART", "518")
                .d("EMAIL", "\"6OX\"")
                .d("LATITUDE", "\"89j\"")
                .d("LONGITUDE", "\"VyVR\"")
                .d("NAME", "\"_EM_1447_XYZ_\"")
                .r("ID", 538L)
            .and().insertInto("PRINTSHOPS", 539L)
                .d("ADDRESS", "\"gbf6ulYVz\"")
                .d("AVG_RATING", "-31.345955493177264")
                .d("BALANCE_CURRENCY", "\"RhBkl\"")
                .d("BALANCE_FRACTIONAL_PART", "177")
                .d("BALANCE_INTEGER_PART", "132033")
                .d("LATITUDE", "-9590.741261811761")
                .d("LOGO", "\"Q9rA54WXNe5s\"")
                .d("LONGITUDE", "0.233456537195")
                .d("NAME", "\"\"")
                .d("NIF", "\"O5s5WBKO1b\"")
            .and().insertInto("PRINTSHOPS", 546L)
                .d("ADDRESS", "\"zwmzIZOHNk\"")
                .d("AVG_RATING", "0.4948823195041506")
                .d("BALANCE_CURRENCY", "\"Jwc6u3YYs\"")
                .d("BALANCE_FRACTIONAL_PART", "-1724121902")
                .d("BALANCE_INTEGER_PART", "293")
                .d("LATITUDE", "0.4010968529253416")
                .d("LOGO", "\"42\"")
                .d("LONGITUDE", "0.08196379732054926")
                .d("NAME", "\"\"")
                .d("NIF", "\"DugYguY0\"")
            .and().insertInto("PRINTSHOPS", 545L)
                .d("ADDRESS", "\"\"")
                .d("AVG_RATING", "0.08046586447279624")
                .d("BALANCE_CURRENCY", "\"O3NP4gHtdvMX\"")
                .d("BALANCE_FRACTIONAL_PART", "824")
                .d("BALANCE_INTEGER_PART", "638984258")
                .d("LATITUDE", "-0.8906226210368844")
                .d("LOGO", "\"U2Gfcq55blFU4e\"")
                .d("LONGITUDE", "0.3921778785013531")
                .d("NAME", "\"jx7F5\"")
                .d("NIF", "\"rIS9SZu5vl\"")
            .and().insertInto("USERS", 544L)
                .d("PASSWORD", "\"5ZV7WU4nf4s1z\"")
                .d("USERNAME", "\"=9iSJiv\"")
            .and().insertInto("CONSUMERS", 543L)
                .d("BALANCE_CURRENCY", "\"uabG\"")
                .d("BALANCE_FRACTIONAL_PART", "710")
                .d("BALANCE_INTEGER_PART", "688")
                .d("NAME", "\"fCu_l\"")
                .r("ID", 544L)
            .and().insertInto("PRINT_REQUESTS", 540L)
                .d("ARRIVAL", "NULL")
                .d("COST", "0.9061887206570978")
                .d("DELIVERED", "\"2087-07-31 22:21:27\"")
                .d("EMPATTENDED", "\"Edzr5PFj_5a\"")
                .d("EMPDELIVERED", "NULL")
                .d("FINISHED", "NULL")
                .d("PAYPAL_SALE_ID", "\"ykL_LVo_\"")
                .d("PAYMENT_TYPE", "\"w8BB\"")
                .d("STATUS", "\"NOT_PAYED\"")
                .r("CONSUMER_ID", 537L)
                .d("PRINTSHOP_ID", "NULL")
                .d("PRINTSHOP", "NULL")
                .d("CONSUMER", "NULL")
            .and().insertInto("USERS", 448L)
                .d("PASSWORD", "\"vp\"")
                .d("USERNAME", "\"CyclFn\"")
            .and().insertInto("PRINTSHOPS", 452L)
                .d("ADDRESS", "\"TbKF7VOTe0]p0\"")
                .d("AVG_RATING", "5.640419705783357")
                .d("BALANCE_CURRENCY", "\"3U]\"")
                .d("BALANCE_FRACTIONAL_PART", "164")
                .d("BALANCE_INTEGER_PART", "8647")
                .d("LATITUDE", "0.7553308906207568")
                .d("LOGO", "\"_EM_1449_XYZ_\"")
                .d("LONGITUDE", "0.8316951183968223")
                .d("NAME", "\"_EM_1276_XYZ_\"")
                .d("NIF", "\"cyc9xU\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_72_addNewConsumerPrintingSchema.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"_EM_1271_XYZ_\", " + 
                    " \"coverSpecs\": \"_EM_1272_XYZ_\", " + 
                    " \"deleted\": true, " + 
                    " \"name\": \"bEn2tB4sZqgIWIT\", " + 
                    " \"paperSpecs\": \"h\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/0/printingschemas")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_72_addNewConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/0/printingschemas"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/0/printingschemas?" + 
                    "password=eQ5Byx9VWjnxnsvl&" + 
                    "username=PNM")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/0/printingschemas"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_289_cancelRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/requests/cancel/{id}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1453_XYZ_")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/16?" + 
                    "password=THH1rSXWb6Z3q&" + 
                    "username=VOHYgrZPWWdUnsgF")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_289_cancelRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/requests/cancel/16"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/-3690/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-3690/employees"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/printshops/-3690/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-3690/employees"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/admin/useed
    * 2 - (500) POST:/admin/useed
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_41_postOnUseedShowsFaults_100_101() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/admin/useed?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"message\":\"consumers seeding completed\"}"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/admin/AdminController_639_useed.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/admin/useed'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/admin/useed")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/admin/AdminController_639_useed
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/admin/useed"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/admin/seed
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_42_postOnSeedShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/admin/AdminController_123_seed.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/admin/seed'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_82_XYZ_")
                .post(baseUrlOfSut + "/admin/seed")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/admin/AdminController_123_seed
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/admin/seed"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/admin/register
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_43_postOnAdminRegisterShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/admin/AdminController_77_newAdmin.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/admin/register'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"balance\": { " + 
                    " \"moneyAsDouble\": 0.5822762623248507, " + 
                    " \"valid\": true " + 
                    " }, " + 
                    " \"email\": \"_EM_443_XYZ_\", " + 
                    " \"id\": 9203987289575960242, " + 
                    " \"rolesSet\": [], " + 
                    " \"username\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/admin/register")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/admin/AdminController_77_newAdmin
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/admin/register"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/consumer/budget
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_44_postOnBudgetShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/models/repositories/UserService_42_loadUserByUsername.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/budget'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"requestJSON\": \"_EM_280_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/budget")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/models/repositories/UserService_42_loadUserByUsername
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.web.multipart.MultipartException"))
                .body("'message'", containsString("Could not parse multipart servlet request; nested exception is javax.servlet.ServletException: org.apache.tomcat.util.http.fileupload.FileUploadBase$InvalidContentTypeException: the request doesn't contain a multipart/form-data or multipart/mixed stream, content type header is application/json"))
                .body("'path'", containsString("/consumer/budget"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/consumer/budget
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_45_postOnBudgetShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. framework_code.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/budget'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"requestJSON\": \"jkIQZ\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/budget")
                .then()
                .statusCode(500)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.web.multipart.MultipartException"))
                .body("'message'", containsString("Could not parse multipart servlet request; nested exception is javax.servlet.ServletException: org.apache.tomcat.util.http.fileupload.FileUploadBase$InvalidContentTypeException: the request doesn't contain a multipart/form-data or multipart/mixed stream, content type header is application/json"))
                .body("'path'", containsString("/consumer/budget"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/consumer/register
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_46_postOnConsumerRegisterWithQueryParamShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_83_addUser.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/register'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/register?EMextraParam123=_EM_86_XYZ_")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_83_addUser
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/consumer/register"));
    }
    
    
    /**
    * Calls:
    * 1 - (403) POST:/printshops/{id}/pricetable/deletepaper
    * 2 - (403) POST:/printshops/{id}/pricetable/deletepaper
    * 3 - (200) GET:/printshops
    * 4 - (500) POST:/consumer/register
    * 5 - (200) POST:/consumer/register
    * Found 4 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_47_postOnRegisterShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 360L)
                .d("ADDRESS", "\"hBu\"")
                .d("AVG_RATING", "0.4078607320534454")
                .d("BALANCE_CURRENCY", "\"x1EhwEmlKQh7\"")
                .d("BALANCE_FRACTIONAL_PART", "982")
                .d("BALANCE_INTEGER_PART", "705")
                .d("LATITUDE", "0.6812586575634574")
                .d("LOGO", "\"kYWIVU\"")
                .d("LONGITUDE", "0.6166568855173237")
                .d("NAME", "\"kPqWHB\"")
                .d("NIF", "\"\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 561, " + 
                    " \"priceA4DUPLEX\": \"SEORYmiP6L8fjv\", " + 
                    " \"supLim\": 245 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/-1841837029170439606/pricetable/deletepaper")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-1841837029170439606/pricetable/deletepaper"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"y6BK4YPYS6\", " + 
                    " \"infLim\": 209, " + 
                    " \"priceA3DUPLEX\": \"mjv7q\", " + 
                    " \"priceA3SIMPLEX\": \"jes\", " + 
                    " \"priceA4DUPLEX\": \"8kN\", " + 
                    " \"priceA4SIMPLEX\": \"xACpTAM0ErV6a\", " + 
                    " \"supLim\": 830 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/-1841837029170439606/pricetable/deletepaper?EMextraParam123=_EM_48_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-1841837029170439606/pricetable/deletepaper"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops?password=ct")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("[{\"id\":1,\"name\":\"Copy Scan\",\"address\":\"Rua Quinta dos Órfãos 16 S. Vitor (Junto à Universidade do Minho), Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_1\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":2,\"name\":\"Flash Vidius - Gomes \\u0026 Santana, Lda.\",\"address\":\"R. Manuel Silva, 20 - R/C. C.P. 4490000, Povoa de Varzim, Porto\",\"latitude\":41.379392,\"longitude\":-8.761458,\"nif\":\"199111333\",\"logo\":\"logo_3\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":3,\"name\":\"CopyGraphe\",\"address\":\"R. Ramalho Ortigão C Com Pescador - lj 12. C.P. 4490678, Povoa de Varzim, Porto\",\"latitude\":41.383314,\"longitude\":-8.761942,\"nif\":\"123098333\",\"logo\":\"logo_4\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":4,\"name\":\"Nelson Costa Santos\",\"address\":\"Tv. Senra, 22 - Póvoa de Varzim. C.P. 4490000, Povoa de Varzim, Porto.\",\"latitude\":41.38207,\"longitude\":-8.763069,\"nif\":\"153655378\",\"logo\":\"logo_5\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":5,\"name\":\"Gráfica Editora Poveira, Lda.\",\"address\":\"R. Manuel Silva, 18. C.P. 4490657, Povoa de Varzim, Porto.\",\"latitude\":41.379605,\"longitude\":-8.761047,\"nif\":\"133555378\",\"logo\":\"logo_6\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":6,\"name\":\"Staples Vila do Conde\",\"address\":\"Avenida General Humberto Delgado 2, Vila do Conde\",\"latitude\":41.370674,\"longitude\":-8.744176,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":7,\"name\":\"Staples Vila da Maia\",\"address\":\"Rua Comendador Valentim dos Santos Dinis 570, Maia\",\"latitude\":41.246159,\"longitude\":-8.625225,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":8,\"name\":\"Video Norte\",\"address\":\"Rua Nova de Santa Cruz\",\"latitude\":41.5594,\"longitude\":-8.3972,\"nif\":\"123444378\",\"logo\":\"logo_8\",\"avgRating\":4.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":9,\"name\":\"SmartPrint\",\"address\":\"Rua dos Peões, Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_2\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":10,\"name\":\"kPqWHB\",\"address\":\"hBu\",\"latitude\":0.6812586575634574,\"longitude\":0.6166568855173237,\"nif\":\"\",\"logo\":\"kYWIVU\",\"avgRating\":0.40786073,\"balance\":{\"currency\":\"x1EhwEmlKQh7\",\"integerPart\":705,\"fractionalPart\":982}}]"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_83_addUser.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/register'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/consumer/register")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_83_addUser
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/consumer/register"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/register?" + 
                    "EMextraParam123=_EM_86_XYZ_&" + 
                    "password=H34qQaXulAYN&" + 
                    "name=m4xiXJXO&" + 
                    "username=ti4aqVsTFbolk&" + 
                    "longitude=P")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"consumer\":{\"name\":\"m4xiXJXO\",\"longitude\":\"P\",\"printingSchemas\":[],\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0},\"id\":21,\"username\":\"ti4aqVsTFbolk\",\"password\":\"H34qQaXulAYN\",\"roles\":[\"ROLE_USER\"]},\"success\":true}"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/request/register
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_48_postOnRequestRegisterWithQueryParamShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/printshops/RegisterRequestController_58_registerRequest.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/request/register'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"managerName\": \"\", " + 
                    " \"managerUsername\": \"_EM_88_XYZ_\", " + 
                    " \"pShopAddress\": \"lZYqLl\", " + 
                    " \"pShopDateRequest\": \"C1ElC\", " + 
                    " \"pShopLatitude\": 0.8313479819026852, " + 
                    " \"pShopNIF\": \"bOJxq\" " + 
                    " } ")
                .post(baseUrlOfSut + "/request/register?EMextraParam123=_EM_91_XYZ_")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/printshops/RegisterRequestController_58_registerRequest
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/request/register"));
    }
    
    
    /**
    * Calls:
    * 1 - (400) POST:/request/register
    * 2 - (500) POST:/request/register
    * Found 3 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_49_postOnRequestRegisterShowsFaults_100_101() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/request/register'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"managerPassword\": \"MMVM9\", " + 
                    " \"managerUsername\": \"ZGW5\", " + 
                    " \"pShopDateRequest\": \"a9vLO_5O\", " + 
                    " \"pShopDateRequestAccepted\": \"a9vLO_5O\", " + 
                    " \"pShopLatitude\": 0.13216385465360636, " + 
                    " \"pShopLongitude\": 0.13216385465360636 " + 
                    " } ")
                .post(baseUrlOfSut + "/request/register")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.http.converter.HttpMessageNotReadableException"))
                .body("'message'", containsString("Could not read document: Can not deserialize value of type java.util.GregorianCalendar from String \"a9vLO_5O\": not a valid representation (error: Failed to parse Date value 'a9vLO_5O': Can not parse date \"a9vLO_5O\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\"))\n at [Source: java.io.ByteArrayInputStream@7de183fa; line: 1, column: 113] (through reference chain: io.github.proxyprint.kitchen.models.printshops.RegisterRequest[\"pShopDateRequestAccepted\"]); nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Can not deserialize value of type java.util.GregorianCalendar from String \"a9vLO_5O\": not a valid representation (error: Failed to parse Date value 'a9vLO_5O': Can not parse date \"a9vLO_5O\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\"))\n at [Source: java.io.ByteArrayInputStream@7de183fa; line: 1, column: 113] (through reference chain: io.github.proxyprint.kitchen.models.printshops.RegisterRequest[\"pShopDateRequestAccepted\"])"))
                .body("'path'", containsString("/request/register"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/printshops/RegisterRequestController_58_registerRequest.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/request/register'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 103, " + 
                    " \"managerEmail\": \"_EM_204_XYZ_\", " + 
                    " \"managerPassword\": \"MMVM9\", " + 
                    " \"pShopAddress\": \"Gjg3LNcDsRIHoTi\", " + 
                    " \"pShopDateRequest\": \"a9vLO_5O\", " + 
                    " \"pShopLatitude\": 0.13216385465360636, " + 
                    " \"pShopLongitude\": 0.03878145909585495, " + 
                    " \"pShopName\": \"_EM_205_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/request/register")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/printshops/RegisterRequestController_58_registerRequest
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/request/register"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/printshops/{printShopID}/employees
    * 2 - (200) DELETE:/printshops/{printShopID}/employees/{employeeID}
    * 3 - (500) POST:/consumer/budget
    * 4 - (500) POST:/consumer/budget
    * Found 4 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_50_postOnBudgetShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 401L)
                .d("ADDRESS", "\"_kMR7LD\"")
                .d("AVG_RATING", "0.5008999415945338")
                .d("BALANCE_CURRENCY", "\"3XACZKV8\"")
                .d("BALANCE_FRACTIONAL_PART", "574")
                .d("BALANCE_INTEGER_PART", "513")
                .d("LATITUDE", "-0.6754129633374492")
                .d("LOGO", "\"FbCwZxnhcMPu\"")
                .d("LONGITUDE", "-7315.130225985835")
                .d("NAME", "\"n\"")
                .d("NIF", "\"UoU\"")
            .and().insertInto("USERS", 471L)
                .d("PASSWORD", "\"yE1yINDmHXDNIN\"")
                .d("USERNAME", "\"NA2nQXrBwJRHcbW\"")
            .and().insertInto("PRINTSHOPS", 470L)
                .d("ADDRESS", "\"d9W\"")
                .d("AVG_RATING", "0.5415484516295523")
                .d("BALANCE_CURRENCY", "\"1DqOJv3FkQsAU1bR\"")
                .d("BALANCE_FRACTIONAL_PART", "726")
                .d("BALANCE_INTEGER_PART", "220")
                .d("LATITUDE", "0.1538045907341481")
                .d("LOGO", "\"qK\"")
                .d("LONGITUDE", "-2.016258437988495")
                .d("NAME", "\"PgD5\"")
                .d("NIF", "\"pzSOiYHkgENfes8\"")
            .and().insertInto("EMPLOYEES", 469L)
                .d("NAME", "\"RUUYU\"")
                .d("ID", "5")
                .d("PRINTSHOP_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/-3983/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        String location_employees__1049 = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_employees__1049));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "Qmbc\\")
                .delete(resolveLocation(location_employees__1049, baseUrlOfSut + "/printshops/-3983/employees/-65341"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/models/repositories/UserService_42_loadUserByUsername.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/budget'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"requestJSON\": \"B\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/budget")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/models/repositories/UserService_42_loadUserByUsername
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.web.multipart.MultipartException"))
                .body("'message'", containsString("Could not parse multipart servlet request; nested exception is javax.servlet.ServletException: org.apache.tomcat.util.http.fileupload.FileUploadBase$InvalidContentTypeException: the request doesn't contain a multipart/form-data or multipart/mixed stream, content type header is application/json"))
                .body("'path'", containsString("/consumer/budget"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/models/repositories/UserService_42_loadUserByUsername.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/budget'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"requestJSON\": \"B\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/budget")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/models/repositories/UserService_42_loadUserByUsername
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.web.multipart.MultipartException"))
                .body("'message'", containsString("Could not parse multipart servlet request; nested exception is javax.servlet.ServletException: org.apache.tomcat.util.http.fileupload.FileUploadBase$InvalidContentTypeException: the request doesn't contain a multipart/form-data or multipart/mixed stream, content type header is application/json"))
                .body("'path'", containsString("/consumer/budget"));
    }
    
    
    /**
    * Calls:
    * 1 - (403) PUT:/printshops/{id}/pricetable/rings
    * 2 - (200) GET:/consumer/balance
    * 3 - (500) DELETE:/consumer/{username}/notifications
    * 4 - (500) GET:/consumer/satisfied
    * 5 - (500) POST:/consumer/{consumerID}/printingschemas
    * 6 - (500) GET:/consumer/{consumerID}/printingschemas
    * 7 - (200) DELETE:/consumer/requests/cancel/{id}
    * 8 - (403) POST:/printshops/{printShopID}/employees
    * 9 - (403) PUT:/printshops/{printShopID}/employees
    * 10 - (404) POST:/consumer/subscribe
    * Found 11 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_51_postOnSubscribeShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 525L)
                .d("PASSWORD", "\"PNT9f\"")
                .d("USERNAME", "\"Pav\"")
            .and().insertInto("CONSUMERS", 524L)
                .d("BALANCE_CURRENCY", "\"U4UUsGGr1dyEUY\"")
                .d("BALANCE_FRACTIONAL_PART", "779")
                .d("BALANCE_INTEGER_PART", "820")
                .d("EMAIL", "\"buQPEWiQ\"")
                .d("LATITUDE", "\"_EM_1850_XYZ_\"")
                .d("LONGITUDE", "\"_EM_1752_XYZ_\"")
                .d("NAME", "\"sNIbFgCf\"")
                .r("ID", 525L)
            .and().insertInto("PRINTSHOPS", 526L)
                .d("ADDRESS", "\"i4uD2H2jPMZCM\"")
                .d("AVG_RATING", "1.6220689011225924")
                .d("BALANCE_CURRENCY", "\"H7ipPC33jJ_R\"")
                .d("BALANCE_FRACTIONAL_PART", "8912")
                .d("BALANCE_INTEGER_PART", "131632")
                .d("LATITUDE", "0.8421963006263061")
                .d("LOGO", "\"YU\"")
                .d("LONGITUDE", "0.0")
                .d("NAME", "\"_EM_1753_XYZ_\"")
                .d("NIF", "\"_EM_1754_XYZ_\"")
            .and().insertInto("PRINTSHOPS", 571L)
                .d("ADDRESS", "\"HEUIOH8SOnEvt\"")
                .d("AVG_RATING", "80.4134294615699")
                .d("BALANCE_CURRENCY", "\"lWU58zUUiUMl7SU2\"")
                .d("BALANCE_FRACTIONAL_PART", "0")
                .d("BALANCE_INTEGER_PART", "0")
                .d("LATITUDE", "0.812396276858")
                .d("LOGO", "\"JmnkdVQjNf\"")
                .d("LONGITUDE", "0.004150172221460496")
                .d("NAME", "\"ddtXLqGRMvzc\"")
                .d("NIF", "\"nrjx_XIF9bi\"")
            .and().insertInto("PRINTSHOPS", 570L)
                .d("ADDRESS", "\"Qp_QlpRZB2qC\"")
                .d("AVG_RATING", "0.4610897802055609")
                .d("BALANCE_CURRENCY", "\"_EM_1841_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "87")
                .d("BALANCE_INTEGER_PART", "33228")
                .d("LATITUDE", "260543.2863017224")
                .d("LOGO", "\"1Le5cCnuFUn\"")
                .d("LONGITUDE", "51511.626")
                .d("NAME", "\"_EM_1842_XYZ_\"")
                .d("NIF", "\"_EM_1843_XYZ_\"")
            .and().insertInto("USERS", 569L)
                .d("PASSWORD", "\"KZbvcOPVkQ\"")
                .d("USERNAME", "\"0XNKjiHE9_\"")
            .and().insertInto("CONSUMERS", 568L)
                .d("BALANCE_CURRENCY", "\"_EM_1844_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "343")
                .d("BALANCE_INTEGER_PART", "0")
                .d("NAME", "\"PUvuCryZg3jO8\"")
                .r("ID", 569L)
            .and().insertInto("PRINT_REQUESTS", 565L)
                .d("COST", "0.6981489210014662")
            .and().insertInto("DOCUMENTS", 564L)
                .d("FILE_NAME", "\"\"")
                .d("TOTAL_PAGES", "711")
                .r("PRINT_REQUEST_ID", 565L)
            .and().insertInto("USERS", 448L)
                .d("PASSWORD", "\"_EM_1756_XYZ_\"")
                .d("USERNAME", "\"CyclFn\"")
            .and().insertInto("PRINTSHOPS", 452L)
                .d("ADDRESS", "\"SUvi06gHboUtXNQ4\"")
                .d("AVG_RATING", "0.8376245991855458")
                .d("BALANCE_CURRENCY", "\"_EM_1275_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "-16216")
                .d("BALANCE_INTEGER_PART", "0")
                .d("LATITUDE", "-0.24753955652266635")
                .d("LOGO", "\"gyMzpJrduln\"")
                .d("LONGITUDE", "0.8316951183968223")
                .d("NAME", "\"_EM_1276_XYZ_\"")
                .d("NIF", "\"kyc9x\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "EwJUFTZXAC1_g0")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 110, " + 
                    " \"price\": \"EwJUFTZXAC1_g0\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/527/pricetable/rings?" + 
                    "password=&" + 
                    "username=00RcDkAyEB")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/527/pricetable/rings"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GDHmxSCfQr")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"jI\", " + 
                    " \"printShop\": { " + 
                    " \"id\": 6084038343344369159, " + 
                    " \"name\": \"7tGuijZGIg95E8\", " + 
                    " \"latitude\": 0.9591696587607235, " + 
                    " \"longitude\": 0.009530814676049881, " + 
                    " \"avgRating\": 0.111144826 " + 
                    " }, " + 
                    " \"id\": 358, " + 
                    " \"username\": \"0XNKjiHE9_\", " + 
                    " \"roles\": [ " + 
                    " \"ANl3\" " + 
                    " ] " + 
                    " } ")
                .get(baseUrlOfSut + "/consumer/balance?" + 
                    "password=9G7xI&" + 
                    "username=04LS9_YpXg&" + 
                    "charset=5821&" + 
                    "txn_type=&" + 
                    "transaction_type=&" + 
                    "mc_gross=rXDDJ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"success\":true}"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_220_deleteAllNotifications.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{username}/notifications'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GDHmxSCfQr")
                .delete(baseUrlOfSut + "/consumer/Vo/notifications?" + 
                    "password=1nKmWvYu&" + 
                    "username=4S7X3f7d")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_220_deleteAllNotifications
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/Vo/notifications"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/satisfied'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "NpQQZZDFahyMgY7")
                .get(baseUrlOfSut + "/consumer/satisfied?" + 
                    "password=7diSKEM&" + 
                    "username=NxafGngOyrIEzbJ4")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/satisfied"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_71_addNewConsumerPrintingSchema.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"_EM_1271_XYZ_\", " + 
                    " \"coverSpecs\": \"_EM_1272_XYZ_\", " + 
                    " \"deleted\": false, " + 
                    " \"paperSpecs\": \"_EM_1273_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/-1106/printingschemas")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_71_addNewConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/consumer/-1106/printingschemas"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GDHmxSCfQr")
                .get(baseUrlOfSut + "/consumer/-1106/printingschemas")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/-1106/printingschemas"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GDHmxSCfQr")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/14?" + 
                    "password=9G7xI&" + 
                    "username=04LS9_YpXg")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/407/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/407/employees"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GDHmxSCfQr")
                .put(baseUrlOfSut + "/printshops/407/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/407/employees"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * 1 - (200) GET:/consumer/balance
    * 2 - (500) GET:/consumer/satisfied
    * 3 - (500) POST:/consumer/{consumerID}/printingschemas
    * 4 - (500) GET:/consumer/{consumerID}/printingschemas
    * 5 - (200) DELETE:/consumer/requests/cancel/{id}
    * 6 - (403) POST:/printshops/{printShopID}/employees
    * 7 - (403) PUT:/printshops/{printShopID}/employees
    * 8 - (404) POST:/consumer/subscribe
    * Found 8 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_52_postOnSubscribeShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 525L)
                .d("PASSWORD", "\"PNT9f\"")
                .d("USERNAME", "\"Pav\"")
            .and().insertInto("CONSUMERS", 524L)
                .d("BALANCE_CURRENCY", "\"U4UUsGGr1dyEUY\"")
                .d("BALANCE_FRACTIONAL_PART", "779")
                .d("BALANCE_INTEGER_PART", "820")
                .d("EMAIL", "\"buQPEWiQ\"")
                .d("LATITUDE", "\"_EM_1850_XYZ_\"")
                .d("LONGITUDE", "\"_EM_1752_XYZ_\"")
                .d("NAME", "\"sNIbFgCf\"")
                .r("ID", 525L)
            .and().insertInto("PRINTSHOPS", 526L)
                .d("ADDRESS", "\"i4uE2H2jPMZCM\"")
                .d("AVG_RATING", "1.6220689011225924")
                .d("BALANCE_CURRENCY", "\"H7ipPC33jJ_R\"")
                .d("BALANCE_FRACTIONAL_PART", "8912")
                .d("BALANCE_INTEGER_PART", "131632")
                .d("LATITUDE", "0.8421963006263061")
                .d("LOGO", "\"YU\"")
                .d("LONGITUDE", "0.0")
                .d("NAME", "\"_EM_1753_XYZ_\"")
                .d("NIF", "\"_EM_1754_XYZ_\"")
            .and().insertInto("PRINTSHOPS", 571L)
                .d("ADDRESS", "\"HEUIOH8SOnEvt\"")
                .d("AVG_RATING", "80.4134294615699")
                .d("BALANCE_CURRENCY", "\"lWU58zUUiUMl7SU2\"")
                .d("BALANCE_FRACTIONAL_PART", "0")
                .d("BALANCE_INTEGER_PART", "0")
                .d("LATITUDE", "0.812396276858")
                .d("LOGO", "\"JmnkdVQjNf\"")
                .d("LONGITUDE", "0.004150172221460496")
                .d("NAME", "\"ddtXLqGRMvzc\"")
                .d("NIF", "\"nrjx_XIF9bi\"")
            .and().insertInto("PRINTSHOPS", 570L)
                .d("ADDRESS", "\"Qp_QlpRZB2qC\"")
                .d("AVG_RATING", "0.4610897802055609")
                .d("BALANCE_CURRENCY", "\"_EM_1841_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "87")
                .d("BALANCE_INTEGER_PART", "33228")
                .d("LATITUDE", "260543.2863017224")
                .d("LOGO", "\"1Le5cCnuFUn\"")
                .d("LONGITUDE", "51511.626")
                .d("NAME", "\"_EM_1842_XYZ_\"")
                .d("NIF", "\"_EM_1843_XYZ_\"")
            .and().insertInto("USERS", 569L)
                .d("PASSWORD", "\"KZbvcOPVkQ\"")
                .d("USERNAME", "\"0XNKjiHE9_\"")
            .and().insertInto("CONSUMERS", 568L)
                .d("BALANCE_CURRENCY", "\"_EM_1844_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "343")
                .d("BALANCE_INTEGER_PART", "0")
                .d("NAME", "\"PUvuCryZg3jO8\"")
                .r("ID", 569L)
            .and().insertInto("PRINT_REQUESTS", 565L)
                .d("COST", "0.6981489210014662")
            .and().insertInto("DOCUMENTS", 564L)
                .d("FILE_NAME", "\"\"")
                .d("TOTAL_PAGES", "711")
                .r("PRINT_REQUEST_ID", 565L)
            .and().insertInto("USERS", 448L)
                .d("PASSWORD", "\"_EM_1756_XYZ_\"")
                .d("USERNAME", "\"CyclFn\"")
            .and().insertInto("PRINTSHOPS", 452L)
                .d("ADDRESS", "\"SUvi06gHboUtXNQ4\"")
                .d("AVG_RATING", "0.8376245991855458")
                .d("BALANCE_CURRENCY", "\"_EM_1275_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "-16216")
                .d("BALANCE_INTEGER_PART", "0")
                .d("LATITUDE", "-0.24753955652266635")
                .d("LOGO", "\"gyMzpJrduln\"")
                .d("LONGITUDE", "0.8316951183968223")
                .d("NAME", "\"_EM_1276_XYZ_\"")
                .d("NIF", "\"kyc9x\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1848_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"jI\", " + 
                    " \"printShop\": { " + 
                    " \"id\": 6084038343344369159, " + 
                    " \"name\": \"7tGuijZGIg95E8\", " + 
                    " \"latitude\": 0.9591696587607235, " + 
                    " \"longitude\": 0.009530814676049881, " + 
                    " \"avgRating\": 0.111144826 " + 
                    " }, " + 
                    " \"id\": 358, " + 
                    " \"username\": \"0XNKjiHE9_\", " + 
                    " \"roles\": [ " + 
                    " \"ANl3\" " + 
                    " ] " + 
                    " } ")
                .get(baseUrlOfSut + "/consumer/balance?" + 
                    "password=9G7xI&" + 
                    "username=04LS9_YpXg&" + 
                    "charset=5821&" + 
                    "payer_email=TJr3idXCo&" + 
                    "txn_type=&" + 
                    "transaction_type=&" + 
                    "mc_gross=rXDDJ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"success\":true}"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/satisfied'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "NpQQZZDFahyMgY7")
                .get(baseUrlOfSut + "/consumer/satisfied?" + 
                    "password=7diSKEM&" + 
                    "username=NxafGngOyrIEzbJ4")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/satisfied"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_71_addNewConsumerPrintingSchema.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"_EM_1271_XYZ_\", " + 
                    " \"coverSpecs\": \"_EM_1272_XYZ_\", " + 
                    " \"deleted\": false, " + 
                    " \"paperSpecs\": \"_EM_1273_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/-1106/printingschemas")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_71_addNewConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/consumer/-1106/printingschemas"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1848_XYZ_")
                .get(baseUrlOfSut + "/consumer/-1106/printingschemas")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/-1106/printingschemas"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1848_XYZ_")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/14?" + 
                    "password=9G7xI&" + 
                    "username=04LS9_YpXg")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/406/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/406/employees"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1848_XYZ_")
                .put(baseUrlOfSut + "/printshops/406/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/406/employees"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * 1 - (500) POST:/admin/seed
    * 2 - (500) POST:/admin/seed
    * 3 - (200) GET:/
    * 4 - (500) DELETE:/consumer/{consumerID}/printingschemas/{printingSchemaID}
    * 5 - (403) PUT:/printshops/{id}/pricetable/covers
    * 6 - (403) POST:/printshops/{id}/pricetable/covers
    * 7 - (500) POST:/consumer/register
    * 8 - (500) POST:/consumer/register
    * Found 12 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_53_postOnConsumerRegisterWithQueryParamsShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/admin/AdminController_123_seed.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/admin/seed'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/admin/seed")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/admin/AdminController_123_seed
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/admin/seed"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/admin/AdminController_123_seed.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/admin/seed'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/admin/seed")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/admin/AdminController_123_seed
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/admin/seed"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"message\":\"Olá Mundo!\"}"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_98_deleteConsumerPrintingSchema.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas/{printingSchemaID}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/224/printingschemas/670")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_98_deleteConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/224/printingschemas/670"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA4\": \"_EM_2197_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/-1748866478/pricetable/covers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-1748866478/pricetable/covers"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA3\": \"_SUEnZMo0Vq\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/-1748866478/pricetable/covers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-1748866478/pricetable/covers"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_83_addUser.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/register'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/register")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_83_addUser
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/consumer/register"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_83_addUser.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/register'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/register?" + 
                    "password=d54ehdR&" + 
                    "latitude=_EM_2199_XYZ_&" + 
                    "name=iEs2KHa&" + 
                    "email=eWdzUVsrr&" + 
                    "longitude=Wt_cjq")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_83_addUser
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/consumer/register"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) GET:/printdocument/{id}
    * 2 - (200) GET:/consumer/balance
    * 3 - (204) OPTIONS:/*
    * 4 - (500) GET:/consumer/satisfied
    * 5 - (500) POST:/consumer/{consumerID}/printingschemas
    * 6 - (500) GET:/consumer/{consumerID}/printingschemas
    * 7 - (200) DELETE:/consumer/requests/cancel/{id}
    * 8 - (403) POST:/printshops/{printShopID}/employees
    * 9 - (403) PUT:/printshops/{printShopID}/employees
    * 10 - (404) POST:/consumer/subscribe
    * Found 8 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_54_postOnSubscribeShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 525L)
                .d("PASSWORD", "\"PNT9f\"")
                .d("USERNAME", "\"Pav\"")
            .and().insertInto("CONSUMERS", 524L)
                .d("BALANCE_CURRENCY", "\"U4UUsGGr1dyEUY\"")
                .d("BALANCE_FRACTIONAL_PART", "779")
                .d("BALANCE_INTEGER_PART", "820")
                .d("EMAIL", "\"buQPEWiQ\"")
                .d("LATITUDE", "\"_EM_1850_XYZ_\"")
                .d("LONGITUDE", "\"_EM_1752_XYZ_\"")
                .d("NAME", "\"sNIbFgCf\"")
                .r("ID", 525L)
            .and().insertInto("PRINTSHOPS", 526L)
                .d("ADDRESS", "\"i4uE2H2jPMZCM\"")
                .d("AVG_RATING", "1.6220689011225924")
                .d("BALANCE_CURRENCY", "\"H7ipPC33jJ_R\"")
                .d("BALANCE_FRACTIONAL_PART", "8912")
                .d("BALANCE_INTEGER_PART", "131632")
                .d("LATITUDE", "0.8421963006263061")
                .d("LOGO", "\"YU\"")
                .d("LONGITUDE", "0.0")
                .d("NAME", "\"_EM_1753_XYZ_\"")
                .d("NIF", "\"_EM_1754_XYZ_\"")
            .and().insertInto("PRINTSHOPS", 571L)
                .d("ADDRESS", "\"HEUIOH8SOnEvt\"")
                .d("AVG_RATING", "80.4134294615699")
                .d("BALANCE_CURRENCY", "\"lWU58zUUiUMl7SU2\"")
                .d("BALANCE_FRACTIONAL_PART", "0")
                .d("BALANCE_INTEGER_PART", "0")
                .d("LATITUDE", "0.812396276858")
                .d("LOGO", "\"JmnkdVQjNf\"")
                .d("LONGITUDE", "0.004150172221460496")
                .d("NAME", "\"ddtXLqGRMvzc\"")
                .d("NIF", "\"nrjx_XIF9bi\"")
            .and().insertInto("PRINTSHOPS", 570L)
                .d("ADDRESS", "\"Qp_QlpRZB2qC\"")
                .d("AVG_RATING", "0.4610897802055609")
                .d("BALANCE_CURRENCY", "\"_EM_1841_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "87")
                .d("BALANCE_INTEGER_PART", "33228")
                .d("LATITUDE", "260602.60308595188")
                .d("LOGO", "\"1Le5cCnuFUn\"")
                .d("LONGITUDE", "51511.626")
                .d("NAME", "\"_EM_1842_XYZ_\"")
                .d("NIF", "\"_EM_1843_XYZ_\"")
            .and().insertInto("USERS", 569L)
                .d("PASSWORD", "\"KZbvcOPVkQ\"")
                .d("USERNAME", "\"0XNKjiHE9_\"")
            .and().insertInto("CONSUMERS", 568L)
                .d("BALANCE_CURRENCY", "\"_EM_1844_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "343")
                .d("BALANCE_INTEGER_PART", "0")
                .d("NAME", "\"PUvuCryZg3jO8\"")
                .r("ID", 569L)
            .and().insertInto("PRINT_REQUESTS", 565L)
                .d("COST", "0.6981489210014662")
            .and().insertInto("DOCUMENTS", 564L)
                .d("FILE_NAME", "\"\"")
                .d("TOTAL_PAGES", "711")
                .r("PRINT_REQUEST_ID", 565L)
            .and().insertInto("USERS", 448L)
                .d("PASSWORD", "\"_EM_1756_XYZ_\"")
                .d("USERNAME", "\"CyclFn\"")
            .and().insertInto("PRINTSHOPS", 452L)
                .d("ADDRESS", "\"SUvi06gHboUtXNQ4\"")
                .d("AVG_RATING", "0.8376245991855458")
                .d("BALANCE_CURRENCY", "\"_EM_1275_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "-16216")
                .d("BALANCE_INTEGER_PART", "0")
                .d("LATITUDE", "-0.24753955652266635")
                .d("LOGO", "\"gyMzpJrduln\"")
                .d("LONGITUDE", "0.8316951183968223")
                .d("NAME", "\"_EM_1276_XYZ_\"")
                .d("NIF", "\"kyc9x\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printdocument/750?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1848_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"jI\", " + 
                    " \"printShop\": { " + 
                    " \"id\": 6084038343344369159, " + 
                    " \"name\": \"7tGuijZGIg95E8\", " + 
                    " \"latitude\": 0.9591696587607235, " + 
                    " \"longitude\": 0.009530814676049881, " + 
                    " \"avgRating\": 0.111144826 " + 
                    " }, " + 
                    " \"id\": 358, " + 
                    " \"username\": \"0XNKjiHE9_\", " + 
                    " \"roles\": [ " + 
                    " \"ANl3\" " + 
                    " ] " + 
                    " } ")
                .get(baseUrlOfSut + "/consumer/balance?" + 
                    "password=9G7xI&" + 
                    "username=04LS9_YpXg&" + 
                    "charset=5821&" + 
                    "payer_email=TJr3idXCo&" + 
                    "txn_type=&" + 
                    "transaction_type=&" + 
                    "mc_gross=rXDDJ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"success\":true}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .options(baseUrlOfSut + "/*")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/satisfied'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/satisfied?" + 
                    "password=7diSKEM&" + 
                    "username=NxafGngOyrIEzbJ4")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/satisfied"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_71_addNewConsumerPrintingSchema.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"_EM_1271_XYZ_\", " + 
                    " \"coverSpecs\": \"_EM_1272_XYZ_\", " + 
                    " \"deleted\": false, " + 
                    " \"paperSpecs\": \"_EM_1273_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/-1106/printingschemas")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_71_addNewConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/consumer/-1106/printingschemas"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1848_XYZ_")
                .get(baseUrlOfSut + "/consumer/-1106/printingschemas")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/-1106/printingschemas"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1848_XYZ_")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/14?" + 
                    "password=9G7xI&" + 
                    "username=04LS9_YpXg")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/406/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/406/employees"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1848_XYZ_")
                .put(baseUrlOfSut + "/printshops/406/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/406/employees"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * 1 - (200) GET:/printdocument/{id}
    * 2 - (200) GET:/consumer/balance
    * 3 - (204) OPTIONS:/*
    * 4 - (500) GET:/consumer/satisfied
    * 5 - (500) POST:/consumer/{consumerID}/printingschemas
    * 6 - (500) GET:/consumer/{consumerID}/printingschemas
    * 7 - (200) DELETE:/consumer/requests/cancel/{id}
    * 8 - (403) POST:/printshops/{printShopID}/employees
    * 9 - (403) PUT:/printshops/{printShopID}/employees
    * 10 - (404) POST:/consumer/subscribe
    * Found 8 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_55_postOnSubscribeShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 525L)
                .d("PASSWORD", "\"PNT9f\"")
                .d("USERNAME", "\"Pav\"")
            .and().insertInto("CONSUMERS", 524L)
                .d("BALANCE_CURRENCY", "\"U4UUsGGr1dyEUY\"")
                .d("BALANCE_FRACTIONAL_PART", "779")
                .d("BALANCE_INTEGER_PART", "820")
                .d("EMAIL", "\"buQPEWiQ\"")
                .d("LATITUDE", "\"_EM_1850_XYZ_\"")
                .d("LONGITUDE", "\"_EM_1752_XYZ_\"")
                .d("NAME", "\"sNIbFgCf\"")
                .r("ID", 525L)
            .and().insertInto("PRINTSHOPS", 526L)
                .d("ADDRESS", "\"i4uE2H2jPMZCM\"")
                .d("AVG_RATING", "1.6220689011225924")
                .d("BALANCE_CURRENCY", "\"H7ipPC33jJ_R\"")
                .d("BALANCE_FRACTIONAL_PART", "8912")
                .d("BALANCE_INTEGER_PART", "131632")
                .d("LATITUDE", "0.8421963006263061")
                .d("LOGO", "\"YU\"")
                .d("LONGITUDE", "0.0")
                .d("NAME", "\"_EM_1753_XYZ_\"")
                .d("NIF", "\"_EM_1754_XYZ_\"")
            .and().insertInto("PRINTSHOPS", 571L)
                .d("ADDRESS", "\"HEUIOH8SOnEvt\"")
                .d("AVG_RATING", "80.4134294615699")
                .d("BALANCE_CURRENCY", "\"lWU58zUUiUMl7SU2\"")
                .d("BALANCE_FRACTIONAL_PART", "0")
                .d("BALANCE_INTEGER_PART", "0")
                .d("LATITUDE", "0.81")
                .d("LOGO", "\"JmnkcVQjNf\"")
                .d("LONGITUDE", "0.004150172221460496")
                .d("NAME", "\"ddtXLqGRMvzc\"")
                .d("NIF", "\"nrjx_XIF9bi\"")
            .and().insertInto("PRINTSHOPS", 570L)
                .d("ADDRESS", "\"Qp_QlpRZB2qC\"")
                .d("AVG_RATING", "0.4610897802055609")
                .d("BALANCE_CURRENCY", "\"_EM_1841_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "87")
                .d("BALANCE_INTEGER_PART", "33228")
                .d("LATITUDE", "260602.60308595188")
                .d("LOGO", "\"1Le5cCnuFUn\"")
                .d("LONGITUDE", "51511.626")
                .d("NAME", "\"_EM_1842_XYZ_\"")
                .d("NIF", "\"_EM_1843_XYZ_\"")
            .and().insertInto("USERS", 569L)
                .d("PASSWORD", "\"KZbvcOPVkQ\"")
                .d("USERNAME", "\"0XNKjiHE9_\"")
            .and().insertInto("CONSUMERS", 568L)
                .d("BALANCE_CURRENCY", "\"_EM_1844_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "343")
                .d("BALANCE_INTEGER_PART", "0")
                .d("NAME", "\"PUvuCryZg3jO8\"")
                .r("ID", 569L)
            .and().insertInto("PRINT_REQUESTS", 565L)
                .d("COST", "0.6981489210014662")
            .and().insertInto("DOCUMENTS", 564L)
                .d("FILE_NAME", "\"\"")
                .d("TOTAL_PAGES", "711")
                .r("PRINT_REQUEST_ID", 565L)
            .and().insertInto("USERS", 448L)
                .d("PASSWORD", "\"_EM_1756_XYZ_\"")
                .d("USERNAME", "\"CyclFn\"")
            .and().insertInto("PRINTSHOPS", 452L)
                .d("ADDRESS", "\"SUvi06gHboUtXNQ4\"")
                .d("AVG_RATING", "0.8376245991855458")
                .d("BALANCE_CURRENCY", "\"_EM_1275_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "-16216")
                .d("BALANCE_INTEGER_PART", "0")
                .d("LATITUDE", "-0.24753955652266635")
                .d("LOGO", "\"gyMzpJrduln\"")
                .d("LONGITUDE", "0.8316951183968223")
                .d("NAME", "\"_EM_1276_XYZ_\"")
                .d("NIF", "\"kyc9x\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printdocument/750?" + 
                    "password=UezltySeu5W28s&" + 
                    "username=m")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1848_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"jI\", " + 
                    " \"printShop\": { " + 
                    " \"id\": 6084038343344369159, " + 
                    " \"name\": \"7tGuijZGIg95E8\", " + 
                    " \"latitude\": 0.9591696587607235, " + 
                    " \"longitude\": 0.009530814676049881, " + 
                    " \"avgRating\": 0.111144826 " + 
                    " }, " + 
                    " \"id\": 358, " + 
                    " \"username\": \"0XNKjiHE9_\", " + 
                    " \"roles\": [ " + 
                    " \"ANl3\" " + 
                    " ] " + 
                    " } ")
                .get(baseUrlOfSut + "/consumer/balance?" + 
                    "password=9G7xI&" + 
                    "username=04LS9_YpXg&" + 
                    "charset=5821&" + 
                    "payer_email=TJr3idXCo&" + 
                    "txn_type=&" + 
                    "transaction_type=&" + 
                    "mc_gross=rXDDJ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"success\":true}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .options(baseUrlOfSut + "/*")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/satisfied'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/satisfied?" + 
                    "password=7diSKEM&" + 
                    "username=NxafGngOyrIEzbJ4")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/satisfied"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_71_addNewConsumerPrintingSchema.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"_EM_1271_XYZ_\", " + 
                    " \"coverSpecs\": \"_EM_1272_XYZ_\", " + 
                    " \"deleted\": false, " + 
                    " \"paperSpecs\": \"_EM_1273_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/-1106/printingschemas")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_71_addNewConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/consumer/-1106/printingschemas"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1848_XYZ_")
                .get(baseUrlOfSut + "/consumer/-1106/printingschemas")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/-1106/printingschemas"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1848_XYZ_")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/14?" + 
                    "password=9G7xI&" + 
                    "username=04LS9_YpXg")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/406/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/406/employees"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1848_XYZ_")
                .put(baseUrlOfSut + "/printshops/406/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/406/employees"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * 1 - (403) PUT:/printshops/{id}/pricetable/rings
    * 2 - (200) GET:/consumer/balance
    * 3 - (500) DELETE:/consumer/{username}/notifications
    * 4 - (500) GET:/consumer/satisfied
    * 5 - (500) POST:/consumer/{consumerID}/printingschemas
    * 6 - (500) GET:/consumer/{consumerID}/printingschemas
    * 7 - (200) DELETE:/consumer/requests/cancel/{id}
    * 8 - (403) POST:/printshops/{printShopID}/employees
    * 9 - (403) PUT:/printshops/{printShopID}/employees
    * 10 - (404) POST:/consumer/subscribe
    * Found 11 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_56_postOnSubscribeShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 525L)
                .d("PASSWORD", "\"PNT9f\"")
                .d("USERNAME", "\"Pav\"")
            .and().insertInto("CONSUMERS", 524L)
                .d("BALANCE_CURRENCY", "\"U4UUsGGr1dyEUY\"")
                .d("BALANCE_FRACTIONAL_PART", "779")
                .d("BALANCE_INTEGER_PART", "820")
                .d("EMAIL", "\"buQPEWiQ\"")
                .d("LATITUDE", "\"_EM_1850_XYZ_\"")
                .d("LONGITUDE", "\"_EM_1752_XYZ_\"")
                .d("NAME", "\"sNIbFgCf\"")
                .r("ID", 525L)
            .and().insertInto("PRINTSHOPS", 526L)
                .d("ADDRESS", "\"i4uE2H2jPMZCM\"")
                .d("AVG_RATING", "1.6220689011225924")
                .d("BALANCE_CURRENCY", "\"H7ipPC33jJ_R\"")
                .d("BALANCE_FRACTIONAL_PART", "8912")
                .d("BALANCE_INTEGER_PART", "131632")
                .d("LATITUDE", "0.8421963006263061")
                .d("LOGO", "\"YU\"")
                .d("LONGITUDE", "0.0")
                .d("NAME", "\"_EM_1753_XYZ_\"")
                .d("NIF", "\"_EM_1754_XYZ_\"")
            .and().insertInto("PRINTSHOPS", 571L)
                .d("ADDRESS", "\"HEUIOH8SOnEvt\"")
                .d("AVG_RATING", "80.4134294615699")
                .d("BALANCE_CURRENCY", "\"lWU58zUUiUMl7SU2\"")
                .d("BALANCE_FRACTIONAL_PART", "0")
                .d("BALANCE_INTEGER_PART", "0")
                .d("LATITUDE", "0.812396276858")
                .d("LOGO", "\"JmnkdVQjNf\"")
                .d("LONGITUDE", "0.004150172221460496")
                .d("NAME", "\"ddtXLqGRMvzc\"")
                .d("NIF", "\"nrjx_XIF9bi\"")
            .and().insertInto("PRINTSHOPS", 570L)
                .d("ADDRESS", "\"Qp_QlpRZB2qC\"")
                .d("AVG_RATING", "0.4610897802055609")
                .d("BALANCE_CURRENCY", "\"_EM_1841_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "87")
                .d("BALANCE_INTEGER_PART", "33228")
                .d("LATITUDE", "260543.2863017224")
                .d("LOGO", "\"1Le5cCnuFUn\"")
                .d("LONGITUDE", "51511.626")
                .d("NAME", "\"_EM_1842_XYZ_\"")
                .d("NIF", "\"_EM_1843_XYZ_\"")
            .and().insertInto("USERS", 569L)
                .d("PASSWORD", "\"KZbvcOPVkQ\"")
                .d("USERNAME", "\"0XNKjiHE9_\"")
            .and().insertInto("CONSUMERS", 568L)
                .d("BALANCE_CURRENCY", "\"_EM_1844_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "343")
                .d("BALANCE_INTEGER_PART", "0")
                .d("NAME", "\"PUvuCryZg3jO8\"")
                .r("ID", 569L)
            .and().insertInto("PRINT_REQUESTS", 565L)
                .d("COST", "0.6981489210014662")
            .and().insertInto("DOCUMENTS", 564L)
                .d("FILE_NAME", "\"\"")
                .d("TOTAL_PAGES", "711")
                .r("PRINT_REQUEST_ID", 565L)
            .and().insertInto("USERS", 448L)
                .d("PASSWORD", "\"_EM_1756_XYZ_\"")
                .d("USERNAME", "\"CyclFn\"")
            .and().insertInto("PRINTSHOPS", 452L)
                .d("ADDRESS", "\"SUvi06gHboUtXNQ4\"")
                .d("AVG_RATING", "0.8376245991855458")
                .d("BALANCE_CURRENCY", "\"_EM_1275_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "-16216")
                .d("BALANCE_INTEGER_PART", "0")
                .d("LATITUDE", "-0.24753955652266635")
                .d("LOGO", "\"gyMzpJrduln\"")
                .d("LONGITUDE", "0.8316951183968223")
                .d("NAME", "\"_EM_1276_XYZ_\"")
                .d("NIF", "\"kyc9x\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .header("X-Requested-With", "EwJUFTZXAC1_g0")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 110, " + 
                    " \"price\": \"EwJUFTZXAC1_g0\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/527/pricetable/rings?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/527/pricetable/rings"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GDHmxSCfQr")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"jI\", " + 
                    " \"printShop\": { " + 
                    " \"id\": 6084038343344369159, " + 
                    " \"name\": \"7tGuijZGIg95E8\", " + 
                    " \"latitude\": 0.9591696587607235, " + 
                    " \"longitude\": 0.009530814676049881, " + 
                    " \"avgRating\": 0.111144826 " + 
                    " }, " + 
                    " \"id\": 358, " + 
                    " \"username\": \"0XNKjiHE9_\", " + 
                    " \"roles\": [ " + 
                    " \"ANl3\" " + 
                    " ] " + 
                    " } ")
                .get(baseUrlOfSut + "/consumer/balance?" + 
                    "password=9G7xI&" + 
                    "username=04LS9_YpXg&" + 
                    "charset=5821&" + 
                    "payer_email=TJr3idXCo&" + 
                    "txn_type=&" + 
                    "transaction_type=&" + 
                    "mc_gross=rXDDJ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"success\":true}"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_220_deleteAllNotifications.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{username}/notifications'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/consumer/Vo/notifications?EMextraParam123=_EM_8_XYZ_")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_220_deleteAllNotifications
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/Vo/notifications"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/satisfied'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "NpQQZZDFahyMgY7")
                .get(baseUrlOfSut + "/consumer/satisfied?" + 
                    "password=7diSKEM&" + 
                    "username=NxafGngOyrIEzbJ4")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/satisfied"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_71_addNewConsumerPrintingSchema.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"_EM_1271_XYZ_\", " + 
                    " \"coverSpecs\": \"_EM_1272_XYZ_\", " + 
                    " \"deleted\": false, " + 
                    " \"paperSpecs\": \"_EM_1273_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/-1106/printingschemas")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_71_addNewConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/consumer/-1106/printingschemas"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GDHmxSCfQr")
                .get(baseUrlOfSut + "/consumer/-1106/printingschemas")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/-1106/printingschemas"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GDHmxSCfQr")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/14?" + 
                    "password=9G7xI&" + 
                    "username=04LS9_YpXg")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/406/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/406/employees"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GDHmxSCfQr")
                .put(baseUrlOfSut + "/printshops/406/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/406/employees"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * 1 - (403) POST:/printshops/{id}/pricetable/rings
    * 2 - (200) GET:/consumer/balance
    * 3 - (500) DELETE:/consumer/{username}/notifications
    * 4 - (500) GET:/consumer/satisfied
    * 5 - (500) POST:/consumer/{consumerID}/printingschemas
    * 6 - (500) GET:/consumer/{consumerID}/printingschemas
    * 7 - (500) DELETE:/consumer/requests/cancel/{id}
    * 8 - (403) POST:/printshops/{printShopID}/employees
    * 9 - (403) PUT:/printshops/{printShopID}/employees
    * 10 - (404) POST:/consumer/subscribe
    * Found 13 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_57_postOnSubscribeShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 525L)
                .d("PASSWORD", "\"PNT9f\"")
                .d("USERNAME", "\"Pav\"")
            .and().insertInto("CONSUMERS", 524L)
                .d("BALANCE_CURRENCY", "\"U4UUsGGr1dyEUY\"")
                .d("BALANCE_FRACTIONAL_PART", "779")
                .d("BALANCE_INTEGER_PART", "820")
                .d("EMAIL", "\"buQPEWiQ\"")
                .d("LATITUDE", "\"_EM_1850_XYZ_\"")
                .d("LONGITUDE", "\"_EM_1752_XYZ_\"")
                .d("NAME", "\"sNIbFgCf\"")
                .r("ID", 525L)
            .and().insertInto("PRINTSHOPS", 526L)
                .d("ADDRESS", "\"i4uD2H2jPMZCM\"")
                .d("AVG_RATING", "1.6220689011225924")
                .d("BALANCE_CURRENCY", "\"H7ipPC33jJ_R\"")
                .d("BALANCE_FRACTIONAL_PART", "8912")
                .d("BALANCE_INTEGER_PART", "131632")
                .d("LATITUDE", "0.8421963006263061")
                .d("LOGO", "\"YU\"")
                .d("LONGITUDE", "0.0")
                .d("NAME", "\"_EM_1753_XYZ_\"")
                .d("NIF", "\"_EM_1754_XYZ_\"")
            .and().insertInto("PRINTSHOPS", 571L)
                .d("ADDRESS", "\"HEUIOH8SOnEvt\"")
                .d("AVG_RATING", "80.4134294615699")
                .d("BALANCE_CURRENCY", "\"lWU58zUUiUMl7SU2\"")
                .d("BALANCE_FRACTIONAL_PART", "0")
                .d("BALANCE_INTEGER_PART", "0")
                .d("LATITUDE", "0.812396276858")
                .d("LOGO", "\"JmnkdVQjNf\"")
                .d("LONGITUDE", "0.004150172221460496")
                .d("NAME", "\"ddtXLqGRMvzc\"")
                .d("NIF", "\"nrjx_XIF9bi\"")
            .and().insertInto("PRINTSHOPS", 570L)
                .d("ADDRESS", "\"Qp_QlpRZB2qC\"")
                .d("AVG_RATING", "0.4610897802055609")
                .d("BALANCE_CURRENCY", "\"_EM_1841_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "87")
                .d("BALANCE_INTEGER_PART", "33228")
                .d("LATITUDE", "260543.2863017224")
                .d("LOGO", "\"1Le5cCnuFUn\"")
                .d("LONGITUDE", "51511.626")
                .d("NAME", "\"_EM_1842_XYZ_\"")
                .d("NIF", "\"_EM_1843_XYZ_\"")
            .and().insertInto("USERS", 569L)
                .d("PASSWORD", "\"KZbvcOPVkQ\"")
                .d("USERNAME", "\"0XNKjiHE9_\"")
            .and().insertInto("CONSUMERS", 568L)
                .d("BALANCE_CURRENCY", "\"_EM_1844_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "343")
                .d("BALANCE_INTEGER_PART", "0")
                .d("NAME", "\"PUvuCryZg3jO8\"")
                .r("ID", 569L)
            .and().insertInto("PRINT_REQUESTS", 565L)
                .d("COST", "0.6981489210014662")
            .and().insertInto("DOCUMENTS", 564L)
                .d("FILE_NAME", "\"\"")
                .d("TOTAL_PAGES", "711")
                .r("PRINT_REQUEST_ID", 565L)
            .and().insertInto("USERS", 448L)
                .d("PASSWORD", "\"_EM_1756_XYZ_\"")
                .d("USERNAME", "\"CyclFn\"")
            .and().insertInto("PRINTSHOPS", 452L)
                .d("ADDRESS", "\"SUvi06gHboUtXNQ4\"")
                .d("AVG_RATING", "0.8376245991855458")
                .d("BALANCE_CURRENCY", "\"_EM_1275_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "-16216")
                .d("BALANCE_INTEGER_PART", "0")
                .d("LATITUDE", "-0.24753955652266635")
                .d("LOGO", "\"gyMzpJrduln\"")
                .d("LONGITUDE", "0.8316951183968223")
                .d("NAME", "\"_EM_1276_XYZ_\"")
                .d("NIF", "\"kyc9x\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 563 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/720/pricetable/rings")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/720/pricetable/rings"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GDHmxSCfQr")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"jI\", " + 
                    " \"printShop\": { " + 
                    " \"id\": 6084038343344369159, " + 
                    " \"name\": \"7tGuijZGIg95E8\", " + 
                    " \"latitude\": 0.9591696587607235, " + 
                    " \"longitude\": 0.009530814676049881, " + 
                    " \"avgRating\": 0.111144826 " + 
                    " }, " + 
                    " \"id\": 358, " + 
                    " \"username\": \"0XNKjiHE9_\", " + 
                    " \"roles\": [ " + 
                    " \"ANl3\" " + 
                    " ] " + 
                    " } ")
                .get(baseUrlOfSut + "/consumer/balance?" + 
                    "password=9G7xI&" + 
                    "username=04LS9_YpXg&" + 
                    "charset=5821&" + 
                    "txn_type=&" + 
                    "transaction_type=&" + 
                    "mc_gross=rXDDJ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"success\":true}"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_220_deleteAllNotifications.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{username}/notifications'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GDHmxSCfQr")
                .delete(baseUrlOfSut + "/consumer/Vo/notifications?" + 
                    "password=1nKmWvYu&" + 
                    "username=4S7X3f7d")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_220_deleteAllNotifications
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/Vo/notifications"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/satisfied'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "NpQQZZDFahyMgY7")
                .get(baseUrlOfSut + "/consumer/satisfied?" + 
                    "password=7diSKEM&" + 
                    "username=NxafGngOyrIEzbJ4")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/satisfied"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_71_addNewConsumerPrintingSchema.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"_EM_1271_XYZ_\", " + 
                    " \"coverSpecs\": \"_EM_1272_XYZ_\", " + 
                    " \"deleted\": false, " + 
                    " \"paperSpecs\": \"_EM_1273_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/-1106/printingschemas")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_71_addNewConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/consumer/-1106/printingschemas"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GDHmxSCfQr")
                .get(baseUrlOfSut + "/consumer/-1106/printingschemas")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/-1106/printingschemas"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_289_cancelRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/requests/cancel/{id}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GDHmxSCfQr")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/14?" + 
                    "password=9G7xI&" + 
                    "username=04LS9_YpXg")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_289_cancelRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/requests/cancel/14"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/407/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/407/employees"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GDHmxSCfQr")
                .put(baseUrlOfSut + "/printshops/407/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/407/employees"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * 1 - (403) POST:/printshops/{id}/pricetable/rings
    * 2 - (403) POST:/printshops/{id}/pricetable/rings
    * 3 - (200) GET:/consumer/balance
    * 4 - (500) DELETE:/consumer/{username}/notifications
    * 5 - (500) GET:/consumer/satisfied
    * 6 - (500) POST:/consumer/{consumerID}/printingschemas
    * 7 - (500) GET:/consumer/{consumerID}/printingschemas
    * 8 - (200) DELETE:/consumer/requests/cancel/{id}
    * 9 - (403) POST:/printshops/{printShopID}/employees
    * 10 - (403) PUT:/printshops/{printShopID}/employees
    * 11 - (404) POST:/consumer/subscribe
    * Found 12 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_58_postOnSubscribeShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 525L)
                .d("PASSWORD", "\"PNT9f\"")
                .d("USERNAME", "\"Pav\"")
            .and().insertInto("CONSUMERS", 524L)
                .d("BALANCE_CURRENCY", "\"U4UUsGGr1dyEUY\"")
                .d("BALANCE_FRACTIONAL_PART", "779")
                .d("BALANCE_INTEGER_PART", "820")
                .d("EMAIL", "\"buQPEWiQ\"")
                .d("LATITUDE", "\"_EM_1850_XYZ_\"")
                .d("LONGITUDE", "\"_EM_1752_XYZ_\"")
                .d("NAME", "\"sNIbFgCf\"")
                .r("ID", 525L)
            .and().insertInto("PRINTSHOPS", 526L)
                .d("ADDRESS", "\"i4uD2H2jPMZCM\"")
                .d("AVG_RATING", "1.6220689011225924")
                .d("BALANCE_CURRENCY", "\"H7ipPC33jJ_R\"")
                .d("BALANCE_FRACTIONAL_PART", "8912")
                .d("BALANCE_INTEGER_PART", "131632")
                .d("LATITUDE", "0.8421963006263061")
                .d("LOGO", "\"YU\"")
                .d("LONGITUDE", "0.0")
                .d("NAME", "\"_EM_1753_XYZ_\"")
                .d("NIF", "\"_EM_1754_XYZ_\"")
            .and().insertInto("PRINTSHOPS", 571L)
                .d("ADDRESS", "\"HEUIOH8SOnEvt\"")
                .d("AVG_RATING", "80.4134294615699")
                .d("BALANCE_CURRENCY", "\"lWU58zUUiUMl7SU2\"")
                .d("BALANCE_FRACTIONAL_PART", "0")
                .d("BALANCE_INTEGER_PART", "0")
                .d("LATITUDE", "0.812396276858")
                .d("LOGO", "\"JmnkdVQjNf\"")
                .d("LONGITUDE", "0.004150172221460496")
                .d("NAME", "\"ddtXLqGRMvzc\"")
                .d("NIF", "\"nrjx_XIF9bi\"")
            .and().insertInto("PRINTSHOPS", 570L)
                .d("ADDRESS", "\"Qp_QlpRZB2qC\"")
                .d("AVG_RATING", "0.4610897802055609")
                .d("BALANCE_CURRENCY", "\"_EM_1841_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "87")
                .d("BALANCE_INTEGER_PART", "33228")
                .d("LATITUDE", "260543.2863017224")
                .d("LOGO", "\"1Le5cCnuFUn\"")
                .d("LONGITUDE", "51511.626")
                .d("NAME", "\"_EM_1842_XYZ_\"")
                .d("NIF", "\"_EM_1843_XYZ_\"")
            .and().insertInto("USERS", 569L)
                .d("PASSWORD", "\"KZbvcOPVkQ\"")
                .d("USERNAME", "\"0XNKjiHE9_\"")
            .and().insertInto("CONSUMERS", 568L)
                .d("BALANCE_CURRENCY", "\"_EM_1844_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "343")
                .d("BALANCE_INTEGER_PART", "0")
                .d("NAME", "\"PUvuCryZg3jO8\"")
                .r("ID", 569L)
            .and().insertInto("PRINT_REQUESTS", 565L)
                .d("COST", "0.6981489210014662")
            .and().insertInto("DOCUMENTS", 564L)
                .d("FILE_NAME", "\"\"")
                .d("TOTAL_PAGES", "711")
                .r("PRINT_REQUEST_ID", 565L)
            .and().insertInto("USERS", 448L)
                .d("PASSWORD", "\"_EM_1756_XYZ_\"")
                .d("USERNAME", "\"CyclFn\"")
            .and().insertInto("PRINTSHOPS", 452L)
                .d("ADDRESS", "\"SUvi06gHboUtXNQ4\"")
                .d("AVG_RATING", "0.8376245991855458")
                .d("BALANCE_CURRENCY", "\"_EM_1275_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "-16216")
                .d("BALANCE_INTEGER_PART", "0")
                .d("LATITUDE", "-0.24753955652266635")
                .d("LOGO", "\"gyMzpJrduln\"")
                .d("LONGITUDE", "0.8316951183968223")
                .d("NAME", "\"_EM_1276_XYZ_\"")
                .d("NIF", "\"kyc9x\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 110679109, " + 
                    " \"price\": \"388\", " + 
                    " \"ringType\": \"p_mVRC48zfST\", " + 
                    " \"supLim\": 577 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/905/pricetable/rings?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/905/pricetable/rings"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"ringType\": \"BntbO2d3\", " + 
                    " \"supLim\": 261 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/905/pricetable/rings?" + 
                    "EMextraParam123=42&" + 
                    "username=3rgxvXs")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/905/pricetable/rings"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GDHmxSCfQr")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"jI\", " + 
                    " \"printShop\": { " + 
                    " \"id\": 6084038343344369159, " + 
                    " \"name\": \"7tGuijZGIg95E8\", " + 
                    " \"latitude\": 0.9591696587607235, " + 
                    " \"longitude\": 0.009530814676049881, " + 
                    " \"avgRating\": 0.111144826 " + 
                    " }, " + 
                    " \"id\": 358, " + 
                    " \"username\": \"0XNKjiHE9_\", " + 
                    " \"roles\": [ " + 
                    " \"ANl3\" " + 
                    " ] " + 
                    " } ")
                .get(baseUrlOfSut + "/consumer/balance?" + 
                    "password=9G7xI&" + 
                    "username=04LS9_YpXg&" + 
                    "charset=5821&" + 
                    "txn_type=&" + 
                    "transaction_type=&" + 
                    "mc_gross=rXDDJ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"success\":true}"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_220_deleteAllNotifications.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{username}/notifications'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GDHmxSCfQr")
                .delete(baseUrlOfSut + "/consumer/Vo/notifications?" + 
                    "password=1nKmWvYu&" + 
                    "username=4S7X3f7d")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_220_deleteAllNotifications
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/Vo/notifications"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/satisfied'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "NpQQZZDFahyMgY7")
                .get(baseUrlOfSut + "/consumer/satisfied?" + 
                    "password=7diSKEM&" + 
                    "username=NxafGngOyrIEzbJ4")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/satisfied"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_71_addNewConsumerPrintingSchema.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"_EM_1271_XYZ_\", " + 
                    " \"coverSpecs\": \"_EM_1272_XYZ_\", " + 
                    " \"deleted\": false, " + 
                    " \"paperSpecs\": \"_EM_1273_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/-1106/printingschemas")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_71_addNewConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/consumer/-1106/printingschemas"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GDHmxSCfQr")
                .get(baseUrlOfSut + "/consumer/-1106/printingschemas")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/-1106/printingschemas"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GDHmxSCfQr")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/14?" + 
                    "password=9G7xI&" + 
                    "username=04LS9_YpXg")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/407/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/407/employees"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GDHmxSCfQr")
                .put(baseUrlOfSut + "/printshops/407/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/407/employees"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * 1 - (403) POST:/printshops/{id}/pricetable/rings
    * 2 - (403) POST:/printshops/{id}/pricetable/rings
    * 3 - (200) GET:/consumer/balance
    * 4 - (500) DELETE:/consumer/{username}/notifications
    * 5 - (500) GET:/consumer/satisfied
    * 6 - (500) POST:/consumer/{consumerID}/printingschemas
    * 7 - (500) GET:/consumer/{consumerID}/printingschemas
    * 8 - (200) DELETE:/consumer/requests/cancel/{id}
    * 9 - (403) POST:/printshops/{printShopID}/employees
    * 10 - (403) PUT:/printshops/{printShopID}/employees
    * 11 - (404) POST:/consumer/subscribe
    * Found 12 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_59_postOnSubscribeShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 525L)
                .d("PASSWORD", "\"PNT9f\"")
                .d("USERNAME", "\"Pav\"")
            .and().insertInto("CONSUMERS", 524L)
                .d("BALANCE_CURRENCY", "\"U4UUsGGr1dyEUY\"")
                .d("BALANCE_FRACTIONAL_PART", "779")
                .d("BALANCE_INTEGER_PART", "820")
                .d("EMAIL", "\"buQPEWiQ\"")
                .d("LATITUDE", "\"_EM_1850_XYZ_\"")
                .d("LONGITUDE", "\"_EM_1752_XYZ_\"")
                .d("NAME", "\"sNIbFgCf\"")
                .r("ID", 525L)
            .and().insertInto("PRINTSHOPS", 526L)
                .d("ADDRESS", "\"i4uD2H2jPMZCM\"")
                .d("AVG_RATING", "1.6220689011225924")
                .d("BALANCE_CURRENCY", "\"H7ipPC33jJ_R\"")
                .d("BALANCE_FRACTIONAL_PART", "8912")
                .d("BALANCE_INTEGER_PART", "131632")
                .d("LATITUDE", "0.8421963006263061")
                .d("LOGO", "\"YU\"")
                .d("LONGITUDE", "0.0")
                .d("NAME", "\"_EM_1753_XYZ_\"")
                .d("NIF", "\"_EM_1754_XYZ_\"")
            .and().insertInto("PRINTSHOPS", 571L)
                .d("ADDRESS", "\"HEUIOH8SOnEvt\"")
                .d("AVG_RATING", "80.4134294615699")
                .d("BALANCE_CURRENCY", "\"lWU58zUUiUMl7SU2\"")
                .d("BALANCE_FRACTIONAL_PART", "0")
                .d("BALANCE_INTEGER_PART", "0")
                .d("LATITUDE", "0.812396276858")
                .d("LOGO", "\"JmnkdVQjNf\"")
                .d("LONGITUDE", "0.004150172221460496")
                .d("NAME", "\"ddtXLqGRMvzc\"")
                .d("NIF", "\"nrjx_XIF9bi\"")
            .and().insertInto("PRINTSHOPS", 570L)
                .d("ADDRESS", "\"Qp_QlpRZB2qC\"")
                .d("AVG_RATING", "0.4610897802055609")
                .d("BALANCE_CURRENCY", "\"_EM_1841_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "87")
                .d("BALANCE_INTEGER_PART", "33228")
                .d("LATITUDE", "260543.2863017224")
                .d("LOGO", "\"1Le5cCnuFUn\"")
                .d("LONGITUDE", "51511.626")
                .d("NAME", "\"_EM_1842_XYZ_\"")
                .d("NIF", "\"_EM_1843_XYZ_\"")
            .and().insertInto("USERS", 569L)
                .d("PASSWORD", "\"KZbvcOPVkQ\"")
                .d("USERNAME", "\"0XNKjiHE9_\"")
            .and().insertInto("CONSUMERS", 568L)
                .d("BALANCE_CURRENCY", "\"_EM_1844_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "343")
                .d("BALANCE_INTEGER_PART", "0")
                .d("NAME", "\"PUvuCryZg3jO8\"")
                .r("ID", 569L)
            .and().insertInto("PRINT_REQUESTS", 565L)
                .d("COST", "0.6981489210014662")
            .and().insertInto("DOCUMENTS", 564L)
                .d("FILE_NAME", "\"\"")
                .d("TOTAL_PAGES", "711")
                .r("PRINT_REQUEST_ID", 565L)
            .and().insertInto("USERS", 448L)
                .d("PASSWORD", "\"_EM_1756_XYZ_\"")
                .d("USERNAME", "\"CyclFn\"")
            .and().insertInto("PRINTSHOPS", 452L)
                .d("ADDRESS", "\"SUvi06gHboUtXNQ4\"")
                .d("AVG_RATING", "0.8376245991855458")
                .d("BALANCE_CURRENCY", "\"_EM_1275_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "-16216")
                .d("BALANCE_INTEGER_PART", "0")
                .d("LATITUDE", "-0.24753955652266635")
                .d("LOGO", "\"gyMzpJrduln\"")
                .d("LONGITUDE", "0.8316951183968223")
                .d("NAME", "\"_EM_1276_XYZ_\"")
                .d("NIF", "\"kyc9x\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("x-requested-with", "foo")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 110679109, " + 
                    " \"price\": \"388\", " + 
                    " \"ringType\": \"p_mVRC48zfST\", " + 
                    " \"supLim\": 577 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/905/pricetable/rings")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/905/pricetable/rings"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"ringType\": \"BntbO2d3\", " + 
                    " \"supLim\": 261 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/905/pricetable/rings?" + 
                    "password=9d&" + 
                    "username=3rgxvXs")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/905/pricetable/rings"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GDHmxSCfQr")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"jI\", " + 
                    " \"printShop\": { " + 
                    " \"id\": 6084038343344369159, " + 
                    " \"name\": \"7tGuijZGIg95E8\", " + 
                    " \"latitude\": 0.9591696587607235, " + 
                    " \"longitude\": 0.009530814676049881, " + 
                    " \"avgRating\": 0.111144826 " + 
                    " }, " + 
                    " \"id\": 358, " + 
                    " \"username\": \"0XNKjiHE9_\", " + 
                    " \"roles\": [ " + 
                    " \"ANl3\" " + 
                    " ] " + 
                    " } ")
                .get(baseUrlOfSut + "/consumer/balance?" + 
                    "password=9G7xI&" + 
                    "username=04LS9_YpXg&" + 
                    "charset=5821&" + 
                    "txn_type=&" + 
                    "transaction_type=&" + 
                    "mc_gross=rXDDJ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"success\":true}"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_220_deleteAllNotifications.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{username}/notifications'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GDHmxSCfQr")
                .delete(baseUrlOfSut + "/consumer/Vo/notifications?" + 
                    "password=1nKmWvYu&" + 
                    "username=4S7X3f7d")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_220_deleteAllNotifications
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/Vo/notifications"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/satisfied'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/satisfied?" + 
                    "password=7diSKEM&" + 
                    "username=NxafGngOyrIEzbJ4")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/satisfied"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_71_addNewConsumerPrintingSchema.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"_EM_1271_XYZ_\", " + 
                    " \"coverSpecs\": \"_EM_1272_XYZ_\", " + 
                    " \"deleted\": false, " + 
                    " \"paperSpecs\": \"_EM_1273_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/-1106/printingschemas")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_71_addNewConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/consumer/-1106/printingschemas"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GDHmxSCfQr")
                .get(baseUrlOfSut + "/consumer/-1106/printingschemas")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/-1106/printingschemas"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GDHmxSCfQr")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/14?" + 
                    "password=9G7xI&" + 
                    "username=04LS9_YpXg")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/407/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/407/employees"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GDHmxSCfQr")
                .put(baseUrlOfSut + "/printshops/407/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/407/employees"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * 1 - (500) POST:/consumer/{consumerID}/printingschemas
    * 2 - (500) GET:/consumer/{consumerID}/printingschemas
    * 3 - (500) POST:/admin/seed
    * 4 - (200) DELETE:/consumer/requests/cancel/{id}
    * 5 - (403) POST:/printshops/{id}/pricetable/deletering
    * 6 - (200) GET:/printshops
    * 7 - (403) GET:/documents/{id}
    * 8 - (403) POST:/printshops/{printShopID}/employees
    * 9 - (403) PUT:/printshops/{printShopID}/employees
    * 10 - (404) POST:/consumer/subscribe
    * Found 10 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_60_postOnSubscribeShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 538L)
                .d("PASSWORD", "\"7G\"")
                .d("USERNAME", "\"WR7b7RBLNculuGVZ\"")
            .and().insertInto("CONSUMERS", 537L)
                .d("BALANCE_CURRENCY", "\"s1Gy82znOTd\"")
                .d("BALANCE_FRACTIONAL_PART", "-15761")
                .d("BALANCE_INTEGER_PART", "518")
                .d("EMAIL", "\"6OX\"")
                .d("LATITUDE", "\"89j\"")
                .d("LONGITUDE", "\"VyVR\"")
                .d("NAME", "\"_EM_1447_XYZ_\"")
                .r("ID", 538L)
            .and().insertInto("PRINTSHOPS", 539L)
                .d("ADDRESS", "\"gbf6ulYVz\"")
                .d("AVG_RATING", "-31.345955493177264")
                .d("BALANCE_CURRENCY", "\"RhBkl\"")
                .d("BALANCE_FRACTIONAL_PART", "177")
                .d("BALANCE_INTEGER_PART", "131777")
                .d("LATITUDE", "-9590.741261811761")
                .d("LOGO", "\"U9rA54UUMe5t\"")
                .d("LONGITUDE", "-0.07632266846425131")
                .d("NAME", "\"\"")
                .d("NIF", "\"O5s5WBKO1b\"")
            .and().insertInto("PRINTSHOPS", 546L)
                .d("ADDRESS", "\"zwmzIZOHNk\"")
                .d("AVG_RATING", "0.4948823195041506")
                .d("BALANCE_CURRENCY", "\"Jwc6u3YYs\"")
                .d("BALANCE_FRACTIONAL_PART", "-1724121902")
                .d("BALANCE_INTEGER_PART", "805")
                .d("LATITUDE", "0.4010968529253416")
                .d("LOGO", "\"42\"")
                .d("LONGITUDE", "0.08196379732054926")
                .d("NAME", "\"\"")
                .d("NIF", "\"_EM_2170_XYZ_\"")
            .and().insertInto("PRINTSHOPS", 545L)
                .d("ADDRESS", "\"\"")
                .d("AVG_RATING", "0.08046586447279624")
                .d("BALANCE_CURRENCY", "\"O3NP4gHtdvMX\"")
                .d("BALANCE_FRACTIONAL_PART", "824")
                .d("BALANCE_INTEGER_PART", "638984258")
                .d("LATITUDE", "-0.8906226210368844")
                .d("LOGO", "\"U2Gfcq55blFU4e\"")
                .d("LONGITUDE", "0.3921778785013531")
                .d("NAME", "\"jx7F5\"")
                .d("NIF", "\"rIS9SZu5vp\"")
            .and().insertInto("USERS", 544L)
                .d("PASSWORD", "\"5ZV7WU4nf4s1z\"")
                .d("USERNAME", "\"=9iSJiv\"")
            .and().insertInto("CONSUMERS", 543L)
                .d("BALANCE_CURRENCY", "\"uabG\"")
                .d("BALANCE_FRACTIONAL_PART", "710")
                .d("BALANCE_INTEGER_PART", "688")
                .d("NAME", "\"fCu_l\"")
                .r("ID", 544L)
            .and().insertInto("PRINT_REQUESTS", 540L)
                .d("ARRIVAL", "NULL")
                .d("COST", "0.9061887206570978")
                .d("DELIVERED", "\"2055-07-16 22:21:27\"")
                .d("EMPATTENDED", "\"Edzr5PFj_5a\"")
                .d("EMPDELIVERED", "\"KRRlDfHTRuzSw\"")
                .d("FINISHED", "NULL")
                .d("PAYPAL_SALE_ID", "\"ykL_LVoc\"")
                .d("PAYMENT_TYPE", "\"w8BB\"")
                .d("STATUS", "\"NOT_PAYED\"")
                .r("CONSUMER_ID", 537L)
                .d("PRINTSHOP_ID", "NULL")
                .r("PRINTSHOP", 546L)
                .d("CONSUMER", "NULL")
            .and().insertInto("USERS", 448L)
                .d("PASSWORD", "\"vt\"")
                .d("USERNAME", "\"CyclFn\"")
            .and().insertInto("PRINTSHOPS", 452L)
                .d("ADDRESS", "\"TbKF7VOTe0]p0\"")
                .d("AVG_RATING", "5.640419705783357")
                .d("BALANCE_CURRENCY", "\"3U]\"")
                .d("BALANCE_FRACTIONAL_PART", "1188")
                .d("BALANCE_INTEGER_PART", "8647")
                .d("LATITUDE", "0.7553308906207568")
                .d("LOGO", "\"_EM_1449_XYZ_\"")
                .d("LONGITUDE", "0.8316951183968223")
                .d("NAME", "\"_EM_1276_XYZ_\"")
                .d("NIF", "\"cyc9xU\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_72_addNewConsumerPrintingSchema.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"_EM_1271_XYZ_\", " + 
                    " \"coverSpecs\": \"_EM_1272_XYZ_\", " + 
                    " \"deleted\": true, " + 
                    " \"name\": \"bEn2tB4sZqgIWIT\", " + 
                    " \"paperSpecs\": \"h\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/0/printingschemas")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_72_addNewConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/0/printingschemas"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1453_XYZ_")
                .get(baseUrlOfSut + "/consumer/0/printingschemas?" + 
                    "password=eQ5Byx9VWjnxnsvlV&" + 
                    "username=PNM")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/0/printingschemas"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/admin/AdminController_123_seed.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/admin/seed'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/admin/seed")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/admin/AdminController_123_seed
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/admin/seed"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1453_XYZ_")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/16?" + 
                    "password=THH1rSXWb6Z3q&" + 
                    "username=VOHYgrZPWWdUnsgF")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 431, " + 
                    " \"supLim\": 415 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/45/pricetable/deletering")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/45/pricetable/deletering"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops?" + 
                    "password=&" + 
                    "username=_EM_2169_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("[{\"id\":1,\"name\":\"Copy Scan\",\"address\":\"Rua Quinta dos Órfãos 16 S. Vitor (Junto à Universidade do Minho), Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_1\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":2,\"name\":\"Flash Vidius - Gomes \\u0026 Santana, Lda.\",\"address\":\"R. Manuel Silva, 20 - R/C. C.P. 4490000, Povoa de Varzim, Porto\",\"latitude\":41.379392,\"longitude\":-8.761458,\"nif\":\"199111333\",\"logo\":\"logo_3\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":3,\"name\":\"CopyGraphe\",\"address\":\"R. Ramalho Ortigão C Com Pescador - lj 12. C.P. 4490678, Povoa de Varzim, Porto\",\"latitude\":41.383314,\"longitude\":-8.761942,\"nif\":\"123098333\",\"logo\":\"logo_4\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":4,\"name\":\"Nelson Costa Santos\",\"address\":\"Tv. Senra, 22 - Póvoa de Varzim. C.P. 4490000, Povoa de Varzim, Porto.\",\"latitude\":41.38207,\"longitude\":-8.763069,\"nif\":\"153655378\",\"logo\":\"logo_5\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":5,\"name\":\"Gráfica Editora Poveira, Lda.\",\"address\":\"R. Manuel Silva, 18. C.P. 4490657, Povoa de Varzim, Porto.\",\"latitude\":41.379605,\"longitude\":-8.761047,\"nif\":\"133555378\",\"logo\":\"logo_6\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":6,\"name\":\"Staples Vila do Conde\",\"address\":\"Avenida General Humberto Delgado 2, Vila do Conde\",\"latitude\":41.370674,\"longitude\":-8.744176,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":7,\"name\":\"Staples Vila da Maia\",\"address\":\"Rua Comendador Valentim dos Santos Dinis 570, Maia\",\"latitude\":41.246159,\"longitude\":-8.625225,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":8,\"name\":\"Video Norte\",\"address\":\"Rua Nova de Santa Cruz\",\"latitude\":41.5594,\"longitude\":-8.3972,\"nif\":\"123444378\",\"logo\":\"logo_8\",\"avgRating\":4.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":9,\"name\":\"SmartPrint\",\"address\":\"Rua dos Peões, Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_2\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":10,\"name\":\"\",\"address\":\"gbf6ulYVz\",\"latitude\":-9590.741261811761,\"longitude\":-0.07632266846425131,\"nif\":\"O5s5WBKO1b\",\"logo\":\"U9rA54UUMe5t\",\"avgRating\":-31.345955,\"balance\":{\"currency\":\"RhBkl\",\"integerPart\":131777,\"fractionalPart\":177}},{\"id\":11,\"name\":\"\",\"address\":\"zwmzIZOHNk\",\"latitude\":0.4010968529253416,\"longitude\":0.08196379732054926,\"nif\":\"_EM_2170_XYZ_\",\"logo\":\"42\",\"avgRating\":0.49488232,\"balance\":{\"currency\":\"Jwc6u3YYs\",\"integerPart\":805,\"fractionalPart\":-1724121902}},{\"id\":12,\"name\":\"jx7F5\",\"address\":\"\",\"latitude\":-0.8906226210368844,\"longitude\":0.3921778785013531,\"nif\":\"rIS9SZu5vp\",\"logo\":\"U2Gfcq55blFU4e\",\"avgRating\":0.08046587,\"balance\":{\"currency\":\"O3NP4gHtdvMX\",\"integerPart\":638984258,\"fractionalPart\":824}},{\"id\":13,\"name\":\"_EM_1276_XYZ_\",\"address\":\"TbKF7VOTe0]p0\",\"latitude\":0.7553308906207568,\"longitude\":0.8316951183968223,\"nif\":\"cyc9xU\",\"logo\":\"_EM_1449_XYZ_\",\"avgRating\":5.6404195,\"balance\":{\"currency\":\"3U]\",\"integerPart\":8647,\"fractionalPart\":1188}}]"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "2")
                .get(baseUrlOfSut + "/documents/557")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/documents/557"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/-3692/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-3692/employees"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/printshops/-3692/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-3692/employees"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * 1 - (500) POST:/consumer/{consumerID}/printingschemas
    * 2 - (500) GET:/consumer/{consumerID}/printingschemas
    * 3 - (500) POST:/admin/seed
    * 4 - (500) DELETE:/consumer/requests/cancel/{id}
    * 5 - (403) POST:/printshops/{id}/pricetable/deletering
    * 6 - (200) GET:/printshops
    * 7 - (403) GET:/documents/{id}
    * 8 - (403) POST:/printshops/{printShopID}/employees
    * 9 - (403) PUT:/printshops/{printShopID}/employees
    * 10 - (404) POST:/consumer/subscribe
    * Found 12 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_61_postOnSubscribeShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 538L)
                .d("PASSWORD", "\"7G\"")
                .d("USERNAME", "\"WR7b7RBLNculuGVZ\"")
            .and().insertInto("CONSUMERS", 537L)
                .d("BALANCE_CURRENCY", "\"s1Gy82znOTd\"")
                .d("BALANCE_FRACTIONAL_PART", "-15761")
                .d("BALANCE_INTEGER_PART", "518")
                .d("EMAIL", "\"6OX\"")
                .d("LATITUDE", "\"89j\"")
                .d("LONGITUDE", "\"VyVR\"")
                .d("NAME", "\"_EM_1447_XYZ_\"")
                .r("ID", 538L)
            .and().insertInto("PRINTSHOPS", 539L)
                .d("ADDRESS", "\"gbf6ulYVz\"")
                .d("AVG_RATING", "-31.345955493177264")
                .d("BALANCE_CURRENCY", "\"RhBkl\"")
                .d("BALANCE_FRACTIONAL_PART", "177")
                .d("BALANCE_INTEGER_PART", "131777")
                .d("LATITUDE", "-9590.741261811761")
                .d("LOGO", "\"U9rA54UUMe5t\"")
                .d("LONGITUDE", "-0.07632266846425131")
                .d("NAME", "\"\"")
                .d("NIF", "\"O5s5WBKO1b\"")
            .and().insertInto("PRINTSHOPS", 546L)
                .d("ADDRESS", "\"zwmzIZOHNk\"")
                .d("AVG_RATING", "0.4948823195041506")
                .d("BALANCE_CURRENCY", "\"Jwc6u3YYs\"")
                .d("BALANCE_FRACTIONAL_PART", "-1724121902")
                .d("BALANCE_INTEGER_PART", "805")
                .d("LATITUDE", "0.4010968529253416")
                .d("LOGO", "\"42\"")
                .d("LONGITUDE", "0.08196379732054926")
                .d("NAME", "\"\"")
                .d("NIF", "\"_EM_2170_XYZ_\"")
            .and().insertInto("PRINTSHOPS", 545L)
                .d("ADDRESS", "\"\"")
                .d("AVG_RATING", "0.08046586447279624")
                .d("BALANCE_CURRENCY", "\"O3NP4gHtdvMX\"")
                .d("BALANCE_FRACTIONAL_PART", "824")
                .d("BALANCE_INTEGER_PART", "638984258")
                .d("LATITUDE", "-0.8906226210368844")
                .d("LOGO", "\"U2Gfcq55blFU4e\"")
                .d("LONGITUDE", "0.3921778785013531")
                .d("NAME", "\"jx7F5\"")
                .d("NIF", "\"rIS9SZu5vp\"")
            .and().insertInto("USERS", 544L)
                .d("PASSWORD", "\"5ZV7WU4nf4s1z\"")
                .d("USERNAME", "\"=9iSJiv\"")
            .and().insertInto("CONSUMERS", 543L)
                .d("BALANCE_CURRENCY", "\"uabG\"")
                .d("BALANCE_FRACTIONAL_PART", "710")
                .d("BALANCE_INTEGER_PART", "688")
                .d("NAME", "\"fCu_l\"")
                .r("ID", 544L)
            .and().insertInto("PRINT_REQUESTS", 540L)
                .d("ARRIVAL", "NULL")
                .d("COST", "0.9061887206570978")
                .d("DELIVERED", "\"2055-07-16 22:21:27\"")
                .d("EMPATTENDED", "\"Edzr5PFj_5a\"")
                .d("EMPDELIVERED", "\"KRRlDfHTRuzSw\"")
                .d("FINISHED", "NULL")
                .d("PAYPAL_SALE_ID", "\"ykL_LVoc\"")
                .d("PAYMENT_TYPE", "\"w8BB\"")
                .d("STATUS", "\"NOT_PAYED\"")
                .r("CONSUMER_ID", 537L)
                .d("PRINTSHOP_ID", "NULL")
                .r("PRINTSHOP", 546L)
                .d("CONSUMER", "NULL")
            .and().insertInto("USERS", 448L)
                .d("PASSWORD", "\"vt\"")
                .d("USERNAME", "\"CyclFn\"")
            .and().insertInto("PRINTSHOPS", 452L)
                .d("ADDRESS", "\"TbKF7VOTe0]p0\"")
                .d("AVG_RATING", "5.640419705783357")
                .d("BALANCE_CURRENCY", "\"3U]\"")
                .d("BALANCE_FRACTIONAL_PART", "1188")
                .d("BALANCE_INTEGER_PART", "8647")
                .d("LATITUDE", "0.7553308906207568")
                .d("LOGO", "\"_EM_1449_XYZ_\"")
                .d("LONGITUDE", "0.8316951183968223")
                .d("NAME", "\"_EM_1276_XYZ_\"")
                .d("NIF", "\"cyc9xU\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_72_addNewConsumerPrintingSchema.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"_EM_1271_XYZ_\", " + 
                    " \"coverSpecs\": \"_EM_1272_XYZ_\", " + 
                    " \"deleted\": true, " + 
                    " \"name\": \"bEn2tB4sZqgIWIT\", " + 
                    " \"paperSpecs\": \"h\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/0/printingschemas?" + 
                    "password=iZeHz&" + 
                    "username=qB5kpXp_yqH")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_72_addNewConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/0/printingschemas"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1453_XYZ_")
                .get(baseUrlOfSut + "/consumer/0/printingschemas?" + 
                    "password=eQ5Byx9VWjnxnsvlV&" + 
                    "username=PNM")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/0/printingschemas"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/admin/AdminController_123_seed.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/admin/seed'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/admin/seed")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/admin/AdminController_123_seed
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/admin/seed"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_289_cancelRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/requests/cancel/{id}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1453_XYZ_")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/16?" + 
                    "password=THH1rSXWb6Z3q&" + 
                    "username=VOHYgrZPWWdUnsgF")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_289_cancelRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/requests/cancel/16"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 431, " + 
                    " \"supLim\": 415 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/45/pricetable/deletering")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/45/pricetable/deletering"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops?" + 
                    "password=&" + 
                    "username=_EM_2169_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("[{\"id\":1,\"name\":\"Copy Scan\",\"address\":\"Rua Quinta dos Órfãos 16 S. Vitor (Junto à Universidade do Minho), Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_1\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":2,\"name\":\"Flash Vidius - Gomes \\u0026 Santana, Lda.\",\"address\":\"R. Manuel Silva, 20 - R/C. C.P. 4490000, Povoa de Varzim, Porto\",\"latitude\":41.379392,\"longitude\":-8.761458,\"nif\":\"199111333\",\"logo\":\"logo_3\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":3,\"name\":\"CopyGraphe\",\"address\":\"R. Ramalho Ortigão C Com Pescador - lj 12. C.P. 4490678, Povoa de Varzim, Porto\",\"latitude\":41.383314,\"longitude\":-8.761942,\"nif\":\"123098333\",\"logo\":\"logo_4\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":4,\"name\":\"Nelson Costa Santos\",\"address\":\"Tv. Senra, 22 - Póvoa de Varzim. C.P. 4490000, Povoa de Varzim, Porto.\",\"latitude\":41.38207,\"longitude\":-8.763069,\"nif\":\"153655378\",\"logo\":\"logo_5\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":5,\"name\":\"Gráfica Editora Poveira, Lda.\",\"address\":\"R. Manuel Silva, 18. C.P. 4490657, Povoa de Varzim, Porto.\",\"latitude\":41.379605,\"longitude\":-8.761047,\"nif\":\"133555378\",\"logo\":\"logo_6\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":6,\"name\":\"Staples Vila do Conde\",\"address\":\"Avenida General Humberto Delgado 2, Vila do Conde\",\"latitude\":41.370674,\"longitude\":-8.744176,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":7,\"name\":\"Staples Vila da Maia\",\"address\":\"Rua Comendador Valentim dos Santos Dinis 570, Maia\",\"latitude\":41.246159,\"longitude\":-8.625225,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":8,\"name\":\"Video Norte\",\"address\":\"Rua Nova de Santa Cruz\",\"latitude\":41.5594,\"longitude\":-8.3972,\"nif\":\"123444378\",\"logo\":\"logo_8\",\"avgRating\":4.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":9,\"name\":\"SmartPrint\",\"address\":\"Rua dos Peões, Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_2\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":10,\"name\":\"\",\"address\":\"gbf6ulYVz\",\"latitude\":-9590.741261811761,\"longitude\":-0.07632266846425131,\"nif\":\"O5s5WBKO1b\",\"logo\":\"U9rA54UUMe5t\",\"avgRating\":-31.345955,\"balance\":{\"currency\":\"RhBkl\",\"integerPart\":131777,\"fractionalPart\":177}},{\"id\":11,\"name\":\"\",\"address\":\"zwmzIZOHNk\",\"latitude\":0.4010968529253416,\"longitude\":0.08196379732054926,\"nif\":\"_EM_2170_XYZ_\",\"logo\":\"42\",\"avgRating\":0.49488232,\"balance\":{\"currency\":\"Jwc6u3YYs\",\"integerPart\":805,\"fractionalPart\":-1724121902}},{\"id\":12,\"name\":\"jx7F5\",\"address\":\"\",\"latitude\":-0.8906226210368844,\"longitude\":0.3921778785013531,\"nif\":\"rIS9SZu5vp\",\"logo\":\"U2Gfcq55blFU4e\",\"avgRating\":0.08046587,\"balance\":{\"currency\":\"O3NP4gHtdvMX\",\"integerPart\":638984258,\"fractionalPart\":824}},{\"id\":13,\"name\":\"_EM_1276_XYZ_\",\"address\":\"TbKF7VOTe0]p0\",\"latitude\":0.7553308906207568,\"longitude\":0.8316951183968223,\"nif\":\"cyc9xU\",\"logo\":\"_EM_1449_XYZ_\",\"avgRating\":5.6404195,\"balance\":{\"currency\":\"3U]\",\"integerPart\":8647,\"fractionalPart\":1188}}]"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "2")
                .get(baseUrlOfSut + "/documents/557")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/documents/557"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/-3724/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-3724/employees"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/printshops/-3724/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-3724/employees"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (500) PUT:/notifications/{notificationId}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_62_putOnNotifShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/utils/NotificationManager_87_readNotification.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/notifications/{notificationId}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/notifications/217949368")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/utils/NotificationManager_87_readNotification
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/notifications/217949368"));
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/notifications/{notificationId}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_63_deleteOnNotifShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/utils/NotificationManager_82_removeNotification.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/notifications/{notificationId}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/notifications/761")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/utils/NotificationManager_82_removeNotification
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.EmptyResultDataAccessException"))
                .body("'message'", containsString("No class io.github.proxyprint.kitchen.models.notifications.Notification entity with id 761 exists!"))
                .body("'path'", containsString("/notifications/761"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/stats
    */
    @Test @Timeout(60)
    public void test_64_getOnStatsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/stats")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"nPendingRequests\":0,\"nInProgressRequests\":0,\"nFinished\":0,\"nEmployees\":6,\"pshopProfit\":\"12.96\",\"success\":true}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/satisfied
    */
    @Test @Timeout(60)
    public void test_65_getOnSatisfiedReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "nyPjOp049J4")
                .get(baseUrlOfSut + "/printshops/satisfied?username=_EM_3002_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"satisfiedrequests\":[],\"success\":true}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/admin/printshops
    */
    @Test @Timeout(60)
    public void test_66_getOnAdminPrintshopsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_218_XYZ_")
                .get(baseUrlOfSut + "/admin/printshops")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"prinshops\":\"[{\\\"id\\\":1,\\\"name\\\":\\\"Copy Scan\\\",\\\"address\\\":\\\"Rua Quinta dos Órfãos 16 S. Vitor (Junto à Universidade do Minho), Braga\\\",\\\"latitude\\\":41.557973,\\\"longitude\\\":-8.398398,\\\"nif\\\":\\\"123555378\\\",\\\"logo\\\":\\\"logo_1\\\",\\\"avgRating\\\":0.0,\\\"balance\\\":{\\\"currency\\\":\\\"EUR\\\",\\\"integerPart\\\":0,\\\"fractionalPart\\\":0}},{\\\"id\\\":2,\\\"name\\\":\\\"Flash Vidius - Gomes \\\\u0026 Santana, Lda.\\\",\\\"address\\\":\\\"R. Manuel Silva, 20 - R/C. C.P. 4490000, Povoa de Varzim, Porto\\\",\\\"latitude\\\":41.379392,\\\"longitude\\\":-8.761458,\\\"nif\\\":\\\"199111333\\\",\\\"logo\\\":\\\"logo_3\\\",\\\"avgRating\\\":0.0,\\\"balance\\\":{\\\"currency\\\":\\\"EUR\\\",\\\"integerPart\\\":0,\\\"fractionalPart\\\":0}},{\\\"id\\\":3,\\\"name\\\":\\\"CopyGraphe\\\",\\\"address\\\":\\\"R. Ramalho Ortigão C Com Pescador - lj 12. C.P. 4490678, Povoa de Varzim, Porto\\\",\\\"latitude\\\":41.383314,\\\"longitude\\\":-8.761942,\\\"nif\\\":\\\"123098333\\\",\\\"logo\\\":\\\"logo_4\\\",\\\"avgRating\\\":0.0,\\\"balance\\\":{\\\"currency\\\":\\\"EUR\\\",\\\"integerPart\\\":0,\\\"fractionalPart\\\":0}},{\\\"id\\\":4,\\\"name\\\":\\\"Nelson Costa Santos\\\",\\\"address\\\":\\\"Tv. Senra, 22 - Póvoa de Varzim. C.P. 4490000, Povoa de Varzim, Porto.\\\",\\\"latitude\\\":41.38207,\\\"longitude\\\":-8.763069,\\\"nif\\\":\\\"153655378\\\",\\\"logo\\\":\\\"logo_5\\\",\\\"avgRating\\\":0.0,\\\"balance\\\":{\\\"currency\\\":\\\"EUR\\\",\\\"integerPart\\\":0,\\\"fractionalPart\\\":0}},{\\\"id\\\":5,\\\"name\\\":\\\"Gráfica Editora Poveira, Lda.\\\",\\\"address\\\":\\\"R. Manuel Silva, 18. C.P. 4490657, Povoa de Varzim, Porto.\\\",\\\"latitude\\\":41.379605,\\\"longitude\\\":-8.761047,\\\"nif\\\":\\\"133555378\\\",\\\"logo\\\":\\\"logo_6\\\",\\\"avgRating\\\":0.0,\\\"balance\\\":{\\\"currency\\\":\\\"EUR\\\",\\\"integerPart\\\":0,\\\"fractionalPart\\\":0}},{\\\"id\\\":6,\\\"name\\\":\\\"Staples Vila do Conde\\\",\\\"address\\\":\\\"Avenida General Humberto Delgado 2, Vila do Conde\\\",\\\"latitude\\\":41.370674,\\\"longitude\\\":-8.744176,\\\"nif\\\":\\\"133555378\\\",\\\"logo\\\":\\\"logo_7\\\",\\\"avgRating\\\":0.0,\\\"balance\\\":{\\\"currency\\\":\\\"EUR\\\",\\\"integerPart\\\":0,\\\"fractionalPart\\\":0}},{\\\"id\\\":7,\\\"name\\\":\\\"Staples Vila da Maia\\\",\\\"address\\\":\\\"Rua Comendador Valentim dos Santos Dinis 570, Maia\\\",\\\"latitude\\\":41.246159,\\\"longitude\\\":-8.625225,\\\"nif\\\":\\\"133555378\\\",\\\"logo\\\":\\\"logo_7\\\",\\\"avgRating\\\":0.0,\\\"balance\\\":{\\\"currency\\\":\\\"EUR\\\",\\\"integerPart\\\":0,\\\"fractionalPart\\\":0}},{\\\"id\\\":8,\\\"name\\\":\\\"Video Norte\\\",\\\"address\\\":\\\"Rua Nova de Santa Cruz\\\",\\\"latitude\\\":41.5594,\\\"longitude\\\":-8.3972,\\\"nif\\\":\\\"123444378\\\",\\\"logo\\\":\\\"logo_8\\\",\\\"avgRating\\\":4.0,\\\"balance\\\":{\\\"currency\\\":\\\"EUR\\\",\\\"integerPart\\\":0,\\\"fractionalPart\\\":0}},{\\\"id\\\":9,\\\"name\\\":\\\"SmartPrint\\\",\\\"address\\\":\\\"Rua dos Peões, Braga\\\",\\\"latitude\\\":41.557973,\\\"longitude\\\":-8.398398,\\\"nif\\\":\\\"123555378\\\",\\\"logo\\\":\\\"logo_2\\\",\\\"avgRating\\\":0.0,\\\"balance\\\":{\\\"currency\\\":\\\"EUR\\\",\\\"integerPart\\\":0,\\\"fractionalPart\\\":0}}]\",\"success\":true}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/secured
    */
    @Test @Timeout(60)
    public void test_67_getOnSecuredReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "_EM_388_XYZ_")
                .get(baseUrlOfSut + "/api/secured")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"message\":\"Se estiveres autenticado, podes ver isto!\"}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/consumer/balance
    */
    @Test @Timeout(60)
    public void test_68_getOnBalanceReturnsContentUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 315L)
                .d("ADDRESS", "\"gjyt\"")
                .d("AVG_RATING", "0.35168793259164144")
                .d("BALANCE_CURRENCY", "\"SebGjYzRL\"")
                .d("BALANCE_FRACTIONAL_PART", "234")
                .d("BALANCE_INTEGER_PART", "-1686874953")
                .d("LATITUDE", "0.27480142497135185")
                .d("LOGO", "\"sxGhfpNugECYhiw\"")
                .d("LONGITUDE", "0.26223059113526614")
                .d("NAME", "\"KEWdLArFaF\"")
                .d("NIF", "\"5GoaAZcLK3dQG\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/balance")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"success\":true}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/consumer/info
    */
    @Test @Timeout(60)
    public void test_69_getOnInfoReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/info")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"consumer\":{\"name\":\"João dos Santos\",\"email\":\"proxyprint.pt.consumer@gmail.com\",\"latitude\":\"69\",\"longitude\":\"69\",\"printingSchemas\":[{\"id\":2,\"name\":\"A4+2LAD+CORES+Encaderna\",\"paperSpecs\":\"PAPER,COLOR,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_OPAQUE,A3\",\"deleted\":false},{\"id\":5,\"name\":\"A4+SIMPLEX+COLOR\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":3,\"name\":\"A4+SIMPLEX+PW+Encadernar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_TRANSPARENT,A4\",\"deleted\":false},{\"id\":4,\"name\":\"A4+2LAD+PB\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":1,\"name\":\"A4+2LAD+PB+Agrafar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,STAPLING,0,0\",\"coverSpecs\":\"\",\"deleted\":false}],\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"id\":2,\"username\":\"joao\",\"password\":\"1234\",\"roles\":[\"ROLE_USER\"]},\"success\":true}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/consumer/notifications
    */
    @Test @Timeout(60)
    public void test_70_getOnNotificationsReturnsEmptyList() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/consumer/notifications")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/consumer/requests
    */
    @Test @Timeout(60)
    public void test_71_getOnConsumerRequestsWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/consumer/requests?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"printrequests\":[{\"id\":3,\"cost\":1.2,\"arrivalTimestamp\":\"Sep 4, 2025 5:06:20 PM\",\"status\":\"PENDING\",\"consumer\":{\"name\":\"João dos Santos\",\"email\":\"proxyprint.pt.consumer@gmail.com\",\"latitude\":\"69\",\"longitude\":\"69\",\"printingSchemas\":[{\"id\":2,\"name\":\"A4+2LAD+CORES+Encaderna\",\"paperSpecs\":\"PAPER,COLOR,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_OPAQUE,A3\",\"deleted\":false},{\"id\":5,\"name\":\"A4+SIMPLEX+COLOR\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":3,\"name\":\"A4+SIMPLEX+PW+Encadernar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_TRANSPARENT,A4\",\"deleted\":false},{\"id\":4,\"name\":\"A4+2LAD+PB\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":1,\"name\":\"A4+2LAD+PB+Agrafar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,STAPLING,0,0\",\"coverSpecs\":\"\",\"deleted\":false}],\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"id\":2,\"username\":\"joao\",\"password\":\"1234\",\"roles\":[\"ROLE_USER\"]},\"documents\":[],\"paymentType\":\"PROXYPRINT_PAYMENT\"},{\"id\":10,\"cost\":2.5,\"arrivalTimestamp\":\"Sep 4, 2025 5:06:20 PM\",\"status\":\"PENDING\",\"consumer\":{\"name\":\"João dos Santos\",\"email\":\"proxyprint.pt.consumer@gmail.com\",\"latitude\":\"69\",\"longitude\":\"69\",\"printingSchemas\":[{\"id\":2,\"name\":\"A4+2LAD+CORES+Encaderna\",\"paperSpecs\":\"PAPER,COLOR,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_OPAQUE,A3\",\"deleted\":false},{\"id\":5,\"name\":\"A4+SIMPLEX+COLOR\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":3,\"name\":\"A4+SIMPLEX+PW+Encadernar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_TRANSPARENT,A4\",\"deleted\":false},{\"id\":4,\"name\":\"A4+2LAD+PB\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":1,\"name\":\"A4+2LAD+PB+Agrafar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,STAPLING,0,0\",\"coverSpecs\":\"\",\"deleted\":false}],\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"id\":2,\"username\":\"joao\",\"password\":\"1234\",\"roles\":[\"ROLE_USER\"]},\"documents\":[],\"paymentType\":\"PROXYPRINT_PAYMENT\"},{\"id\":11,\"cost\":1.4,\"arrivalTimestamp\":\"Sep 4, 2025 5:06:20 PM\",\"status\":\"PENDING\",\"consumer\":{\"name\":\"João dos Santos\",\"email\":\"proxyprint.pt.consumer@gmail.com\",\"latitude\":\"69\",\"longitude\":\"69\",\"printingSchemas\":[{\"id\":2,\"name\":\"A4+2LAD+CORES+Encaderna\",\"paperSpecs\":\"PAPER,COLOR,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_OPAQUE,A3\",\"deleted\":false},{\"id\":5,\"name\":\"A4+SIMPLEX+COLOR\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":3,\"name\":\"A4+SIMPLEX+PW+Encadernar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_TRANSPARENT,A4\",\"deleted\":false},{\"id\":4,\"name\":\"A4+2LAD+PB\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":1,\"name\":\"A4+2LAD+PB+Agrafar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,STAPLING,0,0\",\"coverSpecs\":\"\",\"deleted\":false}],\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"id\":2,\"username\":\"joao\",\"password\":\"1234\",\"roles\":[\"ROLE_USER\"]},\"documents\":[],\"paymentType\":\"PROXYPRINT_PAYMENT\"},{\"id\":13,\"cost\":1.4,\"arrivalTimestamp\":\"Sep 4, 2025 5:06:20 PM\",\"status\":\"PENDING\",\"consumer\":{\"name\":\"João dos Santos\",\"email\":\"proxyprint.pt.consumer@gmail.com\",\"latitude\":\"69\",\"longitude\":\"69\",\"printingSchemas\":[{\"id\":2,\"name\":\"A4+2LAD+CORES+Encaderna\",\"paperSpecs\":\"PAPER,COLOR,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_OPAQUE,A3\",\"deleted\":false},{\"id\":5,\"name\":\"A4+SIMPLEX+COLOR\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":3,\"name\":\"A4+SIMPLEX+PW+Encadernar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_TRANSPARENT,A4\",\"deleted\":false},{\"id\":4,\"name\":\"A4+2LAD+PB\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":1,\"name\":\"A4+2LAD+PB+Agrafar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,STAPLING,0,0\",\"coverSpecs\":\"\",\"deleted\":false}],\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"id\":2,\"username\":\"joao\",\"password\":\"1234\",\"roles\":[\"ROLE_USER\"]},\"documents\":[],\"paymentType\":\"PROXYPRINT_PAYMENT\"},{\"id\":16,\"cost\":1.2,\"arrivalTimestamp\":\"Sep 4, 2025 5:06:20 PM\",\"status\":\"PENDING\",\"consumer\":{\"name\":\"João dos Santos\",\"email\":\"proxyprint.pt.consumer@gmail.com\",\"latitude\":\"69\",\"longitude\":\"69\",\"printingSchemas\":[{\"id\":2,\"name\":\"A4+2LAD+CORES+Encaderna\",\"paperSpecs\":\"PAPER,COLOR,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_OPAQUE,A3\",\"deleted\":false},{\"id\":5,\"name\":\"A4+SIMPLEX+COLOR\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":3,\"name\":\"A4+SIMPLEX+PW+Encadernar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_TRANSPARENT,A4\",\"deleted\":false},{\"id\":4,\"name\":\"A4+2LAD+PB\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":1,\"name\":\"A4+2LAD+PB+Agrafar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,STAPLING,0,0\",\"coverSpecs\":\"\",\"deleted\":false}],\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"id\":2,\"username\":\"joao\",\"password\":\"1234\",\"roles\":[\"ROLE_USER\"]},\"documents\":[],\"paymentType\":\"PROXYPRINT_PAYMENT\"},{\"id\":17,\"cost\":2.5,\"arrivalTimestamp\":\"Sep 4, 2025 5:06:20 PM\",\"status\":\"PENDING\",\"consumer\":{\"name\":\"João dos Santos\",\"email\":\"proxyprint.pt.consumer@gmail.com\",\"latitude\":\"69\",\"longitude\":\"69\",\"printingSchemas\":[{\"id\":2,\"name\":\"A4+2LAD+CORES+Encaderna\",\"paperSpecs\":\"PAPER,COLOR,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_OPAQUE,A3\",\"deleted\":false},{\"id\":5,\"name\":\"A4+SIMPLEX+COLOR\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":3,\"name\":\"A4+SIMPLEX+PW+Encadernar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_TRANSPARENT,A4\",\"deleted\":false},{\"id\":4,\"name\":\"A4+2LAD+PB\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":1,\"name\":\"A4+2LAD+PB+Agrafar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,STAPLING,0,0\",\"coverSpecs\":\"\",\"deleted\":false}],\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"id\":2,\"username\":\"joao\",\"password\":\"1234\",\"roles\":[\"ROLE_USER\"]},\"documents\":[],\"paymentType\":\"PROXYPRINT_PAYMENT\"}],\"success\":true}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printdocument/{id}
    */
    @Test @Timeout(60)
    public void test_72_getOnPrintdocuReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printdocument/475?EMextraParam123=_EM_237_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printdocument/{id}
    */
    @Test @Timeout(60)
    public void test_73_getOnPrintdocuReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printdocument/534?EMextraParam123=_EM_26_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/history
    */
    @Test @Timeout(60)
    public void test_74_getOnHistoryReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/history")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"historyrequests\":[],\"success\":true}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/nearest
    */
    @Test @Timeout(60)
    public void test_75_getOnNearestReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_240_XYZ_")
                .get(baseUrlOfSut + "/printshops/nearest")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/nearest
    */
    @Test @Timeout(60)
    public void test_76_getOnNearestReturnsContentUsingSql() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/nearest?latitude=41.379392")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/nearest
    */
    @Test @Timeout(60)
    public void test_77_getOnNearestReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/nearest")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/requests
    */
    @Test @Timeout(60)
    public void test_78_getOnPrintshopsRequestsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/requests")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"printrequest\":[],\"success\":true}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/satisfied
    */
    @Test @Timeout(60)
    public void test_79_getOnSatisfiedReturnsContentUsingSql() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_2825_XYZ_")
                .get(baseUrlOfSut + "/printshops/satisfied?password=1234")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"satisfiedrequests\":[],\"success\":true}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/requests/pending
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_80_getOnPendingReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/0/pShopDateRequestAccepted'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/requests/pending?EMextraParam123=_EM_246_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'managerName'", containsString("Jorge Caldas"))
                .body("[0].'managerUsername'", containsString("jcaldas"))
                .body("[0].'managerEmail'", containsString("proxyprint.pt.printshop@gmail.com"))
                .body("[0].'managerPassword'", containsString("1234"))
                .body("[0].'pShopAddress'", containsString("Rua das Cruzes n31"))
                .body("[0].'pShopLatitude'", numberMatches(43.221))
                .body("[0].'pShopLongitude'", numberMatches(41.121))
                .body("[0].'pShopNIF'", containsString("124555321"))
                .body("[0].'pShopName'", containsString("Printer Style"))
                .body("[0].'pShopDateRequest'", containsString("04/09/2025 05:06"))
                .body("[0].'pShopDateRequestAccepted'", nullValue())
                .body("[1].'managerName'", containsString("Martim da Silva"))
                .body("[1].'managerUsername'", containsString("msilva"))
                .body("[1].'managerEmail'", containsString("proxyprint.pt.printshop@gmail.com"))
                .body("[1].'managerPassword'", containsString("1234"))
                .body("[1].'pShopAddress'", containsString("Rua das Cruzes n32"))
                .body("[1].'pShopLatitude'", numberMatches(43.221))
                .body("[1].'pShopLongitude'", numberMatches(41.121))
                .body("[1].'pShopNIF'", containsString("124555321"))
                .body("[1].'pShopName'", containsString("Print More"))
                .body("[1].'pShopDateRequest'", containsString("04/09/2025 05:06"))
                .body("[1].'pShopDateRequestAccepted'", nullValue())
                .body("[2].'managerName'", containsString("Carlos Pinto"))
                .body("[2].'managerUsername'", containsString("cpin"))
                .body("[2].'managerEmail'", containsString("proxyprint.pt.printshop@gmail.com"))
                .body("[2].'managerPassword'", containsString("1234"))
                .body("[2].'pShopAddress'", containsString("Rua n33"))
                .body("[2].'pShopLatitude'", numberMatches(43.221))
                .body("[2].'pShopLongitude'", numberMatches(41.121))
                .body("[2].'pShopNIF'", containsString("124555321"))
                .body("[2].'pShopName'", containsString("Papelaria Pinto"))
                .body("[2].'pShopDateRequest'", containsString("04/09/2025 05:06"))
                .body("[2].'pShopDateRequestAccepted'", nullValue())
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/printshops/{id}/pricetable/deletecover
    * 2 - (403) GET:/consumer/balance
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_81_getOnBalanceReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1119L)
                .d("ADDRESS", "\"jLG6\"")
                .d("AVG_RATING", "0.620961388658797")
                .d("BALANCE_CURRENCY", "\"y2chCReh4peHMAa4\"")
                .d("BALANCE_FRACTIONAL_PART", "653")
                .d("BALANCE_INTEGER_PART", "650")
                .d("LATITUDE", "0.09343226824294293")
                .d("LOGO", "\"XpV_0\"")
                .d("LONGITUDE", "0.7728585604783199")
                .d("NAME", "\"MzZrxLi1NviHL\"")
                .d("NIF", "\"CA55wtU3uqS\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"X\", " + 
                    " \"priceA4\": \"vfEXDuBI\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/-7886/pricetable/deletecover")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/balance?" + 
                    "password=S&" + 
                    "username=VnHOUQ128qG1ax&" + 
                    "payer_email=9TX&" + 
                    "transaction_type=xV3v3Rdk")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/balance"));
    }
    
    
    /**
    * Calls:
    * 1 - (403) GET:/documents/{id}
    * 2 - (200) GET:/printshops/history
    * 3 - (403) POST:/printshops/{id}/reviews
    * 4 - (403) POST:/printshops/{id}/pricetable/rings
    * 5 - (403) POST:/printshops/{id}/pricetable/rings
    * 6 - (404) GET:/documents/{id}
    * Found 5 potential faults. Type-codes: 101, 204
    */
    @Test @Timeout(60)
    public void test_82_getOnDocumentShowsFaults_101_204UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1382L)
                .d("ADDRESS", "\"F\"")
                .d("AVG_RATING", "0.9728379037585096")
                .d("BALANCE_CURRENCY", "\"\"")
                .d("BALANCE_FRACTIONAL_PART", "58")
                .d("BALANCE_INTEGER_PART", "31")
                .d("LATITUDE", "0.38075383084470293")
                .d("LOGO", "\"DeV31af9fqh0\"")
                .d("LONGITUDE", "0.9799988888941629")
                .d("NAME", "\"zJQQ0Ei6P3w0vlik\"")
                .d("NIF", "\"jPFQc6eQAHbEe6gk\"")
            .and().insertInto("PRINTSHOPS", 1381L)
                .d("ADDRESS", "\"D2yzekht5\"")
                .d("AVG_RATING", "0.6987973851063877")
                .d("BALANCE_CURRENCY", "\"1\"")
                .d("BALANCE_FRACTIONAL_PART", "499816253")
                .d("BALANCE_INTEGER_PART", "313")
                .d("LATITUDE", "0.8634929877449754")
                .d("LOGO", "\"EZS\"")
                .d("LONGITUDE", "0.18210496944401533")
                .d("NAME", "\"IDSXJwxJ2zUC\"")
                .d("NIF", "\"qzrms2eqPPDuEpx\"")
            .and().insertInto("USERS", 1380L)
                .d("PASSWORD", "\"Cy7phQKnBDDn\"")
                .d("USERNAME", "\"pGfSBKLMozKwpi\"")
            .and().insertInto("CONSUMERS", 1379L)
                .d("BALANCE_CURRENCY", "\"ThTOjqj0MLZoY7\"")
                .d("BALANCE_FRACTIONAL_PART", "752")
                .d("BALANCE_INTEGER_PART", "364")
                .d("NAME", "\"ZgfmcZ5HwNY\"")
                .d("ID", "6")
            .and().insertInto("USERS", 1378L)
                .d("PASSWORD", "\"\"")
                .d("USERNAME", "\"s\"")
            .and().insertInto("CONSUMERS", 1377L)
                .d("BALANCE_CURRENCY", "\"PMVOYx\"")
                .d("BALANCE_FRACTIONAL_PART", "757")
                .d("BALANCE_INTEGER_PART", "86")
                .d("NAME", "\"E\"")
                .d("ID", "1")
            .and().insertInto("PRINT_REQUESTS", 1376L)
                .d("ARRIVAL", "\"1912-06-15 01:24:52\"")
                .d("COST", "0.6891474214832749")
                .d("DELIVERED", "NULL")
                .d("EMPATTENDED", "\"\"")
                .d("EMPDELIVERED", "NULL")
                .d("FINISHED", "NULL")
                .d("PAYPAL_SALE_ID", "NULL")
                .d("PAYMENT_TYPE", "\"Bk0legApxP\"")
                .d("STATUS", "NULL")
                .d("CONSUMER_ID", "NULL")
                .d("PRINTSHOP_ID", "NULL")
                .d("PRINTSHOP", "NULL")
                .d("CONSUMER", "NULL")
            .and().insertInto("PRINTSHOPS", 1390L)
                .d("ADDRESS", "\"mAFLkV67f4Lw\"")
                .d("AVG_RATING", "0.8304608103758092")
                .d("BALANCE_CURRENCY", "\"vib3W_Z\"")
                .d("BALANCE_FRACTIONAL_PART", "759")
                .d("BALANCE_INTEGER_PART", "917")
                .d("LATITUDE", "0.614841074973813")
                .d("LOGO", "\"Jq6KyLG\"")
                .d("LONGITUDE", "0.9117660080487873")
                .d("NAME", "\"H9g0juard0iswK8\"")
                .d("NIF", "\"nWml3vVy9ySV7q\"")
            .and().insertInto("PRINTSHOPS", 1389L)
                .d("ADDRESS", "\"_yap_gyQj8DIXwY\"")
                .d("AVG_RATING", "0.6181457448828008")
                .d("BALANCE_CURRENCY", "\"f6Uq3rWAETtXD3\"")
                .d("BALANCE_FRACTIONAL_PART", "592")
                .d("BALANCE_INTEGER_PART", "250")
                .d("LATITUDE", "0.024514262631821104")
                .d("LOGO", "\"2\"")
                .d("LONGITUDE", "0.8061297581724252")
                .d("NAME", "\"kW_OpvSkoDx1f\"")
                .d("NIF", "\"fZ6o_Yfi_N\"")
            .and().insertInto("USERS", 1388L)
                .d("PASSWORD", "\"TRZ40aQfs_fIq\"")
                .d("USERNAME", "\"TyDGwLqIVcFK1aHP\"")
            .and().insertInto("CONSUMERS", 1387L)
                .d("BALANCE_CURRENCY", "\"a9mAX1uf\"")
                .d("BALANCE_FRACTIONAL_PART", "404")
                .d("BALANCE_INTEGER_PART", "313")
                .d("NAME", "\"lB9LY2VoRA\"")
                .d("ID", "18")
            .and().insertInto("USERS", 1386L)
                .d("PASSWORD", "\"S\"")
                .d("USERNAME", "\"2cMPunz\"")
            .and().insertInto("CONSUMERS", 1385L)
                .d("BALANCE_CURRENCY", "\"IwVDlUiEoYXy0f\"")
                .d("BALANCE_FRACTIONAL_PART", "123")
                .d("BALANCE_INTEGER_PART", "695")
                .d("NAME", "\"rUXdS837UB\"")
                .r("ID", 1388L)
            .and().insertInto("PRINT_REQUESTS", 1384L)
                .d("COST", "0.9599820752444819")
            .and().insertInto("DOCUMENTS", 1383L)
                .d("FILE_NAME", "\"iStnhSUBZ5Vy\"")
                .d("TOTAL_PAGES", "430")
                .d("PRINT_REQUEST_ID", "NULL")
            .and().insertInto("PRINTSHOPS", 1254L)
                .d("ADDRESS", "\"XjjWDVL2z3NI\"")
                .d("AVG_RATING", "0.5745094860990534")
                .d("BALANCE_CURRENCY", "\"dVb\"")
                .d("BALANCE_FRACTIONAL_PART", "181")
                .d("BALANCE_INTEGER_PART", "-599302740")
                .d("LATITUDE", "0.6555818114574555")
                .d("LOGO", "\"OODKTF\"")
                .d("LONGITUDE", "0.479248805538358")
                .d("NAME", "\"nr7MoH9rcq\"")
                .d("NIF", "\"mCITITlbdMQrEDsv\"")
            .and().insertInto("USERS", 1260L)
                .d("PASSWORD", "\"WUeaYicVPXY6rUl8\"")
                .d("USERNAME", "\"_EM_3165_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/documents/183?EMextraParam123=_EM_233_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/documents/183"));
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "YtodfO")
                .get(baseUrlOfSut + "/printshops/history")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"historyrequests\":[],\"success\":true}"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/printshops/24/reviews")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/24/reviews"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"price\": \"66\", " + 
                    " \"supLim\": 55 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/24/pricetable/rings")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/24/pricetable/rings"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 870, " + 
                    " \"price\": \"TugbKAwN2Hei\", " + 
                    " \"ringType\": \"y\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/24/pricetable/rings")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/24/pricetable/rings"));
        
        // Fault204. Leakage Information Existence of Protected Resource. null.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "YtodfO")
                .get(baseUrlOfSut + "/documents/24")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/printdocument/{id}
    */
    @Test @Timeout(60)
    public void test_83_getOnPrintdocuReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "_EM_398_XYZ_")
                .get(baseUrlOfSut + "/printdocument/618")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printdocument/{id}
    */
    @Test @Timeout(60)
    public void test_84_getOnPrintdocuReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printdocument/104")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/nearest
    */
    @Test @Timeout(60)
    public void test_85_getOnNearestReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/nearest")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printdocument/{id}
    */
    @Test @Timeout(60)
    public void test_86_getOnPrintdocuReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printdocument/277")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/nearest
    */
    @Test @Timeout(60)
    public void test_87_getOnNearestReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/nearest")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/login
    * 2 - (200) POST:/login
    * 3 - (200) GET:/consumer/balance
    */
    @Test @Timeout(60)
    public void test_88_getOnBalanceReturnsContentUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 315L)
                .d("ADDRESS", "\"gjyt\"")
                .d("AVG_RATING", "0.35168793259164144")
                .d("BALANCE_CURRENCY", "\"SebGjYzRL\"")
                .d("BALANCE_FRACTIONAL_PART", "234")
                .d("BALANCE_INTEGER_PART", "-1686874953")
                .d("LATITUDE", "0.27480142497135185")
                .d("LOGO", "\"sxGhfpNugECYhiw\"")
                .d("LONGITUDE", "0.26223059113526614")
                .d("NAME", "\"KEWdLArFaF\"")
                .d("NIF", "\"5GoaAZcLK3dQG\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/login")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("x-requested-with", "3JvTDn")
                .post(baseUrlOfSut + "/login?password=D8ahj7vq2CBnt")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/balance")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"success\":true}"));
    }
    
    
    /**
    * Calls:
    * 1 - (403) POST:/printshops/{id}/pricetable/deletecover
    * 2 - (403) POST:/printshops/{id}/pricetable/deletecover
    * 3 - (404) POST:/consumer/subscribe
    * 4 - (404) DELETE:/consumer/subscribe
    * 5 - (200) GET:/printshops/nearest
    * 6 - (403) POST:/printshops/{id}/reviews
    * 7 - (200) GET:/printshops/satisfied
    * Found 4 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_89_getOnSatisfiedReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 572L)
                .d("ADDRESS", "\"_EM_1678_XYZ_\"")
                .d("AVG_RATING", "0.33982196255170083")
                .d("BALANCE_CURRENCY", "\"_EM_1679_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "918")
                .d("BALANCE_INTEGER_PART", "458")
                .d("LATITUDE", "0.4268017269651153")
                .d("LOGO", "\"EL2DW0xoBEWcDI\"")
                .d("LONGITUDE", "0.22688338376552974")
                .d("NAME", "\"D15\"")
                .d("NIF", "\"25n\"")
            .and().insertInto("USERS", 573L)
                .d("PASSWORD", "\"hCQLQ_gpEGb7D\"")
                .d("USERNAME", "\"Fw8wA_JK7aq3igE\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/printshops/714/pricetable/deletecover")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/714/pricetable/deletecover"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA3\": \"\", " + 
                    " \"priceA4\": \"rv\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/714/pricetable/deletecover")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/714/pricetable/deletecover"));
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=hCQLQ_gpEGb7D&" + 
                    "username=Fw8wA_JK7aq3igE")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/nearest")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/printshops/714/reviews")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/714/reviews"));
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/satisfied?username=Fw8wA_JK7aq3igE")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"satisfiedrequests\":[],\"success\":true}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printdocument/{id}
    */
    @Test @Timeout(60)
    public void test_90_getOnPrintdocuReturnsContentUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 968L)
                .d("ADDRESS", "\"G18go6qbu\"")
                .d("AVG_RATING", "0.1725991484617383")
                .d("BALANCE_CURRENCY", "\"_LBPpEMfecfgcJM\"")
                .d("BALANCE_FRACTIONAL_PART", "414")
                .d("BALANCE_INTEGER_PART", "355")
                .d("LATITUDE", "0.7608755550171385")
                .d("LOGO", "\"mX4QqQq9SOdaS\"")
                .d("LONGITUDE", "0.6705942305106735")
                .d("NAME", "\"pTVqLL_nnD1Ttn2P\"")
                .d("NIF", "\"mafkkZphDgfrkHj4\"")
            .and().insertInto("PRINTSHOPS", 967L)
                .d("ADDRESS", "\"O5lRtbMEqebU\"")
                .d("AVG_RATING", "0.21931683568080773")
                .d("BALANCE_CURRENCY", "\"5Oh36a7Eq\"")
                .d("BALANCE_FRACTIONAL_PART", "1029")
                .d("BALANCE_INTEGER_PART", "-7592")
                .d("LATITUDE", "0.801587")
                .d("LOGO", "\"uf4WPJ87ns6fYT1\"")
                .d("LONGITUDE", "-1454.0530784438795")
                .d("NAME", "\"ZTnrpe\"")
                .d("NIF", "\"v5qEL\"")
            .and().insertInto("USERS", 966L)
                .d("PASSWORD", "\"HCAoNg3\"")
                .d("USERNAME", "\"u5YhxViXd\"")
            .and().insertInto("CONSUMERS", 965L)
                .d("BALANCE_CURRENCY", "\"q7Ppd9j\"")
                .d("BALANCE_FRACTIONAL_PART", "443")
                .d("BALANCE_INTEGER_PART", "101")
                .d("NAME", "\"UUGsxdUJnxz\"")
                .d("ID", "8")
            .and().insertInto("PRINT_REQUESTS", 962L)
                .d("ARRIVAL", "\"1905-04-20 08:49:35\"")
                .d("COST", "0.40394934455")
                .d("DELIVERED", "\"2011-03-12 19:59:58\"")
                .d("EMPATTENDED", "NULL")
                .d("EMPDELIVERED", "\"tz0AKFRvCvX\"")
                .d("FINISHED", "NULL")
                .d("PAYPAL_SALE_ID", "NULL")
                .d("PAYMENT_TYPE", "\"e_i\"")
                .d("STATUS", "NULL")
                .d("CONSUMER_ID", "NULL")
                .d("PRINTSHOP_ID", "NULL")
                .d("PRINTSHOP", "NULL")
                .d("CONSUMER", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printdocument/-235")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) GET:/printshops/history
    * 2 - (403) POST:/printshops/{id}/reviews
    * 3 - (403) POST:/printshops/{id}/pricetable/rings
    * 4 - (403) POST:/printshops/{id}/pricetable/rings
    * 5 - (404) GET:/documents/{id}
    * 6 - (403) POST:/printshops/{id}/pricetable/papers
    * 7 - (403) POST:/printshops/{id}/pricetable/papers
    * 8 - (403) GET:/printshops/stats
    * Found 6 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_91_getOnStatsReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1307L)
                .d("ADDRESS", "\"\"")
                .d("AVG_RATING", "0.2172100649447044")
                .d("BALANCE_CURRENCY", "\"\"")
                .d("BALANCE_FRACTIONAL_PART", "728")
                .d("BALANCE_INTEGER_PART", "135")
                .d("LATITUDE", "0.13972620171330496")
                .d("LOGO", "\"A9gDCcxtwaqNp\"")
                .d("LONGITUDE", "0.49075830945304455")
                .d("NAME", "\"BVQB0DT\"")
                .d("NIF", "\"uh2V35TSeUEZ\"")
            .and().insertInto("PRINTSHOPS", 1306L)
                .d("ADDRESS", "\"rfSG0m\"")
                .d("AVG_RATING", "0.5575875982498941")
                .d("BALANCE_CURRENCY", "\"s0v0hnEk9vGF7Dov\"")
                .d("BALANCE_FRACTIONAL_PART", "115")
                .d("BALANCE_INTEGER_PART", "239")
                .d("LATITUDE", "0.6456387106028637")
                .d("LOGO", "\"cR5RLZvaJBkwmd\"")
                .d("LONGITUDE", "0.21")
                .d("NAME", "\"noYIWLN9H\"")
                .d("NIF", "\"nLBK0kEPMIQYIZ\"")
            .and().insertInto("USERS", 1305L)
                .d("PASSWORD", "\"JQlLvvBzCOzjPAtw\"")
                .d("USERNAME", "\"C3T\"")
            .and().insertInto("CONSUMERS", 1304L)
                .d("BALANCE_CURRENCY", "\"mYA9SvZ50dI\"")
                .d("BALANCE_FRACTIONAL_PART", "890")
                .d("BALANCE_INTEGER_PART", "820")
                .d("NAME", "\"vMK7cQUk\"")
                .d("ID", "16")
            .and().insertInto("USERS", 1303L)
                .d("PASSWORD", "\"Ij\"")
                .d("USERNAME", "\"i5FLUT5\"")
            .and().insertInto("CONSUMERS", 1302L)
                .d("BALANCE_CURRENCY", "\"9kW\"")
                .d("BALANCE_FRACTIONAL_PART", "494")
                .d("BALANCE_INTEGER_PART", "369")
                .d("NAME", "\"piitVFFIk7MhI\"")
                .d("ID", "11")
            .and().insertInto("PRINT_REQUESTS", 1301L)
                .d("ARRIVAL", "NULL")
                .d("COST", "0.17094771056785085")
                .d("DELIVERED", "\"2059-08-06 23:14:02\"")
                .d("EMPATTENDED", "\"_8IM1Pxisk\"")
                .d("EMPDELIVERED", "\"\"")
                .d("FINISHED", "NULL")
                .d("PAYPAL_SALE_ID", "\"A\"")
                .d("PAYMENT_TYPE", "\"qhgHIUAeUuWKe\"")
                .d("STATUS", "NULL")
                .d("CONSUMER_ID", "NULL")
                .d("PRINTSHOP_ID", "NULL")
                .d("PRINTSHOP", "NULL")
                .d("CONSUMER", "NULL")
            .and().insertInto("PRINTSHOPS", 1315L)
                .d("ADDRESS", "\"f8\"")
                .d("AVG_RATING", "0.5702985897884658")
                .d("BALANCE_CURRENCY", "\"2ZigZ\"")
                .d("BALANCE_FRACTIONAL_PART", "861")
                .d("BALANCE_INTEGER_PART", "614")
                .d("LATITUDE", "0.7452359672299592")
                .d("LOGO", "\"YZtjSLl\"")
                .d("LONGITUDE", "0.7897774224636043")
                .d("NAME", "\"AeL\"")
                .d("NIF", "\"gSDf7\"")
            .and().insertInto("PRINTSHOPS", 1314L)
                .d("ADDRESS", "\"\"")
                .d("AVG_RATING", "0.4913633991676313")
                .d("BALANCE_CURRENCY", "\"7cF6YPPhG8FTY\"")
                .d("BALANCE_FRACTIONAL_PART", "878")
                .d("BALANCE_INTEGER_PART", "351")
                .d("LATITUDE", "0.9923852123428036")
                .d("LOGO", "\"vRHuCt8\"")
                .d("LONGITUDE", "0.3277310639104629")
                .d("NAME", "\"fU0jll_\"")
                .d("NIF", "\"M5o2\"")
            .and().insertInto("USERS", 1313L)
                .d("PASSWORD", "\"62A9\"")
                .d("USERNAME", "\"bEw60CVE\"")
            .and().insertInto("CONSUMERS", 1312L)
                .d("BALANCE_CURRENCY", "\"DZY7pu5QW3poXbsP\"")
                .d("BALANCE_FRACTIONAL_PART", "196")
                .d("BALANCE_INTEGER_PART", "852")
                .d("NAME", "\"xu0Sh\"")
                .r("ID", 1305L)
            .and().insertInto("PRINT_REQUESTS", 1309L)
                .d("COST", "0.014149216009937904")
            .and().insertInto("DOCUMENTS", 1308L)
                .d("FILE_NAME", "\"kYySJb7kshXw8qJZ\"")
                .d("TOTAL_PAGES", "397")
                .d("PRINT_REQUEST_ID", "NULL")
            .and().insertInto("PRINTSHOPS", 1254L)
                .d("ADDRESS", "\"XhjWDVL2z3NI\"")
                .d("AVG_RATING", "0.5745094860990534")
                .d("BALANCE_CURRENCY", "\"dVb\"")
                .d("BALANCE_FRACTIONAL_PART", "213")
                .d("BALANCE_INTEGER_PART", "-599302740")
                .d("LATITUDE", "0.6555818114574555")
                .d("LOGO", "\"OODKTF\"")
                .d("LONGITUDE", "0.479248805538358")
                .d("NAME", "\"nr7MoH9rcq\"")
                .d("NIF", "\"mCITITlbdMQrEDsv\"")
            .and().insertInto("USERS", 1260L)
                .d("PASSWORD", "\"WUeaYicVPXY6rUl8\"")
                .d("USERNAME", "\"_EM_3165_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "YtodfO")
                .get(baseUrlOfSut + "/printshops/history?message=TQR39_E59Rf")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"historyrequests\":[],\"success\":true}"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/printshops/24/reviews")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/24/reviews"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"price\": \"66\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/24/pricetable/rings")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/24/pricetable/rings"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "YtodfO")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 870, " + 
                    " \"price\": \"TugbKAwN2Hei\", " + 
                    " \"ringType\": \"y\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/24/pricetable/rings")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/24/pricetable/rings"));
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/documents/24")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"4Y62LnwmtroDil\", " + 
                    " \"priceA4DUPLEX\": \"UlsU\", " + 
                    " \"supLim\": 791 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/24/pricetable/papers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/24/pricetable/papers"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "YtodfO")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"Rzvw\", " + 
                    " \"priceA4SIMPLEX\": \"0\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/24/pricetable/papers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/24/pricetable/papers"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "d")
                .get(baseUrlOfSut + "/printshops/stats")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/stats"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/v2/api-docs
    */
    @Test @Timeout(60)
    public void test_92_getOnApi_docsReturnsObject() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs")
                .then()
                .statusCode(200);
    }
    
    
    /**
    * Calls:
    * (200) POST:/admin/useed
    */
    @Test @Timeout(60)
    public void test_93_postOnUseedReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/admin/useed?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"message\":\"consumers seeding completed\"}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/admin/useed
    */
    @Test @Timeout(60)
    public void test_94_postOnUseedReturns200() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_83_XYZ_")
                .post(baseUrlOfSut + "/admin/useed?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"message\":\"consumers seeding completed\"}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/admin/useed
    */
    @Test @Timeout(60)
    public void test_95_postOnUseedReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/admin/useed")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"message\":\"consumers seeding completed\"}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/admin/useed
    */
    @Test @Timeout(60)
    public void test_96_postOnUseedReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/admin/useed")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"message\":\"consumers seeding completed\"}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/admin/useed
    */
    @Test @Timeout(60)
    public void test_97_postOnUseedReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/admin/useed")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"message\":\"consumers seeding completed\"}"));
    }
    
    
    /**
    * Calls:
    * 1 - (403) GET:/printshops/requests/{id}
    * 2 - (200) GET:/printshops/requests/{id}
    * 3 - (401) PUT:/consumer/subscribe
    * Found 2 potential faults. Type-codes: 101, 205
    */
    @Test @Timeout(60)
    public void test_98_putOnSubscribeShowsFaults_101_205UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 762L)
                .d("PASSWORD", "\"Q0V\"")
                .d("USERNAME", "\"DRa6\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/requests/509")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/requests/509"));
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/requests/577")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault205. Wrongly Not Recognized as Authenticated. null.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=2&" + 
                    "username=ritinha")
                .then()
                .statusCode(401)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) OPTIONS:/consumer/subscribe
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_99_optionsOnSubscribeReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. OPTIONS on path '/consumer/subscribe' defines a response schema but no response body found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .options(baseUrlOfSut + "/consumer/subscribe?EMextraParam123=_EM_228_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) OPTIONS:/consumer/subscribe
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_100_optionsOnSubscribeReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. OPTIONS on path '/consumer/subscribe' defines a response schema but no response body found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_22_XYZ_")
                .options(baseUrlOfSut + "/consumer/subscribe?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) OPTIONS:/consumer/subscribe
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_101_optionsOnSubscribeReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. OPTIONS on path '/consumer/subscribe' defines a response schema but no response body found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "_EM_393_XYZ_")
                .options(baseUrlOfSut + "/consumer/subscribe?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) OPTIONS:/consumer/subscribe
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_102_optionsOnSubscribeReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. OPTIONS on path '/consumer/subscribe' defines a response schema but no response body found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .options(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) OPTIONS:/consumer/subscribe
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_103_optionsOnSubscribeReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. OPTIONS on path '/consumer/subscribe' defines a response schema but no response body found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .options(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * 1 - (403) GET:/printshops/requests/{id}
    * 2 - (200) GET:/printshops/requests/{id}
    * 3 - (401) PATCH:/consumer/subscribe
    * Found 2 potential faults. Type-codes: 101, 205
    */
    @Test @Timeout(60)
    public void test_104_patchOnSubscribeShowsFaults_101_205UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 771L)
                .d("PASSWORD", "\"_EM_2339_XYZ_\"")
                .d("USERNAME", "\"GcyDk5v\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/requests/509")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/requests/509"));
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/requests/577")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault205. Wrongly Not Recognized as Authenticated. null.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .patch(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=clYl1AY&" + 
                    "username=ritinha")
                .then()
                .statusCode(401)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/request/register
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_105_postOnRequestRegisterReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/request/register'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 485, " + 
                    " \"managerName\": \"_EM_763_XYZ_\", " + 
                    " \"managerPassword\": \"0aOmYQr\", " + 
                    " \"managerUsername\": \"msilva\", " + 
                    " \"pShopDateRequestAccepted\": \"04/09/2025 04:08\", " + 
                    " \"pShopNIF\": \"UGBWBM2oZ\" " + 
                    " } ")
                .post(baseUrlOfSut + "/request/register")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.http.converter.HttpMessageNotReadableException"))
                .body("'message'", containsString("Could not read document: Can not deserialize value of type java.util.GregorianCalendar from String \"04/09/2025 04:08\": not a valid representation (error: Failed to parse Date value '04/09/2025 04:08': Can not parse date \"04/09/2025 04:08\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\"))\n at [Source: java.io.ByteArrayInputStream@63e56297; line: 1, column: 126] (through reference chain: io.github.proxyprint.kitchen.models.printshops.RegisterRequest[\"pShopDateRequestAccepted\"]); nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Can not deserialize value of type java.util.GregorianCalendar from String \"04/09/2025 04:08\": not a valid representation (error: Failed to parse Date value '04/09/2025 04:08': Can not parse date \"04/09/2025 04:08\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\"))\n at [Source: java.io.ByteArrayInputStream@63e56297; line: 1, column: 126] (through reference chain: io.github.proxyprint.kitchen.models.printshops.RegisterRequest[\"pShopDateRequestAccepted\"])"))
                .body("'path'", containsString("/request/register"));
    }
    
    
    /**
    * Calls:
    * 1 - (400) POST:/admin/register
    * 2 - (400) POST:/admin/register
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_106_postOnRegisterReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/admin/register'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"balance\": { " + 
                    " \"currency\": \"_EM_195_XYZ_\", " + 
                    " \"fractionalPart\": 532, " + 
                    " \"integerPart\": 112, " + 
                    " \"valid\": true " + 
                    " }, " + 
                    " \"email\": \"JHsp0E3r\", " + 
                    " \"roles\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " }, " + 
                    " \"username\": \"y\" " + 
                    " } ")
                .post(baseUrlOfSut + "/admin/register?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.http.converter.HttpMessageNotReadableException"))
                .body("'message'", containsString("Could not read document: Can not deserialize instance of java.util.HashSet out of START_OBJECT token\n at [Source: java.io.ByteArrayInputStream@402fec75; line: 1, column: 124] (through reference chain: io.github.proxyprint.kitchen.models.Admin[\"roles\"]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Can not deserialize instance of java.util.HashSet out of START_OBJECT token\n at [Source: java.io.ByteArrayInputStream@402fec75; line: 1, column: 124] (through reference chain: io.github.proxyprint.kitchen.models.Admin[\"roles\"])"))
                .body("'path'", containsString("/admin/register"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/admin/register'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"balance\": { " + 
                    " \"currency\": \"_EM_199_XYZ_\", " + 
                    " \"fractionalPart\": 532, " + 
                    " \"integerPart\": 112, " + 
                    " \"valid\": true " + 
                    " }, " + 
                    " \"roles\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " }, " + 
                    " \"rolesSet\": [ " + 
                    " \"_EM_200_XYZ_\", " + 
                    " \"uM\", " + 
                    " \"_EM_201_XYZ_\", " + 
                    " \"opu09My3AsA\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/admin/register")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.http.converter.HttpMessageNotReadableException"))
                .body("'message'", containsString("Could not read document: Can not deserialize instance of java.util.HashSet out of START_OBJECT token\n at [Source: java.io.ByteArrayInputStream@6f0aa964; line: 1, column: 104] (through reference chain: io.github.proxyprint.kitchen.models.Admin[\"roles\"]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Can not deserialize instance of java.util.HashSet out of START_OBJECT token\n at [Source: java.io.ByteArrayInputStream@6f0aa964; line: 1, column: 104] (through reference chain: io.github.proxyprint.kitchen.models.Admin[\"roles\"])"))
                .body("'path'", containsString("/admin/register"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/admin/register
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_107_postOnRegisterReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/admin/register'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 464, " + 
                    " \"roles\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " }, " + 
                    " \"username\": \"_EM_279_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/admin/register")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.http.converter.HttpMessageNotReadableException"))
                .body("'message'", containsString("Could not read document: Can not deserialize instance of java.util.HashSet out of START_OBJECT token\n at [Source: java.io.ByteArrayInputStream@5606312d; line: 1, column: 20] (through reference chain: io.github.proxyprint.kitchen.models.Admin[\"roles\"]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Can not deserialize instance of java.util.HashSet out of START_OBJECT token\n at [Source: java.io.ByteArrayInputStream@5606312d; line: 1, column: 20] (through reference chain: io.github.proxyprint.kitchen.models.Admin[\"roles\"])"))
                .body("'path'", containsString("/admin/register"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/admin/printshops
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_108_getOnAdminPrintshopsWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/admin/printshops?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/admin/printshops"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/api/secured
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_109_getOnSecuredReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/secured")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/api/secured"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/consumer/balance
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_110_getOnBalanceReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/balance")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/balance"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/consumer/info
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_111_getOnInfoReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/consumer/info")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/info"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/consumer/notifications
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_112_getOnNotificationsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/consumer/notifications")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/notifications"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/consumer/requests
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_113_getOnConsumerRequestsWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/consumer/requests?EMextraParam123=_EM_17_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/requests"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/consumer/satisfied
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_114_getOnConsumerSatisfiedWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/satisfied?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/satisfied"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/documents/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_115_getOnDocumentReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_24_XYZ_")
                .get(baseUrlOfSut + "/documents/49?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/documents/49"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/printshops/history
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_116_getOnPrintshopsHistoryReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/history")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/history"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/printshops/requests
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_117_getOnPrintshopsRequestsWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/requests?EMextraParam123=_EM_28_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/requests"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/printshops/satisfied
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_118_getOnSatisfiedReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_30_XYZ_")
                .get(baseUrlOfSut + "/printshops/satisfied?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/satisfied"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/printshops/stats
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_119_getOnStatsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/stats")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/stats"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/requests/pending
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_120_getOnPendingReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/requests/pending?EMextraParam123=_EM_32_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/requests/pending"));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/notifications/{notificationId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_121_putOnNotifReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/notifications/781?EMextraParam123=_EM_120_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/notifications/781"));
    }
    
    
    /**
    * Calls:
    * (401) DELETE:/notifications/{notificationId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_122_deleteOnNotifReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/notifications/892?EMextraParam123=_EM_25_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/notifications/892"));
    }
    
    
    /**
    * Calls:
    * (401) PATCH:/consumer/subscribe
    */
    @Test @Timeout(60)
    public void test_123_patchOnSubscribeReturns401UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 771L)
                .d("PASSWORD", "\"_EM_2339_XYZ_\"")
                .d("USERNAME", "\"GcyDk5v\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .patch(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=clYl1AY&" + 
                    "username=ritinha")
                .then()
                .statusCode(401)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * 1 - (401) PUT:/consumer/subscribe
    * 2 - (404) PATCH:/consumer/subscribe
    * 3 - (404) PATCH:/consumer/subscribe
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_124_patchOnConsumerSubscribeWithQueryParamsEmptyUsernameUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 762L)
                .d("PASSWORD", "\"Q0V\"")
                .d("USERNAME", "\"DRa5\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=&" + 
                    "username=anam")
                .then()
                .statusCode(401)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .patch(baseUrlOfSut + "/consumer/subscribe?password=EWfiYWEpTNgAGP61")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .patch(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=6&" + 
                    "username=")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * 1 - (401) PUT:/consumer/subscribe
    * 2 - (404) PATCH:/consumer/subscribe
    * 3 - (404) PATCH:/consumer/subscribe
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_125_patchOnSubscribeReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 762L)
                .d("PASSWORD", "\"Q0V\"")
                .d("USERNAME", "\"DRa6\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=2&" + 
                    "username=joao")
                .then()
                .statusCode(401)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .patch(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=EWfiYWEpTNgAGP6&" + 
                    "username=WMOKQOE9vk2G6sv")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .patch(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=6&" + 
                    "username=_EM_3615_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * 1 - (401) PUT:/consumer/subscribe
    * 2 - (404) PATCH:/consumer/subscribe
    * 3 - (404) PATCH:/consumer/subscribe
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_126_patchOnSubscribeReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 762L)
                .d("PASSWORD", "\"Q0V\"")
                .d("USERNAME", "\"DRa6\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=2&" + 
                    "username=ritinha")
                .then()
                .statusCode(401)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .patch(baseUrlOfSut + "/consumer/subscribe?username=WMOKQOE9vk2G6sv")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .patch(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=6&" + 
                    "username=_EM_3615_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (403) GET:/admin/printshops
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_127_getOnPrintshopsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/admin/printshops")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/admin/printshops"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/api/secured
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_128_getOnSecuredReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/secured")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/api/secured"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/balance
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_129_getOnBalanceReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1538L)
                .d("ADDRESS", "\"\"")
                .d("AVG_RATING", "0.4483270891015987")
                .d("BALANCE_CURRENCY", "\"JEvkh2t40\"")
                .d("BALANCE_FRACTIONAL_PART", "782")
                .d("BALANCE_INTEGER_PART", "1000")
                .d("LATITUDE", "0.026486466142620735")
                .d("LOGO", "\"P\"")
                .d("LONGITUDE", "0.8050962463122233")
                .d("NAME", "\"G\"")
                .d("NIF", "\"fnRa83nmtu30RcF\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/balance?" + 
                    "charset=P588NxJ0GHE&" + 
                    "txn_type=1&" + 
                    "mc_gross=Qto0G0uqW")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/balance"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/info
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_130_getOnConsumerInfoWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_221_XYZ_")
                .get(baseUrlOfSut + "/consumer/info?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/info"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/notifications
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_131_getOnConsumerNotificationsWithQueryParam() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/notifications?EMextraParam123=_EM_222_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/notifications"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/requests
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_132_getOnRequestsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_223_XYZ_")
                .get(baseUrlOfSut + "/consumer/requests")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/requests"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/satisfied
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_133_getOnSatisfiedReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_225_XYZ_")
                .get(baseUrlOfSut + "/consumer/satisfied")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/satisfied"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/documents/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_134_getOnDocumentReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/documents/183?EMextraParam123=_EM_233_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/documents/183"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/history
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_135_getOnHistoryReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printshops/history?EMextraParam123=_EM_238_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/history"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/requests
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_136_getOnRequestsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/requests")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/requests"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/satisfied
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_137_getOnSatisfiedReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/satisfied?password=ONiDdx4p_i")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/satisfied"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/stats
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_138_getOnStatsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printshops/stats")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/stats"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/api/secured
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_139_getOnSecuredReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/secured")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/api/secured"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/requests/pending
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_140_getOnPendingReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/requests/pending")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/requests/pending"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/balance
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_141_getOnBalanceReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/balance?" + 
                    "txn_type=UO&" + 
                    "transaction_type=p&" + 
                    "mc_gross=AUGTDnSShnP")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/balance"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/balance
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_142_getOnBalanceReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/balance?" + 
                    "password=efWTXvY&" + 
                    "charset=XKxx&" + 
                    "payer_email=avGXkZJf6&" + 
                    "transaction_type=x&" + 
                    "mc_gross=sU2n")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/balance"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/balance
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_143_getOnBalanceReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/balance")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/balance"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/documents/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_144_getOnDocumentReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "_EM_396_XYZ_")
                .get(baseUrlOfSut + "/documents/364")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/documents/364"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/history
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_145_getOnHistoryReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printshops/history?EMextraParam123=_EM_399_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/history"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/requests
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_146_getOnRequestsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/requests")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/requests"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/satisfied
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_147_getOnSatisfiedReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printshops/satisfied?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/satisfied"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/stats
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_148_getOnStatsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/stats")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/stats"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/admin/printshops
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_149_getOnPrintshopsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/admin/printshops")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/admin/printshops"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/info
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_150_getOnInfoReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/info")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/info"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/notifications
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_151_getOnNotificationsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/notifications")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/notifications"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/requests
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_152_getOnRequestsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/requests")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/requests"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/satisfied
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_153_getOnSatisfiedReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/satisfied")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/satisfied"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/documents/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_154_getOnDocumentReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/documents/832")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/documents/832"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/requests/pending
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_155_getOnPendingReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/requests/pending")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/requests/pending"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/admin/printshops
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_156_getOnPrintshopsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/admin/printshops")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/admin/printshops"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/api/secured
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_157_getOnSecuredReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/secured")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/api/secured"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/balance
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_158_getOnBalanceReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/balance")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/balance"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/info
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_159_getOnInfoReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/info")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/info"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/notifications
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_160_getOnNotificationsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/notifications")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/notifications"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/requests
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_161_getOnRequestsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/requests")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/requests"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/satisfied
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_162_getOnSatisfiedReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/satisfied")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/satisfied"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/stats
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_163_getOnStatsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/stats")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/stats"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/requests/pending
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_164_getOnPendingReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/requests/pending")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/requests/pending"));
    }
    
    
    /**
    * Calls:
    * 1 - (403) GET:/consumer/balance
    * 2 - (403) GET:/admin/printshops
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_165_getOnPrintshopsReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1508L)
                .d("PASSWORD", "\"GdJ\"")
                .d("USERNAME", "\"VS\"")
            .and().insertInto("ADMIN", 1507L)
                .d("BALANCE_CURRENCY", "\"5gdJgj9\"")
                .d("BALANCE_FRACTIONAL_PART", "327")
                .d("BALANCE_INTEGER_PART", "86")
                .d("EMAIL", "NULL")
                .d("ID", "16")
            .and().insertInto("USERS", 741L)
                .d("PASSWORD", "\"0gl1bE13Jrlc\"")
                .d("USERNAME", "\"hyHXz\"")
            .and().insertInto("PRINTSHOPS", 740L)
                .d("ADDRESS", "\"IDKHUXv\"")
                .d("AVG_RATING", "0.5092431455071824")
                .d("BALANCE_CURRENCY", "\"CYQO674Dk1kMmbHV\"")
                .d("BALANCE_FRACTIONAL_PART", "348")
                .d("BALANCE_INTEGER_PART", "694")
                .d("LATITUDE", "0.005876095986594332")
                .d("LOGO", "\"_EM_2152_XYZ_\"")
                .d("LONGITUDE", "0.886178709974084")
                .d("NAME", "\"KkKsig855Nc\"")
                .d("NIF", "\"bGGkltV5\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/balance?" + 
                    "username=hyHXz&" + 
                    "charset=_EM_2154_XYZ_&" + 
                    "payer_email=_EM_2155_XYZ_&" + 
                    "txn_type=_EM_2156_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/balance"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/admin/printshops?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/admin/printshops"));
    }
    
    
    /**
    * Calls:
    * 1 - (403) POST:/printshops/{printShopID}/employees
    * 2 - (403) POST:/printshops/{printShopID}/employees
    * 3 - (403) GET:/printshops/stats
    * Found 3 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_166_getOnStatsReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1125L)
                .d("PASSWORD", "\"s\"")
                .d("USERNAME", "\"vFFpM7sK44\"")
            .and().insertInto("PRINTSHOPS", 1124L)
                .d("ADDRESS", "\"v5Kn5jq0mig\"")
                .d("AVG_RATING", "0.11446173801890736")
                .d("BALANCE_CURRENCY", "\"FqU77RuSQpOV2fQ\"")
                .d("BALANCE_FRACTIONAL_PART", "448")
                .d("BALANCE_INTEGER_PART", "722")
                .d("LATITUDE", "0.8873888841576217")
                .d("LOGO", "\"pCA3o4\"")
                .d("LONGITUDE", "0.2720972251269267")
                .d("NAME", "\"lGAZAxdcfaU\"")
                .d("NIF", "\"ChHZY\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/444/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/444/employees"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/444/employees?message=M2")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/444/employees"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "mItZhl2znE")
                .get(baseUrlOfSut + "/printshops/stats")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/stats"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/notifications/{notificationId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_167_putOnNotifReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/notifications/392?EMextraParam123=_EM_312_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/notifications/392"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/notifications/{notificationId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_168_putOnNotifReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/notifications/846")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/notifications/846"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/notifications/{notificationId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_169_putOnNotifReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/notifications/790")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/notifications/790"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/notifications/{notificationId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_170_deleteOnNotifReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_236_XYZ_")
                .delete(baseUrlOfSut + "/notifications/-204000239056377686?EMextraParam123=_EM_235_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/notifications/-204000239056377686"));
    }
    
    
    /**
    * Calls:
    * 1 - (403) PUT:/notifications/{notificationId}
    * 2 - (403) DELETE:/notifications/{notificationId}
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_171_deleteOnNotifReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "42")
                .put(baseUrlOfSut + "/notifications/-264306354")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/notifications/-264306354"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/notifications/-264306354")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/notifications/-264306354"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/notifications/{notificationId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_172_deleteOnNotifReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/notifications/435")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/notifications/435"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/notifications/{notificationId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_173_deleteOnNotifReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/notifications/293")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/notifications/293"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/consumer/subscribe
    */
    @Test @Timeout(60)
    public void test_174_getOnConsumerSubscribeWithQueryParamsReturns404UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 757L)
                .d("PASSWORD", "\"qtr9K_0\"")
                .d("USERNAME", "\"bh4\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=Mqa0J&" + 
                    "username=_EM_2291_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/consumer/subscribe
    */
    @Test @Timeout(60)
    public void test_175_getOnSubscribeReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/documents/{id}
    */
    @Test @Timeout(60)
    public void test_176_getOnDocumentReturns404() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/documents/-314205214")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/printshops/{id}
    */
    @Test @Timeout(60)
    public void test_177_getOnPrintshopReturns404() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printshops/-30273625")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/printshops/{id}
    */
    @Test @Timeout(60)
    public void test_178_getOnPrintshopReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_31_XYZ_")
                .get(baseUrlOfSut + "/printshops/234")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * 1 - (404) PUT:/consumer/subscribe
    * 2 - (404) GET:/consumer/subscribe
    */
    @Test @Timeout(60)
    public void test_179_getOnConsumerSubscribeWithQueryParamReturns404UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 785L)
                .d("PASSWORD", "\"Hv1qkmTtds\"")
                .d("USERNAME", "\"J7xwf0TP\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=1zZ7k6RM5&" + 
                    "username=_EM_2405_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/subscribe?username=7zqeak2iiKvAT")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) POST:/consumer/subscribe
    */
    @Test @Timeout(60)
    public void test_180_postOnSubscribeReturns404UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1510L)
                .d("PASSWORD", "\"Ae3rr\"")
                .d("USERNAME", "\"M4zZIOX\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=rkWIR&" + 
                    "username=_EM_3493_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) POST:/consumer/subscribe
    */
    @Test @Timeout(60)
    public void test_181_postOnSubscribeReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) PUT:/consumer/subscribe
    */
    @Test @Timeout(60)
    public void test_182_putOnSubscribeReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .put(baseUrlOfSut + "/consumer/subscribe?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/consumer/subscribe
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_183_deleteOnConsumerSubscribeWithQueryParamsUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 783L)
                .d("PASSWORD", "\"jnpkBL\"")
                .d("USERNAME", "\"C7doAr6m3eZvCep\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=47OJYpPkV9KNV8&" + 
                    "username=_EM_2391_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/consumer/subscribe
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_184_deleteOnSubscribeReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * 1 - (404) POST:/consumer/subscribe
    * 2 - (404) DELETE:/consumer/subscribe
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_185_deleteOnConsumerSubscribeWithQueryParamsEmptyPasswordUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 779L)
                .d("PASSWORD", "\"vVVNOlH3v\"")
                .d("USERNAME", "\"ACxT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=qSUTsavWwd&" + 
                    "username=_EM_2382_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=&" + 
                    "username=gr6vndm37")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) PATCH:/consumer/subscribe
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_186_patchOnSubscribeReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .patch(baseUrlOfSut + "/consumer/subscribe?EMextraParam123=_EM_20_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * 1 - (404) PUT:/consumer/subscribe
    * 2 - (404) PATCH:/consumer/subscribe
    * 3 - (404) PATCH:/consumer/subscribe
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_187_patchOnSubscribeReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 762L)
                .d("PASSWORD", "\"Q4V\"")
                .d("USERNAME", "\"DRa5\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=&" + 
                    "username=_EM_2313_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .patch(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=EWfiYWEpTNgAGP61&" + 
                    "username=WMOKQOE9uk2G6sv")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .patch(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=6&" + 
                    "username=_EM_2321_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * 1 - (404) PUT:/consumer/subscribe
    * 2 - (404) PATCH:/consumer/subscribe
    * 3 - (404) PATCH:/consumer/subscribe
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_188_patchOnSubscribeReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 762L)
                .d("PASSWORD", "\"Q0\"")
                .d("USERNAME", "\"EVa5\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=&" + 
                    "username=_EM_2313_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .patch(baseUrlOfSut + "/consumer/subscribe?username=WMOKQOE9uk2G6sv")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .patch(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=6&" + 
                    "username=_EM_2351_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) HEAD:/consumer/subscribe
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_189_headOnSubscribeReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 867L)
                .d("PASSWORD", "\"tbKi\"")
                .d("USERNAME", "\"_EM_2594_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .head(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=qws8jyP9cKXlx&" + 
                    "username=_EM_2593_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) HEAD:/consumer/subscribe
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_190_headOnSubscribeReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .head(baseUrlOfSut + "/consumer/subscribe?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) HEAD:/consumer/subscribe
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_191_headOnSubscribeReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 884L)
                .d("PASSWORD", "\"JQjh\"")
                .d("USERNAME", "\"_EM_2619_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .head(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=_EM_2617_XYZ_&" + 
                    "username=_EM_2618_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (500) GET:/consumer/{consumerID}/printingschemas
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_192_getOnPrintingschemasShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 315L)
                .d("ADDRESS", "\"gjyt\"")
                .d("AVG_RATING", "0.35168793259164144")
                .d("BALANCE_CURRENCY", "\"SebGjYzRL\"")
                .d("BALANCE_FRACTIONAL_PART", "234")
                .d("BALANCE_INTEGER_PART", "-1686874953")
                .d("LATITUDE", "0.27480142497135185")
                .d("LOGO", "\"sxGhfpNugECYhiw\"")
                .d("LONGITUDE", "0.26223059113526614")
                .d("NAME", "\"KEWdLArFaF\"")
                .d("NIF", "\"5GoaAZcLK3dQG\"")
            .and().insertInto("USERS", 722L)
                .d("PASSWORD", "\"dwZNf8Vre6R\"")
                .d("USERNAME", "\"J3nT6MvaetAr8\"")
            .and().insertInto("CONSUMERS", 721L)
                .d("BALANCE_CURRENCY", "\"ObK\"")
                .d("BALANCE_FRACTIONAL_PART", "101")
                .d("BALANCE_INTEGER_PART", "977")
                .d("EMAIL", "\"F0XmPbpZy1PZEqBS\"")
                .d("LATITUDE", "NULL")
                .d("LONGITUDE", "\"kBYZ0VFCVlrV\"")
                .d("NAME", "\"4XBas3\"")
                .d("ID", "9")
            .and().insertInto("USERS", 725L)
                .d("PASSWORD", "\"TNnAIgtS\"")
                .d("USERNAME", "\"511edseMpy\"")
            .and().insertInto("CONSUMERS", 724L)
                .d("BALANCE_CURRENCY", "\"9nL2lkIZbNnlhEY\"")
                .d("BALANCE_FRACTIONAL_PART", "893")
                .d("BALANCE_INTEGER_PART", "396")
                .d("NAME", "\"J\"")
                .d("ID", "17")
            .and().insertInto("PRINTING_SCHEMAS", 723L)
                .d("BINDING_SPECS", "\"W2N66SvBNbF\"")
                .d("COVER_SPECS", "\"d4cZn\"")
                .d("IS_DELETED", "false")
                .d("PSCHEMA_NAME", "\"WxNvIPEVDKmtB\"")
                .d("PAPER_SPECS", "\"p3Px_4BM8qZL9\"")
                .d("CONSUMER_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/676/printingschemas?password=")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/676/printingschemas"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/printshops/requests/{id}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_193_getOnRequestShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_252_getPrintShopRequest.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/printshops/requests/{id}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/requests/259")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_252_getPrintShopRequest
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/printshops/requests/259"));
    }
    
    
    /**
    * Calls:
    * 1 - (500) POST:/consumer/{consumerID}/printingschemas
    * 2 - (500) GET:/consumer/{consumerID}/printingschemas
    * 3 - (500) GET:/consumer/satisfied
    * 4 - (200) DELETE:/consumer/requests/cancel/{id}
    * 5 - (403) POST:/printshops/{printShopID}/employees
    * 6 - (403) PUT:/printshops/{printShopID}/employees
    * 7 - (404) POST:/consumer/subscribe
    * 8 - (200) GET:/printshops/{id}/pricetable
    * Found 8 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_194_getOnPricetableShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 525L)
                .d("PASSWORD", "\"PNT9f\"")
                .d("USERNAME", "\"_EM_1427_XYZ_\"")
            .and().insertInto("CONSUMERS", 524L)
                .d("BALANCE_CURRENCY", "\"_EM_1428_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "1291")
                .d("BALANCE_INTEGER_PART", "820")
                .d("EMAIL", "\"buQPEWiQ\"")
                .d("LATITUDE", "\"XvzS52rKdFum\"")
                .d("LONGITUDE", "\"_EM_1429_XYZ_\"")
                .d("NAME", "\"sNIbFgCf\"")
                .r("ID", 525L)
            .and().insertInto("PRINTSHOPS", 526L)
                .d("ADDRESS", "\"i4uE2H2jPMZCM\"")
                .d("AVG_RATING", "0.1")
                .d("BALANCE_CURRENCY", "\"H7kpPC33jJ_R\"")
                .d("BALANCE_FRACTIONAL_PART", "720")
                .d("BALANCE_INTEGER_PART", "560")
                .d("LATITUDE", "0.8")
                .d("LOGO", "\"Yb\"")
                .d("LONGITUDE", "-1.3789422468146784")
                .d("NAME", "\"5r__z^vBXeNqE3\"")
                .d("NIF", "\"MtqZqUm4aWNChg\"")
            .and().insertInto("PRINTSHOPS", 534L)
                .d("ADDRESS", "\"Lgipfn\"")
                .d("AVG_RATING", "0.8451562255403866")
                .d("BALANCE_CURRENCY", "\"MXCupPkRwNSqmh\"")
                .d("BALANCE_FRACTIONAL_PART", "1138887505")
                .d("BALANCE_INTEGER_PART", "622")
                .d("LATITUDE", "0.9961341038269936")
                .d("LOGO", "\"PAP2DQ4zi_qIh\"")
                .d("LONGITUDE", "0.3528196565039424")
                .d("NAME", "\"h36Syl3r6bSKM\"")
                .d("NIF", "\"73K\"")
            .and().insertInto("PRINTSHOPS", 533L)
                .d("ADDRESS", "\"wAl9ZHt4arD\"")
                .d("AVG_RATING", "0.4679692920373635")
                .d("BALANCE_CURRENCY", "\"\"")
                .d("BALANCE_FRACTIONAL_PART", "15")
                .d("BALANCE_INTEGER_PART", "155")
                .d("LATITUDE", "-1.0666867367356923")
                .d("LOGO", "\"UPUHmX\"")
                .d("LONGITUDE", "0.347562983512437")
                .d("NAME", "\"RdBqAX09IWHAe\"")
                .d("NIF", "\"_EM_1430_XYZ_\"")
            .and().insertInto("USERS", 532L)
                .d("PASSWORD", "\"ugJN\"")
                .d("USERNAME", "\"518n681\"")
            .and().insertInto("CONSUMERS", 531L)
                .d("BALANCE_CURRENCY", "\"WM8iq5mr0jrqw104\"")
                .d("BALANCE_FRACTIONAL_PART", "954")
                .d("BALANCE_INTEGER_PART", "-16332")
                .d("NAME", "\"B\"")
                .r("ID", 532L)
            .and().insertInto("USERS", 530L)
                .d("PASSWORD", "\"SBn8\"")
                .d("USERNAME", "\"\"")
            .and().insertInto("CONSUMERS", 529L)
                .d("BALANCE_CURRENCY", "\"frV\"")
                .d("BALANCE_FRACTIONAL_PART", "-147")
                .d("BALANCE_INTEGER_PART", "694")
                .d("NAME", "\"_EM_1431_XYZ_\"")
                .r("ID", 530L)
            .and().insertInto("PRINT_REQUESTS", 528L)
                .d("COST", "0.39")
            .and().insertInto("DOCUMENTS", 527L)
                .d("FILE_NAME", "\"RBV\"")
                .d("TOTAL_PAGES", "879")
                .d("PRINT_REQUEST_ID", "NULL")
            .and().insertInto("USERS", 448L)
                .d("PASSWORD", "\"vp\"")
                .d("USERNAME", "\"CyclFn\"")
            .and().insertInto("PRINTSHOPS", 452L)
                .d("ADDRESS", "\"aslHKbIwiZX\"")
                .d("AVG_RATING", "0.059259826931341575")
                .d("BALANCE_CURRENCY", "\"_EM_1275_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "2097316")
                .d("BALANCE_INTEGER_PART", "455")
                .d("LATITUDE", "0.7553308906207568")
                .d("LOGO", "\"gyMzpJrduln\"")
                .d("LONGITUDE", "0.8316951183968223")
                .d("NAME", "\"_EM_1276_XYZ_\"")
                .d("NIF", "\"kyc9xU\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_71_addNewConsumerPrintingSchema.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"_EM_1271_XYZ_\", " + 
                    " \"coverSpecs\": \"_EM_1272_XYZ_\", " + 
                    " \"deleted\": false, " + 
                    " \"paperSpecs\": \"_EM_1273_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/422/printingschemas")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_71_addNewConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/consumer/422/printingschemas"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1426_XYZ_")
                .get(baseUrlOfSut + "/consumer/422/printingschemas")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/422/printingschemas"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/satisfied'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "NpQQZZDFahyMgY7")
                .get(baseUrlOfSut + "/consumer/satisfied?" + 
                    "password=7diSKEO&" + 
                    "username=hyAMHO2jwvq")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/satisfied"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1426_XYZ_")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/13?" + 
                    "password=THH1rSXWb6Z3q&" + 
                    "username=VOHYgrZPWWdUnsgF")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/-106/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-106/employees"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1426_XYZ_")
                .put(baseUrlOfSut + "/printshops/-106/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-106/employees"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1426_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"Xp\", " + 
                    " \"printShop\": { " + 
                    " \"id\": 589, " + 
                    " \"address\": \"EB9ufRPek\", " + 
                    " \"longitude\": -0.0534214493681231, " + 
                    " \"nif\": \"_EM_1277_XYZ_\", " + 
                    " \"logo\": \"_EM_1278_XYZ_\", " + 
                    " \"avgRating\": 0.14049183, " + 
                    " \"balance\": {} " + 
                    " }, " + 
                    " \"username\": \"VD\", " + 
                    " \"roles\": [] " + 
                    " } ")
                .get(baseUrlOfSut + "/printshops/13/pricetable")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"printcopy\":{},\"rings\":{},\"stapling\":0.0,\"covers\":{},\"success\":true}"));
    }
    
    
    /**
    * Calls:
    * 1 - (500) POST:/consumer/{consumerID}/printingschemas
    * 2 - (500) GET:/consumer/{consumerID}/printingschemas
    * 3 - (200) DELETE:/consumer/requests/cancel/{id}
    * 4 - (403) POST:/printshops/{printShopID}/employees
    * 5 - (403) PUT:/printshops/{printShopID}/employees
    * 6 - (404) POST:/consumer/subscribe
    * 7 - (200) GET:/printshops/{id}/pricetable
    * Found 6 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_195_getOnPricetableShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 538L)
                .d("PASSWORD", "\"7Ge\"")
                .d("USERNAME", "\"WR7b7RBLNculuGVZ\"")
            .and().insertInto("CONSUMERS", 537L)
                .d("BALANCE_CURRENCY", "\"t1Gy82znOTc\"")
                .d("BALANCE_FRACTIONAL_PART", "623")
                .d("BALANCE_INTEGER_PART", "518")
                .d("EMAIL", "\"6OX\"")
                .d("LATITUDE", "\"89j\"")
                .d("LONGITUDE", "\"VyVR\"")
                .d("NAME", "\"_EM_1447_XYZ_\"")
                .r("ID", 538L)
            .and().insertInto("PRINTSHOPS", 539L)
                .d("ADDRESS", "\"gbf6ulYVz\"")
                .d("AVG_RATING", "-31.3459555")
                .d("BALANCE_CURRENCY", "\"RhBkl\"")
                .d("BALANCE_FRACTIONAL_PART", "177")
                .d("BALANCE_INTEGER_PART", "132033")
                .d("LATITUDE", "-9590.741261811761")
                .d("LOGO", "\"Q9rA54WXNe5s\"")
                .d("LONGITUDE", "0.233456537195")
                .d("NAME", "\"\"")
                .d("NIF", "\"O5s5WBKO1b\"")
            .and().insertInto("PRINTSHOPS", 546L)
                .d("ADDRESS", "\"z{mzIZOHNk\"")
                .d("AVG_RATING", "0.4948823195041506")
                .d("BALANCE_CURRENCY", "\"Jwc6u3YYs\"")
                .d("BALANCE_FRACTIONAL_PART", "-1724113710")
                .d("BALANCE_INTEGER_PART", "293")
                .d("LATITUDE", "0.4010968529253416")
                .d("LOGO", "\"42\"")
                .d("LONGITUDE", "0.1")
                .d("NAME", "\"e\"")
                .d("NIF", "\"DugYguY0\"")
            .and().insertInto("PRINTSHOPS", 545L)
                .d("ADDRESS", "\"T\"")
                .d("AVG_RATING", "0.08046586447279624")
                .d("BALANCE_CURRENCY", "\"K3NP4gHtdvMX\"")
                .d("BALANCE_FRACTIONAL_PART", "820")
                .d("BALANCE_INTEGER_PART", "638984258")
                .d("LATITUDE", "-0.11156621165790193")
                .d("LOGO", "\"U2Gfcq55blFU4e\"")
                .d("LONGITUDE", "0.3921778785013531")
                .d("NAME", "\"jx7F5\"")
                .d("NIF", "\"rIS9SZu5vl\"")
            .and().insertInto("USERS", 544L)
                .d("PASSWORD", "\"5ZV7WU4nf8s1z\"")
                .d("USERNAME", "\"=9iSJiv\"")
            .and().insertInto("CONSUMERS", 543L)
                .d("BALANCE_CURRENCY", "\"uabG\"")
                .d("BALANCE_FRACTIONAL_PART", "710")
                .d("BALANCE_INTEGER_PART", "688")
                .d("NAME", "\"fCu_l\"")
                .r("ID", 544L)
            .and().insertInto("PRINT_REQUESTS", 540L)
                .d("ARRIVAL", "\"1928-11-30 01:04:00\"")
                .d("COST", "0.9061887206570978")
                .d("DELIVERED", "\"2087-07-31 22:21:27\"")
                .d("EMPATTENDED", "\"Edzr5PFj_5a\"")
                .d("EMPDELIVERED", "\"KRRlDfHTRuzSw\"")
                .d("FINISHED", "\"1967-01-15 03:45:28\"")
                .d("PAYPAL_SALE_ID", "\"ykL_LVo_\"")
                .d("PAYMENT_TYPE", "\"w8BB\"")
                .d("STATUS", "\"PENDING\"")
                .r("CONSUMER_ID", 537L)
                .r("PRINTSHOP_ID", 539L)
                .d("PRINTSHOP", "NULL")
                .r("CONSUMER", 537L)
            .and().insertInto("USERS", 448L)
                .d("PASSWORD", "\"vp\"")
                .d("USERNAME", "\"CyclFn\"")
            .and().insertInto("PRINTSHOPS", 452L)
                .d("ADDRESS", "\"TbKF7VO_n0ap0\"")
                .d("AVG_RATING", "5.0E37")
                .d("BALANCE_CURRENCY", "\"_EM_1457_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "164")
                .d("BALANCE_INTEGER_PART", "0")
                .d("LATITUDE", "0.7553308906207568")
                .d("LOGO", "\"_EM_1449_XYZ_\"")
                .d("LONGITUDE", "0.8316951183968223")
                .d("NAME", "\"3nC3tuo09t3fUl\"")
                .d("NIF", "\"cyc9xU\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_72_addNewConsumerPrintingSchema.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"_EM_1271_XYZ_\", " + 
                    " \"coverSpecs\": \"_EM_1272_XYZ_\", " + 
                    " \"deleted\": true, " + 
                    " \"name\": \"bEn2tB4sZqgIWIT\", " + 
                    " \"paperSpecs\": \"h\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/0/printingschemas")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_72_addNewConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/0/printingschemas"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1453_XYZ_")
                .get(baseUrlOfSut + "/consumer/0/printingschemas?" + 
                    "password=eQ5Byx9VWjnxnsvl&" + 
                    "username=PNM")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/0/printingschemas"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1453_XYZ_")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/-16?" + 
                    "password=THH1rSXWb6Z3q&" + 
                    "username=VOHYgrZPWWdUnsgF")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/-3938/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-3938/employees"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/printshops/-3938/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-3938/employees"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1453_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_1446_XYZ_\", " + 
                    " \"printShop\": { " + 
                    " \"id\": 589, " + 
                    " \"address\": \"EB9ufRPeka\", " + 
                    " \"longitude\": 0.9802509305077618, " + 
                    " \"nif\": \"_EM_1277_XYZ_\", " + 
                    " \"logo\": \"_EM_1278_XYZ_\", " + 
                    " \"avgRating\": 0.14049183 " + 
                    " }, " + 
                    " \"username\": \"_EM_1279_XYZ_\", " + 
                    " \"roles\": [] " + 
                    " } ")
                .get(baseUrlOfSut + "/printshops/-16/pricetable")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * 1 - (500) POST:/consumer/{consumerID}/printingschemas
    * 2 - (500) GET:/consumer/{consumerID}/printingschemas
    * 3 - (200) DELETE:/consumer/requests/cancel/{id}
    * 4 - (403) POST:/printshops/{printShopID}/employees
    * 5 - (403) PUT:/printshops/{printShopID}/employees
    * 6 - (404) POST:/consumer/subscribe
    * 7 - (200) GET:/printshops/{id}/pricetable
    * Found 6 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_196_getOnPricetableShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 448L)
                .d("PASSWORD", "\"vp\"")
                .d("USERNAME", "\"CyclFn\"")
            .and().insertInto("PRINTSHOPS", 452L)
                .d("ADDRESS", "\"_EM_1274_XYZ_\"")
                .d("AVG_RATING", "0.059259826931341575")
                .d("BALANCE_CURRENCY", "\"_EM_1275_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "164")
                .d("BALANCE_INTEGER_PART", "455")
                .d("LATITUDE", "0.7553308906207568")
                .d("LOGO", "\"gyMzpJrduln\"")
                .d("LONGITUDE", "0.8316951183968223")
                .d("NAME", "\"_EM_1276_XYZ_\"")
                .d("NIF", "\"kyc9xU\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_71_addNewConsumerPrintingSchema.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"_EM_1271_XYZ_\", " + 
                    " \"coverSpecs\": \"_EM_1272_XYZ_\", " + 
                    " \"deleted\": false, " + 
                    " \"paperSpecs\": \"_EM_1273_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/430/printingschemas")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_71_addNewConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/consumer/430/printingschemas"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/430/printingschemas")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/430/printingschemas"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/14")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/406/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/406/employees"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "xYFIlfOqSfzp3")
                .put(baseUrlOfSut + "/printshops/406/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/406/employees"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "xYFIlfOqSfzp3")
                .get(baseUrlOfSut + "/printshops/14/pricetable")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/consumer/{consumerID}/printingschemas
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_197_postOnPrintingschemasShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_71_addNewConsumerPrintingSchema.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "_EM_433_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"deleted\": false, " + 
                    " \"name\": \"_EM_431_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/608/printingschemas")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_71_addNewConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/consumer/608/printingschemas"));
    }
    
    
    /**
    * Calls:
    * 1 - (500) PUT:/consumer/{username}/notifications
    * 2 - (500) PUT:/consumer/{username}/notifications
    * 3 - (500) POST:/consumer/{consumerID}/printingschemas
    * Found 6 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_198_postOnPrintingschemasShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1660L)
                .d("PASSWORD", "\"B_a\"")
                .d("USERNAME", "\"MDhCqST2\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_234_readAllNotifications.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{username}/notifications'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/_jRiuIL/notifications")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_234_readAllNotifications
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/_jRiuIL/notifications"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_234_readAllNotifications.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{username}/notifications'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/_jRiuIL/notifications")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_234_readAllNotifications
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/_jRiuIL/notifications"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_72_addNewConsumerPrintingSchema.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"pvrpGGGXs9\", " + 
                    " \"coverSpecs\": \"j6YA\", " + 
                    " \"name\": \"rsMNEM4ZR8Sdon\", " + 
                    " \"paperSpecs\": \"nxz8zkQ\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/560/printingschemas?EMextraParam123=42")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_72_addNewConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/560/printingschemas"));
    }
    
    
    /**
    * Calls:
    * 1 - (404) PUT:/consumer/subscribe
    * 2 - (200) GET:/printshops/{id}
    * 3 - (403) GET:/api/secured
    * 4 - (500) POST:/paypal/ipn/{printRequestID}
    * Found 3 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_199_postOnIpnShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 320L)
                .d("ADDRESS", "\"foPtKEawInwD\"")
                .d("AVG_RATING", "0.6409067536417841")
                .d("BALANCE_CURRENCY", "\"\"")
                .d("BALANCE_FRACTIONAL_PART", "166")
                .d("BALANCE_INTEGER_PART", "499")
                .d("LATITUDE", "0.732994350899378")
                .d("LOGO", "\"_EM_1017_XYZ_\"")
                .d("LONGITUDE", "0.6452771965726455")
                .d("NAME", "\"_EM_1018_XYZ_\"")
                .d("NIF", "\"_EM_1019_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=_EM_1016_XYZ_&" + 
                    "username=GA")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/9")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"id\":9,\"name\":\"SmartPrint\",\"address\":\"Rua dos Peões, Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_2\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}}"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "dNwwPjDp9")
                .get(baseUrlOfSut + "/api/secured")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/api/secured"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PayPalController_61_someRequestPaymentConfirmationFromPaylPal.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/paypal/ipn/{printRequestID}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/paypal/ipn/561")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PayPalController_61_someRequestPaymentConfirmationFromPaylPal
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/paypal/ipn/561"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/paypal/ipn/{printRequestID}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_200_postOnPaypalIpnWithQueryParamsEmptyCharsetShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PayPalController_61_someRequestPaymentConfirmationFromPaylPal.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/paypal/ipn/{printRequestID}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/paypal/ipn/430?" + 
                    "charset=&" + 
                    "payer_email=HV9w00OrgyvRATmx&" + 
                    "txn_type=7n7cqOm&" + 
                    "transaction_type=hCSVEYOSW4Qd8oZIM&" + 
                    "mc_gross=A7")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PayPalController_61_someRequestPaymentConfirmationFromPaylPal
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NumberFormatException"))
                .body("'message'", containsString("For input string: \"A7\""))
                .body("'path'", containsString("/paypal/ipn/430"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/paypal/ipn/{printRequestID}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_201_postOnPaypalIpnShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PayPalController_61_someRequestPaymentConfirmationFromPaylPal.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/paypal/ipn/{printRequestID}'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/paypal/ipn/-782005564564229494")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PayPalController_61_someRequestPaymentConfirmationFromPaylPal
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/paypal/ipn/-782005564564229494"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/consumer/{id}/notify
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_202_postOnConsumNotifyShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{id}/notify'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/-2087753306142874870/notify")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/-2087753306142874870/notify"));
    }
    
    
    /**
    * Calls:
    * 1 - (403) POST:/consumer/{consumerID}/printingschemas
    * 2 - (403) POST:/consumer/{consumerID}/printingschemas
    * 3 - (200) GET:/printshops
    * 4 - (200) POST:/admin/useed
    * 5 - (500) POST:/admin/useed
    * 6 - (403) GET:/printshops/history
    * 7 - (200) POST:/consumer/{id}/notify
    * 8 - (500) POST:/paypal/ipn/{printRequestID}
    * 9 - (500) POST:/paypal/ipn/{printRequestID}
    * Found 9 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_203_postOnIpnShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1251L)
                .d("PASSWORD", "\"_EM_3162_XYZ_\"")
                .d("USERNAME", "\"1\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/702/printingschemas")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/702/printingschemas"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "8pppLXc0IcCOM")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"o0sfWo3Y5o6aUu_y\", " + 
                    " \"coverSpecs\": \"1\", " + 
                    " \"id\": 702, " + 
                    " \"name\": \"H7gdZa\", " + 
                    " \"paperSpecs\": \"GV8epg0WNE4E0\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/702/printingschemas")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/702/printingschemas"));
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("[{\"id\":1,\"name\":\"Copy Scan\",\"address\":\"Rua Quinta dos Órfãos 16 S. Vitor (Junto à Universidade do Minho), Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_1\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":2,\"name\":\"Flash Vidius - Gomes \\u0026 Santana, Lda.\",\"address\":\"R. Manuel Silva, 20 - R/C. C.P. 4490000, Povoa de Varzim, Porto\",\"latitude\":41.379392,\"longitude\":-8.761458,\"nif\":\"199111333\",\"logo\":\"logo_3\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":3,\"name\":\"CopyGraphe\",\"address\":\"R. Ramalho Ortigão C Com Pescador - lj 12. C.P. 4490678, Povoa de Varzim, Porto\",\"latitude\":41.383314,\"longitude\":-8.761942,\"nif\":\"123098333\",\"logo\":\"logo_4\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":4,\"name\":\"Nelson Costa Santos\",\"address\":\"Tv. Senra, 22 - Póvoa de Varzim. C.P. 4490000, Povoa de Varzim, Porto.\",\"latitude\":41.38207,\"longitude\":-8.763069,\"nif\":\"153655378\",\"logo\":\"logo_5\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":5,\"name\":\"Gráfica Editora Poveira, Lda.\",\"address\":\"R. Manuel Silva, 18. C.P. 4490657, Povoa de Varzim, Porto.\",\"latitude\":41.379605,\"longitude\":-8.761047,\"nif\":\"133555378\",\"logo\":\"logo_6\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":6,\"name\":\"Staples Vila do Conde\",\"address\":\"Avenida General Humberto Delgado 2, Vila do Conde\",\"latitude\":41.370674,\"longitude\":-8.744176,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":7,\"name\":\"Staples Vila da Maia\",\"address\":\"Rua Comendador Valentim dos Santos Dinis 570, Maia\",\"latitude\":41.246159,\"longitude\":-8.625225,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":8,\"name\":\"Video Norte\",\"address\":\"Rua Nova de Santa Cruz\",\"latitude\":41.5594,\"longitude\":-8.3972,\"nif\":\"123444378\",\"logo\":\"logo_8\",\"avgRating\":4.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":9,\"name\":\"SmartPrint\",\"address\":\"Rua dos Peões, Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_2\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}}]"));
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/admin/useed")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"message\":\"consumers seeding completed\"}"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/admin/AdminController_639_useed.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/admin/useed'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/admin/useed")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/admin/AdminController_639_useed
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/admin/useed"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/history")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/history"));
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/288/notify")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PayPalController_61_someRequestPaymentConfirmationFromPaylPal.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/paypal/ipn/{printRequestID}'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/paypal/ipn/4941173501105231914")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PayPalController_61_someRequestPaymentConfirmationFromPaylPal
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/paypal/ipn/4941173501105231914"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PayPalController_61_someRequestPaymentConfirmationFromPaylPal.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/paypal/ipn/{printRequestID}'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/paypal/ipn/4941173501105231914")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PayPalController_61_someRequestPaymentConfirmationFromPaylPal
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/paypal/ipn/4941173501105231914"));
    }
    
    
    /**
    * Calls:
    * 1 - (500) POST:/consumer/{id}/notify
    * 2 - (500) POST:/consumer/{id}/notify
    * Found 4 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_204_postOnNotifyShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 895L)
                .d("PASSWORD", "\"sbepYBREtWT\"")
                .d("USERNAME", "\"t2GXsMwjDH9nCsEJ\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{id}/notify'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/141/notify")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/141/notify"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{id}/notify'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/141/notify?latitude=_EM_2644_XYZ_")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/141/notify"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/consumer/{id}/notify
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_205_postOnConsumNotifyWithQueryParamShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{id}/notify'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/consumer/188/notify?EMextraParam123=_EM_60_XYZ_")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/188/notify"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/paypal/ipn/{printRequestID}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_206_postOnPaypalIpnWithQueryParamShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PayPalController_61_someRequestPaymentConfirmationFromPaylPal.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/paypal/ipn/{printRequestID}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/paypal/ipn/817?EMextraParam123=42")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PayPalController_61_someRequestPaymentConfirmationFromPaylPal
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/paypal/ipn/817"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/printdocument/{id}/budget
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_207_postOnPrintdocuBudgetShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_328_calcBudgetForPrintRecipe.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/printdocument/{id}/budget'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printdocument/5180926866714840108/budget")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_328_calcBudgetForPrintRecipe
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/printdocument/5180926866714840108/budget"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/printshops/requests/{id}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_208_postOnRequestShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_164_changeStatusPrintShopRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/printshops/requests/{id}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/requests/885")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_164_changeStatusPrintShopRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/printshops/requests/885"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) GET:/printshops/nearest
    * 2 - (500) POST:/printshops/requests/{id}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_209_postOnRequestShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 772L)
                .d("ADDRESS", "\"sWBkm9\"")
                .d("AVG_RATING", "0.9929785366224811")
                .d("BALANCE_CURRENCY", "\"BaKQjnR9nHrfRZfU\"")
                .d("BALANCE_FRACTIONAL_PART", "252")
                .d("BALANCE_INTEGER_PART", "359")
                .d("LATITUDE", "0.27292554214427134")
                .d("LOGO", "\"18qCA\"")
                .d("LONGITUDE", "0.6617183619434208")
                .d("NAME", "\"9iJosC72TZ\"")
                .d("NIF", "\"FT0jNo\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/nearest?longitude=0.6617183619434208")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_164_changeStatusPrintShopRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/printshops/requests/{id}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/requests/-1227348612")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_164_changeStatusPrintShopRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/printshops/requests/-1227348612"));
    }
    
    
    /**
    * Calls:
    * 1 - (500) POST:/consumer/{id}/notify
    * 2 - (500) POST:/consumer/{id}/notify
    * Found 4 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_210_postOnNotifyShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 268L)
                .d("PASSWORD", "\"bp\"")
                .d("USERNAME", "\"_EM_919_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{id}/notify'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/559/notify")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/559/notify"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{id}/notify'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/559/notify?message=_EM_920_XYZ_")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/559/notify"));
    }
    
    
    /**
    * Calls:
    * 1 - (403) GET:/consumer/satisfied
    * 2 - (403) PUT:/consumer/info/update
    * 3 - (403) PUT:/consumer/info/update
    * 4 - (200) POST:/printshops/{id}/pricetable/deletering
    * 5 - (403) GET:/consumer/balance
    * 6 - (200) POST:/printshops/{printShopID}/employees
    * 7 - (200) POST:/printshops/{printShopID}/employees
    * 8 - (500) POST:/paypal/ipn/consumer/{consumerID}
    * 9 - (500) POST:/consumer/{id}/notify
    * 10 - (500) POST:/consumer/{id}/notify
    * Found 10 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_211_postOnNotifyShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 547L)
                .d("PASSWORD", "\"tGt6RxyOugyXago2\"")
                .d("USERNAME", "\"okpAr6\"")
            .and().insertInto("PRINTSHOPS", 548L)
                .d("ADDRESS", "\"V38oShNMWBmwo\"")
                .d("AVG_RATING", "0.5841391516674401")
                .d("BALANCE_CURRENCY", "\"_EM_1475_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "202")
                .d("BALANCE_INTEGER_PART", "252")
                .d("LATITUDE", "0.5181652901771429")
                .d("LOGO", "\"mF\"")
                .d("LONGITUDE", "0.3164815576029323")
                .d("NAME", "\"_EM_1476_XYZ_\"")
                .d("NIF", "\"BNTD5\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "D6KG")
                .get(baseUrlOfSut + "/consumer/satisfied?username=okpAr6")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/satisfied"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/info/update")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/info/update"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/info/update")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/info/update"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 84, " + 
                    " \"price\": \"924\", " + 
                    " \"supLim\": 113 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/924/pricetable/deletering")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "D6KG")
                .get(baseUrlOfSut + "/consumer/balance")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/balance"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/434/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "D6KG")
                .post(baseUrlOfSut + "/printshops/434/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/paypal/ipn/consumer/{consumerID}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/paypal/ipn/consumer/565757720")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/paypal/ipn/consumer/565757720"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{id}/notify'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/924/notify")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/924/notify"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{id}/notify'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/924/notify?message=eLD5Qk")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/924/notify"));
    }
    
    
    /**
    * Calls:
    * 1 - (403) POST:/printshops/{id}/pricetable/covers
    * 2 - (403) GET:/consumer/balance
    * 3 - (404) POST:/consumer/subscribe
    * 4 - (404) DELETE:/consumer/subscribe
    * 5 - (500) POST:/admin/register
    * 6 - (500) POST:/admin/register
    * 7 - (403) POST:/printshops/{id}/pricetable/papers
    * 8 - (403) POST:/printshops/{id}/pricetable/papers
    * 9 - (403) POST:/printshops/{printShopID}/employees
    * 10 - (403) POST:/printshops/{printShopID}/employees
    * Found 11 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_212_postOnEmployeesShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 584L)
                .d("ADDRESS", "\"_EM_1715_XYZ_\"")
                .d("AVG_RATING", "0.00699256756261335")
                .d("BALANCE_CURRENCY", "\"AzTmr59Kp4K9Xbug\"")
                .d("BALANCE_FRACTIONAL_PART", "891")
                .d("BALANCE_INTEGER_PART", "826")
                .d("LATITUDE", "0.36228690905124883")
                .d("LOGO", "\"Qwanlc4pvGi4\"")
                .d("LONGITUDE", "0.6285008665273222")
                .d("NAME", "\"_EM_1716_XYZ_\"")
                .d("NIF", "\"6jk\"")
            .and().insertInto("USERS", 587L)
                .d("PASSWORD", "\"Yr_geS7blUGR1\"")
                .d("USERNAME", "\"h1T9p9AYRdDp\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"f\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/654/pricetable/covers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/654/pricetable/covers"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/balance")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/balance"));
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/subscribe?" + 
                    "username=_EM_1720_XYZ_&" + 
                    "latitude=ZbFiNokVeGtvzs")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/admin/AdminController_77_newAdmin.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/admin/register'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"email\": \"b0MODSvskEfmX\", " + 
                    " \"id\": 159, " + 
                    " \"rolesSet\": [ " + 
                    " \"_EM_1722_XYZ_\", " + 
                    " \"_EM_1723_XYZ_\" " + 
                    " ], " + 
                    " \"username\": \"IvZ\" " + 
                    " } ")
                .post(baseUrlOfSut + "/admin/register")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/admin/AdminController_77_newAdmin
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/admin/register"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/admin/AdminController_77_newAdmin.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/admin/register'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"balance\": { " + 
                    " \"fractionalPart\": 343 " + 
                    " }, " + 
                    " \"email\": \"b0MODSvskEfmX\", " + 
                    " \"username\": \"IvZ\" " + 
                    " } ")
                .post(baseUrlOfSut + "/admin/register")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/admin/AdminController_77_newAdmin
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/admin/register"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 98, " + 
                    " \"priceA3DUPLEX\": \"D3R5JUl\", " + 
                    " \"priceA4DUPLEX\": \"BX1oWMolyvfluwA\", " + 
                    " \"supLim\": 843 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/654/pricetable/papers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/654/pricetable/papers"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA4SIMPLEX\": \"5RE44FGYm\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/654/pricetable/papers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/654/pricetable/papers"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/162/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/162/employees"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "MfII8NFzwWuT_KB")
                .post(baseUrlOfSut + "/printshops/162/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/162/employees"));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/consumer/info/update
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_213_putOnUpdateShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_151_updateConsumerInfo.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/info/update'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"latitude\": \"MLeMlV\", " + 
                    " \"longitude\": \"efYWjx\", " + 
                    " \"printingSchemas\": [ " + 
                    " {}, " + 
                    " {}, " + 
                    " {} " + 
                    " ], " + 
                    " \"balance\": { " + 
                    " \"currency\": \"6uBZ8zTsOgyyyOAf\", " + 
                    " \"fractionalPart\": 644 " + 
                    " }, " + 
                    " \"id\": 404, " + 
                    " \"username\": \"Vcit4GKHMdnIju\", " + 
                    " \"roles\": [ " + 
                    " \"PrJueVCS\" " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/consumer/info/update")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_151_updateConsumerInfo
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/consumer/info/update"));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/consumer/{username}/notifications
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_214_putOnNotificationsShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_234_readAllNotifications.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{username}/notifications'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/ZmXMHrA921FAd7U7/notifications")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_234_readAllNotifications
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/ZmXMHrA921FAd7U7/notifications"));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/consumer/info/update
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_215_putOnUpdateShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_134_updateConsumerInfo.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/info/update'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/info/update")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_134_updateConsumerInfo
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/info/update"));
    }
    
    
    /**
    * Calls:
    * 1 - (500) PUT:/consumer/info/update
    * 2 - (500) PUT:/consumer/info/update
    * Found 4 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_216_putOnUpdateShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_134_updateConsumerInfo.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/info/update'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/info/update")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_134_updateConsumerInfo
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/info/update"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_134_updateConsumerInfo.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/info/update'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/info/update")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_134_updateConsumerInfo
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/info/update"));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/consumer/info/update
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_217_putOnUpdateShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_151_updateConsumerInfo.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/info/update'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"xITM\", " + 
                    " \"email\": \"U64fHv\", " + 
                    " \"latitude\": \"MLeMlV\", " + 
                    " \"longitude\": \"efYWjx\", " + 
                    " \"printingSchemas\": [ " + 
                    " {}, " + 
                    " {}, " + 
                    " {}, " + 
                    " {} " + 
                    " ], " + 
                    " \"balance\": { " + 
                    " \"currency\": \"6uBZ8zTsOgyyyOAf\", " + 
                    " \"fractionalPart\": 644 " + 
                    " }, " + 
                    " \"id\": 404, " + 
                    " \"username\": \"joao\", " + 
                    " \"roles\": [] " + 
                    " } ")
                .put(baseUrlOfSut + "/consumer/info/update")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_151_updateConsumerInfo
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/consumer/info/update"));
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/consumer/{username}/notifications
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_218_deleteOnNotificationsShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_220_deleteAllNotifications.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{username}/notifications'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/consumer/ffWGJt2VK11urGr2/notifications?EMextraParam123=42")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_220_deleteAllNotifications
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/ffWGJt2VK11urGr2/notifications"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/requests/{id}
    */
    @Test @Timeout(60)
    public void test_219_getOnRequestReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/requests/577")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/{id}/pricetable
    */
    @Test @Timeout(60)
    public void test_220_getOnPricetableReturnsContentUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1120L)
                .d("ADDRESS", "\"xLhYi7NoJKcfvOj\"")
                .d("AVG_RATING", "0.2303657689895653")
                .d("BALANCE_CURRENCY", "\"DJ9wlZ8I5\"")
                .d("BALANCE_FRACTIONAL_PART", "193")
                .d("BALANCE_INTEGER_PART", "254")
                .d("LATITUDE", "0.9268522762562263")
                .d("LOGO", "\"SYmui\"")
                .d("LONGITUDE", "0.2833934194273461")
                .d("NAME", "\"oTC8Nboeeh0\"")
                .d("NIF", "\"qqVgVffKXc\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "Pf0Xj")
                .get(baseUrlOfSut + "/printshops/448/pricetable")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/{id}/pricetable
    */
    @Test @Timeout(60)
    public void test_221_getOnPricetableReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/616/pricetable?EMextraParam123=_EM_383_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/{printShopID}/employees
    */
    @Test @Timeout(60)
    public void test_222_getOnEmployeesReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/-2160121379020803912/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) PUT:/printshops/{id}/pricetable/covers
    * 2 - (200) PUT:/printshops/{id}/pricetable/covers
    * 3 - (200) POST:/printshops/{printShopID}/employees
    * 4 - (200) DELETE:/printshops/{printShopID}/employees/{employeeID}
    * 5 - (200) GET:/printshops/{id}/pricetable
    */
    @Test @Timeout(60)
    public void test_223_getOnPricetableReturnsContentUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 401L)
                .d("ADDRESS", "\"_kMR7LD\"")
                .d("AVG_RATING", "0.5008999415945338")
                .d("BALANCE_CURRENCY", "\"3XACZKV8\"")
                .d("BALANCE_FRACTIONAL_PART", "574")
                .d("BALANCE_INTEGER_PART", "0")
                .d("LATITUDE", "0.3334122407600587")
                .d("LOGO", "\"FbCwZxnhcMPu\"")
                .d("LONGITUDE", "0.6217520925596541")
                .d("NAME", "\"n\"")
                .d("NIF", "\"6o4\"")
            .and().insertInto("USERS", 422L)
                .d("PASSWORD", "\"vTVvMlMWqDs\"")
                .d("USERNAME", "\"_EM_1177_XYZ_\"")
            .and().insertInto("PRINTSHOPS", 421L)
                .d("ADDRESS", "\"0u4tOwtUsLZV3Fy\"")
                .d("AVG_RATING", "0.97680561")
                .d("BALANCE_CURRENCY", "\"w\"")
                .d("BALANCE_FRACTIONAL_PART", "20")
                .d("BALANCE_INTEGER_PART", "-2096782")
                .d("LATITUDE", "-0.8555683866146537")
                .d("LOGO", "\"0Sv8JQf6ko4C1\"")
                .d("LONGITUDE", "0.8991007905437608")
                .d("NAME", "\"ywxJ\"")
                .d("NIF", "\"\"")
            .and().insertInto("EMPLOYEES", 420L)
                .d("NAME", "\"pUi__RV7jKqUl7h2\"")
                .d("ID", "2")
                .d("PRINTSHOP_ID", "4")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"1YKo8Ls\", " + 
                    " \"priceA3\": \"eZI\", " + 
                    " \"priceA4\": \"G9q\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/-7413/pricetable/covers")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "hrivGiZi")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"NC7zlH4WQKvs\", " + 
                    " \"priceA3\": \"\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/-7413/pricetable/covers")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/241/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        String location_employees__1049 = res_2.extract().header("location");
        assertTrue(isValidURIorEmpty(location_employees__1049));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .delete(resolveLocation(location_employees__1049, baseUrlOfSut + "/printshops/241/employees/195"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/418/pricetable")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/printshops/{printShopID}/employees
    * 2 - (200) GET:/printshops/{printShopID}/employees
    */
    @Test @Timeout(60)
    public void test_224_getOnEmployeesReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/224/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/224/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/{id}/pricetable
    */
    @Test @Timeout(60)
    public void test_225_getOnPricetableReturnsContentUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 383L)
                .d("ADDRESS", "\"aWVpIy3I4Ncnqvv\"")
                .d("AVG_RATING", "0.3191825479916227")
                .d("BALANCE_CURRENCY", "\"Ga\"")
                .d("BALANCE_FRACTIONAL_PART", "649")
                .d("BALANCE_INTEGER_PART", "978")
                .d("LATITUDE", "0.36043465915986983")
                .d("LOGO", "\"TLDs_jhbE\"")
                .d("LONGITUDE", "0.984599431535264")
                .d("NAME", "\"rdjs5symSU_C26\"")
                .d("NIF", "\"Q5hzXn3IXYYb4IE_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "HTNLe0oOAZpb")
                .get(baseUrlOfSut + "/printshops/431/pricetable")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) GET:/printshops/history
    * 2 - (403) POST:/printshops/{id}/reviews
    * 3 - (403) POST:/printshops/{id}/pricetable/rings
    * 4 - (403) POST:/printshops/{id}/pricetable/rings
    * 5 - (404) GET:/documents/{id}
    * 6 - (403) POST:/printshops/{id}/pricetable/papers
    * 7 - (403) POST:/printshops/{id}/pricetable/papers
    * 8 - (200) POST:/printshops/requests/{id}
    * 9 - (200) GET:/printshops/requests/{id}
    * Found 5 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_226_getOnRequestReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1382L)
                .d("ADDRESS", "\"F\"")
                .d("AVG_RATING", "0.9728379037585096")
                .d("BALANCE_CURRENCY", "\"\"")
                .d("BALANCE_FRACTIONAL_PART", "58")
                .d("BALANCE_INTEGER_PART", "31")
                .d("LATITUDE", "0.38075383084470293")
                .d("LOGO", "\"DeV31af9fqh0\"")
                .d("LONGITUDE", "0.9799988888941629")
                .d("NAME", "\"zJQQ0Ei6P3w0vlik\"")
                .d("NIF", "\"jPFQc6eQAHbEe6gk\"")
            .and().insertInto("PRINTSHOPS", 1381L)
                .d("ADDRESS", "\"D2yzekht5\"")
                .d("AVG_RATING", "0.6987973851063877")
                .d("BALANCE_CURRENCY", "\"1\"")
                .d("BALANCE_FRACTIONAL_PART", "499816253")
                .d("BALANCE_INTEGER_PART", "313")
                .d("LATITUDE", "0.8634929877449754")
                .d("LOGO", "\"EZS\"")
                .d("LONGITUDE", "0.18210496944401533")
                .d("NAME", "\"IDSXJwxJ2zUC\"")
                .d("NIF", "\"qzrms2eqPPDuEpx\"")
            .and().insertInto("USERS", 1380L)
                .d("PASSWORD", "\"Cy7phQKnBDDn\"")
                .d("USERNAME", "\"pGfSBKLMozKwpi\"")
            .and().insertInto("CONSUMERS", 1379L)
                .d("BALANCE_CURRENCY", "\"ThTOjqj0MLZoY7\"")
                .d("BALANCE_FRACTIONAL_PART", "752")
                .d("BALANCE_INTEGER_PART", "364")
                .d("NAME", "\"ZgfmcZ5HwNY\"")
                .d("ID", "6")
            .and().insertInto("USERS", 1378L)
                .d("PASSWORD", "\"\"")
                .d("USERNAME", "\"s\"")
            .and().insertInto("CONSUMERS", 1377L)
                .d("BALANCE_CURRENCY", "\"PMVOYx\"")
                .d("BALANCE_FRACTIONAL_PART", "757")
                .d("BALANCE_INTEGER_PART", "86")
                .d("NAME", "\"E\"")
                .d("ID", "1")
            .and().insertInto("PRINT_REQUESTS", 1376L)
                .d("ARRIVAL", "\"1912-06-15 01:24:52\"")
                .d("COST", "0.6891474214832749")
                .d("DELIVERED", "NULL")
                .d("EMPATTENDED", "\"\"")
                .d("EMPDELIVERED", "NULL")
                .d("FINISHED", "NULL")
                .d("PAYPAL_SALE_ID", "NULL")
                .d("PAYMENT_TYPE", "\"Bk0legApxP\"")
                .d("STATUS", "NULL")
                .d("CONSUMER_ID", "NULL")
                .d("PRINTSHOP_ID", "NULL")
                .d("PRINTSHOP", "NULL")
                .d("CONSUMER", "NULL")
            .and().insertInto("PRINTSHOPS", 1390L)
                .d("ADDRESS", "\"mAFLkV67f4Lw\"")
                .d("AVG_RATING", "0.8304608103758092")
                .d("BALANCE_CURRENCY", "\"vib3W_Z\"")
                .d("BALANCE_FRACTIONAL_PART", "759")
                .d("BALANCE_INTEGER_PART", "917")
                .d("LATITUDE", "0.614841074973813")
                .d("LOGO", "\"Jq6KyLG\"")
                .d("LONGITUDE", "0.9117660080487873")
                .d("NAME", "\"H9g0juard0iswK8\"")
                .d("NIF", "\"nWml3vVy9ySV7q\"")
            .and().insertInto("PRINTSHOPS", 1389L)
                .d("ADDRESS", "\"_yap_gyQj8DIXwY\"")
                .d("AVG_RATING", "0.6181457448828008")
                .d("BALANCE_CURRENCY", "\"f6Uq3rWAETtXD3\"")
                .d("BALANCE_FRACTIONAL_PART", "592")
                .d("BALANCE_INTEGER_PART", "250")
                .d("LATITUDE", "0.024514262631821104")
                .d("LOGO", "\"2\"")
                .d("LONGITUDE", "0.8061297581724252")
                .d("NAME", "\"kW_OpvSkoDx1f\"")
                .d("NIF", "\"fZ6o_Yfi_N\"")
            .and().insertInto("USERS", 1388L)
                .d("PASSWORD", "\"TRZ40aQfs_fIq\"")
                .d("USERNAME", "\"TyDGwLqIVcFK1aHP\"")
            .and().insertInto("CONSUMERS", 1387L)
                .d("BALANCE_CURRENCY", "\"a9mAX1uf\"")
                .d("BALANCE_FRACTIONAL_PART", "404")
                .d("BALANCE_INTEGER_PART", "313")
                .d("NAME", "\"lB9LY2VoRA\"")
                .d("ID", "18")
            .and().insertInto("USERS", 1386L)
                .d("PASSWORD", "\"S\"")
                .d("USERNAME", "\"2cMPunz\"")
            .and().insertInto("CONSUMERS", 1385L)
                .d("BALANCE_CURRENCY", "\"IwVDlUiEoYXy0f\"")
                .d("BALANCE_FRACTIONAL_PART", "123")
                .d("BALANCE_INTEGER_PART", "695")
                .d("NAME", "\"rUXdS837UB\"")
                .r("ID", 1388L)
            .and().insertInto("PRINT_REQUESTS", 1384L)
                .d("COST", "0.9599820752444819")
            .and().insertInto("DOCUMENTS", 1383L)
                .d("FILE_NAME", "\"iStnhSUBZ5Vy\"")
                .d("TOTAL_PAGES", "430")
                .d("PRINT_REQUEST_ID", "NULL")
            .and().insertInto("PRINTSHOPS", 1254L)
                .d("ADDRESS", "\"XjjWDVL2z3NI\"")
                .d("AVG_RATING", "0.5745094860990534")
                .d("BALANCE_CURRENCY", "\"dVb\"")
                .d("BALANCE_FRACTIONAL_PART", "181")
                .d("BALANCE_INTEGER_PART", "-599302740")
                .d("LATITUDE", "0.6555818114574555")
                .d("LOGO", "\"OODKTF\"")
                .d("LONGITUDE", "0.479248805538358")
                .d("NAME", "\"nr7MoH9rcq\"")
                .d("NIF", "\"mCITITlbdMQrEDsv\"")
            .and().insertInto("USERS", 1260L)
                .d("PASSWORD", "\"WUeaYicVPXY6rUl8\"")
                .d("USERNAME", "\"_EM_3165_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "YtodfO")
                .get(baseUrlOfSut + "/printshops/history")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"historyrequests\":[],\"success\":true}"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/printshops/24/reviews")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/24/reviews"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"price\": \"66\", " + 
                    " \"supLim\": 55 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/24/pricetable/rings")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/24/pricetable/rings"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 870, " + 
                    " \"price\": \"TugbKAwN2Hei\", " + 
                    " \"ringType\": \"y\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/24/pricetable/rings")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/24/pricetable/rings"));
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "YtodfO")
                .get(baseUrlOfSut + "/documents/24")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"4Y62LnwmtroDil\", " + 
                    " \"priceA4DUPLEX\": \"UlsU\", " + 
                    " \"supLim\": 791 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/24/pricetable/papers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/24/pricetable/papers"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "YtodfO")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"Rzvw\", " + 
                    " \"priceA4SIMPLEX\": \"0\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/24/pricetable/papers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/24/pricetable/papers"));
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/printshops/requests/-933915984?EMextraParam123=_EM_9_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "42")
                .header("X-Requested-With", "")
                .get(baseUrlOfSut + "/printshops/requests/-933915984")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/{printShopID}/employees
    */
    @Test @Timeout(60)
    public void test_227_postOnEmployeesReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/202628968/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/requests/{id}
    */
    @Test @Timeout(60)
    public void test_228_postOnRequestReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/requests/5695213351942386951")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/request/accept/{id}
    */
    @Test @Timeout(60)
    public void test_229_postOnAcceptReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/request/accept/49?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/request/accept/{id}
    */
    @Test @Timeout(60)
    public void test_230_postOnAcceptReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("REGISTER_REQUESTS", 1693L)
                .d("ACCEPTED", "true")
                .d("MANAGER_EMAIL", "\"uQLgr\"")
                .d("MANAGER_NAME", "\"w3OwZIK\"")
                .d("MANAGER_PASSWORD", "\"D\"")
                .d("MANAGER_USERNAME", "\"SlCj2FPGBu\"")
                .d("PSHOP_ADDRESS", "\"A6K6zDD5uU\"")
                .d("PSHOP_DATE_REQUEST", "\"PHlij2v5PU\"")
                .d("PSHOP_DATE_REQUEST_ACCEPTED", "\"QEQ7nkfvxI7mb2y\"")
                .d("PSHOP_LATITUDE", "-0.061656485051923116")
                .d("PSHOP_LONGITUDE", "0.5334277031537773")
                .d("PSHOP_NIF", "\"FKG\"")
                .d("PSHOP_NAME", "\"k6mY7saKsS\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/request/accept/-79")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/request/reject/{printRequestID}
    */
    @Test @Timeout(60)
    public void test_231_postOnRejectReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" _EM_276_XYZ_ ")
                .post(baseUrlOfSut + "/request/reject/768?EMextraParam123=_EM_277_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/{printShopID}/employees
    */
    @Test @Timeout(60)
    public void test_232_postOnEmployeesReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/273/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/printshops/{printShopID}/employees
    * 2 - (200) POST:/printshops/{printShopID}/employees
    */
    @Test @Timeout(60)
    public void test_233_postOnEmployeesReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/410/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/410/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) GET:/printshops/nearest
    * 2 - (403) POST:/printshops/{id}/pricetable/covers
    * 3 - (403) POST:/printshops/{id}/pricetable/rings
    * 4 - (403) POST:/printshops/requests/cancel/{id}
    * 5 - (403) POST:/printshops/requests/cancel/{id}
    * 6 - (403) PUT:/printshops/{printShopID}/employees
    * 7 - (403) POST:/request/accept/{id}
    * Found 6 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_234_postOnAcceptReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 443L)
                .d("ADDRESS", "\"mksokNN\"")
                .d("AVG_RATING", "0.47847482901924965")
                .d("BALANCE_CURRENCY", "\"12Sy1rEHf\"")
                .d("BALANCE_FRACTIONAL_PART", "726")
                .d("BALANCE_INTEGER_PART", "981")
                .d("LATITUDE", "0.49728103993054473")
                .d("LOGO", "\"_EM_1265_XYZ_\"")
                .d("LONGITUDE", "0.6833440743157649")
                .d("NAME", "\"qGj_LZMCKQHcAaD1\"")
                .d("NIF", "\"_EM_1266_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/nearest?longitude=0.6833440743157649")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"nkYt7\", " + 
                    " \"priceA4\": \"_EM_1267_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/-1201129976/pricetable/covers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-1201129976/pricetable/covers"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 32 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/-1201129976/pricetable/rings")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-1201129976/pricetable/rings"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"-1201129976\" ")
                .post(baseUrlOfSut + "/printshops/requests/cancel/-1201129976")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/requests/cancel/-1201129976"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" _EM_1269_XYZ_ ")
                .post(baseUrlOfSut + "/printshops/requests/cancel/-1201129976")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/requests/cancel/-1201129976"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/printshops/33/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/33/employees"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/request/accept/-1201129976")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/request/accept/-1201129976"));
    }
    
    
    /**
    * Calls:
    * 1 - (403) POST:/printshops/requests/cancel/{id}
    * 2 - (400) POST:/printshops/requests/cancel/{id}
    * 3 - (403) DELETE:/consumer/requests/cancel/{id}
    * 4 - (200) GET:/requests/pending
    * 5 - (403) GET:/printshops/stats
    * 6 - (200) POST:/request/accept/{id}
    * 7 - (200) POST:/request/accept/{id}
    * 8 - (403) POST:/printshops/{id}/pricetable/deletecover
    * 9 - (403) POST:/consumer/{consumerID}/printingschemas
    * Found 7 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_235_postOnPrintingschemasReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 517L)
                .d("ADDRESS", "\"lBCCWIEWz\"")
                .d("AVG_RATING", "0.859506440209461")
                .d("BALANCE_CURRENCY", "\"DMbp0YREXIM\"")
                .d("BALANCE_FRACTIONAL_PART", "398")
                .d("BALANCE_INTEGER_PART", "165")
                .d("LATITUDE", "0.09494481436125157")
                .d("LOGO", "\"_EM_1410_XYZ_\"")
                .d("LONGITUDE", "0.8171682706741005")
                .d("NAME", "\"_EM_1411_XYZ_\"")
                .d("NIF", "\"aBHIv\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" 579 ")
                .post(baseUrlOfSut + "/printshops/requests/cancel/579")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/requests/cancel/579"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/printshops/requests/cancel/{id}'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .post(baseUrlOfSut + "/printshops/requests/cancel/579")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.http.converter.HttpMessageNotReadableException"))
                .body("'message'", containsString("Required request body is missing: public java.lang.String io.github.proxyprint.kitchen.controllers.printshops.PrintShopController.cancelPrintShopRequests(long,java.security.Principal,java.lang.String) throws java.io.IOException"))
                .body("'path'", containsString("/printshops/requests/cancel/579"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "579")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/579?" + 
                    "password=1234&" + 
                    "username=ana")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/requests/cancel/579"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/0/pShopDateRequestAccepted'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/requests/pending")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'managerName'", containsString("Jorge Caldas"))
                .body("[0].'managerUsername'", containsString("jcaldas"))
                .body("[0].'managerEmail'", containsString("proxyprint.pt.printshop@gmail.com"))
                .body("[0].'managerPassword'", containsString("1234"))
                .body("[0].'pShopAddress'", containsString("Rua das Cruzes n31"))
                .body("[0].'pShopLatitude'", numberMatches(43.221))
                .body("[0].'pShopLongitude'", numberMatches(41.121))
                .body("[0].'pShopNIF'", containsString("124555321"))
                .body("[0].'pShopName'", containsString("Printer Style"))
                .body("[0].'pShopDateRequest'", containsString("04/09/2025 05:12"))
                .body("[0].'pShopDateRequestAccepted'", nullValue())
                .body("[1].'managerName'", containsString("Martim da Silva"))
                .body("[1].'managerUsername'", containsString("msilva"))
                .body("[1].'managerEmail'", containsString("proxyprint.pt.printshop@gmail.com"))
                .body("[1].'managerPassword'", containsString("1234"))
                .body("[1].'pShopAddress'", containsString("Rua das Cruzes n32"))
                .body("[1].'pShopLatitude'", numberMatches(43.221))
                .body("[1].'pShopLongitude'", numberMatches(41.121))
                .body("[1].'pShopNIF'", containsString("124555321"))
                .body("[1].'pShopName'", containsString("Print More"))
                .body("[1].'pShopDateRequest'", containsString("04/09/2025 05:12"))
                .body("[1].'pShopDateRequestAccepted'", nullValue())
                .body("[2].'managerName'", containsString("Carlos Pinto"))
                .body("[2].'managerUsername'", containsString("cpin"))
                .body("[2].'managerEmail'", containsString("proxyprint.pt.printshop@gmail.com"))
                .body("[2].'managerPassword'", containsString("1234"))
                .body("[2].'pShopAddress'", containsString("Rua n33"))
                .body("[2].'pShopLatitude'", numberMatches(43.221))
                .body("[2].'pShopLongitude'", numberMatches(41.121))
                .body("[2].'pShopNIF'", containsString("124555321"))
                .body("[2].'pShopName'", containsString("Papelaria Pinto"))
                .body("[2].'pShopDateRequest'", containsString("04/09/2025 05:12"))
                .body("[2].'pShopDateRequestAccepted'", nullValue())
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/stats")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/stats"));
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/request/accept/579")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/request/accept/579")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"_EM_1412_XYZ_\", " + 
                    " \"priceA3\": \"Mfzl\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/579/pricetable/deletecover")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/579/pricetable/deletecover"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 956, " + 
                    " \"name\": \"_EM_1413_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/47/printingschemas")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/47/printingschemas"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/printshops/{printShopID}/employees
    * 2 - (200) POST:/printshops/{printShopID}/employees
    */
    @Test @Timeout(60)
    public void test_236_postOnEmployeesReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 826L)
                .d("PASSWORD", "\"_EM_2499_XYZ_\"")
                .d("USERNAME", "\"kjlpIPOi2d9fBAml\"")
            .and().insertInto("PRINTSHOPS", 825L)
                .d("ADDRESS", "\"X8a8\"")
                .d("AVG_RATING", "0.725109237330893")
                .d("BALANCE_CURRENCY", "\"Aza\"")
                .d("BALANCE_FRACTIONAL_PART", "519")
                .d("BALANCE_INTEGER_PART", "592")
                .d("LATITUDE", "0.9724043792184137")
                .d("LOGO", "\"v_xhcRYqL8\"")
                .d("LONGITUDE", "0.49075055755926666")
                .d("NAME", "\"ppOrLVisM3SzBax\"")
                .d("NIF", "\"5c_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/231194131/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/231194131/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/printshops/{printShopID}/employees
    */
    @Test @Timeout(60)
    public void test_237_putOnEmployeesReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/printshops/736/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/login
    * 2 - (403) PUT:/consumer/info/update
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_238_putOnUpdateReturnsMismatchResponseWithSchema() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("x-requested-with", "E")
                .post(baseUrlOfSut + "/login?username=_EM_2249_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "Gcnr")
                .put(baseUrlOfSut + "/consumer/info/update")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/info/update"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) GET:/printshops/{id}/pricetable
    * 2 - (200) POST:/printshops/{printShopID}/employees
    * 3 - (200) PUT:/printshops/{printShopID}/employees
    */
    @Test @Timeout(60)
    public void test_239_putOnEmployeesReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 376L)
                .d("ADDRESS", "\"zXXthXmRt5\"")
                .d("AVG_RATING", "0.5599298238439058")
                .d("BALANCE_CURRENCY", "\"KMI9UoQ\"")
                .d("BALANCE_FRACTIONAL_PART", "368")
                .d("BALANCE_INTEGER_PART", "309")
                .d("LATITUDE", "0.822895730538099")
                .d("LOGO", "\"_EM_1111_XYZ_\"")
                .d("LONGITUDE", "0.6007339514073545")
                .d("NAME", "\"3iT6_hkcaYj\"")
                .d("NIF", "\"RZcrLK2iNez\"")
            .and().insertInto("USERS", 379L)
                .d("PASSWORD", "\"_EM_1112_XYZ_\"")
                .d("USERNAME", "\"_EM_1113_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "ib")
                .get(baseUrlOfSut + "/printshops/633/pricetable")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/-1329662959/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/printshops/-1329662959/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * 1 - (404) GET:/printshops/{id}
    * 2 - (200) PUT:/printshops/{printShopID}/pricetable/editstapling
    * 3 - (200) PUT:/printshops/{printShopID}/pricetable/editstapling
    * 4 - (200) PUT:/printshops/{id}/pricetable/covers
    * 5 - (200) PUT:/printshops/{id}/pricetable/covers
    * 6 - (200) POST:/printshops/{printShopID}/employees
    * 7 - (200) DELETE:/printshops/{printShopID}/employees/{employeeID}
    * 8 - (403) PUT:/consumer/info/update
    * 9 - (403) PUT:/consumer/info/update
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_240_putOnUpdateReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 401L)
                .d("ADDRESS", "\"ckMRUUD\"")
                .d("AVG_RATING", "0.5008999415945338")
                .d("BALANCE_CURRENCY", "\"3XACZKV\"")
                .d("BALANCE_FRACTIONAL_PART", "574")
                .d("BALANCE_INTEGER_PART", "0")
                .d("LATITUDE", "0.3334122407600587")
                .d("LOGO", "\"FbCwZxnhcMPu\"")
                .d("LONGITUDE", "0.6217520925596541")
                .d("NAME", "\"n\"")
                .d("NIF", "\"6o4\"")
            .and().insertInto("USERS", 422L)
                .d("PASSWORD", "\"vTVvMlMWqDs\"")
                .d("USERNAME", "\"_EM_1177_XYZ_\"")
            .and().insertInto("PRINTSHOPS", 421L)
                .d("ADDRESS", "\"0u4tOwtUsLZV3Fy\"")
                .d("AVG_RATING", "0.97680561")
                .d("BALANCE_CURRENCY", "\"U\"")
                .d("BALANCE_FRACTIONAL_PART", "20")
                .d("BALANCE_INTEGER_PART", "-2096782")
                .d("LATITUDE", "-0.8555683866146537")
                .d("LOGO", "\"0Sv8JQf6ko4C1\"")
                .d("LONGITUDE", "0.0")
                .d("NAME", "\"yUxJ\"")
                .d("NIF", "\"\"")
            .and().insertInto("EMPLOYEES", 420L)
                .d("NAME", "\"pUi__RV7jKqUl7h2\"")
                .d("ID", "2")
                .d("PRINTSHOP_ID", "4")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/223")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"-1174\" ")
                .put(baseUrlOfSut + "/printshops/-1174/pricetable/editstapling")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "-1174")
                .contentType("application/json")
                .body(" fis7ZGY0VP1_Q ")
                .put(baseUrlOfSut + "/printshops/-1174/pricetable/editstapling")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"1YKo8Ls\", " + 
                    " \"priceA3\": \"eZI\", " + 
                    " \"priceA4\": \"G9q\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/223/pricetable/covers")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "-1174")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"NC7zlH4WQKvs\", " + 
                    " \"priceA3\": \"\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/223/pricetable/covers")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        ValidatableResponse res_5 = given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/-1174/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        String location_employees__1049 = res_5.extract().header("location");
        assertTrue(isValidURIorEmpty(location_employees__1049));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .delete(resolveLocation(location_employees__1049, baseUrlOfSut + "/printshops/-1174/employees/195"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/info/update")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/info/update"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/info/update")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/info/update"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/consumer/{consumerID}/printingschemas
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_241_getOnPrintingschemasReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/consumer/-8844132730688841297/printingschemas?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/-8844132730688841297/printingschemas"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/printshops/requests/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_242_getOnRequestReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printshops/requests/741503441?EMextraParam123=_EM_9_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/requests/741503441"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/printshops/{id}/pricetable
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_243_getOnPricetableReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_918_XYZ_")
                .get(baseUrlOfSut + "/printshops/6057747152094821123/pricetable")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/6057747152094821123/pricetable"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/printshops/{id}/reviews
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_244_getOnPrintshopReviewsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printshops/676/reviews")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/676/reviews"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/printshops/{printShopID}/employees
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_245_getOnEmployeesReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_12_XYZ_")
                .get(baseUrlOfSut + "/printshops/578/employees")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/578/employees"));
    }
    
    
    /**
    * Calls:
    * 1 - (401) POST:/consumer/{consumerID}/printingschemas
    * 2 - (401) POST:/consumer/{consumerID}/printingschemas
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_246_postOnPrintingschemasReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"_EM_174_XYZ_\", " + 
                    " \"coverSpecs\": \"_EM_175_XYZ_\", " + 
                    " \"deleted\": false, " + 
                    " \"paperSpecs\": \"6xnc7uln_iy5Sj\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/-1597284897655044132/printingschemas?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/-1597284897655044132/printingschemas"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverSpecs\": \"_EM_177_XYZ_\", " + 
                    " \"id\": -1597284897655044132, " + 
                    " \"paperSpecs\": \"jj8q8\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/-1597284897655044132/printingschemas?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/-1597284897655044132/printingschemas"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/consumer/{consumerID}/printingschemas
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_247_postOnPrintingschemasReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_59_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"_EM_55_XYZ_\", " + 
                    " \"coverSpecs\": \"hdrUl9oz13WTPa0\", " + 
                    " \"name\": \"_EM_56_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/158/printingschemas")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/158/printingschemas"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/printdocument/{id}/budget
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_248_postOnBudgetReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_62_XYZ_")
                .post(baseUrlOfSut + "/printdocument/-399630480/budget?EMextraParam123=_EM_61_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printdocument/-399630480/budget"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/printshops/requests/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_249_postOnRequestReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/requests/875")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/requests/875"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/printshops/{id}/reviews
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_250_postOnPrintshopReviewsWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"_EM_64_XYZ_\": \"_EM_65_XYZ_\", " + 
                    " \"PUFjDa7Ixen8V2\": \"dbAf9w\", " + 
                    " \"_EM_66_XYZ_\": \"_EM_67_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/627/reviews?EMextraParam123=_EM_68_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/627/reviews"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/printshops/{printShopID}/employees
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_251_postOnPrintshopEmployeesWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/309/employees?EMextraParam123=_EM_70_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/309/employees"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/request/accept/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_252_postOnAcceptReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/request/accept/-2027093575")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/request/accept/-2027093575"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/request/reject/{printRequestID}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_253_postOnRejectReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_75_XYZ_")
                .contentType("application/json")
                .body(" _EM_74_XYZ_ ")
                .post(baseUrlOfSut + "/request/reject/11")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/request/reject/11"));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/consumer/info/update
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_254_putOnUpdateReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_114_XYZ_")
                .put(baseUrlOfSut + "/consumer/info/update")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/info/update"));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/consumer/{username}/notifications
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_255_putOnNotificationsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_117_XYZ_")
                .put(baseUrlOfSut + "/consumer/_EM_115_XYZ_/notifications")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/_EM_115_XYZ_/notifications"));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/printshops/{printShopID}/employees
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_256_putOnEmployeesReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_118_XYZ_")
                .put(baseUrlOfSut + "/printshops/873/employees")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/873/employees"));
    }
    
    
    /**
    * Calls:
    * (401) DELETE:/consumer/{username}/notifications
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_257_deleteOnConsumNotificationsWithQueryParam() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/_EM_7_XYZ_/notifications?EMextraParam123=_EM_8_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/_EM_7_XYZ_/notifications"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/{consumerID}/printingschemas
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_258_getOnPrintingschemasReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 814L)
                .d("ADDRESS", "\"Y\"")
                .d("AVG_RATING", "0.5099236466211361")
                .d("BALANCE_CURRENCY", "\"6gm8grM\"")
                .d("BALANCE_FRACTIONAL_PART", "560")
                .d("BALANCE_INTEGER_PART", "90")
                .d("LATITUDE", "0.5192016292764171")
                .d("LOGO", "\"\"")
                .d("LONGITUDE", "0.19185129569771564")
                .d("NAME", "\"l9w_vc\"")
                .d("NIF", "\"xYCK9Qs\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/514/printingschemas?username=afOvo")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/514/printingschemas"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/{consumerID}/printingschemas
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_259_getOnPrintingschemasReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/783/printingschemas?password=_EM_2251_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/783/printingschemas"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/requests/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_260_getOnPrintshopsRequestReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/requests/509")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/requests/509"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/{id}/pricetable
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_261_getOnPricetableReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1393L)
                .d("PASSWORD", "\"itF42rRXh8y\"")
                .d("USERNAME", "\"qiAxh48etKA\"")
            .and().insertInto("PRINTSHOPS", 1392L)
                .d("ADDRESS", "\"lRZbrzJBVw\"")
                .d("AVG_RATING", "0.3528939251821258")
                .d("BALANCE_CURRENCY", "\"sLh3QBkTZ4tQSqT3\"")
                .d("BALANCE_FRACTIONAL_PART", "893")
                .d("BALANCE_INTEGER_PART", "406")
                .d("LATITUDE", "0.2180101167712628")
                .d("LOGO", "\"kcnoe8r\"")
                .d("LONGITUDE", "0.7058234983403965")
                .d("NAME", "\"HxUXZ\"")
                .d("NIF", "\"nQod7sCk8BDggY\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/990/pricetable")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/990/pricetable"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/{id}/reviews
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_262_getOnPrintshopReviewsWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/1878246193/reviews?EMextraParam123=_EM_216_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/1878246193/reviews"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/{printShopID}/employees
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_263_getOnPrintshopEmployeesWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printshops/369/employees?EMextraParam123=_EM_217_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/369/employees"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/{id}/pricetable
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_264_getOnPricetableReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/850969058/pricetable")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/850969058/pricetable"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/requests/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_265_getOnRequestReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "_EM_382_XYZ_")
                .get(baseUrlOfSut + "/printshops/requests/978?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/requests/978"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/{printShopID}/employees
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_266_getOnEmployeesReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "_EM_385_XYZ_")
                .get(baseUrlOfSut + "/printshops/859/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/859/employees"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/{consumerID}/printingschemas
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_267_getOnConsumPrintingschemasReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/0/printingschemas")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/0/printingschemas"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/{printShopID}/employees
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_268_getOnEmployeesReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/393/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/393/employees"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/{id}/pricetable
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_269_getOnPrintshopPricetableWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "p9kg7C58")
                .get(baseUrlOfSut + "/printshops/-1547886012/pricetable?EMextraParam123=_EM_10_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-1547886012/pricetable"));
    }
    
    
    /**
    * Calls:
    * 1 - (403) GET:/printshops/{id}/reviews
    * 2 - (404) GET:/printshops/{id}/reviews
    * Found 2 potential faults. Type-codes: 101, 204
    */
    @Test @Timeout(60)
    public void test_270_getOnReviewsShowsFaults_101_204() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/1878246193/reviews?EMextraParam123=_EM_216_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/1878246193/reviews"));
        
        // Fault204. Leakage Information Existence of Protected Resource. null.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printshops/912/reviews")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{printShopID}/employees
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_271_postOnEmployeesReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/-8949509872776728222/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-8949509872776728222/employees"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{printShopID}/employees
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_272_postOnEmployeesReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/588/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/588/employees"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/consumer/{consumerID}/printingschemas
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_273_postOnPrintingschemasReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"_EM_584_XYZ_\", " + 
                    " \"coverSpecs\": \"_EM_585_XYZ_\", " + 
                    " \"deleted\": true, " + 
                    " \"name\": \"_EM_586_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/7107035665950496059/printingschemas")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/7107035665950496059/printingschemas"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/consumer/{consumerID}/printingschemas
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_274_postOnPrintingschemasReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"WuhcceZOPex\", " + 
                    " \"paperSpecs\": \"eqAsa5rgGrs\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/22/printingschemas?EMextraParam123=_EM_269_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/22/printingschemas"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printdocument/{id}/budget
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_275_postOnBudgetReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/printdocument/258/budget?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printdocument/258/budget"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/requests/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_276_postOnRequestReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/requests/812")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/requests/812"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/reviews
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_277_postOnReviewsReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 829L)
                .d("ADDRESS", "\"iHwhk2G\"")
                .d("AVG_RATING", "0.6920562819701865")
                .d("BALANCE_CURRENCY", "\"MgQUTGR\"")
                .d("BALANCE_FRACTIONAL_PART", "435")
                .d("BALANCE_INTEGER_PART", "515")
                .d("LATITUDE", "0.20198551598058623")
                .d("LOGO", "\"YpMZ\"")
                .d("LONGITUDE", "0.45549412504242714")
                .d("NAME", "\"6\"")
                .d("NIF", "\"GnC_GEIqwCCk96_h\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"TSFC5tm\": \"XWXETW\", " + 
                    " \"atuc5Pef1nPvp8\": \"7yCRRglWUUk7\", " + 
                    " \"9afWBzC_\": \"\", " + 
                    " \"898qRP\": \"Cs_B42YGhy5Dx9\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/-830958845/reviews")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-830958845/reviews"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/request/accept/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_278_postOnRequestAcceptWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "_EM_441_XYZ_")
                .post(baseUrlOfSut + "/request/accept/349?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/request/accept/349"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/request/reject/{printRequestID}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_279_postOnRequestRejectWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"740\" ")
                .post(baseUrlOfSut + "/request/reject/740?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/request/reject/740"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/reviews
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_280_postOnReviewsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"M\": \"VCf\", " + 
                    " \"9w\": \"_EM_273_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/939/reviews")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/939/reviews"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/requests/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_281_postOnRequestReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/printshops/requests/684")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/requests/684"));
    }
    
    
    /**
    * Calls:
    * 1 - (403) POST:/printshops/requests/{id}
    * 2 - (403) POST:/printshops/requests/{id}
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_282_postOnRequestReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/requests/-2999672824417492955")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/requests/-2999672824417492955"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/requests/-2999672824417492955")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/requests/-2999672824417492955"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printdocument/{id}/budget
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_283_postOnBudgetReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printdocument/19/budget")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printdocument/19/budget"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/reviews
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_284_postOnReviewsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"_EM_595_XYZ_\": \"\", " + 
                    " \"eBlNu_ceM3OOXzw\": \"_EM_596_XYZ_\", " + 
                    " \"_EM_597_XYZ_\": \"WUY6bHueet\", " + 
                    " \"_EM_598_XYZ_\": \"_EM_599_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/621/reviews")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/621/reviews"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/request/accept/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_285_postOnAcceptReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/request/accept/547")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/request/accept/547"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/request/reject/{printRequestID}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_286_postOnRejectReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" 449 ")
                .post(baseUrlOfSut + "/request/reject/449")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/request/reject/449"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/consumer/{consumerID}/printingschemas
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_287_postOnPrintingschemasReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverSpecs\": \"_EM_750_XYZ_\", " + 
                    " \"deleted\": false, " + 
                    " \"id\": 8438733257027012521 " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/8438733257027012521/printingschemas")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/8438733257027012521/printingschemas"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printdocument/{id}/budget
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_288_postOnBudgetReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printdocument/850/budget")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printdocument/850/budget"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{printShopID}/employees
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_289_postOnEmployeesReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/133/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/133/employees"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/request/accept/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_290_postOnAcceptReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/request/accept/848")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/request/accept/848"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/request/reject/{printRequestID}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_291_postOnRejectReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"285\" ")
                .post(baseUrlOfSut + "/request/reject/285")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/request/reject/285"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{printShopID}/employees
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_292_putOnEmployeesReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/printshops/582/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/582/employees"));
    }
    
    
    /**
    * Calls:
    * 1 - (403) POST:/printshops/{printShopID}/employees
    * 2 - (403) PUT:/printshops/{printShopID}/employees
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_293_putOnEmployeesReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/-958707854/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-958707854/employees"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/printshops/-958707854/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-958707854/employees"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{printShopID}/employees
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_294_putOnEmployeesReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/printshops/2136987251/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/2136987251/employees"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/consumer/info/update
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_295_putOnInfoUpdateWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "42")
                .put(baseUrlOfSut + "/consumer/info/update?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/info/update"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/consumer/info/update
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_296_putOnUpdateReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/info/update")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/info/update"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/consumer/{username}/notifications
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_297_putOnConsumNotificationsWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "42")
                .put(baseUrlOfSut + "/consumer/MlQvEQwZJbW7Eiyc/notifications?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/MlQvEQwZJbW7Eiyc/notifications"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/consumer/{username}/notifications
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_298_putOnNotificationsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/_EM_639_XYZ_/notifications")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/_EM_639_XYZ_/notifications"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/consumer/info/update
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_299_putOnUpdateReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/info/update")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/info/update"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/consumer/{username}/notifications
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_300_putOnNotificationsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/H3uV3yeUmls/notifications")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/H3uV3yeUmls/notifications"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{printShopID}/employees
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_301_putOnEmployeesReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/printshops/1865257426190379098/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/1865257426190379098/employees"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/consumer/{username}/notifications
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_302_deleteOnNotificationsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/_EM_212_XYZ_/notifications")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/_EM_212_XYZ_/notifications"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/consumer/{username}/notifications
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_303_deleteOnNotificationsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/J6f/notifications")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/J6f/notifications"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/consumer/{username}/notifications
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_304_deleteOnNotificationsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/Wx/notifications")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/Wx/notifications"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/printshops/{id}/reviews
    */
    @Test @Timeout(60)
    public void test_305_getOnReviewsReturns404() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printshops/912/reviews")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/printshops/{id}/reviews
    */
    @Test @Timeout(60)
    public void test_306_getOnReviewsReturns404() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/-222181870/reviews")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) POST:/printshops/{id}/reviews
    */
    @Test @Timeout(60)
    public void test_307_postOnReviewsReturns404() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"_EM_436_XYZ_\": \"mW\", " + 
                    " \"_EM_437_XYZ_\": \"_EM_438_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/1968779087/reviews?EMextraParam123=_EM_439_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (500) POST:/consumer/printrequest/{printRequestID}/submit
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_308_postOnSubmitShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_210_finishAndSubmitPrintRequest.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/printrequest/{printRequestID}/submit'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "_EM_407_XYZ_")
                .post(baseUrlOfSut + "/consumer/printrequest/603/submit?EMextraParam123=_EM_406_XYZ_")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_210_finishAndSubmitPrintRequest
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/printrequest/603/submit"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/paypal/ipn/consumer/{consumerID}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_309_postOnIpnConsumShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/paypal/ipn/consumer/{consumerID}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/paypal/ipn/consumer/-485556499")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/paypal/ipn/consumer/-485556499"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/paypal/ipn/consumer/{consumerID}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_310_postOnConsumShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/paypal/ipn/consumer/{consumerID}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/paypal/ipn/consumer/120?EMextraParam123=_EM_35_XYZ_")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/paypal/ipn/consumer/120"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) GET:/consumer/balance
    * 2 - (500) GET:/consumer/satisfied
    * 3 - (500) POST:/consumer/{consumerID}/printingschemas
    * 4 - (500) GET:/consumer/{consumerID}/printingschemas
    * 5 - (500) DELETE:/consumer/requests/cancel/{id}
    * 6 - (403) POST:/printshops/{printShopID}/employees
    * 7 - (403) PUT:/printshops/{printShopID}/employees
    * 8 - (404) POST:/consumer/subscribe
    * 9 - (500) POST:/paypal/ipn/consumer/{consumerID}
    * 10 - (500) POST:/paypal/ipn/consumer/{consumerID}
    * Found 14 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_311_postOnConsumShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 525L)
                .d("PASSWORD", "\"PNT9f\"")
                .d("USERNAME", "\"Pav\"")
            .and().insertInto("CONSUMERS", 524L)
                .d("BALANCE_CURRENCY", "\"R4SvsGGr1dyC5Y\"")
                .d("BALANCE_FRACTIONAL_PART", "779")
                .d("BALANCE_INTEGER_PART", "820")
                .d("EMAIL", "\"buQPEWiQ\"")
                .d("LATITUDE", "\"XvzS52rKdFum\"")
                .d("LONGITUDE", "\"_EM_1752_XYZ_\"")
                .d("NAME", "\"sNIbFgCf\"")
                .r("ID", 525L)
            .and().insertInto("PRINTSHOPS", 526L)
                .d("ADDRESS", "\"i4uE2H2jPMZCM\"")
                .d("AVG_RATING", "1.6220689011225924")
                .d("BALANCE_CURRENCY", "\"H7kpPC33jJ_R\"")
                .d("BALANCE_FRACTIONAL_PART", "720")
                .d("BALANCE_INTEGER_PART", "560")
                .d("LATITUDE", "0.8421963006263061")
                .d("LOGO", "\"YU\"")
                .d("LONGITUDE", "0.24128660597428742")
                .d("NAME", "\"_EM_1753_XYZ_\"")
                .d("NIF", "\"_EM_1754_XYZ_\"")
            .and().insertInto("PRINTSHOPS", 571L)
                .d("ADDRESS", "\"HEUIOH8SOnEvt\"")
                .d("AVG_RATING", "0.8816347436287458")
                .d("BALANCE_CURRENCY", "\"lW458zWviLMl7Sd2\"")
                .d("BALANCE_FRACTIONAL_PART", "0")
                .d("BALANCE_INTEGER_PART", "0")
                .d("LATITUDE", "0.812396276858")
                .d("LOGO", "\"JmnkcVQjNf\"")
                .d("LONGITUDE", "0.004150172221460496")
                .d("NAME", "\"ddtXLqGRMvzc\"")
                .d("NIF", "\"_EM_1755_XYZ_\"")
            .and().insertInto("PRINTSHOPS", 570L)
                .d("ADDRESS", "\"Qp_QlpRZB2qC\"")
                .d("AVG_RATING", "0.4610897802055609")
                .d("BALANCE_CURRENCY", "\"\"")
                .d("BALANCE_FRACTIONAL_PART", "87")
                .d("BALANCE_INTEGER_PART", "33228")
                .d("LATITUDE", "0.10637100808128186")
                .d("LOGO", "\"1Le5cCnuFUn\"")
                .d("LONGITUDE", "51511.6255178741")
                .d("NAME", "\"jjRneJglKPZ49\"")
                .d("NIF", "\"dkLRjZ^QnNoT1\"")
            .and().insertInto("USERS", 569L)
                .d("PASSWORD", "\"KZbvcOPVkQ\"")
                .d("USERNAME", "\"c8m2rmsWMbTZl\"")
            .and().insertInto("CONSUMERS", 568L)
                .d("BALANCE_CURRENCY", "\"uUlw4ugUXiUkDvu\"")
                .d("BALANCE_FRACTIONAL_PART", "343")
                .d("BALANCE_INTEGER_PART", "0")
                .d("NAME", "\"PUtuCryZg3jO8n\"")
                .r("ID", 569L)
            .and().insertInto("PRINT_REQUESTS", 565L)
                .d("COST", "0.6981489210014662")
            .and().insertInto("DOCUMENTS", 564L)
                .d("FILE_NAME", "\"\"")
                .d("TOTAL_PAGES", "711")
                .r("PRINT_REQUEST_ID", 565L)
            .and().insertInto("USERS", 448L)
                .d("PASSWORD", "\"_EM_1756_XYZ_\"")
                .d("USERNAME", "\"CyclFn\"")
            .and().insertInto("PRINTSHOPS", 452L)
                .d("ADDRESS", "\"SUvi06gHboUtXNQ4\"")
                .d("AVG_RATING", "0.059259826931341575")
                .d("BALANCE_CURRENCY", "\"_EM_1275_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "-16220")
                .d("BALANCE_INTEGER_PART", "0")
                .d("LATITUDE", "0.7553308906207568")
                .d("LOGO", "\"gyMzpJrduln\"")
                .d("LONGITUDE", "0.8316951183968223")
                .d("NAME", "\"_EM_1276_XYZ_\"")
                .d("NIF", "\"kyc9x\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "p4QtBzC0")
                .get(baseUrlOfSut + "/consumer/balance")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"success\":true}"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/satisfied'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "NpQQZZDFahyMgY7")
                .get(baseUrlOfSut + "/consumer/satisfied?" + 
                    "password=7diSKEO&" + 
                    "username=hy9MHO2jwvq")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/satisfied"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_71_addNewConsumerPrintingSchema.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"_EM_1271_XYZ_\", " + 
                    " \"coverSpecs\": \"_EM_1272_XYZ_\", " + 
                    " \"deleted\": false, " + 
                    " \"paperSpecs\": \"_EM_1273_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/-82/printingschemas")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_71_addNewConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/consumer/-82/printingschemas"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "p4QtBzC0")
                .get(baseUrlOfSut + "/consumer/-82/printingschemas")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/-82/printingschemas"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_289_cancelRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/requests/cancel/{id}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "p4QtBzC0")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/14?" + 
                    "password=9G7xI&" + 
                    "username=04LS9_YhXg")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_289_cancelRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/requests/cancel/14"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/406/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/406/employees"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "p4QtBzC0")
                .put(baseUrlOfSut + "/printshops/406/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/406/employees"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/paypal/ipn/consumer/{consumerID}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/paypal/ipn/consumer/915?EMextraParam123=_EM_35_XYZ_")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/paypal/ipn/consumer/915"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/paypal/ipn/consumer/{consumerID}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/paypal/ipn/consumer/915?" + 
                    "EMextraParam123=_EM_35_XYZ_&" + 
                    "charset=NFAl2Az3fJaF7Q&" + 
                    "mc_gross=u67ZLcYRuUN")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NumberFormatException"))
                .body("'message'", containsString("For input string: \"u67ZLcYRuUN\""))
                .body("'path'", containsString("/paypal/ipn/consumer/915"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/printshops/requests/cancel/{id}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_312_postOnCancelShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_365_cancelPrintShopRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/printshops/requests/cancel/{id}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" 851 ")
                .post(baseUrlOfSut + "/printshops/requests/cancel/851")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_365_cancelPrintShopRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/printshops/requests/cancel/851"));
    }
    
    
    /**
    * Calls:
    * 1 - (403) PUT:/notifications/{notificationId}
    * 2 - (403) DELETE:/notifications/{notificationId}
    * 3 - (500) POST:/printshops/{id}/pricetable/deletepaper
    * 4 - (500) POST:/printshops/{id}/pricetable/deletepaper
    * Found 6 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_313_postOnDeletepaperShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1120L)
                .d("ADDRESS", "\"xLhYi7NoJKcfvOj\"")
                .d("AVG_RATING", "0.2303657689895653")
                .d("BALANCE_CURRENCY", "\"DJ9wlZ8I5\"")
                .d("BALANCE_FRACTIONAL_PART", "65")
                .d("BALANCE_INTEGER_PART", "254")
                .d("LATITUDE", "0.9268522762562263")
                .d("LOGO", "\"SYmui\"")
                .d("LONGITUDE", "0.2833934194273461")
                .d("NAME", "\"oTC:Nboeeh0\"")
                .d("NIF", "\"qqVgVffKXc\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/notifications/-3654")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/notifications/-3654"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "HsGa1Y3By4HXZj")
                .delete(baseUrlOfSut + "/notifications/-3654")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/notifications/-3654"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/models/printshops/pricetable/ItemFactory_84_fromPaperTableItemToPaperItems.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/printshops/{id}/pricetable/deletepaper'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"RYO\", " + 
                    " \"infLim\": 863, " + 
                    " \"priceA3SIMPLEX\": \"0r_OvZ5P7\", " + 
                    " \"supLim\": 486 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/6/pricetable/deletepaper")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/models/printshops/pricetable/ItemFactory_84_fromPaperTableItemToPaperItems
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/printshops/6/pricetable/deletepaper"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/models/printshops/pricetable/Item$Colors_28_valueOf.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/printshops/{id}/pricetable/deletepaper'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "3Ir4s1FuD214acY")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"Sc\", " + 
                    " \"infLim\": 219, " + 
                    " \"priceA3DUPLEX\": \"ThYiL\", " + 
                    " \"priceA3SIMPLEX\": \"8IMFlVB\", " + 
                    " \"priceA4DUPLEX\": \"PnP4\", " + 
                    " \"priceA4SIMPLEX\": \"wOpKaTuoAXkk\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/6/pricetable/deletepaper")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/models/printshops/pricetable/Item$Colors_28_valueOf
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("No enum constant io.github.proxyprint.kitchen.models.printshops.pricetable.Item.Colors.Sc"))
                .body("'path'", containsString("/printshops/6/pricetable/deletepaper"));
    }
    
    
    /**
    * Calls:
    * 1 - (500) POST:/consumer/printrequest/{printRequestID}/submit
    * 2 - (500) POST:/consumer/printrequest/{printRequestID}/submit
    * Found 4 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_314_postOnPrintrequestSubmitShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1024L)
                .d("ADDRESS", "\"rNp4ICXnIA_ZOsiK\"")
                .d("AVG_RATING", "0.6319003572017176")
                .d("BALANCE_CURRENCY", "\"YeJEw9g7TYDkQdC\"")
                .d("BALANCE_FRACTIONAL_PART", "1202")
                .d("BALANCE_INTEGER_PART", "192")
                .d("LATITUDE", "0.5768934256602887")
                .d("LOGO", "\"IL\"")
                .d("LONGITUDE", "0.6515355423555229")
                .d("NAME", "\"Z93R3JFARkt7R62\"")
                .d("NIF", "\"uv\"")
            .and().insertInto("PRINTSHOPS", 1023L)
                .d("ADDRESS", "\"7bV8Kzx7ftEBX9\"")
                .d("AVG_RATING", "0.40097431115902993")
                .d("BALANCE_CURRENCY", "\"s3yB7l1l\"")
                .d("BALANCE_FRACTIONAL_PART", "543")
                .d("BALANCE_INTEGER_PART", "720")
                .d("LATITUDE", "0.3797693151808368")
                .d("LOGO", "\"\"")
                .d("LONGITUDE", "0.968180068262653")
                .d("NAME", "\"mtGZ45W\"")
                .d("NIF", "\"I56qw_\"")
            .and().insertInto("USERS", 1022L)
                .d("PASSWORD", "\"HQ\"")
                .d("USERNAME", "\"lLa92\"")
            .and().insertInto("CONSUMERS", 1021L)
                .d("BALANCE_CURRENCY", "\"_EM_2730_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "517")
                .d("BALANCE_INTEGER_PART", "2139")
                .d("NAME", "\"UKlT4GjO\"")
                .d("ID", "18")
            .and().insertInto("PRINT_REQUESTS", 1018L)
                .d("ARRIVAL", "\"2014-07-15 06:55:21\"")
                .d("COST", "0.22321654284698805")
                .d("DELIVERED", "\"1989-04-19 22:05:55\"")
                .d("EMPATTENDED", "NULL")
                .d("EMPDELIVERED", "\"PMp\"")
                .d("FINISHED", "NULL")
                .d("PAYPAL_SALE_ID", "\"3\"")
                .d("PAYMENT_TYPE", "NULL")
                .d("STATUS", "\"LIFTED\"")
                .d("CONSUMER_ID", "NULL")
                .d("PRINTSHOP_ID", "NULL")
                .d("PRINTSHOP", "NULL")
                .d("CONSUMER", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_210_finishAndSubmitPrintRequest.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/printrequest/{printRequestID}/submit'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"EM_tainted_map\": \"_EM_408_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/printrequest/519/submit")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_210_finishAndSubmitPrintRequest
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/printrequest/519/submit"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_210_finishAndSubmitPrintRequest.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/printrequest/{printRequestID}/submit'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"EM_tainted_map\": \"_EM_408_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/printrequest/519/submit")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_210_finishAndSubmitPrintRequest
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/printrequest/519/submit"));
    }
    
    
    /**
    * Calls:
    * 1 - (500) POST:/paypal/ipn/consumer/{consumerID}
    * 2 - (500) POST:/paypal/ipn/consumer/{consumerID}
    * Found 4 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_315_postOnConsumShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/paypal/ipn/consumer/{consumerID}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/paypal/ipn/consumer/343")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/paypal/ipn/consumer/343"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/paypal/ipn/consumer/{consumerID}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/paypal/ipn/consumer/343?transaction_type=ynVkNa")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/paypal/ipn/consumer/343"));
    }
    
    
    /**
    * Calls:
    * 1 - (500) POST:/consumer/{id}/notify
    * 2 - (500) POST:/consumer/{id}/notify
    * 3 - (500) POST:/consumer/budget
    * 4 - (500) POST:/consumer/budget
    * 5 - (200) GET:/consumer/balance
    * 6 - (500) POST:/consumer/printrequest/{printRequestID}/submit
    * Found 10 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_316_postOnPrintrequestSubmitWithQueryParamShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 315L)
                .d("ADDRESS", "\"gjyt\"")
                .d("AVG_RATING", "0.35168793259164144")
                .d("BALANCE_CURRENCY", "\"SebGjYzRL\"")
                .d("BALANCE_FRACTIONAL_PART", "234")
                .d("BALANCE_INTEGER_PART", "-1686874953")
                .d("LATITUDE", "0.27480142497135185")
                .d("LOGO", "\"sxGhfpNugECYhiw\"")
                .d("LONGITUDE", "0.26223059113526614")
                .d("NAME", "\"KEWdLArFaF\"")
                .d("NIF", "\"5GoaAZcLK3dQG\"")
            .and().insertInto("PRINTSHOPS", 676L)
                .d("ADDRESS", "\"PXY60UO0LNKVzwM5\"")
                .d("AVG_RATING", "0.34108852592926475")
                .d("BALANCE_CURRENCY", "\"qvS\"")
                .d("BALANCE_FRACTIONAL_PART", "358")
                .d("BALANCE_INTEGER_PART", "380")
                .d("LATITUDE", "0.1969037012437318")
                .d("LOGO", "\"KCJBPzFUrBn2\"")
                .d("LONGITUDE", "0.11216934992789229")
                .d("NAME", "\"Y3PSiNP\"")
                .d("NIF", "\"bx7rj8LKtAVTGPbc\"")
            .and().insertInto("PRINTSHOPS", 675L)
                .d("ADDRESS", "\"PvX_axQDPtYU\"")
                .d("AVG_RATING", "0.07547581397345193")
                .d("BALANCE_CURRENCY", "\"njTRrEAVH\"")
                .d("BALANCE_FRACTIONAL_PART", "406")
                .d("BALANCE_INTEGER_PART", "95")
                .d("LATITUDE", "0.5882761961858056")
                .d("LOGO", "\"psHH\"")
                .d("LONGITUDE", "0.9504376135559629")
                .d("NAME", "\"zxQJL\"")
                .d("NIF", "\"N5H_6\"")
            .and().insertInto("USERS", 674L)
                .d("PASSWORD", "\"XBqkP8MmHP\"")
                .d("USERNAME", "\"H\"")
            .and().insertInto("CONSUMERS", 673L)
                .d("BALANCE_CURRENCY", "\"r7XS2gSj9rvuOqPP\"")
                .d("BALANCE_FRACTIONAL_PART", "732")
                .d("BALANCE_INTEGER_PART", "242")
                .d("NAME", "\"06xVbYyi6aM2EQ\"")
                .d("ID", "17")
            .and().insertInto("USERS", 672L)
                .d("PASSWORD", "\"26\"")
                .d("USERNAME", "\"A6cNTWA3DrQTD\"")
            .and().insertInto("CONSUMERS", 671L)
                .d("BALANCE_CURRENCY", "\"qI58\"")
                .d("BALANCE_FRACTIONAL_PART", "240")
                .d("BALANCE_INTEGER_PART", "421")
                .d("NAME", "\"bPLMPamOH\"")
                .d("ID", "11")
            .and().insertInto("PRINT_REQUESTS", 670L)
                .d("ARRIVAL", "NULL")
                .d("COST", "0.15320730163712437")
                .d("DELIVERED", "\"1917-02-01 05:01:43\"")
                .d("EMPATTENDED", "\"5N3YfXMeybP\"")
                .d("EMPDELIVERED", "\"yTRvikaY2b\"")
                .d("FINISHED", "\"2074-09-12 14:02:49\"")
                .d("PAYPAL_SALE_ID", "NULL")
                .d("PAYMENT_TYPE", "\"Y1Vyw1Ty\"")
                .d("STATUS", "\"IN_PROGRESS\"")
                .d("CONSUMER_ID", "NULL")
                .d("PRINTSHOP_ID", "NULL")
                .d("PRINTSHOP", "NULL")
                .d("CONSUMER", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{id}/notify'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/446/notify?EMextraParam123=42")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/446/notify"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{id}/notify'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/446/notify?" + 
                    "latitude=lJHPn_4U8LhkSZ&" + 
                    "longitude=K")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/446/notify"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/models/repositories/UserService_42_loadUserByUsername.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/budget'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"requestJSON\": \"oNHL\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/budget")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/models/repositories/UserService_42_loadUserByUsername
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.web.multipart.MultipartException"))
                .body("'message'", containsString("Could not parse multipart servlet request; nested exception is javax.servlet.ServletException: org.apache.tomcat.util.http.fileupload.FileUploadBase$InvalidContentTypeException: the request doesn't contain a multipart/form-data or multipart/mixed stream, content type header is application/json"))
                .body("'path'", containsString("/consumer/budget"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/models/repositories/UserService_42_loadUserByUsername.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/budget'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"requestJSON\": \"oNHL\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/budget?EMextraParam123=42")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/models/repositories/UserService_42_loadUserByUsername
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.web.multipart.MultipartException"))
                .body("'message'", containsString("Could not parse multipart servlet request; nested exception is javax.servlet.ServletException: org.apache.tomcat.util.http.fileupload.FileUploadBase$InvalidContentTypeException: the request doesn't contain a multipart/form-data or multipart/mixed stream, content type header is application/json"))
                .body("'path'", containsString("/consumer/budget"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/balance")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"success\":true}"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_210_finishAndSubmitPrintRequest.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/printrequest/{printRequestID}/submit'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/consumer/printrequest/207/submit?EMextraParam123=42")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_210_finishAndSubmitPrintRequest
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/printrequest/207/submit"));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/consumer/{consumerID}/printingschemas/{printingSchemaID}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_317_putOnPrintingschemaShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1704L)
                .d("PASSWORD", "\"DVB0hDRgTDft8\"")
                .d("USERNAME", "\"3GGDQb\"")
            .and().insertInto("CONSUMERS", 1703L)
                .d("BALANCE_CURRENCY", "\"tXf\"")
                .d("BALANCE_FRACTIONAL_PART", "938")
                .d("BALANCE_INTEGER_PART", "187")
                .d("NAME", "\"EFXh9s\"")
                .d("ID", "1")
            .and().insertInto("PRINTING_SCHEMAS", 1702L)
                .d("BINDING_SPECS", "NULL")
                .d("COVER_SPECS", "NULL")
                .d("IS_DELETED", "true")
                .d("PSCHEMA_NAME", "\"jeKmRFBX\"")
                .d("PAPER_SPECS", "\"uB7CZ8ixmyOZ\"")
                .d("CONSUMER_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_121_editConsumerPrintingSchema.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas/{printingSchemaID}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverSpecs\": \"p9FvDr4pWRFl9dX\", " + 
                    " \"name\": \"Apkegj\", " + 
                    " \"paperSpecs\": \"x0U9S6k1hKOE8JZR\" " + 
                    " } ")
                .put(baseUrlOfSut + "/consumer/601/printingschemas/314")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_121_editConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/601/printingschemas/314"));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/consumer/{consumerID}/printingschemas/{printingSchemaID}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_318_putOnPrintingschemaShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_121_editConsumerPrintingSchema.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas/{printingSchemaID}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"9nRq3kY1IuX\", " + 
                    " \"name\": \"_EM_461_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/consumer/-1438704538/printingschemas/60")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_121_editConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/-1438704538/printingschemas/60"));
    }
    
    
    /**
    * Calls:
    * 1 - (500) GET:/consumer/satisfied
    * 2 - (500) POST:/consumer/{consumerID}/printingschemas
    * 3 - (403) PUT:/printshops/{printShopID}/pricetable/editstapling
    * 4 - (403) PUT:/printshops/{printShopID}/pricetable/editstapling
    * Found 6 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_319_putOnEditstaplingShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1660L)
                .d("PASSWORD", "\"B_a\"")
                .d("USERNAME", "\"MDhCqST2\"")
            .and().insertInto("USERS", 1688L)
                .d("PASSWORD", "\"azM8um\"")
                .d("USERNAME", "\"lFC\"")
            .and().insertInto("CONSUMERS", 1687L)
                .d("BALANCE_CURRENCY", "\"5Cl\"")
                .d("BALANCE_FRACTIONAL_PART", "675")
                .d("BALANCE_INTEGER_PART", "777")
                .d("EMAIL", "\"8g5\"")
                .d("LATITUDE", "\"qwflMltWSJFUS3t\"")
                .d("LONGITUDE", "NULL")
                .d("NAME", "\"YujJxw2Opyvm7lLN\"")
                .d("ID", "10")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/satisfied'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/satisfied?password=N")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/satisfied"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_72_addNewConsumerPrintingSchema.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"pvrpGGGXs9\", " + 
                    " \"coverSpecs\": \"j6YA\", " + 
                    " \"name\": \"rsMNEM4ZR8Sdon\", " + 
                    " \"paperSpecs\": \"nxz8zkQ\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/560/printingschemas?EMextraParam123=42")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_72_addNewConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/560/printingschemas"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"176\" ")
                .put(baseUrlOfSut + "/printshops/176/pricetable/editstapling?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/176/pricetable/editstapling"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" BLSUdWg5QrnjIiR ")
                .put(baseUrlOfSut + "/printshops/176/pricetable/editstapling")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/176/pricetable/editstapling"));
    }
    
    
    /**
    * Calls:
    * 1 - (500) POST:/paypal/ipn/consumer/{consumerID}
    * 2 - (403) PUT:/printshops/{id}/pricetable/rings
    * 3 - (403) PUT:/printshops/{id}/pricetable/rings
    * Found 4 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_320_putOnRingsShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1704L)
                .d("PASSWORD", "\"DVB0hDRgTDft8\"")
                .d("USERNAME", "\"3GGDQb\"")
            .and().insertInto("CONSUMERS", 1703L)
                .d("BALANCE_CURRENCY", "\"tXf\"")
                .d("BALANCE_FRACTIONAL_PART", "938")
                .d("BALANCE_INTEGER_PART", "187")
                .d("NAME", "\"EFXh9s\"")
                .d("ID", "1")
            .and().insertInto("PRINTING_SCHEMAS", 1702L)
                .d("BINDING_SPECS", "NULL")
                .d("COVER_SPECS", "NULL")
                .d("IS_DELETED", "true")
                .d("PSCHEMA_NAME", "\"jeKmRFBX\"")
                .d("PAPER_SPECS", "\"uB7CZ8ixmyOZ\"")
                .d("CONSUMER_ID", "NULL")
            .and().insertInto("PRINTSHOPS", 1712L)
                .d("ADDRESS", "\"O330R7ui2\"")
                .d("AVG_RATING", "0.7157028592758417")
                .d("BALANCE_CURRENCY", "\"mwZIDBCByKm\"")
                .d("BALANCE_FRACTIONAL_PART", "274")
                .d("BALANCE_INTEGER_PART", "1425677456")
                .d("LATITUDE", "0.9583248253240041")
                .d("LOGO", "\"boWir9NcDZnk3DE\"")
                .d("LONGITUDE", "0.12573172078885053")
                .d("NAME", "\"1nI\"")
                .d("NIF", "\"58WmniT6UTLxZVjs\"")
            .and().insertInto("PRINTSHOPS", 1711L)
                .d("ADDRESS", "\"Gk\"")
                .d("AVG_RATING", "0.6416170515144892")
                .d("BALANCE_CURRENCY", "\"jg23PNpxNL4m\"")
                .d("BALANCE_FRACTIONAL_PART", "793")
                .d("BALANCE_INTEGER_PART", "160")
                .d("LATITUDE", "0.41391985948331156")
                .d("LOGO", "\"l9pwq\"")
                .d("LONGITUDE", "0.08183570805253937")
                .d("NAME", "\"ms89yRIDVwCDQa4\"")
                .d("NIF", "\"1CI45_frfljG\"")
            .and().insertInto("USERS", 1710L)
                .d("PASSWORD", "\"2YoCg2cXRkWPE\"")
                .d("USERNAME", "\"\"")
            .and().insertInto("CONSUMERS", 1709L)
                .d("BALANCE_CURRENCY", "\"U7GW6OOniv7lm\"")
                .d("BALANCE_FRACTIONAL_PART", "704")
                .d("BALANCE_INTEGER_PART", "694")
                .d("NAME", "\"zn\"")
                .d("ID", "16")
            .and().insertInto("PRINT_REQUESTS", 1706L)
                .d("COST", "0.3052619290642905")
            .and().insertInto("DOCUMENTS", 1705L)
                .d("FILE_NAME", "\"B9yacGruA5\"")
                .d("TOTAL_PAGES", "990")
                .d("PRINT_REQUEST_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/paypal/ipn/consumer/{consumerID}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/paypal/ipn/consumer/555")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/paypal/ipn/consumer/555"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .put(baseUrlOfSut + "/printshops/-1425500120/pricetable/rings")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-1425500120/pricetable/rings"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 654 " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/-1425500120/pricetable/rings?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-1425500120/pricetable/rings"));
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/consumer/{consumerID}/printingschemas/{printingSchemaID}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_321_deleteOnPrintingschemaShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_98_deleteConsumerPrintingSchema.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas/{printingSchemaID}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/224/printingschemas/76")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_98_deleteConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/224/printingschemas/76"));
    }
    
    
    /**
    * Calls:
    * 1 - (500) GET:/printshops/nearest
    * 2 - (403) PUT:/printshops/{printShopId}/reviews/{reviewId}
    * 3 - (403) DELETE:/printshops/{printShopId}/reviews/{reviewId}
    * Found 4 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_322_deleteOnReviewShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_97_getNearestPrintShops.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/printshops/nearest'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/nearest?" + 
                    "latitude=_EM_904_XYZ_&" + 
                    "longitude=kIt0M3BX")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_97_getNearestPrintShops
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NumberFormatException"))
                .body("'message'", containsString("For input string: \"_EM_904_XYZ_\""))
                .body("'path'", containsString("/printshops/nearest"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/printshops/-15681/reviews/0")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-15681/reviews/0"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/printshops/-15681/reviews/0")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-15681/reviews/0"));
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/consumer/{consumerID}/printingschemas/{printingSchemaID}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_323_deleteOnPrintingschemaShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 504L)
                .d("PASSWORD", "\"WVQ\"")
                .d("USERNAME", "\"_EM_1390_XYZ_\"")
            .and().insertInto("CONSUMERS", 503L)
                .d("BALANCE_CURRENCY", "\"2arX3m87mub3b\"")
                .d("BALANCE_FRACTIONAL_PART", "502")
                .d("BALANCE_INTEGER_PART", "857")
                .d("NAME", "\"CfGiyQyvMx_iKrv\"")
                .d("ID", "14")
            .and().insertInto("PRINTING_SCHEMAS", 502L)
                .d("BINDING_SPECS", "NULL")
                .d("COVER_SPECS", "\"2Or3UqP8HxXiWy\"")
                .d("IS_DELETED", "false")
                .d("PSCHEMA_NAME", "\"ElDdG\"")
                .d("PAPER_SPECS", "\"56lfeGe3kBy_4f7E\"")
                .d("CONSUMER_ID", "4")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_98_deleteConsumerPrintingSchema.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas/{printingSchemaID}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/-32/printingschemas/-262068")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_98_deleteConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/-32/printingschemas/-262068"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) GET:/printshops/history
    * 2 - (403) GET:/printshop
    * 3 - (403) GET:/consumer/satisfied
    * 4 - (403) PUT:/notifications/{notificationId}
    * 5 - (403) PUT:/notifications/{notificationId}
    * 6 - (403) POST:/printshops/{id}/pricetable/deletecover
    * Found 5 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_324_postOnDeletecoverReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 748L)
                .d("PASSWORD", "\"\"")
                .d("USERNAME", "\"NQ1NdjBF\"")
            .and().insertInto("PRINTSHOPS", 753L)
                .d("ADDRESS", "\"K8vV5N5YgYjxUDq\"")
                .d("AVG_RATING", "0.8545789201853706")
                .d("BALANCE_CURRENCY", "\"B4uLDovSuIRs\"")
                .d("BALANCE_FRACTIONAL_PART", "479")
                .d("BALANCE_INTEGER_PART", "117")
                .d("LATITUDE", "0.005380293127505653")
                .d("LOGO", "\"cRXs6SyTn22\"")
                .d("LONGITUDE", "0.8243520847958806")
                .d("NAME", "\"zcAryfpYWyUMHf\"")
                .d("NIF", "\"_EM_2220_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/history")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"historyrequests\":[],\"success\":true}"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "R_c3Df3Z3Iv")
                .get(baseUrlOfSut + "/printshop")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshop"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "R_c3Df3Z3Iv")
                .get(baseUrlOfSut + "/consumer/satisfied?username=NQ1NdjBF")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/satisfied"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/notifications/303")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/notifications/303"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "R_c3Df3Z3Iv")
                .put(baseUrlOfSut + "/notifications/303")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/notifications/303"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA3\": \"_EM_2221_XYZ_\", " + 
                    " \"priceA4\": \"_EM_2222_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/965/pricetable/deletecover")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/965/pricetable/deletecover"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/requests/cancel/{id}
    */
    @Test @Timeout(60)
    public void test_325_postOnCancelReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"179\" ")
                .post(baseUrlOfSut + "/printshops/requests/cancel/179")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/{id}/pricetable/covers
    */
    @Test @Timeout(60)
    public void test_326_postOnCoversReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"jU9d3_Srj\", " + 
                    " \"priceA4\": \"_EM_567_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/522/pricetable/covers")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/{id}/pricetable/deletecover
    */
    @Test @Timeout(60)
    public void test_327_postOnPricetableDeletecoverReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1119L)
                .d("ADDRESS", "\"jLG6\"")
                .d("AVG_RATING", "0.620961388658797")
                .d("BALANCE_CURRENCY", "\"y2chCReh4peHMAa4\"")
                .d("BALANCE_FRACTIONAL_PART", "653")
                .d("BALANCE_INTEGER_PART", "650")
                .d("LATITUDE", "0.09343226824294293")
                .d("LOGO", "\"XpV_0\"")
                .d("LONGITUDE", "0.7728585604783199")
                .d("NAME", "\"MzZrxLi1NviHL\"")
                .d("NIF", "\"CA55wtU3uqS\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"X\", " + 
                    " \"priceA4\": \"vfEXDuBI\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/-7886/pricetable/deletecover")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/{id}/pricetable/deletecover
    */
    @Test @Timeout(60)
    public void test_328_postOnDeletecoverReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/printshops/279/pricetable/deletecover")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/{id}/pricetable/deletepaper
    */
    @Test @Timeout(60)
    public void test_329_postOnDeletepaperReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 297, " + 
                    " \"priceA3DUPLEX\": \"m7p3\", " + 
                    " \"priceA3SIMPLEX\": \"YWkiiAIP6JHIB5\", " + 
                    " \"supLim\": 760 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/256/pricetable/deletepaper")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/{id}/pricetable/papers
    */
    @Test @Timeout(60)
    public void test_330_postOnPapersReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"_EM_579_XYZ_\", " + 
                    " \"infLim\": 99, " + 
                    " \"priceA3SIMPLEX\": \"wdh4LZ0Dw\", " + 
                    " \"supLim\": 625 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/142/pricetable/papers")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/{id}/pricetable/deletering
    */
    @Test @Timeout(60)
    public void test_331_postOnDeleteringReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"ringType\": \"_EM_577_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/41/pricetable/deletering")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/{id}/pricetable/rings
    */
    @Test @Timeout(60)
    public void test_332_postOnRingsReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"supLim\": 382773679 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/308/pricetable/rings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/printshops/{id}/pricetable/deletepaper
    * 2 - (200) POST:/printshops/{id}/pricetable/deletepaper
    */
    @Test @Timeout(60)
    public void test_333_postOnDeletepaperReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"exOb9P6SJI\", " + 
                    " \"infLim\": 570, " + 
                    " \"priceA3DUPLEX\": \"pzWin299\", " + 
                    " \"priceA4DUPLEX\": \"fK8tld0QY5\", " + 
                    " \"supLim\": 170 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/-3699107104298241866/pricetable/deletepaper")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA4DUPLEX\": \"_EM_662_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/-3699107104298241866/pricetable/deletepaper")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/printshops/{id}/pricetable/covers
    * 2 - (200) POST:/printshops/{id}/pricetable/covers
    */
    @Test @Timeout(60)
    public void test_334_postOnCoversReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/printshops/-196950006/pricetable/covers")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA4\": \"pnU\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/-196950006/pricetable/covers")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/printshops/{id}/pricetable/deletecover
    * 2 - (200) POST:/printshops/{id}/pricetable/deletecover
    */
    @Test @Timeout(60)
    public void test_335_postOnPricetableDeletecoverWithQueryParamsReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1119L)
                .d("ADDRESS", "\"jLG6\"")
                .d("AVG_RATING", "0.620961388658797")
                .d("BALANCE_CURRENCY", "\"y2chCReh4peHMAa4\"")
                .d("BALANCE_FRACTIONAL_PART", "653")
                .d("BALANCE_INTEGER_PART", "650")
                .d("LATITUDE", "0.09343226824294293")
                .d("LOGO", "\"XpV_0\"")
                .d("LONGITUDE", "0.7728585604783199")
                .d("NAME", "\"MzZrxLi1NviHL\"")
                .d("NIF", "\"CA55wtU3uqS\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"y2_cykFc8dLZ\", " + 
                    " \"priceA3\": \"jKQBe8oabvClNZ\", " + 
                    " \"priceA4\": \"DCX6jPAa\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/831/pricetable/deletecover")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "rtGhStYUbNDP")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"hXdM9a\", " + 
                    " \"priceA3\": \"y2eCG5rF\", " + 
                    " \"priceA4\": \"TLmbuyAZgNv\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/831/pricetable/deletecover?" + 
                    "password=ArQYGn7rIEPHoU&" + 
                    "username=kLo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * 1 - (403) DELETE:/printshops/{printShopId}/reviews/{reviewId}
    * 2 - (200) PUT:/printshops/{printShopID}/pricetable/editstapling
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_336_putOnEditstaplingReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1546L)
                .d("ADDRESS", "\"Pi\"")
                .d("AVG_RATING", "0.04125005428307171")
                .d("BALANCE_CURRENCY", "\"cpYYQww\"")
                .d("BALANCE_FRACTIONAL_PART", "328")
                .d("BALANCE_INTEGER_PART", "132")
                .d("LATITUDE", "0.4270086487284941")
                .d("LOGO", "\"adm6PzAl5LdFnH6\"")
                .d("LONGITUDE", "0.193352638758986")
                .d("NAME", "\"\"")
                .d("NIF", "\"FXOtyC7usG\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "_EM_6_XYZ_")
                .header("X-Requested-With", "rU761D9NQE7X")
                .delete(baseUrlOfSut + "/printshops/-1126632392/reviews/10")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-1126632392/reviews/10"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"_EM_635_XYZ_\" ")
                .put(baseUrlOfSut + "/printshops/186/pricetable/editstapling")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/printshops/{id}/pricetable/covers
    */
    @Test @Timeout(60)
    public void test_337_putOnCoversReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA3\": \"wm\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/790/pricetable/covers")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/printshops/{id}/pricetable/papers
    */
    @Test @Timeout(60)
    public void test_338_putOnPapersReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1538L)
                .d("ADDRESS", "\"\"")
                .d("AVG_RATING", "0.4483270891015987")
                .d("BALANCE_CURRENCY", "\"JEvkh2t40\"")
                .d("BALANCE_FRACTIONAL_PART", "782")
                .d("BALANCE_INTEGER_PART", "1000")
                .d("LATITUDE", "0.026486466142620735")
                .d("LOGO", "\"P\"")
                .d("LONGITUDE", "0.8050962463122233")
                .d("NAME", "\"G\"")
                .d("NIF", "\"fnRa83nmtu30RcF\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "42")
                .header("X-Requested-With", "rLl")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA3SIMPLEX\": \"NC\", " + 
                    " \"priceA4DUPLEX\": \"oqM\", " + 
                    " \"priceA4SIMPLEX\": \"36IcfF\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/-1261723463/pricetable/papers?EMextraParam123=_EM_109_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/printshops/{id}/pricetable/rings
    */
    @Test @Timeout(60)
    public void test_339_putOnRingsReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"price\": \"417\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/417/pricetable/rings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/printshops/{id}/pricetable/papers
    */
    @Test @Timeout(60)
    public void test_340_putOnPapersReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA4DUPLEX\": \"J6v_FrB\", " + 
                    " \"priceA4SIMPLEX\": \"8QNPF2C4Xwn\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/4767638348798635322/pricetable/papers")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/printshops/{printShopID}/pricetable/editstapling
    */
    @Test @Timeout(60)
    public void test_341_putOnEditstaplingReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"_EM_635_XYZ_\" ")
                .put(baseUrlOfSut + "/printshops/186/pricetable/editstapling")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/printshops/{id}/pricetable/papers
    * 2 - (200) PUT:/printshops/{id}/pricetable/papers
    */
    @Test @Timeout(60)
    public void test_342_putOnPapersReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1545L)
                .d("ADDRESS", "\"6GEsXqFxBwNHDBs\"")
                .d("AVG_RATING", "0.8807454917062139")
                .d("BALANCE_CURRENCY", "\"Z7ga\"")
                .d("BALANCE_FRACTIONAL_PART", "644")
                .d("BALANCE_INTEGER_PART", "370")
                .d("LATITUDE", "0.555268781242385")
                .d("LOGO", "\"pI5T3fo\"")
                .d("LONGITUDE", "0.4748366657496881")
                .d("NAME", "\"Osl_\"")
                .d("NIF", "\"3ZB9wV\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"supLim\": 136 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/-3745979226112783272/pricetable/papers")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "mMSuedGqgq0")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"i0jhT\", " + 
                    " \"infLim\": 119, " + 
                    " \"priceA4DUPLEX\": \"\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/-3745979226112783272/pricetable/papers?EMextraParam123=_EM_109_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) DELETE:/consumer/requests/cancel/{id}
    */
    @Test @Timeout(60)
    public void test_343_deleteOnCancelReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/777")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * 1 - (403) POST:/printshops/{id}/pricetable/deletecover
    * 2 - (401) PUT:/printshops/{id}/pricetable/papers
    * 3 - (200) POST:/login
    * 4 - (403) DELETE:/consumer/requests/cancel/{id}
    * Found 3 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_344_deleteOnRequestsCancelWithQueryParamsEmptyUsername() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/printshops/623/pricetable/deletecover")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/623/pricetable/deletecover"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "RJUGex3Trg")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"ZmjMzvu\", " + 
                    " \"infLim\": 377, " + 
                    " \"priceA3DUPLEX\": \"i5jTi6_YMrS8O\", " + 
                    " \"priceA4DUPLEX\": \"jz1RzG\", " + 
                    " \"priceA4SIMPLEX\": \"3QPpPj\", " + 
                    " \"supLim\": 483 " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/124/pricetable/papers")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/124/pricetable/papers"));
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/login?password=_EM_1354_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/825?" + 
                    "password=NSnabeHhxTscjLo&" + 
                    "username=")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/requests/cancel/825"));
    }
    
    
    /**
    * Calls:
    * (200) DELETE:/printshops/{printShopID}/employees/{employeeID}
    */
    @Test @Timeout(60)
    public void test_345_deleteOnEmployeReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/printshops/918/employees/738")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) DELETE:/printshops/{printShopID}/employees/{employeeID}
    */
    @Test @Timeout(60)
    public void test_346_deleteOnEmployeReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1148L)
                .d("PASSWORD", "\"7OTrt3lzx1\"")
                .d("USERNAME", "\"iDpn\"")
            .and().insertInto("PRINTSHOPS", 1147L)
                .d("ADDRESS", "\"_EM_3126_XYZ_\"")
                .d("AVG_RATING", "0.43626641287760715")
                .d("BALANCE_CURRENCY", "\"NPo\"")
                .d("BALANCE_FRACTIONAL_PART", "735")
                .d("BALANCE_INTEGER_PART", "671")
                .d("LATITUDE", "0.04299405666802536")
                .d("LOGO", "\"GUpD0xeNA_\"")
                .d("LONGITUDE", "0.09534040344238737")
                .d("NAME", "\"fVbFBIYzo3P3Y2Mn\"")
                .d("NIF", "\"Id6grOoVe\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "vcjqQU47jJk")
                .delete(baseUrlOfSut + "/printshops/481/employees/-962150599")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/consumer/printrequest/{printRequestID}/submit
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_347_postOnSubmitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/consumer/printrequest/386/submit?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/printrequest/386/submit"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/printshops/requests/cancel/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_348_postOnCancelReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_38_XYZ_")
                .contentType("application/json")
                .body(" _EM_36_XYZ_ ")
                .post(baseUrlOfSut + "/printshops/requests/cancel/890?EMextraParam123=_EM_37_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/requests/cancel/890"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/printshops/{id}/pricetable/covers
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_349_postOnCoversReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"L\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/828/pricetable/covers?EMextraParam123=_EM_40_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/828/pricetable/covers"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/printshops/{id}/pricetable/deletecover
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_350_postOnDeletecoverReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"0W\", " + 
                    " \"priceA3\": \"_EM_41_XYZ_\", " + 
                    " \"priceA4\": \"_EM_42_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/34/pricetable/deletecover?EMextraParam123=_EM_43_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/34/pricetable/deletecover"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/printshops/{id}/pricetable/deletepaper
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_351_postOnDeletepaperReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/printshops/524/pricetable/deletepaper")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/524/pricetable/deletepaper"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/printshops/{id}/pricetable/deletering
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_352_postOnDeleteringReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_51_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 243, " + 
                    " \"price\": \"_EM_49_XYZ_\", " + 
                    " \"ringType\": \"eWjX3CkUgoem1\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/-6903209803368163958/pricetable/deletering")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/-6903209803368163958/pricetable/deletering"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/printshops/{id}/pricetable/papers
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_353_postOnPapersReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"_EM_52_XYZ_\", " + 
                    " \"infLim\": 854, " + 
                    " \"priceA3DUPLEX\": \"AJrX1s8OIiasQ\", " + 
                    " \"priceA3SIMPLEX\": \"vgGE1\", " + 
                    " \"priceA4DUPLEX\": \"_EM_53_XYZ_\", " + 
                    " \"priceA4SIMPLEX\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/854/pricetable/papers")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/854/pricetable/papers"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/printshops/{id}/pricetable/rings
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_354_postOnRingsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 654 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/800/pricetable/rings?EMextraParam123=_EM_54_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/800/pricetable/rings"));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/printshops/{id}/pricetable/rings
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_355_putOnRingsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"price\": \"670\", " + 
                    " \"ringType\": \"ov9\", " + 
                    " \"supLim\": 811 " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/670/pricetable/rings")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/670/pricetable/rings"));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/consumer/{consumerID}/printingschemas/{printingSchemaID}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_356_putOnConsumPrintingschemaWithQueryParam() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverSpecs\": \"40jjYF9TsOjrVVuo\", " + 
                    " \"deleted\": true, " + 
                    " \"id\": 113, " + 
                    " \"name\": \"YsslZWfG0c05l3\", " + 
                    " \"paperSpecs\": \"_EM_102_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/consumer/853/printingschemas/113?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/853/printingschemas/113"));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/printshops/{id}/pricetable/covers
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_357_putOnCoversReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA3\": \"_EM_103_XYZ_\", " + 
                    " \"priceA4\": \"ltx8TeyRS1Y\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/116/pricetable/covers")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/116/pricetable/covers"));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/printshops/{id}/pricetable/papers
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_358_putOnPapersReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 568, " + 
                    " \"priceA4DUPLEX\": \"_EM_108_XYZ_\", " + 
                    " \"priceA4SIMPLEX\": \"S9o\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/443/pricetable/papers?EMextraParam123=_EM_109_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/443/pricetable/papers"));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/printshops/{printShopID}/pricetable/editstapling
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_359_putOnEditstaplingReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" 896 ")
                .put(baseUrlOfSut + "/printshops/896/pricetable/editstapling?EMextraParam123=_EM_111_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/896/pricetable/editstapling"));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/printshops/{printShopId}/reviews/{reviewId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_360_putOnReviewReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/printshops/120/reviews/1963238607?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/120/reviews/1963238607"));
    }
    
    
    /**
    * Calls:
    * (401) DELETE:/consumer/requests/cancel/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_361_deleteOnCancelReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/210")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/requests/cancel/210"));
    }
    
    
    /**
    * Calls:
    * (401) DELETE:/consumer/{consumerID}/printingschemas/{printingSchemaID}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_362_deleteOnPrintingschemaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/64950077/printingschemas/450")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/64950077/printingschemas/450"));
    }
    
    
    /**
    * Calls:
    * (401) DELETE:/printshops/{printShopID}/employees/{employeeID}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_363_deleteOnEmployeReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_860_XYZ_")
                .delete(baseUrlOfSut + "/printshops/946/employees/4436306702629809313")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/946/employees/4436306702629809313"));
    }
    
    
    /**
    * Calls:
    * (401) DELETE:/printshops/{printShopId}/reviews/{reviewId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_364_deleteOnReviewReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/printshops/50/reviews/643")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/50/reviews/643"));
    }
    
    
    /**
    * Calls:
    * 1 - (401) POST:/request/accept/{id}
    * 2 - (401) POST:/request/accept/{id}
    * 3 - (401) DELETE:/consumer/{consumerID}/printingschemas/{printingSchemaID}
    * Found 3 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_365_deleteOnPrintingschemaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_882_XYZ_")
                .post(baseUrlOfSut + "/request/accept/560")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/request/accept/560"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "hwtsH6Kk7EbNGe")
                .post(baseUrlOfSut + "/request/accept/560")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/request/accept/560"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_883_XYZ_")
                .delete(baseUrlOfSut + "/consumer/62852925/printingschemas/450")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/62852925/printingschemas/450"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/consumer/printrequest/{printRequestID}/submit
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_366_postOnSubmitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/printrequest/-5005048468313221780/submit?EMextraParam123=_EM_249_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/printrequest/-5005048468313221780/submit"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/requests/cancel/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_367_postOnCancelReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"_EM_251_XYZ_\" ")
                .post(baseUrlOfSut + "/printshops/requests/cancel/6656859954950536083")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/requests/cancel/6656859954950536083"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/covers
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_368_postOnCoversReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"jXyYkc1DHY8x5cps\", " + 
                    " \"priceA3\": \"gjl1WtnUrxS3\", " + 
                    " \"priceA4\": \"_EM_411_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/239/pricetable/covers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/239/pricetable/covers"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/deletecover
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_369_postOnDeletecoverReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"w0NPP5\", " + 
                    " \"priceA4\": \"03LJcz4U9qVV1\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/227/pricetable/deletecover")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/227/pricetable/deletecover"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/deletepaper
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_370_postOnDeletepaperReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"vJoq\", " + 
                    " \"infLim\": 744, " + 
                    " \"priceA3DUPLEX\": \"B8Ee3aCP2Ze\", " + 
                    " \"priceA4SIMPLEX\": \"qVq6pizDgjZLbp\", " + 
                    " \"supLim\": 675 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/298/pricetable/deletepaper")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/298/pricetable/deletepaper"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/deletering
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_371_postOnPricetableDeleteringWithQueryParam() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "_EM_422_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 0, " + 
                    " \"price\": \"_EM_419_XYZ_\", " + 
                    " \"ringType\": \"_EM_420_XYZ_\", " + 
                    " \"supLim\": 46 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/-4090611399264086138/pricetable/deletering?EMextraParam123=_EM_421_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-4090611399264086138/pricetable/deletering"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/papers
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_372_postOnPapersReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_264_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 756, " + 
                    " \"priceA4DUPLEX\": \"_EM_262_XYZ_\", " + 
                    " \"priceA4SIMPLEX\": \"KWMv\", " + 
                    " \"supLim\": 569 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/451/pricetable/papers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/451/pricetable/papers"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/rings
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_373_postOnRingsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 486, " + 
                    " \"price\": \"221\", " + 
                    " \"ringType\": \"qQ_Gfj\", " + 
                    " \"supLim\": 814 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/221/pricetable/rings")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/221/pricetable/rings"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/deletepaper
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_374_postOnPricetableDeletepaperWithQueryParam() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 385, " + 
                    " \"priceA3DUPLEX\": \"WzBsyUnMP_\", " + 
                    " \"priceA4DUPLEX\": \"3p0lm\", " + 
                    " \"priceA4SIMPLEX\": \"_EM_417_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/104564582/pricetable/deletepaper?EMextraParam123=_EM_418_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/104564582/pricetable/deletepaper"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/covers
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_375_postOnCoversReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA4\": \"_EM_254_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/62/pricetable/covers?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/62/pricetable/covers"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/deletering
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_376_postOnDeleteringReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/printshops/846/pricetable/deletering")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/846/pricetable/deletering"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/rings
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_377_postOnRingsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 37, " + 
                    " \"ringType\": \"_EM_265_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/554/pricetable/rings?EMextraParam123=_EM_266_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/554/pricetable/rings"));
    }
    
    
    /**
    * Calls:
    * 1 - (403) POST:/printshops/requests/cancel/{id}
    * 2 - (403) POST:/printshops/requests/cancel/{id}
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_378_postOnCancelReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" -1416943882 ")
                .post(baseUrlOfSut + "/printshops/requests/cancel/-1416943882?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/requests/cancel/-1416943882"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" _EM_322_XYZ_ ")
                .post(baseUrlOfSut + "/printshops/requests/cancel/-1416943882")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/requests/cancel/-1416943882"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/requests/cancel/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_379_postOnCancelReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" 160 ")
                .post(baseUrlOfSut + "/printshops/requests/cancel/160?EMextraParam123=_EM_409_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/requests/cancel/160"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/deletecover
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_380_postOnDeletecoverReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"_EM_413_XYZ_\", " + 
                    " \"priceA3\": \"dop9SGaaa\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/2456941274936233466/pricetable/deletecover?EMextraParam123=_EM_414_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/2456941274936233466/pricetable/deletecover"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/papers
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_381_postOnPapersReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"_EM_423_XYZ_\", " + 
                    " \"priceA3DUPLEX\": \"_EM_424_XYZ_\", " + 
                    " \"priceA4SIMPLEX\": \"_EM_427_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/458/pricetable/papers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/458/pricetable/papers"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/covers
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_382_postOnCoversReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA3\": \"qWJ4H5dBsHah\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/-614996323/pricetable/covers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-614996323/pricetable/covers"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/consumer/printrequest/{printRequestID}/submit
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_383_postOnSubmitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/printrequest/471/submit")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/printrequest/471/submit"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/consumer/printrequest/{printRequestID}/submit
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_384_postOnSubmitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/printrequest/3384395803619362704/submit")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/printrequest/3384395803619362704/submit"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/covers
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_385_postOnCoversReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA4\": \"_EM_736_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/413/pricetable/covers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/413/pricetable/covers"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/deletecover
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_386_postOnDeletecoverReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"Wej\", " + 
                    " \"priceA4\": \"_EM_738_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/709/pricetable/deletecover")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/709/pricetable/deletecover"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/deletepaper
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_387_postOnDeletepaperReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"JfWR\", " + 
                    " \"infLim\": 622, " + 
                    " \"priceA4SIMPLEX\": \"XeBRg4\", " + 
                    " \"supLim\": 973 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/983/pricetable/deletepaper")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/983/pricetable/deletepaper"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/deletering
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_388_postOnDeleteringReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"price\": \"_EM_743_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/178/pricetable/deletering")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/178/pricetable/deletering"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/papers
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_389_postOnPapersReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 544, " + 
                    " \"priceA3DUPLEX\": \"_EM_745_XYZ_\", " + 
                    " \"priceA4DUPLEX\": \"1xEnzD\", " + 
                    " \"priceA4SIMPLEX\": \"9wDAG5P9qyIn\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/575/pricetable/papers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/575/pricetable/papers"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/rings
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_390_postOnRingsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"ringType\": \"_EM_747_XYZ_\", " + 
                    " \"supLim\": 328 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/722/pricetable/rings")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/722/pricetable/rings"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{printShopId}/reviews/{reviewId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_391_putOnReviewReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_308_XYZ_")
                .put(baseUrlOfSut + "/printshops/582/reviews/5276794891762468603?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/582/reviews/5276794891762468603"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{printShopId}/reviews/{reviewId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_392_putOnReviewReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/printshops/-1099819827/reviews/937")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-1099819827/reviews/937"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{printShopId}/reviews/{reviewId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_393_putOnReviewReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/printshops/603/reviews/63")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/603/reviews/63"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{id}/pricetable/covers
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_394_putOnCoversReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA3\": \"_EM_464_XYZ_\", " + 
                    " \"priceA4\": \"_EM_465_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/-8376786807641055986/pricetable/covers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-8376786807641055986/pricetable/covers"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{id}/pricetable/rings
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_395_putOnRingsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"price\": \"_EM_305_XYZ_\", " + 
                    " \"ringType\": \"_EM_306_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/709/pricetable/rings")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/709/pricetable/rings"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/consumer/{consumerID}/printingschemas/{printingSchemaID}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_396_putOnPrintingschemaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"_EM_774_XYZ_\", " + 
                    " \"coverSpecs\": \"s\", " + 
                    " \"id\": 316, " + 
                    " \"name\": \"a1\", " + 
                    " \"paperSpecs\": \"q2i53gtmxKkFks\" " + 
                    " } ")
                .put(baseUrlOfSut + "/consumer/804/printingschemas/316")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/804/printingschemas/316"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{id}/pricetable/papers
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_397_putOnPapersReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"4IinivydUDLyYt\", " + 
                    " \"infLim\": 110, " + 
                    " \"supLim\": 355 " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/434/pricetable/papers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/434/pricetable/papers"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{printShopID}/pricetable/editstapling
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_398_putOnEditstaplingReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"_EM_307_XYZ_\" ")
                .put(baseUrlOfSut + "/printshops/696/pricetable/editstapling?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/696/pricetable/editstapling"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{id}/pricetable/papers
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_399_putOnPapersReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA3DUPLEX\": \"_EM_292_XYZ_\", " + 
                    " \"priceA3SIMPLEX\": \"_EM_293_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/513/pricetable/papers?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/513/pricetable/papers"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/consumer/{consumerID}/printingschemas/{printingSchemaID}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_400_putOnPrintingschemaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"\", " + 
                    " \"id\": 982, " + 
                    " \"name\": \"LuTl0\", " + 
                    " \"paperSpecs\": \"CCGWoAd19_c4u\" " + 
                    " } ")
                .put(baseUrlOfSut + "/consumer/659/printingschemas/982")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/659/printingschemas/982"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{id}/pricetable/covers
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_401_putOnCoversReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"_EM_299_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/386/pricetable/covers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/386/pricetable/covers"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{id}/pricetable/rings
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_402_putOnRingsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"ringType\": \"_EM_470_XYZ_\", " + 
                    " \"supLim\": 940 " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/974/pricetable/rings")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/974/pricetable/rings"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{printShopID}/pricetable/editstapling
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_403_putOnEditstaplingReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"-6120369859071549151\" ")
                .put(baseUrlOfSut + "/printshops/-6120369859071549151/pricetable/editstapling")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-6120369859071549151/pricetable/editstapling"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/consumer/{consumerID}/printingschemas/{printingSchemaID}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_404_putOnPrintingschemaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"deleted\": false, " + 
                    " \"paperSpecs\": \"NqenEw5b\" " + 
                    " } ")
                .put(baseUrlOfSut + "/consumer/24/printingschemas/290")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/24/printingschemas/290"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{id}/pricetable/covers
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_405_putOnCoversReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA4\": \"6w7Zvc7mkK2\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/1135148320/pricetable/covers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/1135148320/pricetable/covers"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{id}/pricetable/rings
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_406_putOnRingsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"price\": \"993\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/993/pricetable/rings")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/993/pricetable/rings"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{id}/pricetable/papers
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_407_putOnPapersReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"_EM_781_XYZ_\", " + 
                    " \"priceA3DUPLEX\": \"_EM_782_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/296/pricetable/papers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/296/pricetable/papers"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{printShopID}/pricetable/editstapling
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_408_putOnEditstaplingReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" _EM_787_XYZ_ ")
                .put(baseUrlOfSut + "/printshops/146/pricetable/editstapling")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/146/pricetable/editstapling"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/consumer/requests/cancel/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_409_deleteOnRequestsCancelWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "Ohtpf")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/423?username=XMZeKD")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/requests/cancel/423"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/consumer/requests/cancel/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_410_deleteOnCancelReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/906")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/requests/cancel/906"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/consumer/{consumerID}/printingschemas/{printingSchemaID}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_411_deleteOnPrintingschemaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_207_XYZ_")
                .delete(baseUrlOfSut + "/consumer/426918973/printingschemas/200")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/426918973/printingschemas/200"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/printshops/{printShopID}/employees/{employeeID}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_412_deleteOnEmployeReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/printshops/18/employees/915")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/18/employees/915"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/printshops/{printShopId}/reviews/{reviewId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_413_deleteOnReviewReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/printshops/751/reviews/872")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/751/reviews/872"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/printshops/{printShopId}/reviews/{reviewId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_414_deleteOnReviewReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/printshops/344/reviews/834")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/344/reviews/834"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/printshops/{printShopID}/employees/{employeeID}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_415_deleteOnPrintshopEmployeWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/printshops/318/employees/923?EMextraParam123=_EM_379_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/318/employees/923"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/consumer/{consumerID}/printingschemas/{printingSchemaID}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_416_deleteOnPrintingschemaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/63/printingschemas/725")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/63/printingschemas/725"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/consumer/requests/cancel/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_417_deleteOnCancelReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/500")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/requests/cancel/500"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/consumer/{consumerID}/printingschemas/{printingSchemaID}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_418_deleteOnPrintingschemaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/115/printingschemas/6602629956150910926")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/115/printingschemas/6602629956150910926"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/printshops/{printShopID}/employees/{employeeID}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_419_deleteOnEmployeReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/printshops/285/employees/605")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/285/employees/605"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/printshops/{printShopId}/reviews/{reviewId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_420_deleteOnReviewReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/printshops/196/reviews/1719542437800737379")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/196/reviews/1719542437800737379"));
    }
    
    
    /**
    * Calls:
    * 1 - (403) PUT:/printshops/{printShopId}/reviews/{reviewId}
    * 2 - (403) DELETE:/printshops/{printShopId}/reviews/{reviewId}
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_421_deleteOnReviewReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/printshops/-32067/reviews/-8087")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-32067/reviews/-8087"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/printshops/-32067/reviews/-8087")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-32067/reviews/-8087"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/consumer/requests/cancel/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_422_deleteOnCancelReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_2_XYZ_")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/-1175589324")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/requests/cancel/-1175589324"));
    }
    
    
    /**
    * Calls:
    * (404) PUT:/printshops/{printShopId}/reviews/{reviewId}
    */
    @Test @Timeout(60)
    public void test_423_putOnReviewReturns404() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/printshops/689/reviews/759")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/printshops/{printShopId}/reviews/{reviewId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_424_deleteOnReviewReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/printshops/{printShopId}/reviews/{reviewId}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/printshops/507/reviews/812")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
