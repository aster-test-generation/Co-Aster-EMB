package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-04T17:14:24.264-04:00[America/New_York]
 * <br>
*  The generated test suite contains 425 tests
 * <br>
*  Covered targets: 3113
 * <br>
*  Used time: 1h 8m 36s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  
*/

public class EM_proxyprintdefault_1234_Test_90_test_90_getOnPrintdocuReturnsContentUsingSql {
    

    
    private static final SutHandler controller = new em.external.io.github.proxyprint.kitchen.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/proxyprint-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (200) GET:/printdocument/{id}
    */
    @Test @Timeout(60)
    public void test_90_getOnPrintdocuReturnsContentUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 968L)
                .d("ADDRESS", "\"G18go6qbu\"")
                .d("AVG_RATING", "0.1725991484617383")
                .d("BALANCE_CURRENCY", "\"_LBPpEMfecfgcJM\"")
                .d("BALANCE_FRACTIONAL_PART", "414")
                .d("BALANCE_INTEGER_PART", "355")
                .d("LATITUDE", "0.7608755550171385")
                .d("LOGO", "\"mX4QqQq9SOdaS\"")
                .d("LONGITUDE", "0.6705942305106735")
                .d("NAME", "\"pTVqLL_nnD1Ttn2P\"")
                .d("NIF", "\"mafkkZphDgfrkHj4\"")
            .and().insertInto("PRINTSHOPS", 967L)
                .d("ADDRESS", "\"O5lRtbMEqebU\"")
                .d("AVG_RATING", "0.21931683568080773")
                .d("BALANCE_CURRENCY", "\"5Oh36a7Eq\"")
                .d("BALANCE_FRACTIONAL_PART", "1029")
                .d("BALANCE_INTEGER_PART", "-7592")
                .d("LATITUDE", "0.801587")
                .d("LOGO", "\"uf4WPJ87ns6fYT1\"")
                .d("LONGITUDE", "-1454.0530784438795")
                .d("NAME", "\"ZTnrpe\"")
                .d("NIF", "\"v5qEL\"")
            .and().insertInto("USERS", 966L)
                .d("PASSWORD", "\"HCAoNg3\"")
                .d("USERNAME", "\"u5YhxViXd\"")
            .and().insertInto("CONSUMERS", 965L)
                .d("BALANCE_CURRENCY", "\"q7Ppd9j\"")
                .d("BALANCE_FRACTIONAL_PART", "443")
                .d("BALANCE_INTEGER_PART", "101")
                .d("NAME", "\"UUGsxdUJnxz\"")
                .d("ID", "8")
            .and().insertInto("PRINT_REQUESTS", 962L)
                .d("ARRIVAL", "\"1905-04-20 08:49:35\"")
                .d("COST", "0.40394934455")
                .d("DELIVERED", "\"2011-03-12 19:59:58\"")
                .d("EMPATTENDED", "NULL")
                .d("EMPDELIVERED", "\"tz0AKFRvCvX\"")
                .d("FINISHED", "NULL")
                .d("PAYPAL_SALE_ID", "NULL")
                .d("PAYMENT_TYPE", "\"e_i\"")
                .d("STATUS", "NULL")
                .d("CONSUMER_ID", "NULL")
                .d("PRINTSHOP_ID", "NULL")
                .d("PRINTSHOP", "NULL")
                .d("CONSUMER", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printdocument/-235")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
}
