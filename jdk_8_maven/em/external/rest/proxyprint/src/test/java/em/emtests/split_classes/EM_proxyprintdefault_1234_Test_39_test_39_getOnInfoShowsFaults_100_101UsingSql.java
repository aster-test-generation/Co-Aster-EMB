package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-04T17:14:24.264-04:00[America/New_York]
 * <br>
*  The generated test suite contains 425 tests
 * <br>
*  Covered targets: 3113
 * <br>
*  Used time: 1h 8m 36s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  
*/

public class EM_proxyprintdefault_1234_Test_39_test_39_getOnInfoShowsFaults_100_101UsingSql {
    

    
    private static final SutHandler controller = new em.external.io.github.proxyprint.kitchen.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/proxyprint-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (500) POST:/consumer/printrequest/{printRequestID}/submit
    * 2 - (403) POST:/request/reject/{printRequestID}
    * 3 - (404) PUT:/printshops/{printShopId}/reviews/{reviewId}
    * 4 - (404) PUT:/printshops/{printShopId}/reviews/{reviewId}
    * 5 - (404) POST:/consumer/subscribe
    * 6 - (404) DELETE:/consumer/subscribe
    * 7 - (200) GET:/consumer/info
    * Found 4 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_39_getOnInfoShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1893L)
                .d("ADDRESS", "\"mZMZzeyAgB\"")
                .d("AVG_RATING", "0.5741377011283946")
                .d("BALANCE_CURRENCY", "\"\"")
                .d("BALANCE_FRACTIONAL_PART", "874599372")
                .d("BALANCE_INTEGER_PART", "738")
                .d("LATITUDE", "0.24456255493823853")
                .d("LOGO", "\"VCYRQhTsDldk4\"")
                .d("LONGITUDE", "0.20409727891347018")
                .d("NAME", "\"\"")
                .d("NIF", "\"j\"")
            .and().insertInto("PRINTSHOPS", 1892L)
                .d("ADDRESS", "\"tD5\"")
                .d("AVG_RATING", "0.2005883695111652")
                .d("BALANCE_CURRENCY", "\"bj2JLGV4\"")
                .d("BALANCE_FRACTIONAL_PART", "699")
                .d("BALANCE_INTEGER_PART", "874")
                .d("LATITUDE", "0.6417331127062529")
                .d("LOGO", "\"0kLsSEImIIz5kw\"")
                .d("LONGITUDE", "0.6732302340842691")
                .d("NAME", "\"zGZd\"")
                .d("NIF", "\"3FoEwyp3VwvH\"")
            .and().insertInto("USERS", 1891L)
                .d("PASSWORD", "\"ivMhJrDKWcg\"")
                .d("USERNAME", "\"_ZZCgQDrSdzyH\"")
            .and().insertInto("CONSUMERS", 1890L)
                .d("BALANCE_CURRENCY", "\"41_M\"")
                .d("BALANCE_FRACTIONAL_PART", "508")
                .d("BALANCE_INTEGER_PART", "122")
                .d("NAME", "\"vcS599nzqzyM\"")
                .d("ID", "18")
            .and().insertInto("USERS", 1889L)
                .d("PASSWORD", "\"dppmDAlpUf\"")
                .d("USERNAME", "\"61FtDk2aY0Va2\"")
            .and().insertInto("CONSUMERS", 1888L)
                .d("BALANCE_CURRENCY", "\"aadK\"")
                .d("BALANCE_FRACTIONAL_PART", "721")
                .d("BALANCE_INTEGER_PART", "564")
                .d("NAME", "\"nnxO7fEegiyH\"")
                .d("ID", "10")
            .and().insertInto("PRINT_REQUESTS", 1887L)
                .d("ARRIVAL", "\"2072-05-14 19:43:01\"")
                .d("COST", "0.9748480318943591")
                .d("DELIVERED", "\"1915-11-29 10:06:00\"")
                .d("EMPATTENDED", "NULL")
                .d("EMPDELIVERED", "NULL")
                .d("FINISHED", "NULL")
                .d("PAYPAL_SALE_ID", "NULL")
                .d("PAYMENT_TYPE", "NULL")
                .d("STATUS", "NULL")
                .d("CONSUMER_ID", "NULL")
                .d("PRINTSHOP_ID", "NULL")
                .d("PRINTSHOP", "NULL")
                .d("CONSUMER", "NULL")
            .and().insertInto("PRINTSHOPS", 295L)
                .d("ADDRESS", "\"o_FPgR4n\"")
                .d("AVG_RATING", "0.21209766649224182")
                .d("BALANCE_CURRENCY", "\"DFQ\"")
                .d("BALANCE_FRACTIONAL_PART", "165")
                .d("BALANCE_INTEGER_PART", "486")
                .d("LATITUDE", "0.780571869044891")
                .d("LOGO", "\"_EM_952_XYZ_\"")
                .d("LONGITUDE", "0.5464508201073996")
                .d("NAME", "\"WNWX1ft\"")
                .d("NIF", "\"_EM_953_XYZ_\"")
            .and().insertInto("PRINTSHOPS", 294L)
                .d("ADDRESS", "\"Tyh\"")
                .d("AVG_RATING", "0.14734468628813557")
                .d("BALANCE_CURRENCY", "\"_EM_954_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "448")
                .d("BALANCE_INTEGER_PART", "829")
                .d("LATITUDE", "0.12455652847270271")
                .d("LOGO", "\"T3xQdNTGjLL2uv\"")
                .d("LONGITUDE", "0.23041151571593155")
                .d("NAME", "\"9QCRvs_TcXD0yy\"")
                .d("NIF", "\"_EM_955_XYZ_\"")
            .and().insertInto("USERS", 293L)
                .d("PASSWORD", "\"6InR6fG84L\"")
                .d("USERNAME", "\"_EM_956_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_210_finishAndSubmitPrintRequest.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/printrequest/{printRequestID}/submit'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/printrequest/788/submit")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_210_finishAndSubmitPrintRequest
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/printrequest/788/submit"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" _EM_957_XYZ_ ")
                .post(baseUrlOfSut + "/request/reject/788")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/request/reject/788"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/printshops/644/reviews/774")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GRxkUcce4_YNQobv")
                .put(baseUrlOfSut + "/printshops/644/reviews/774")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=7rmr4m&" + 
                    "username=&" + 
                    "latitude=5JL&" + 
                    "longitude=X6m")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "GRxkUcce4_YNQobv")
                .get(baseUrlOfSut + "/consumer/info")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"consumer\":{\"name\":\"João dos Santos\",\"email\":\"proxyprint.pt.consumer@gmail.com\",\"latitude\":\"69\",\"longitude\":\"69\",\"printingSchemas\":[{\"id\":2,\"name\":\"A4+2LAD+CORES+Encaderna\",\"paperSpecs\":\"PAPER,COLOR,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_OPAQUE,A3\",\"deleted\":false},{\"id\":5,\"name\":\"A4+SIMPLEX+COLOR\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":3,\"name\":\"A4+SIMPLEX+PW+Encadernar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_TRANSPARENT,A4\",\"deleted\":false},{\"id\":4,\"name\":\"A4+2LAD+PB\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":1,\"name\":\"A4+2LAD+PB+Agrafar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,STAPLING,0,0\",\"coverSpecs\":\"\",\"deleted\":false}],\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"id\":2,\"username\":\"joao\",\"password\":\"1234\",\"roles\":[\"ROLE_USER\"]},\"success\":true}"));
    }
}
