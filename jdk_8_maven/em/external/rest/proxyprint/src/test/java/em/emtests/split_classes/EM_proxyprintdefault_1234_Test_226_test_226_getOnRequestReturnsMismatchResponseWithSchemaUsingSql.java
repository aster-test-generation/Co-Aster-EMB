package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-04T17:14:24.264-04:00[America/New_York]
 * <br>
*  The generated test suite contains 425 tests
 * <br>
*  Covered targets: 3113
 * <br>
*  Used time: 1h 8m 36s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  
*/

public class EM_proxyprintdefault_1234_Test_226_test_226_getOnRequestReturnsMismatchResponseWithSchemaUsingSql {
    

    
    private static final SutHandler controller = new em.external.io.github.proxyprint.kitchen.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/proxyprint-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (200) GET:/printshops/history
    * 2 - (403) POST:/printshops/{id}/reviews
    * 3 - (403) POST:/printshops/{id}/pricetable/rings
    * 4 - (403) POST:/printshops/{id}/pricetable/rings
    * 5 - (404) GET:/documents/{id}
    * 6 - (403) POST:/printshops/{id}/pricetable/papers
    * 7 - (403) POST:/printshops/{id}/pricetable/papers
    * 8 - (200) POST:/printshops/requests/{id}
    * 9 - (200) GET:/printshops/requests/{id}
    * Found 5 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_226_getOnRequestReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1382L)
                .d("ADDRESS", "\"F\"")
                .d("AVG_RATING", "0.9728379037585096")
                .d("BALANCE_CURRENCY", "\"\"")
                .d("BALANCE_FRACTIONAL_PART", "58")
                .d("BALANCE_INTEGER_PART", "31")
                .d("LATITUDE", "0.38075383084470293")
                .d("LOGO", "\"DeV31af9fqh0\"")
                .d("LONGITUDE", "0.9799988888941629")
                .d("NAME", "\"zJQQ0Ei6P3w0vlik\"")
                .d("NIF", "\"jPFQc6eQAHbEe6gk\"")
            .and().insertInto("PRINTSHOPS", 1381L)
                .d("ADDRESS", "\"D2yzekht5\"")
                .d("AVG_RATING", "0.6987973851063877")
                .d("BALANCE_CURRENCY", "\"1\"")
                .d("BALANCE_FRACTIONAL_PART", "499816253")
                .d("BALANCE_INTEGER_PART", "313")
                .d("LATITUDE", "0.8634929877449754")
                .d("LOGO", "\"EZS\"")
                .d("LONGITUDE", "0.18210496944401533")
                .d("NAME", "\"IDSXJwxJ2zUC\"")
                .d("NIF", "\"qzrms2eqPPDuEpx\"")
            .and().insertInto("USERS", 1380L)
                .d("PASSWORD", "\"Cy7phQKnBDDn\"")
                .d("USERNAME", "\"pGfSBKLMozKwpi\"")
            .and().insertInto("CONSUMERS", 1379L)
                .d("BALANCE_CURRENCY", "\"ThTOjqj0MLZoY7\"")
                .d("BALANCE_FRACTIONAL_PART", "752")
                .d("BALANCE_INTEGER_PART", "364")
                .d("NAME", "\"ZgfmcZ5HwNY\"")
                .d("ID", "6")
            .and().insertInto("USERS", 1378L)
                .d("PASSWORD", "\"\"")
                .d("USERNAME", "\"s\"")
            .and().insertInto("CONSUMERS", 1377L)
                .d("BALANCE_CURRENCY", "\"PMVOYx\"")
                .d("BALANCE_FRACTIONAL_PART", "757")
                .d("BALANCE_INTEGER_PART", "86")
                .d("NAME", "\"E\"")
                .d("ID", "1")
            .and().insertInto("PRINT_REQUESTS", 1376L)
                .d("ARRIVAL", "\"1912-06-15 01:24:52\"")
                .d("COST", "0.6891474214832749")
                .d("DELIVERED", "NULL")
                .d("EMPATTENDED", "\"\"")
                .d("EMPDELIVERED", "NULL")
                .d("FINISHED", "NULL")
                .d("PAYPAL_SALE_ID", "NULL")
                .d("PAYMENT_TYPE", "\"Bk0legApxP\"")
                .d("STATUS", "NULL")
                .d("CONSUMER_ID", "NULL")
                .d("PRINTSHOP_ID", "NULL")
                .d("PRINTSHOP", "NULL")
                .d("CONSUMER", "NULL")
            .and().insertInto("PRINTSHOPS", 1390L)
                .d("ADDRESS", "\"mAFLkV67f4Lw\"")
                .d("AVG_RATING", "0.8304608103758092")
                .d("BALANCE_CURRENCY", "\"vib3W_Z\"")
                .d("BALANCE_FRACTIONAL_PART", "759")
                .d("BALANCE_INTEGER_PART", "917")
                .d("LATITUDE", "0.614841074973813")
                .d("LOGO", "\"Jq6KyLG\"")
                .d("LONGITUDE", "0.9117660080487873")
                .d("NAME", "\"H9g0juard0iswK8\"")
                .d("NIF", "\"nWml3vVy9ySV7q\"")
            .and().insertInto("PRINTSHOPS", 1389L)
                .d("ADDRESS", "\"_yap_gyQj8DIXwY\"")
                .d("AVG_RATING", "0.6181457448828008")
                .d("BALANCE_CURRENCY", "\"f6Uq3rWAETtXD3\"")
                .d("BALANCE_FRACTIONAL_PART", "592")
                .d("BALANCE_INTEGER_PART", "250")
                .d("LATITUDE", "0.024514262631821104")
                .d("LOGO", "\"2\"")
                .d("LONGITUDE", "0.8061297581724252")
                .d("NAME", "\"kW_OpvSkoDx1f\"")
                .d("NIF", "\"fZ6o_Yfi_N\"")
            .and().insertInto("USERS", 1388L)
                .d("PASSWORD", "\"TRZ40aQfs_fIq\"")
                .d("USERNAME", "\"TyDGwLqIVcFK1aHP\"")
            .and().insertInto("CONSUMERS", 1387L)
                .d("BALANCE_CURRENCY", "\"a9mAX1uf\"")
                .d("BALANCE_FRACTIONAL_PART", "404")
                .d("BALANCE_INTEGER_PART", "313")
                .d("NAME", "\"lB9LY2VoRA\"")
                .d("ID", "18")
            .and().insertInto("USERS", 1386L)
                .d("PASSWORD", "\"S\"")
                .d("USERNAME", "\"2cMPunz\"")
            .and().insertInto("CONSUMERS", 1385L)
                .d("BALANCE_CURRENCY", "\"IwVDlUiEoYXy0f\"")
                .d("BALANCE_FRACTIONAL_PART", "123")
                .d("BALANCE_INTEGER_PART", "695")
                .d("NAME", "\"rUXdS837UB\"")
                .r("ID", 1388L)
            .and().insertInto("PRINT_REQUESTS", 1384L)
                .d("COST", "0.9599820752444819")
            .and().insertInto("DOCUMENTS", 1383L)
                .d("FILE_NAME", "\"iStnhSUBZ5Vy\"")
                .d("TOTAL_PAGES", "430")
                .d("PRINT_REQUEST_ID", "NULL")
            .and().insertInto("PRINTSHOPS", 1254L)
                .d("ADDRESS", "\"XjjWDVL2z3NI\"")
                .d("AVG_RATING", "0.5745094860990534")
                .d("BALANCE_CURRENCY", "\"dVb\"")
                .d("BALANCE_FRACTIONAL_PART", "181")
                .d("BALANCE_INTEGER_PART", "-599302740")
                .d("LATITUDE", "0.6555818114574555")
                .d("LOGO", "\"OODKTF\"")
                .d("LONGITUDE", "0.479248805538358")
                .d("NAME", "\"nr7MoH9rcq\"")
                .d("NIF", "\"mCITITlbdMQrEDsv\"")
            .and().insertInto("USERS", 1260L)
                .d("PASSWORD", "\"WUeaYicVPXY6rUl8\"")
                .d("USERNAME", "\"_EM_3165_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "YtodfO")
                .get(baseUrlOfSut + "/printshops/history")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"historyrequests\":[],\"success\":true}"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/printshops/24/reviews")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/24/reviews"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"price\": \"66\", " + 
                    " \"supLim\": 55 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/24/pricetable/rings")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/24/pricetable/rings"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 870, " + 
                    " \"price\": \"TugbKAwN2Hei\", " + 
                    " \"ringType\": \"y\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/24/pricetable/rings")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/24/pricetable/rings"));
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "YtodfO")
                .get(baseUrlOfSut + "/documents/24")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"4Y62LnwmtroDil\", " + 
                    " \"priceA4DUPLEX\": \"UlsU\", " + 
                    " \"supLim\": 791 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/24/pricetable/papers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/24/pricetable/papers"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "YtodfO")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"Rzvw\", " + 
                    " \"priceA4SIMPLEX\": \"0\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/24/pricetable/papers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/24/pricetable/papers"));
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/printshops/requests/-933915984?EMextraParam123=_EM_9_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "42")
                .header("X-Requested-With", "")
                .get(baseUrlOfSut + "/printshops/requests/-933915984")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
}
