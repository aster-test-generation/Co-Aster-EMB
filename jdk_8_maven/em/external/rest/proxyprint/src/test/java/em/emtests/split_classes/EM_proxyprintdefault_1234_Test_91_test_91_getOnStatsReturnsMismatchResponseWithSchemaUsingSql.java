package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-04T17:14:24.264-04:00[America/New_York]
 * <br>
*  The generated test suite contains 425 tests
 * <br>
*  Covered targets: 3113
 * <br>
*  Used time: 1h 8m 36s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  
*/

public class EM_proxyprintdefault_1234_Test_91_test_91_getOnStatsReturnsMismatchResponseWithSchemaUsingSql {
    

    
    private static final SutHandler controller = new em.external.io.github.proxyprint.kitchen.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/proxyprint-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (200) GET:/printshops/history
    * 2 - (403) POST:/printshops/{id}/reviews
    * 3 - (403) POST:/printshops/{id}/pricetable/rings
    * 4 - (403) POST:/printshops/{id}/pricetable/rings
    * 5 - (404) GET:/documents/{id}
    * 6 - (403) POST:/printshops/{id}/pricetable/papers
    * 7 - (403) POST:/printshops/{id}/pricetable/papers
    * 8 - (403) GET:/printshops/stats
    * Found 6 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_91_getOnStatsReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1307L)
                .d("ADDRESS", "\"\"")
                .d("AVG_RATING", "0.2172100649447044")
                .d("BALANCE_CURRENCY", "\"\"")
                .d("BALANCE_FRACTIONAL_PART", "728")
                .d("BALANCE_INTEGER_PART", "135")
                .d("LATITUDE", "0.13972620171330496")
                .d("LOGO", "\"A9gDCcxtwaqNp\"")
                .d("LONGITUDE", "0.49075830945304455")
                .d("NAME", "\"BVQB0DT\"")
                .d("NIF", "\"uh2V35TSeUEZ\"")
            .and().insertInto("PRINTSHOPS", 1306L)
                .d("ADDRESS", "\"rfSG0m\"")
                .d("AVG_RATING", "0.5575875982498941")
                .d("BALANCE_CURRENCY", "\"s0v0hnEk9vGF7Dov\"")
                .d("BALANCE_FRACTIONAL_PART", "115")
                .d("BALANCE_INTEGER_PART", "239")
                .d("LATITUDE", "0.6456387106028637")
                .d("LOGO", "\"cR5RLZvaJBkwmd\"")
                .d("LONGITUDE", "0.21")
                .d("NAME", "\"noYIWLN9H\"")
                .d("NIF", "\"nLBK0kEPMIQYIZ\"")
            .and().insertInto("USERS", 1305L)
                .d("PASSWORD", "\"JQlLvvBzCOzjPAtw\"")
                .d("USERNAME", "\"C3T\"")
            .and().insertInto("CONSUMERS", 1304L)
                .d("BALANCE_CURRENCY", "\"mYA9SvZ50dI\"")
                .d("BALANCE_FRACTIONAL_PART", "890")
                .d("BALANCE_INTEGER_PART", "820")
                .d("NAME", "\"vMK7cQUk\"")
                .d("ID", "16")
            .and().insertInto("USERS", 1303L)
                .d("PASSWORD", "\"Ij\"")
                .d("USERNAME", "\"i5FLUT5\"")
            .and().insertInto("CONSUMERS", 1302L)
                .d("BALANCE_CURRENCY", "\"9kW\"")
                .d("BALANCE_FRACTIONAL_PART", "494")
                .d("BALANCE_INTEGER_PART", "369")
                .d("NAME", "\"piitVFFIk7MhI\"")
                .d("ID", "11")
            .and().insertInto("PRINT_REQUESTS", 1301L)
                .d("ARRIVAL", "NULL")
                .d("COST", "0.17094771056785085")
                .d("DELIVERED", "\"2059-08-06 23:14:02\"")
                .d("EMPATTENDED", "\"_8IM1Pxisk\"")
                .d("EMPDELIVERED", "\"\"")
                .d("FINISHED", "NULL")
                .d("PAYPAL_SALE_ID", "\"A\"")
                .d("PAYMENT_TYPE", "\"qhgHIUAeUuWKe\"")
                .d("STATUS", "NULL")
                .d("CONSUMER_ID", "NULL")
                .d("PRINTSHOP_ID", "NULL")
                .d("PRINTSHOP", "NULL")
                .d("CONSUMER", "NULL")
            .and().insertInto("PRINTSHOPS", 1315L)
                .d("ADDRESS", "\"f8\"")
                .d("AVG_RATING", "0.5702985897884658")
                .d("BALANCE_CURRENCY", "\"2ZigZ\"")
                .d("BALANCE_FRACTIONAL_PART", "861")
                .d("BALANCE_INTEGER_PART", "614")
                .d("LATITUDE", "0.7452359672299592")
                .d("LOGO", "\"YZtjSLl\"")
                .d("LONGITUDE", "0.7897774224636043")
                .d("NAME", "\"AeL\"")
                .d("NIF", "\"gSDf7\"")
            .and().insertInto("PRINTSHOPS", 1314L)
                .d("ADDRESS", "\"\"")
                .d("AVG_RATING", "0.4913633991676313")
                .d("BALANCE_CURRENCY", "\"7cF6YPPhG8FTY\"")
                .d("BALANCE_FRACTIONAL_PART", "878")
                .d("BALANCE_INTEGER_PART", "351")
                .d("LATITUDE", "0.9923852123428036")
                .d("LOGO", "\"vRHuCt8\"")
                .d("LONGITUDE", "0.3277310639104629")
                .d("NAME", "\"fU0jll_\"")
                .d("NIF", "\"M5o2\"")
            .and().insertInto("USERS", 1313L)
                .d("PASSWORD", "\"62A9\"")
                .d("USERNAME", "\"bEw60CVE\"")
            .and().insertInto("CONSUMERS", 1312L)
                .d("BALANCE_CURRENCY", "\"DZY7pu5QW3poXbsP\"")
                .d("BALANCE_FRACTIONAL_PART", "196")
                .d("BALANCE_INTEGER_PART", "852")
                .d("NAME", "\"xu0Sh\"")
                .r("ID", 1305L)
            .and().insertInto("PRINT_REQUESTS", 1309L)
                .d("COST", "0.014149216009937904")
            .and().insertInto("DOCUMENTS", 1308L)
                .d("FILE_NAME", "\"kYySJb7kshXw8qJZ\"")
                .d("TOTAL_PAGES", "397")
                .d("PRINT_REQUEST_ID", "NULL")
            .and().insertInto("PRINTSHOPS", 1254L)
                .d("ADDRESS", "\"XhjWDVL2z3NI\"")
                .d("AVG_RATING", "0.5745094860990534")
                .d("BALANCE_CURRENCY", "\"dVb\"")
                .d("BALANCE_FRACTIONAL_PART", "213")
                .d("BALANCE_INTEGER_PART", "-599302740")
                .d("LATITUDE", "0.6555818114574555")
                .d("LOGO", "\"OODKTF\"")
                .d("LONGITUDE", "0.479248805538358")
                .d("NAME", "\"nr7MoH9rcq\"")
                .d("NIF", "\"mCITITlbdMQrEDsv\"")
            .and().insertInto("USERS", 1260L)
                .d("PASSWORD", "\"WUeaYicVPXY6rUl8\"")
                .d("USERNAME", "\"_EM_3165_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "YtodfO")
                .get(baseUrlOfSut + "/printshops/history?message=TQR39_E59Rf")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"historyrequests\":[],\"success\":true}"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/printshops/24/reviews")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/24/reviews"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"price\": \"66\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/24/pricetable/rings")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/24/pricetable/rings"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "YtodfO")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 870, " + 
                    " \"price\": \"TugbKAwN2Hei\", " + 
                    " \"ringType\": \"y\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/24/pricetable/rings")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/24/pricetable/rings"));
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/documents/24")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"4Y62LnwmtroDil\", " + 
                    " \"priceA4DUPLEX\": \"UlsU\", " + 
                    " \"supLim\": 791 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/24/pricetable/papers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/24/pricetable/papers"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "YtodfO")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"Rzvw\", " + 
                    " \"priceA4SIMPLEX\": \"0\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/24/pricetable/papers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/24/pricetable/papers"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "d")
                .get(baseUrlOfSut + "/printshops/stats")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/stats"));
    }
}
