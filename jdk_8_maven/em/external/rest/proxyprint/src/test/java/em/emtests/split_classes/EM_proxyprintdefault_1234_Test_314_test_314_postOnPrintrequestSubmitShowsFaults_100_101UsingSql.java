package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-04T17:14:24.264-04:00[America/New_York]
 * <br>
*  The generated test suite contains 425 tests
 * <br>
*  Covered targets: 3113
 * <br>
*  Used time: 1h 8m 36s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  
*/

public class EM_proxyprintdefault_1234_Test_314_test_314_postOnPrintrequestSubmitShowsFaults_100_101UsingSql {
    

    
    private static final SutHandler controller = new em.external.io.github.proxyprint.kitchen.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/proxyprint-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (500) POST:/consumer/printrequest/{printRequestID}/submit
    * 2 - (500) POST:/consumer/printrequest/{printRequestID}/submit
    * Found 4 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_314_postOnPrintrequestSubmitShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1024L)
                .d("ADDRESS", "\"rNp4ICXnIA_ZOsiK\"")
                .d("AVG_RATING", "0.6319003572017176")
                .d("BALANCE_CURRENCY", "\"YeJEw9g7TYDkQdC\"")
                .d("BALANCE_FRACTIONAL_PART", "1202")
                .d("BALANCE_INTEGER_PART", "192")
                .d("LATITUDE", "0.5768934256602887")
                .d("LOGO", "\"IL\"")
                .d("LONGITUDE", "0.6515355423555229")
                .d("NAME", "\"Z93R3JFARkt7R62\"")
                .d("NIF", "\"uv\"")
            .and().insertInto("PRINTSHOPS", 1023L)
                .d("ADDRESS", "\"7bV8Kzx7ftEBX9\"")
                .d("AVG_RATING", "0.40097431115902993")
                .d("BALANCE_CURRENCY", "\"s3yB7l1l\"")
                .d("BALANCE_FRACTIONAL_PART", "543")
                .d("BALANCE_INTEGER_PART", "720")
                .d("LATITUDE", "0.3797693151808368")
                .d("LOGO", "\"\"")
                .d("LONGITUDE", "0.968180068262653")
                .d("NAME", "\"mtGZ45W\"")
                .d("NIF", "\"I56qw_\"")
            .and().insertInto("USERS", 1022L)
                .d("PASSWORD", "\"HQ\"")
                .d("USERNAME", "\"lLa92\"")
            .and().insertInto("CONSUMERS", 1021L)
                .d("BALANCE_CURRENCY", "\"_EM_2730_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "517")
                .d("BALANCE_INTEGER_PART", "2139")
                .d("NAME", "\"UKlT4GjO\"")
                .d("ID", "18")
            .and().insertInto("PRINT_REQUESTS", 1018L)
                .d("ARRIVAL", "\"2014-07-15 06:55:21\"")
                .d("COST", "0.22321654284698805")
                .d("DELIVERED", "\"1989-04-19 22:05:55\"")
                .d("EMPATTENDED", "NULL")
                .d("EMPDELIVERED", "\"PMp\"")
                .d("FINISHED", "NULL")
                .d("PAYPAL_SALE_ID", "\"3\"")
                .d("PAYMENT_TYPE", "NULL")
                .d("STATUS", "\"LIFTED\"")
                .d("CONSUMER_ID", "NULL")
                .d("PRINTSHOP_ID", "NULL")
                .d("PRINTSHOP", "NULL")
                .d("CONSUMER", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_210_finishAndSubmitPrintRequest.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/printrequest/{printRequestID}/submit'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"EM_tainted_map\": \"_EM_408_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/printrequest/519/submit")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_210_finishAndSubmitPrintRequest
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/printrequest/519/submit"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_210_finishAndSubmitPrintRequest.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/printrequest/{printRequestID}/submit'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"EM_tainted_map\": \"_EM_408_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/printrequest/519/submit")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_210_finishAndSubmitPrintRequest
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/printrequest/519/submit"));
    }
}
