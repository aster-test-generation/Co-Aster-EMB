package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-04T17:14:24.264-04:00[America/New_York]
 * <br>
*  The generated test suite contains 425 tests
 * <br>
*  Covered targets: 3113
 * <br>
*  Used time: 1h 8m 36s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  
*/

public class EM_proxyprintdefault_1234_Test_316_test_316_postOnPrintrequestSubmitWithQueryParamShowsFaults_100_101UsingSql {
    

    
    private static final SutHandler controller = new em.external.io.github.proxyprint.kitchen.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/proxyprint-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (500) POST:/consumer/{id}/notify
    * 2 - (500) POST:/consumer/{id}/notify
    * 3 - (500) POST:/consumer/budget
    * 4 - (500) POST:/consumer/budget
    * 5 - (200) GET:/consumer/balance
    * 6 - (500) POST:/consumer/printrequest/{printRequestID}/submit
    * Found 10 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_316_postOnPrintrequestSubmitWithQueryParamShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 315L)
                .d("ADDRESS", "\"gjyt\"")
                .d("AVG_RATING", "0.35168793259164144")
                .d("BALANCE_CURRENCY", "\"SebGjYzRL\"")
                .d("BALANCE_FRACTIONAL_PART", "234")
                .d("BALANCE_INTEGER_PART", "-1686874953")
                .d("LATITUDE", "0.27480142497135185")
                .d("LOGO", "\"sxGhfpNugECYhiw\"")
                .d("LONGITUDE", "0.26223059113526614")
                .d("NAME", "\"KEWdLArFaF\"")
                .d("NIF", "\"5GoaAZcLK3dQG\"")
            .and().insertInto("PRINTSHOPS", 676L)
                .d("ADDRESS", "\"PXY60UO0LNKVzwM5\"")
                .d("AVG_RATING", "0.34108852592926475")
                .d("BALANCE_CURRENCY", "\"qvS\"")
                .d("BALANCE_FRACTIONAL_PART", "358")
                .d("BALANCE_INTEGER_PART", "380")
                .d("LATITUDE", "0.1969037012437318")
                .d("LOGO", "\"KCJBPzFUrBn2\"")
                .d("LONGITUDE", "0.11216934992789229")
                .d("NAME", "\"Y3PSiNP\"")
                .d("NIF", "\"bx7rj8LKtAVTGPbc\"")
            .and().insertInto("PRINTSHOPS", 675L)
                .d("ADDRESS", "\"PvX_axQDPtYU\"")
                .d("AVG_RATING", "0.07547581397345193")
                .d("BALANCE_CURRENCY", "\"njTRrEAVH\"")
                .d("BALANCE_FRACTIONAL_PART", "406")
                .d("BALANCE_INTEGER_PART", "95")
                .d("LATITUDE", "0.5882761961858056")
                .d("LOGO", "\"psHH\"")
                .d("LONGITUDE", "0.9504376135559629")
                .d("NAME", "\"zxQJL\"")
                .d("NIF", "\"N5H_6\"")
            .and().insertInto("USERS", 674L)
                .d("PASSWORD", "\"XBqkP8MmHP\"")
                .d("USERNAME", "\"H\"")
            .and().insertInto("CONSUMERS", 673L)
                .d("BALANCE_CURRENCY", "\"r7XS2gSj9rvuOqPP\"")
                .d("BALANCE_FRACTIONAL_PART", "732")
                .d("BALANCE_INTEGER_PART", "242")
                .d("NAME", "\"06xVbYyi6aM2EQ\"")
                .d("ID", "17")
            .and().insertInto("USERS", 672L)
                .d("PASSWORD", "\"26\"")
                .d("USERNAME", "\"A6cNTWA3DrQTD\"")
            .and().insertInto("CONSUMERS", 671L)
                .d("BALANCE_CURRENCY", "\"qI58\"")
                .d("BALANCE_FRACTIONAL_PART", "240")
                .d("BALANCE_INTEGER_PART", "421")
                .d("NAME", "\"bPLMPamOH\"")
                .d("ID", "11")
            .and().insertInto("PRINT_REQUESTS", 670L)
                .d("ARRIVAL", "NULL")
                .d("COST", "0.15320730163712437")
                .d("DELIVERED", "\"1917-02-01 05:01:43\"")
                .d("EMPATTENDED", "\"5N3YfXMeybP\"")
                .d("EMPDELIVERED", "\"yTRvikaY2b\"")
                .d("FINISHED", "\"2074-09-12 14:02:49\"")
                .d("PAYPAL_SALE_ID", "NULL")
                .d("PAYMENT_TYPE", "\"Y1Vyw1Ty\"")
                .d("STATUS", "\"IN_PROGRESS\"")
                .d("CONSUMER_ID", "NULL")
                .d("PRINTSHOP_ID", "NULL")
                .d("PRINTSHOP", "NULL")
                .d("CONSUMER", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{id}/notify'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/446/notify?EMextraParam123=42")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/446/notify"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{id}/notify'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/446/notify?" + 
                    "latitude=lJHPn_4U8LhkSZ&" + 
                    "longitude=K")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/446/notify"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/models/repositories/UserService_42_loadUserByUsername.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/budget'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"requestJSON\": \"oNHL\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/budget")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/models/repositories/UserService_42_loadUserByUsername
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.web.multipart.MultipartException"))
                .body("'message'", containsString("Could not parse multipart servlet request; nested exception is javax.servlet.ServletException: org.apache.tomcat.util.http.fileupload.FileUploadBase$InvalidContentTypeException: the request doesn't contain a multipart/form-data or multipart/mixed stream, content type header is application/json"))
                .body("'path'", containsString("/consumer/budget"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/models/repositories/UserService_42_loadUserByUsername.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/budget'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"requestJSON\": \"oNHL\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/budget?EMextraParam123=42")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/models/repositories/UserService_42_loadUserByUsername
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.web.multipart.MultipartException"))
                .body("'message'", containsString("Could not parse multipart servlet request; nested exception is javax.servlet.ServletException: org.apache.tomcat.util.http.fileupload.FileUploadBase$InvalidContentTypeException: the request doesn't contain a multipart/form-data or multipart/mixed stream, content type header is application/json"))
                .body("'path'", containsString("/consumer/budget"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/balance")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"success\":true}"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_210_finishAndSubmitPrintRequest.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/printrequest/{printRequestID}/submit'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/consumer/printrequest/207/submit?EMextraParam123=42")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_210_finishAndSubmitPrintRequest
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/printrequest/207/submit"));
    }
}
