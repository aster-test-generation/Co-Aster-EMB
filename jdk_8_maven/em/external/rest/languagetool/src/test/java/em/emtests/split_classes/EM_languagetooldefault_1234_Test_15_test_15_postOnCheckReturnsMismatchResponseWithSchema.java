package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-04T04:20:41.503-04:00[America/New_York]
 * <br>
*  The generated test suite contains 40 tests
 * <br>
*  Covered targets: 13934
 * <br>
*  Used time: 1h 5m 5s
 * <br>
*  Needed budget for current results: 92%
 * <br>
*  
*/

public class EM_languagetooldefault_1234_Test_15_test_15_postOnCheckReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.org.languagetool.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/languagetool-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (200) POST:/v2/check
    * 2 - (400) POST:/v2/check
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_15_postOnCheckReturnsMismatchResponseWithSchema() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=_EM_13099_XYZ_&language=IT&enabledRules=_EM_3805_XYZ_&disabledRules=_EM_3805_XYZ_&enabledCategories=_EM_3806_XYZ_&disabledCategories=wr0_W")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'software'.'name'", containsString("LanguageTool"))
                .body("'software'.'version'", containsString("5.2-SNAPSHOT"))
                .body("'software'.'buildDate'", nullValue())
                .body("'software'.'apiVersion'", numberMatches(1.0))
                .body("'software'.'premium'", equalTo(false))
                .body("'software'.'premiumHint'", containsString("You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com."))
                .body("'software'.'status'", containsString(""))
                .body("'warnings'.'incompleteResults'", equalTo(false))
                .body("'language'.'name'", containsString("Italian"))
                .body("'language'.'code'", containsString("it"))
                .body("'language'.'detectedLanguage'.'name'", containsString("Catalan"))
                .body("'language'.'detectedLanguage'.'code'", containsString("ca-ES"))
                .body("'language'.'detectedLanguage'.'confidence'", numberMatches(0.32367373))
                .body("'matches'.size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/check'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=T9bVoC1a8GwDJ&language=cA&altLanguages=_EM_3809_XYZ_&motherTongue=q1Q7ZhaxHtcEz8&preferredVariants=_EM_3810_XYZ_&disabledRules=W&disabledCategories=U&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check?" + 
                    "apiKey=k%C2%82pCHB2jw&" + 
                    "inputLogging=no&" + 
                    "noopLanguages=IcdR9&" + 
                    "mode=_EM_3812_XYZ_&" + 
                    "password=NhSjRrHfps9&" + 
                    "enableTempOffRules=&" + 
                    "level=PUaNcj9TF7uqG&" + 
                    "enableHiddenRules=apmz5CR.vy3j6&" + 
                    "token=AiggPwCgA&" + 
                    "allowIncompleteResults=lJoMIKDJ&" + 
                    "autodetect=cxQKr2NBTbGbKZI&" + 
                    "filterDictionaryMatches=GT&" + 
                    "textSessionId=T9bUoC1a8GvCJ&" + 
                    "callback=PQSb9j3QVSep_Lj&" + 
                    "username=l9CaKw&" + 
                    "v=")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: You specified 'autodetect' but automatic language detection is now activated with 'language=auto' in v2 of the API"));
    }
}
