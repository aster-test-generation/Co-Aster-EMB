package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-04T04:20:41.503-04:00[America/New_York]
 * <br>
*  The generated test suite contains 40 tests
 * <br>
*  Covered targets: 13934
 * <br>
*  Used time: 1h 5m 5s
 * <br>
*  Needed budget for current results: 92%
 * <br>
*  
*/

public class EM_languagetooldefault_1234_Test_8_test_8_postOnCheckShowsFaults_100_101 {
    

    
    private static final SutHandler controller = new em.external.org.languagetool.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/languagetool-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (200) GET:/v2/languages
    * 2 - (500) POST:/v2/check
    * 3 - (400) POST:/v2/check
    * 4 - (400) POST:/v2/check
    * 5 - (400) POST:/v2/check
    * Found 5 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_8_postOnCheckShowsFaults_100_101() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v2/languages")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(44))
                .body("[0].'name'", containsString("Arabic"))
                .body("[0].'code'", containsString("ar"))
                .body("[0].'longCode'", containsString("ar"))
                .body("[1].'name'", containsString("Asturian"))
                .body("[1].'code'", containsString("ast"))
                .body("[1].'longCode'", containsString("ast-ES"))
                .body("[2].'name'", containsString("Belarusian"))
                .body("[2].'code'", containsString("be"))
                .body("[2].'longCode'", containsString("be-BY"))
                ; // Skipping assertions on the remaining 41 elements. This limit of 3 elements can be increased in the configurations
        
        // Fault100. HTTP Status 500. org/languagetool/server/ServerTools_191_getLevel.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/check'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=G5qQ2E4SZhCcxTK8&language=BMdV6rTBK6niV&altLanguages=HX02&preferredVariants=Dkc&enabledRules=s4R7tPjxfNS&disabledCategories=8Hw&enabledOnly=true")
                .post(baseUrlOfSut + "/v2/check?" + 
                    "useragent=_EM_8813_XYZ_&" + 
                    "noopLanguages=Vw7wi&" + 
                    "enableTempOffRules=qw54i&" + 
                    "preferredLanguages=_EM_8815_XYZ_&" + 
                    "level=sZjYifZjn3Cxu&" + 
                    "ruleValues=b&" + 
                    "sourceText=x1uprsC4_qsptn&" + 
                    "textSessionId=G5qQ2E4SZhCcxTK8&" + 
                    "tokenV2=u9Jj")
                .then()
                .statusCode(500)// org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: 1"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/check'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=ixfk&data=&language=_EM_8821_XYZ_&altLanguages=2U&motherTongue=_EM_8822_XYZ_&enabledCategories=_EM_8823_XYZ_&disabledCategories=Lz")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Set only 'text' or 'data' parameter, not both"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/check'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("text=_EM_8824_XYZ_&data=_EM_8825_XYZ_&language=_EM_8826_XYZ_&altLanguages=&motherTongue=_EM_8827_XYZ_&preferredVariants=Oo4Nk50jM&enabledRules=_EM_8828_XYZ_&disabledRules=HDSWYu&enabledCategories=_EM_8829_XYZ_")
                .post(baseUrlOfSut + "/v2/check?" + 
                    "useragent=GD3kv&" + 
                    "noopLanguages=OH6EhTNXKsA7eq&" + 
                    "level=d9_zB&" + 
                    "ruleValues=_EM_8835_XYZ_&" + 
                    "sourceText=rFORZfQHJs&" + 
                    "allowIncompleteResults=p7jSqvhT816acp&" + 
                    "filterDictionaryMatches=J_q3O60Oqe&" + 
                    "callback=apDCvs5t_wXFGWGz&" + 
                    "username=_EM_8836_XYZ_&" + 
                    "tokenV2=_EM_8837_XYZ_&" + 
                    "instanceId=_EM_8838_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Set only 'text' or 'data' parameter, not both"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/check'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("language=MS57e&altLanguages=PqxuX_&motherTongue=_EM_8840_XYZ_&enabledRules=Cuv&disabledCategories=_EM_8843_XYZ_&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check")
                .then()
                .statusCode(400)
                .assertThat()
                .body(containsString("Error: Missing 'text' or 'data' parameter"));
    }
}
