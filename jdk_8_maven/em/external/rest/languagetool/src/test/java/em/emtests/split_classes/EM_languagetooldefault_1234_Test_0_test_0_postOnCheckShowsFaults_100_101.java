package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-04T04:20:41.503-04:00[America/New_York]
 * <br>
*  The generated test suite contains 40 tests
 * <br>
*  Covered targets: 13934
 * <br>
*  Used time: 1h 5m 5s
 * <br>
*  Needed budget for current results: 92%
 * <br>
*  
*/

public class EM_languagetooldefault_1234_Test_0_test_0_postOnCheckShowsFaults_100_101 {
    

    
    private static final SutHandler controller = new em.external.org.languagetool.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/languagetool-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (500) POST:/v2/check
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_0_postOnCheckShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. org/languagetool/server/ServerTools_191_getLevel.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/check'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("data=_EM_1103_XYZ_&language=_EM_1104_XYZ_&altLanguages=bTItpOeg5&preferredVariants=_EM_1105_XYZ_&enabledRules=_EM_1106_XYZ_&enabledCategories=_EM_1107_XYZ_&disabledCategories=_EM_1108_XYZ_&enabledOnly=false")
                .post(baseUrlOfSut + "/v2/check?" + 
                    "mode=_EM_1180_XYZ_&" + 
                    "instanceId=LMBGWRHMj&" + 
                    "inputLogging=Sc4RBaSTO&" + 
                    "apiKey=fzUfbjkZ3&" + 
                    "tokenV2=XM9CFsZwdPi&" + 
                    "level=5dB8H&" + 
                    "v=_zGnr1LIICJZHvDX&" + 
                    "useragent=yTq8oKmhwFTMOC&" + 
                    "username=8iiHVALVQd2I_Pdu")
                .then()
                .statusCode(500)// org/languagetool/server/ServerTools_191_getLevel
                .assertThat()
                .body(containsString("Error: Internal Error: Unrecognized token '_EM_1103_XYZ_': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')\n at [Source: (String)\"_EM_1103_XYZ_\"; line: 1, column: 14]"));
    }
}
