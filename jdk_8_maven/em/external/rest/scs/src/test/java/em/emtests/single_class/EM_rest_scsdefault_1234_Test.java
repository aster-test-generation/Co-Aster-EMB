package em.emtests.single_class;

/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-04T15:29:18.264-04:00[America/New_York]
 * <br>
*  The generated test suite contains 125 tests
 * <br>
*  Covered targets: 1163
 * <br>
*  Used time: 1h 0m 20s
 * <br>
*  Needed budget for current results: 97%
 * <br>
*  
*/
public class EM_rest_scsdefault_1234_Test {

    
    private static final SutHandler controller = new em.external.org.restscs.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/rest-scs-sut.jar");
    private static String baseUrlOfSut;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (200) GET:/v2/api-docs
    */
    @Test @Timeout(60)
    public void test_0_getOnApi_docsReturnsObject() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs")
                .then()
                .statusCode(200);
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/pat/{txt}
    */
    @Test @Timeout(60)
    public void test_1_getOnPatReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/dNEIHZfC0")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("none"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/pat/{txt}
    */
    @Test @Timeout(60)
    public void test_2_getOnPatReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/66.65e-47")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("fpe"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/pat/{txt}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_3_getOnPatReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/pat/{txt}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/f%5CApT")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/pat/{txt}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_4_getOnPatReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/;W1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/pat/;W1"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/costfuns/{i}/{s}
    */
    @Test @Timeout(60)
    public void test_5_getOnWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/costfuns/743/baab?EMextraParam123=_EM_1379_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("10"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/costfuns/{i}/{s}
    */
    @Test @Timeout(60)
    public void test_6_getOnCostfunReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_9_XYZ_")
                .get(baseUrlOfSut + "/api/costfuns/838/_EM_7_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("10"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/costfuns/{i}/{s}
    */
    @Test @Timeout(60)
    public void test_7_getOnCostfunReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/costfuns/5/baab")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("10"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/costfuns/{i}/{s}
    */
    @Test @Timeout(60)
    public void test_8_getOnCostfunReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1914_XYZ_")
                .get(baseUrlOfSut + "/api/costfuns/-67108825/_EM_2369_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("10"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/costfuns/{i}/{s}
    */
    @Test @Timeout(60)
    public void test_9_getOnCostfunReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/costfuns/-4/baab")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("10"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/dateparse/{dayname}/{monthname}
    */
    @Test @Timeout(60)
    public void test_10_getOnDateparsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/sun/may")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("6"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/dateparse/{dayname}/{monthname}
    */
    @Test @Timeout(60)
    public void test_11_getOnDateparsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/_EM_4214_XYZ_/mar")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("3"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/dateparse/{dayname}/{monthname}
    */
    @Test @Timeout(60)
    public void test_12_getOnDateparsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/mon/jun")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("7"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/dateparse/{dayname}/{monthname}
    */
    @Test @Timeout(60)
    public void test_13_getOnDateparsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/_EM_3042_XYZ_/jul")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("7"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/dateparse/{dayname}/{monthname}
    */
    @Test @Timeout(60)
    public void test_14_getOnDateparsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/sat/nov")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("12"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/dateparse/{dayname}/{monthname}
    */
    @Test @Timeout(60)
    public void test_15_getOnDateparsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/tue/nov")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("12"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/dateparse/{dayname}/{monthname}
    */
    @Test @Timeout(60)
    public void test_16_getOnDateparsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/_EM_3067_XYZ_/aug")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("8"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/dateparse/{dayname}/{monthname}
    */
    @Test @Timeout(60)
    public void test_17_getOnDateparsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/wed/may")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("6"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/dateparse/{dayname}/{monthname}
    */
    @Test @Timeout(60)
    public void test_18_getOnDateparsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/thur/may")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("6"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/dateparse/{dayname}/{monthname}
    */
    @Test @Timeout(60)
    public void test_19_getOnDateparsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/_EM_738_XYZ_/_EM_739_XYZ_?EMextraParam123=_EM_740_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/dateparse/{dayname}/{monthname}
    */
    @Test @Timeout(60)
    public void test_20_getOnDateparsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/fri/_EM_4332_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("1"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/dateparse/{dayname}/{monthname}
    */
    @Test @Timeout(60)
    public void test_21_getOnDateparsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/dateparse/_EM_713_XYZ_/_EM_714_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/dateparse/{dayname}/{monthname}
    */
    @Test @Timeout(60)
    public void test_22_getOnDateparsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/_EM_528_XYZ_/_EM_529_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/dateparse/{dayname}/{monthname}
    */
    @Test @Timeout(60)
    public void test_23_getOnDateparsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/Vy/feb")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/dateparse/{dayname}/{monthname}
    */
    @Test @Timeout(60)
    public void test_24_getOnDateparsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/dateparse/_EM_406_XYZ_/_EM_407_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/dateparse/{dayname}/{monthname}
    */
    @Test @Timeout(60)
    public void test_25_getOnDateparsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/_EM_4311_XYZ_/apr")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("4"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/dateparse/{dayname}/{monthname}
    */
    @Test @Timeout(60)
    public void test_26_getOnDateparsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/oiK/sep")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("9"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/dateparse/{dayname}/{monthname}
    */
    @Test @Timeout(60)
    public void test_27_getOnDateparsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/dateparse/_EM_1097_XYZ_/_EM_1098_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/dateparse/{dayname}/{monthname}
    */
    @Test @Timeout(60)
    public void test_28_getOnDateparsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/oiK/oct")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("10"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/dateparse/{dayname}/{monthname}
    */
    @Test @Timeout(60)
    public void test_29_getOnDateparsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/Vyq/dec")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("12"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/filesuffix/{directory}/{file}
    */
    @Test @Timeout(60)
    public void test_30_getOnFilesuffixReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/filesuffix/qJ_oE/_EM_11_XYZ_?EMextraParam123=_EM_12_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/notypevar/{i}/{s}
    */
    @Test @Timeout(60)
    public void test_31_getOnNotypevarReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/notypevar/28/zCJGQZNdWyq2hTnR")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("3"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/notypevar/{i}/{s}
    */
    @Test @Timeout(60)
    public void test_32_getOnNotypevarReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/notypevar/315/ydIOL7_oge")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("3"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/notypevar/{i}/{s}
    */
    @Test @Timeout(60)
    public void test_33_getOnNotypevarReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/notypevar/7/_EM_5537_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("3"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/notypevar/{i}/{s}
    */
    @Test @Timeout(60)
    public void test_34_getOnNotypevarReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/notypevar/-1367093703/4Pu")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/pat/{txt}/{pat}
    */
    @Test @Timeout(60)
    public void test_35_getOnPatReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/syF%5BFYJ/syF")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("1"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/pat/{txt}/{pat}
    */
    @Test @Timeout(60)
    public void test_36_getOnWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/pat/sofNneHfbpBG/4?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/title/{sex}/{title}
    */
    @Test @Timeout(60)
    public void test_37_getOnTitlReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/female/prof")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/title/{sex}/{title}
    */
    @Test @Timeout(60)
    public void test_38_getOnTitlReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/none/prof")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/title/{sex}/{title}
    */
    @Test @Timeout(60)
    public void test_39_getOnTitlReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/title/_EM_19_XYZ_/QmW")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("-1"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/title/{sex}/{title}
    */
    @Test @Timeout(60)
    public void test_40_getOnTitlReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/male/_EM_6260_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("-1"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/title/{sex}/{title}
    */
    @Test @Timeout(60)
    public void test_41_getOnTitlReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/female/wtbnGzd3JC")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("-1"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/title/{sex}/{title}
    */
    @Test @Timeout(60)
    public void test_42_getOnTitlReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/none/wtbnGzd3JC")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("-1"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/pat/{txt}/{pat}
    */
    @Test @Timeout(60)
    public void test_43_getOnPatReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/%5DP%5El8NNGkKP_IlsUiW/slI")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/dateparse/{dayname}/{monthname}
    */
    @Test @Timeout(60)
    public void test_44_getOnDateparsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/_EM_246_XYZ_/_EM_247_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/pat/{txt}/{pat}
    */
    @Test @Timeout(60)
    public void test_45_getOnPatReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/_EM_3347_XYZ_/_EU_5060_XYUU")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/title/{sex}/{title}
    */
    @Test @Timeout(60)
    public void test_46_getOnTitlReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/none/dr")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/title/{sex}/{title}
    */
    @Test @Timeout(60)
    public void test_47_getOnTitlReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/male/_EM_6260_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("-1"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/title/{sex}/{title}
    */
    @Test @Timeout(60)
    public void test_48_getOnTitlReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/none/rev")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/title/{sex}/{title}
    */
    @Test @Timeout(60)
    public void test_49_getOnTitlReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/female/rev")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/title/{sex}/{title}
    */
    @Test @Timeout(60)
    public void test_50_getOnTitlReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/none/rthon")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/title/{sex}/{title}
    */
    @Test @Timeout(60)
    public void test_51_getOnTitlReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/female/rthon")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/title/{sex}/{title}
    */
    @Test @Timeout(60)
    public void test_52_getOnTitlReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/female/mrs")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/title/{sex}/{title}
    */
    @Test @Timeout(60)
    public void test_53_getOnTitlReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/female/miss")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/title/{sex}/{title}
    */
    @Test @Timeout(60)
    public void test_54_getOnTitlReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/female/ms")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/title/{sex}/{title}
    */
    @Test @Timeout(60)
    public void test_55_getOnTitlReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/female/dr")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/title/{sex}/{title}
    */
    @Test @Timeout(60)
    public void test_56_getOnTitlReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/female/lady")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/title/{sex}/{title}
    */
    @Test @Timeout(60)
    public void test_57_getOnTitlReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/male/dr")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("1"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/title/{sex}/{title}
    */
    @Test @Timeout(60)
    public void test_58_getOnTitlReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/male/prof")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("1"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/title/{sex}/{title}
    */
    @Test @Timeout(60)
    public void test_59_getOnTitlReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/male/rev")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("1"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/title/{sex}/{title}
    */
    @Test @Timeout(60)
    public void test_60_getOnTitlReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/male/rthon")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("1"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/pat/{txt}/{pat}
    */
    @Test @Timeout(60)
    public void test_61_getOnPatReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/_AM%5BS6A8_XNZH/_EM_8908_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/pat/{txt}/{pat}
    */
    @Test @Timeout(60)
    public void test_62_getOnPatReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/_kafy41akX7QzX/_EM_9448_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/pat/{txt}/{pat}
    */
    @Test @Timeout(60)
    public void test_63_getOnPatReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/%5Db%5Ei8N_GjNR_IluUiW/Dhs3_O")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/pat/{txt}/{pat}
    */
    @Test @Timeout(60)
    public void test_64_getOnPatReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/_EM_10320_XYZ_/_EM_5751_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/pat/{txt}/{pat}
    */
    @Test @Timeout(60)
    public void test_65_getOnPatReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/syFWFysd/syF")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/costfuns/{i}/{s}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_66_getOnCostfunReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/costfuns/{i}/{s}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/costfuns/406/%5Cme")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/dateparse/{dayname}/{monthname}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_67_getOnDateparsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/dateparse/{dayname}/{monthname}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/_EM_3032_XYZ_/%5C")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/notypevar/{i}/{s}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_68_getOnNotypevarReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/notypevar/{i}/{s}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/notypevar/167/jJu%5C")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/pat/{txt}/{pat}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_69_getOnPatReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/pat/{txt}/{pat}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/_EM_7761_XYZ_/RdH%5CeI5_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/filesuffix/{directory}/{file}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_70_getOnFilesuffixReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/filesuffix/{directory}/{file}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/filesuffix/1rsw%5CGrkV2qQRc/c_4fHgd")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/calc/{op}/{arg1}/{arg2}
    */
    @Test @Timeout(60)
    public void test_71_getOnCalcReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/calc/_EM_283_XYZ_/0.6922484036776033/0.10888448651611915?EMextraParam123=_EM_118_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0.0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/calc/{op}/{arg1}/{arg2}
    */
    @Test @Timeout(60)
    public void test_72_getOnCalcReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/calc/pi/0.0/-2179.7911645135464")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("3.141592653589793"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/calc/{op}/{arg1}/{arg2}
    */
    @Test @Timeout(60)
    public void test_73_getOnCalcReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/calc/multiply/0.08726708861670773/-2179.7911645135464")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("-190.2240287195202"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/calc/{op}/{arg1}/{arg2}
    */
    @Test @Timeout(60)
    public void test_74_getOnCalcReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/calc/e/-1589.3956748867038/0.027527579542383718")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2.718281828459045"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/calc/{op}/{arg1}/{arg2}
    */
    @Test @Timeout(60)
    public void test_75_getOnCalcReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/calc/cosine/-0.4040818573429081/0.165618")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0.9194637751513671"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/calc/{op}/{arg1}/{arg2}
    */
    @Test @Timeout(60)
    public void test_76_getOnCalcReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1_XYZ_")
                .get(baseUrlOfSut + "/api/calc/sqrt/0.6575316303495605/0.06832737311081338?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0.810883240885863"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/calc/{op}/{arg1}/{arg2}
    */
    @Test @Timeout(60)
    public void test_77_getOnCalcReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/calc/log/847.8851196730143/1.9529183290431402?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("6.742745154531022"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/calc/{op}/{arg1}/{arg2}
    */
    @Test @Timeout(60)
    public void test_78_getOnCalcReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1_XYZ_")
                .get(baseUrlOfSut + "/api/calc/sine/0.6575316303495605/0.06832737311081338?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0.6111649932921223"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/calc/{op}/{arg1}/{arg2}
    */
    @Test @Timeout(60)
    public void test_79_getOnCalcReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/calc/tangent/6.441011/1.4352252738610982")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0.15914930637659663"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/calc/{op}/{arg1}/{arg2}
    */
    @Test @Timeout(60)
    public void test_80_getOnCalcReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/calc/pLUS/5.447721200312133E306/-5.617791046444736E307")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("-5.073018926413523E307"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/calc/{op}/{arg1}/{arg2}
    */
    @Test @Timeout(60)
    public void test_81_getOnCalcReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/calc/subtract/0.39613757185328/1.0?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("-0.60386242814672"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/calc/{op}/{arg1}/{arg2}
    */
    @Test @Timeout(60)
    public void test_82_getOnCalcReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/calc/dIVIde/77.87807864704362/5.617791046444736E307")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("1.3862758155864375E-306"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/cookie/{name}/{val}/{site}
    */
    @Test @Timeout(60)
    public void test_83_getOnCookiReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/cookie/session/am/_EM_5074_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/cookie/{name}/{val}/{site}
    */
    @Test @Timeout(60)
    public void test_84_getOnCookiReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_4_XYZ_")
                .get(baseUrlOfSut + "/api/cookie/_EM_2_XYZ_/gDV9xAi_gfPKy96s/ywaGdZ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/cookie/{name}/{val}/{site}
    */
    @Test @Timeout(60)
    public void test_85_getOnCookiReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/cookie/userid/gDV9xAi_gfPKy96/cbDV9dWbem_jom8")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/cookie/{name}/{val}/{site}
    */
    @Test @Timeout(60)
    public void test_86_getOnCookiReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/cookie/userid/USERAcU/uXphgItKgme")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("1"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/cookie/{name}/{val}/{site}
    */
    @Test @Timeout(60)
    public void test_87_getOnWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_4_XYZ_")
                .get(baseUrlOfSut + "/api/cookie/session/gDV9xAi_gfPKy96/_EM_512_XYZ_?EMextraParam123=_EM_3_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/text2txt/{word1}/{word2}/{word3}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_88_getOnText2txtReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. GET on path '/api/text2txt/{word1}/{word2}/{word3}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/seE/BeHgUirEo0o/Z")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/text2txt/{word1}/{word2}/{word3}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_89_getOnText2txtReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. GET on path '/api/text2txt/{word1}/{word2}/{word3}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/bY/CaYUh%5EQFL0l0x/h")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/text2txt/{word1}/{word2}/{word3}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_90_getOnText2txtReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. GET on path '/api/text2txt/{word1}/{word2}/{word3}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/_EM_5_XYZ_/SqxguQHTFqwOpbaY/OXG2JBvWV4?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/text2txt/{word1}/{word2}/{word3}
    */
    @Test @Timeout(60)
    public void test_91_getOnText2txtReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/tWO/NJ94jF450h/tl")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/text2txt/{word1}/{word2}/{word3}
    */
    @Test @Timeout(60)
    public void test_92_getOnText2txtReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/seE/you/PZBuoc")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("cu"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/text2txt/{word1}/{word2}/{word3}
    */
    @Test @Timeout(60)
    public void test_93_getOnText2txtReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/fOR/2DjnUtNrOd/Sa")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("4"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/text2txt/{word1}/{word2}/{word3}
    */
    @Test @Timeout(60)
    public void test_94_getOnText2txtReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/fOUR/VV2nmUIXyWpG/Q_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("4"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/text2txt/{word1}/{word2}/{word3}
    */
    @Test @Timeout(60)
    public void test_95_getOnText2txtReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/yOU/yu/1FJ7UD3U1LiFdmi")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("u"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/text2txt/{word1}/{word2}/{word3}
    */
    @Test @Timeout(60)
    public void test_96_getOnText2txtReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/aND/CaYWlPQFb0l0/i")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("n"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/text2txt/{word1}/{word2}/{word3}
    */
    @Test @Timeout(60)
    public void test_97_getOnText2txtReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/aRE/CaaUSH%3EFLMl0/r")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("r"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/text2txt/{word1}/{word2}/{word3}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_98_getOnText2txtReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. GET on path '/api/text2txt/{word1}/{word2}/{word3}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_46_XYZ_")
                .get(baseUrlOfSut + "/api/text2txt/_EM_44_XYZ_/ZW6aC1ElCHxXEnA/_EM_45_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/text2txt/{word1}/{word2}/{word3}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_99_getOnText2txtReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. GET on path '/api/text2txt/{word1}/{word2}/{word3}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/_EM_80_XYZ_/ynD_NjHzLGVD/66mZdWky6F3?EMextraParam123=_EM_81_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/text2txt/{word1}/{word2}/{word3}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_100_getOnText2txtReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. GET on path '/api/text2txt/{word1}/{word2}/{word3}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/_EM_301_XYZ_/_EM_302_XYZ_/exQmh?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/text2txt/{word1}/{word2}/{word3}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_101_getOnText2txtReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. GET on path '/api/text2txt/{word1}/{word2}/{word3}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_359_XYZ_")
                .get(baseUrlOfSut + "/api/text2txt/_EM_357_XYZ_/7MP/mtSK8DyuYjR3?EMextraParam123=_EM_358_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/calc/{op}/{arg1}/{arg2}
    */
    @Test @Timeout(60)
    public void test_102_getOnCalcReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1_XYZ_")
                .get(baseUrlOfSut + "/api/calc/_EM_650_XYZ_/0.6575316303495605/8.988465674311579E307")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0.0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/text2txt/{word1}/{word2}/{word3}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_103_getOnText2txtReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. GET on path '/api/text2txt/{word1}/{word2}/{word3}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/_EM_849_XYZ_/6DQryH8P2FwXvcf/aGAQJk@jVYKun")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/text2txt/{word1}/{word2}/{word3}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_104_getOnText2txtReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. GET on path '/api/text2txt/{word1}/{word2}/{word3}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/8frO/_EM_258_XYZ_/RgZPdsEsjR")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/text2txt/{word1}/{word2}/{word3}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_105_getOnText2txtReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. GET on path '/api/text2txt/{word1}/{word2}/{word3}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/42/38/4G2Qd")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/cookie/{name}/{val}/{site}
    */
    @Test @Timeout(60)
    public void test_106_getOnCookiReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/cookie/userid/rYkZC_/_T%3CT5O__nnkn")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/text2txt/{word1}/{word2}/{word3}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_107_getOnText2txtReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/text2txt/{word1}/{word2}/{word3}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/text2txt/7%5Cn/_LSzbT6WME6IM3e_/_EM_2284_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/cookie/{name}/{val}/{site}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_108_getOnCookiReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/cookie/{name}/{val}/{site}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/cookie/userid/sT%5CMKrbUZUU:/caDV9dWbUl_jUm8")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/text2txt/{word1}/{word2}/{word3}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_109_getOnText2txtReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/_EM_4092_XYZ_/sE/;A960")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/text2txt/_EM_4092_XYZ_/sE/;A960"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ordered4/{w}/{x}/{z}/{y}
    */
    @Test @Timeout(60)
    public void test_110_getOnOrdered4ReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/ordered4/_EM_0_XYZ_/T3bz_jXX/1OI0/mG2wm_3c2zi5ob?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("unordered"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ordered4/{w}/{x}/{z}/{y}
    */
    @Test @Timeout(60)
    public void test_111_getOnOrdered4ReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ordered4/CUR39/CSJ49_/%605Ecj%5D/CHN39")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("unordered"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ordered4/{w}/{x}/{z}/{y}
    */
    @Test @Timeout(60)
    public void test_112_getOnOrdered4ReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ordered4/S/T3bz_jXX/_EM_23_XYZ_/mG2wm_3c2zi5ob?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("unordered"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ordered4/{w}/{x}/{z}/{y}
    */
    @Test @Timeout(60)
    public void test_113_getOnOrdered4ReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_594_XYZ_")
                .get(baseUrlOfSut + "/api/ordered4/6fdyCQ/_EM_592_XYZ_/x/_EM_593_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("unordered"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ordered4/{w}/{x}/{z}/{y}
    */
    @Test @Timeout(60)
    public void test_114_getOnOrdered4ReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ordered4/VW9eeG/d22R/BMFE/aREpwUyb")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("unordered"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ordered4/{w}/{x}/{z}/{y}
    */
    @Test @Timeout(60)
    public void test_115_getOnOrdered4ReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ordered4/CUL39/fpezj/uLe/_EM_6364_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("unordered"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ordered4/{w}/{x}/{z}/{y}
    */
    @Test @Timeout(60)
    public void test_116_getOnOrdered4ReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ordered4/CUL39/%5Epezj/sLe/Aq")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("unordered"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ordered4/{w}/{x}/{z}/{y}
    */
    @Test @Timeout(60)
    public void test_117_getOnOrdered4ReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ordered4/CUL39/fpezj/uNe/_9M%3E6;64U@Yq_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("unordered"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ordered4/{w}/{x}/{z}/{y}
    */
    @Test @Timeout(60)
    public void test_118_getOnOrdered4ReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ordered4/CUL39/flezj/_EM_6397_XYZ_/_9M%3E6;64U@Yq_M")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("unordered"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ordered4/{w}/{x}/{z}/{y}
    */
    @Test @Timeout(60)
    public void test_119_getOnOrdered4ReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ordered4/CUR39/CUJ49_/BUR39/CGN39")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("decreasing"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ordered4/{w}/{x}/{z}/{y}
    */
    @Test @Timeout(60)
    public void test_120_getOnOrdered4ReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ordered4/CUJ39/CUJ39/daEgn%60/_9M%3E6;60U@Yq_M")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("unordered"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ordered4/{w}/{x}/{z}/{y}
    */
    @Test @Timeout(60)
    public void test_121_getOnOrdered4ReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ordered4/CUR39/CUJ39_/Q1Ecf%5D/_9L%3E6;60U@Yq_M")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("unordered"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ordered4/{w}/{x}/{z}/{y}
    */
    @Test @Timeout(60)
    public void test_122_getOnOrdered4ReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ordered4/BUR39/CUJ49_/%601Ccj%5D/U%3FJN6;64%5B@Yq_M")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("increasing"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/ordered4/{w}/{x}/{z}/{y}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_123_getOnOrdered4ReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ordered4/{w}/{x}/{z}/{y}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ordered4/_EM_6090_XYZ_/mvyp3l3efU%5E/y%5CwYtPget/_EM_4939_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/ordered4/{w}/{x}/{z}/{y}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_124_getOnOrdered4ReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ordered4/;MJU:/CUJ39/D0EgfJ/_9M%3E6;60U@Yq_M")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/ordered4/;MJU:/CUJ39/D0EgfJ/_9M%3E6;60U@Yq_M"));
    }


}
