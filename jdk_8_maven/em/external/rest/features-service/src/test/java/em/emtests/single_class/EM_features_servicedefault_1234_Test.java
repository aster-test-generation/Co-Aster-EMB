package em.emtests.single_class;

/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T17:15:02.049-04:00[America/New_York]
 * <br>
*  The generated test suite contains 17 tests
 * <br>
*  Covered targets: 284
 * <br>
*  Used time: 1h 0m 54s
 * <br>
*  Needed budget for current results: 60%
 * <br>
*  
*/
public class EM_features_servicedefault_1234_Test {

    
    private static final SutHandler controller = new em.external.org.javiermf.features.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/features-service-sut.jar");
    private static String baseUrlOfSut;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CONSTRAINT_EXCLUDES","CONSTRAINT_REQUIRES","FEATURE","PRODUCT_CONFIGURATION","PRODUCT_CONFIGURATION_ACTIVED_FEATURES","constraint_excludes","constraint_requires","product"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (200) GET:/swagger.json
    */
    @Test @Timeout(60)
    public void test_0_getOnSwagger_jsonReturnsObject() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/swagger.json")
                .then()
                .statusCode(200);
    }
    
    
    /**
    * Calls:
    * (500) GET:/products/{productName}
    * Found 1 potential fault of type-code 100
    */
    @Test @Timeout(60)
    public void test_1_getOnProductCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/pQADFhlXhB9Eb?EMextraParam123=_EM_14_XYZ_")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}
    * Found 1 potential fault of type-code 100
    */
    @Test @Timeout(60)
    public void test_2_deleteOnProductCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/products/qJ_oE?EMextraParam123=42")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (201) POST:/products/{productName}
    */
    @Test @Timeout(60)
    public void test_3_postOnProductReturns201() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/d63MdaDoNXV")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (500) GET:/products/{productName}/features
    * Found 1 potential fault of type-code 100
    */
    @Test @Timeout(60)
    public void test_4_getOnProductFeaturesCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/products/54qxJ4/features")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (200) GET:/products/{productName}/configurations
    */
    @Test @Timeout(60)
    public void test_5_getOnConfigurationsReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/products/qgH8l3hqO95O/configurations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test @Timeout(60)
    public void test_6_postOnProductFeaturCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/_EM_20_XYZ_/features/E6hZ5aXbs")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}/constraints/excludes
    * Found 1 potential fault of type-code 100
    */
    @Test @Timeout(60)
    public void test_7_postOnExcludesCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/_EM_23_XYZ_/constraints/excludes")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}/configurations/{configurationName}
    * Found 1 potential fault of type-code 100
    */
    @Test @Timeout(60)
    public void test_8_postOnConfigurCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_19_XYZ_")
                .post(baseUrlOfSut + "/products/_EM_18_XYZ_/configurations/dxv5YosC6HfY1")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}/constraints/requires
    * Found 1 potential fault of type-code 100
    */
    @Test @Timeout(60)
    public void test_9_postOnRequiresCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/_wPJFH7Ao2d/constraints/requires")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}/configurations/{configurationName}
    * Found 1 potential fault of type-code 100
    */
    @Test @Timeout(60)
    public void test_10_deleteOnConfigurCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsConfigurationsDAO_71_deleteConfigurationForProduct.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/V9xAi_gfPKy96s/configurations/_EM_5_XYZ_")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsConfigurationsDAO_71_deleteConfigurationForProduct
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test @Timeout(60)
    public void test_11_deleteOnProductFeaturWithQueryParamCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/_EM_8_XYZ_/features/_EM_9_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (204) GET:/products/{productName}/configurations/{configurationName}
    */
    @Test @Timeout(60)
    public void test_12_getOnConfigurReturns204() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/VmuJZlldbKtmPw/configurations/ywaGdZ?EMextraParam123=42")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (204) DELETE:/products/{productName}/constraints/{constraintId}
    */
    @Test @Timeout(60)
    public void test_13_deleteOnConstraintReturns204() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/products/_EM_11_XYZ_/constraints/-514502488")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (500) GET:/products/{productName}/configurations/{configurationName}/features
    * Found 1 potential fault of type-code 100
    */
    @Test @Timeout(60)
    public void test_14_getOnConfigurFeaturesWithQueryParamCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/services/ProductsConfigurationsService_46_getConfigurationActivedFeaturesNames.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_3_XYZ_")
                .get(baseUrlOfSut + "/products/_EM_1_XYZ_/configurations/_EM_2_XYZ_/features?EMextraParam123=42")
                .then()
                .statusCode(500)// org/javiermf/features/services/ProductsConfigurationsService_46_getConfigurationActivedFeaturesNames
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}/configurations/{configurationName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test @Timeout(60)
    public void test_15_postOnConfigurFeaturWithQueryParamCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/services/ProductsConfigurationsService_79_addFeatureFromConfiguration.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/N7HAG2T6hLHQ7/configurations/ydIOL7_oge/features/LH?EMextraParam123=42")
                .then()
                .statusCode(500)// org/javiermf/features/services/ProductsConfigurationsService_79_addFeatureFromConfiguration
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}/configurations/{configurationName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test @Timeout(60)
    public void test_16_deleteOnConfigurFeaturCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/services/ProductsConfigurationsService_70_removeFeatureFromConfiguration.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/oh7FJcNXfPo/configurations/T3bz_jXX/features/_EM_0_XYZ_")
                .then()
                .statusCode(500)// org/javiermf/features/services/ProductsConfigurationsService_70_removeFeatureFromConfiguration
                .assertThat()
                .contentType("text/html");
    }


}
