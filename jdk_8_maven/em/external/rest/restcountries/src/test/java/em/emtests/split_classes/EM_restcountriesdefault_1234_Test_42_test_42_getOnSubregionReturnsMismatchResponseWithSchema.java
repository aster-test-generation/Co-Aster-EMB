package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T15:08:59.479-04:00[America/New_York]
 * <br>
*  The generated test suite contains 1032 tests
 * <br>
*  Covered targets: 3148
 * <br>
*  Used time: 1h 3m 23s
 * <br>
*  Needed budget for current results: 97%
 * <br>
*  
*/

public class EM_restcountriesdefault_1234_Test_42_test_42_getOnSubregionReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.eu.fayder.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/restcountries-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_42_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/southern%20africa")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(6))
                .body("[0].'name'", containsString("Botswana"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bw"))
                .body("[0].'alpha2Code'", containsString("BW"))
                .body("[0].'alpha3Code'", containsString("BWA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("267"))
                .body("[0].'capital'", containsString("Gaborone"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("BW", "Republic of Botswana", "Lefatshe la Botswana"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Southern Africa"))
                .body("[0].'population'", numberMatches(2141206.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-22.0))
                .body("[0].'latlng'[1]", numberMatches(24.0))
                .body("[0].'demonym'", containsString("Motswana"))
                .body("[0].'area'", numberMatches(582000.0))
                .body("[0].'gini'", numberMatches(61.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("NAM", "ZAF", "ZMB", "ZWE"))
                .body("[0].'nativeName'", containsString("Botswana"))
                .body("[0].'numericCode'", containsString("072"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("BWP"))
                .body("[0].'currencies'[0].'name'", containsString("Botswana pula"))
                .body("[0].'currencies'[0].'symbol'", containsString("P"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'languages'[1].'iso639_1'", containsString("tn"))
                .body("[0].'languages'[1].'iso639_2'", containsString("tsn"))
                .body("[0].'languages'[1].'name'", containsString("Tswana"))
                .body("[0].'languages'[1].'nativeName'", containsString("Setswana"))
                .body("[0].'translations'.'de'", containsString("Botswana"))
                .body("[0].'translations'.'es'", containsString("Botswana"))
                .body("[0].'translations'.'fr'", containsString("Botswana"))
                .body("[0].'translations'.'ja'", containsString("ボツワナ"))
                .body("[0].'translations'.'it'", containsString("Botswana"))
                .body("[0].'translations'.'br'", containsString("Botsuana"))
                .body("[0].'translations'.'pt'", containsString("Botsuana"))
                .body("[0].'translations'.'nl'", containsString("Botswana"))
                .body("[0].'translations'.'hr'", containsString("Bocvana"))
                .body("[0].'translations'.'fa'", containsString("بوتسوانا"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/bwa.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[0].'cioc'", containsString("BOT"))
                .body("[1].'name'", containsString("French Southern Territories"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".tf"))
                .body("[1].'alpha2Code'", containsString("TF"))
                .body("[1].'alpha3Code'", containsString("ATF"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("262"))
                .body("[1].'capital'", containsString("Port-aux-Français"))
                .body("[1].'altSpellings'.size()", equalTo(1))
                .body("[1].'altSpellings'", hasItems("TF"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Southern Africa"))
                .body("[1].'population'", numberMatches(140.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-49.25))
                .body("[1].'latlng'[1]", numberMatches(69.167))
                .body("[1].'demonym'", containsString("French"))
                .body("[1].'area'", numberMatches(7747.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+05:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Territoire des Terres australes et antarctiques françaises"))
                .body("[1].'numericCode'", containsString("260"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("EUR"))
                .body("[1].'currencies'[0].'name'", containsString("Euro"))
                .body("[1].'currencies'[0].'symbol'", containsString("€"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'[0].'iso639_1'", containsString("fr"))
                .body("[1].'languages'[0].'iso639_2'", containsString("fra"))
                .body("[1].'languages'[0].'name'", containsString("French"))
                .body("[1].'languages'[0].'nativeName'", containsString("français"))
                .body("[1].'translations'.'de'", containsString("Französische Süd- und Antarktisgebiete"))
                .body("[1].'translations'.'es'", containsString("Tierras Australes y Antárticas Francesas"))
                .body("[1].'translations'.'fr'", containsString("Terres australes et antarctiques françaises"))
                .body("[1].'translations'.'ja'", containsString("フランス領南方・南極地域"))
                .body("[1].'translations'.'it'", containsString("Territori Francesi del Sud"))
                .body("[1].'translations'.'br'", containsString("Terras Austrais e Antárticas Francesas"))
                .body("[1].'translations'.'pt'", containsString("Terras Austrais e Antárticas Francesas"))
                .body("[1].'translations'.'nl'", containsString("Franse Gebieden in de zuidelijke Indische Oceaan"))
                .body("[1].'translations'.'hr'", containsString("Francuski južni i antarktički teritoriji"))
                .body("[1].'translations'.'fa'", containsString("سرزمین‌های جنوبی و جنوبگانی فرانسه"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/atf.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[1].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[1].'cioc'", containsString(""))
                .body("[2].'name'", containsString("Lesotho"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".ls"))
                .body("[2].'alpha2Code'", containsString("LS"))
                .body("[2].'alpha3Code'", containsString("LSO"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("266"))
                .body("[2].'capital'", containsString("Maseru"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("LS", "Kingdom of Lesotho", "Muso oa Lesotho"))
                .body("[2].'region'", containsString("Africa"))
                .body("[2].'subregion'", containsString("Southern Africa"))
                .body("[2].'population'", numberMatches(1894194.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-29.5))
                .body("[2].'latlng'[1]", numberMatches(28.5))
                .body("[2].'demonym'", containsString("Mosotho"))
                .body("[2].'area'", numberMatches(30355.0))
                .body("[2].'gini'", numberMatches(52.5))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+02:00"))
                .body("[2].'borders'.size()", equalTo(1))
                .body("[2].'borders'", hasItems("ZAF"))
                .body("[2].'nativeName'", containsString("Lesotho"))
                .body("[2].'numericCode'", containsString("426"))
                .body("[2].'currencies'.size()", equalTo(2))
                .body("[2].'currencies'[0].'code'", containsString("LSL"))
                .body("[2].'currencies'[0].'name'", containsString("Lesotho loti"))
                .body("[2].'currencies'[0].'symbol'", containsString("L"))
                .body("[2].'currencies'[1].'code'", containsString("ZAR"))
                .body("[2].'currencies'[1].'name'", containsString("South African rand"))
                .body("[2].'currencies'[1].'symbol'", containsString("R"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'[0].'iso639_1'", containsString("en"))
                .body("[2].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[2].'languages'[0].'name'", containsString("English"))
                .body("[2].'languages'[0].'nativeName'", containsString("English"))
                .body("[2].'languages'[1].'iso639_1'", containsString("st"))
                .body("[2].'languages'[1].'iso639_2'", containsString("sot"))
                .body("[2].'languages'[1].'name'", containsString("Southern Sotho"))
                .body("[2].'languages'[1].'nativeName'", containsString("Sesotho"))
                .body("[2].'translations'.'de'", containsString("Lesotho"))
                .body("[2].'translations'.'es'", containsString("Lesotho"))
                .body("[2].'translations'.'fr'", containsString("Lesotho"))
                .body("[2].'translations'.'ja'", containsString("レソト"))
                .body("[2].'translations'.'it'", containsString("Lesotho"))
                .body("[2].'translations'.'br'", containsString("Lesoto"))
                .body("[2].'translations'.'pt'", containsString("Lesoto"))
                .body("[2].'translations'.'nl'", containsString("Lesotho"))
                .body("[2].'translations'.'hr'", containsString("Lesoto"))
                .body("[2].'translations'.'fa'", containsString("لسوتو"))
                .body("[2].'flag'", containsString("https://restcountries.eu/data/lso.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[2].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[2].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[2].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[2].'cioc'", containsString("LES"))
                ; // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
    }
}
