package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T15:08:59.479-04:00[America/New_York]
 * <br>
*  The generated test suite contains 1032 tests
 * <br>
*  Covered targets: 3148
 * <br>
*  Used time: 1h 3m 23s
 * <br>
*  Needed budget for current results: 97%
 * <br>
*  
*/

public class EM_restcountriesdefault_1234_Test_30_test_30_getOnAlphaReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.eu.fayder.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/restcountries-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_30_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_59_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/alpha/ch?EMextraParam123=_EM_58_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("Switzerland"))
                .body("'topLevelDomain'.size()", equalTo(1))
                .body("'topLevelDomain'", hasItems(".ch"))
                .body("'alpha2Code'", containsString("CH"))
                .body("'alpha3Code'", containsString("CHE"))
                .body("'callingCodes'.size()", equalTo(1))
                .body("'callingCodes'", hasItems("41"))
                .body("'capital'", containsString("Bern"))
                .body("'altSpellings'.size()", equalTo(6))
                .body("'altSpellings'", hasItems("CH", "Swiss Confederation", "Schweiz", "Suisse", "Svizzera", "Svizra"))
                .body("'region'", containsString("Europe"))
                .body("'subregion'", containsString("Western Europe"))
                .body("'population'", numberMatches(8341600.0))
                .body("'latlng'.size()", equalTo(2))
                .body("'latlng'[0]", numberMatches(47.0))
                .body("'latlng'[1]", numberMatches(8.0))
                .body("'demonym'", containsString("Swiss"))
                .body("'area'", numberMatches(41284.0))
                .body("'gini'", numberMatches(33.7))
                .body("'timezones'.size()", equalTo(1))
                .body("'timezones'", hasItems("UTC+01:00"))
                .body("'borders'.size()", equalTo(5))
                .body("'borders'", hasItems("AUT", "FRA", "ITA", "LIE", "DEU"))
                .body("'nativeName'", containsString("Schweiz"))
                .body("'numericCode'", containsString("756"))
                .body("'currencies'.size()", equalTo(1))
                .body("'currencies'[0].'code'", containsString("CHF"))
                .body("'currencies'[0].'name'", containsString("Swiss franc"))
                .body("'currencies'[0].'symbol'", containsString("Fr"))
                .body("'languages'.size()", equalTo(3))
                .body("'languages'[0].'iso639_1'", containsString("de"))
                .body("'languages'[0].'iso639_2'", containsString("deu"))
                .body("'languages'[0].'name'", containsString("German"))
                .body("'languages'[0].'nativeName'", containsString("Deutsch"))
                .body("'languages'[1].'iso639_1'", containsString("fr"))
                .body("'languages'[1].'iso639_2'", containsString("fra"))
                .body("'languages'[1].'name'", containsString("French"))
                .body("'languages'[1].'nativeName'", containsString("français"))
                .body("'languages'[2].'iso639_1'", containsString("it"))
                .body("'languages'[2].'iso639_2'", containsString("ita"))
                .body("'languages'[2].'name'", containsString("Italian"))
                .body("'languages'[2].'nativeName'", containsString("Italiano"))
                .body("'translations'.'de'", containsString("Schweiz"))
                .body("'translations'.'es'", containsString("Suiza"))
                .body("'translations'.'fr'", containsString("Suisse"))
                .body("'translations'.'ja'", containsString("スイス"))
                .body("'translations'.'it'", containsString("Svizzera"))
                .body("'translations'.'br'", containsString("Suíça"))
                .body("'translations'.'pt'", containsString("Suíça"))
                .body("'translations'.'nl'", containsString("Zwitserland"))
                .body("'translations'.'hr'", containsString("Švicarska"))
                .body("'translations'.'fa'", containsString("سوئیس"))
                .body("'flag'", containsString("https://restcountries.eu/data/che.svg"))
                .body("'regionalBlocs'.size()", equalTo(1))
                .body("'regionalBlocs'[0].'acronym'", containsString("EFTA"))
                .body("'regionalBlocs'[0].'name'", containsString("European Free Trade Association"))
                .body("'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("'cioc'", containsString("SUI"));
    }
}
