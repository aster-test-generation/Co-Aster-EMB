package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T15:08:59.479-04:00[America/New_York]
 * <br>
*  The generated test suite contains 1032 tests
 * <br>
*  Covered targets: 3148
 * <br>
*  Used time: 1h 3m 23s
 * <br>
*  Needed budget for current results: 97%
 * <br>
*  
*/

public class EM_restcountriesdefault_1234_Test_361_test_361_getOnLangReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.eu.fayder.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/restcountries-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_361_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/es")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(24))
                .body("[0].'name'", containsString("Argentina"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ar"))
                .body("[0].'alpha2Code'", containsString("AR"))
                .body("[0].'alpha3Code'", containsString("ARG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("54"))
                .body("[0].'capital'", containsString("Buenos Aires"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("AR", "Argentine Republic", "República Argentina"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(4.3131966E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-34.0))
                .body("[0].'latlng'[1]", numberMatches(-64.0))
                .body("[0].'demonym'", containsString("Argentinean"))
                .body("[0].'area'", numberMatches(2780400.0))
                .body("[0].'gini'", numberMatches(44.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-03:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("BOL", "BRA", "CHL", "PRY", "URY"))
                .body("[0].'nativeName'", containsString("Argentina"))
                .body("[0].'numericCode'", containsString("032"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ARS"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("es", "gn"))
                .body("[0].'translations'.'de'", containsString("Argentinien"))
                .body("[0].'translations'.'es'", containsString("Argentina"))
                .body("[0].'translations'.'fr'", containsString("Argentine"))
                .body("[0].'translations'.'ja'", containsString("アルゼンチン"))
                .body("[0].'translations'.'it'", containsString("Argentina"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Belize"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".bz"))
                .body("[1].'alpha2Code'", containsString("BZ"))
                .body("[1].'alpha3Code'", containsString("BLZ"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("501"))
                .body("[1].'capital'", containsString("Belmopan"))
                .body("[1].'altSpellings'.size()", equalTo(1))
                .body("[1].'altSpellings'", hasItems("BZ"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("Central America"))
                .body("[1].'population'", numberMatches(368310.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(17.25))
                .body("[1].'latlng'[1]", numberMatches(-88.75))
                .body("[1].'demonym'", containsString("Belizean"))
                .body("[1].'area'", numberMatches(22966.0))
                .body("[1].'gini'", numberMatches(53.1))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-06:00"))
                .body("[1].'borders'.size()", equalTo(2))
                .body("[1].'borders'", hasItems("GTM", "MEX"))
                .body("[1].'nativeName'", containsString("Belize"))
                .body("[1].'numericCode'", containsString("084"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("BZD"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("en", "es"))
                .body("[1].'translations'.'de'", containsString("Belize"))
                .body("[1].'translations'.'es'", containsString("Belice"))
                .body("[1].'translations'.'fr'", containsString("Belize"))
                .body("[1].'translations'.'ja'", containsString("ベリーズ"))
                .body("[1].'translations'.'it'", containsString("Belize"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Bolivia"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".bo"))
                .body("[2].'alpha2Code'", containsString("BO"))
                .body("[2].'alpha3Code'", containsString("BOL"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("591"))
                .body("[2].'capital'", containsString("Sucre"))
                .body("[2].'altSpellings'.size()", equalTo(8))
                .body("[2].'altSpellings'", hasItems("BO", "Buliwya", "Wuliwya", "Plurinational State of Bolivia", "Estado Plurinacional de Bolivia", "Buliwya Mamallaqta", "Wuliwya Suyu", "Tetã Volívia"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("South America"))
                .body("[2].'population'", numberMatches(1.1410651E7))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-17.0))
                .body("[2].'latlng'[1]", numberMatches(-65.0))
                .body("[2].'demonym'", containsString("Bolivian"))
                .body("[2].'area'", numberMatches(1098581.0))
                .body("[2].'gini'", numberMatches(56.3))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC-04:00"))
                .body("[2].'borders'.size()", equalTo(5))
                .body("[2].'borders'", hasItems("ARG", "BRA", "CHL", "PRY", "PER"))
                .body("[2].'nativeName'", containsString("Bolivia"))
                .body("[2].'numericCode'", containsString("068"))
                .body("[2].'currencies'.size()", equalTo(2))
                .body("[2].'currencies'", hasItems("BOB", "BOV"))
                .body("[2].'languages'.size()", equalTo(3))
                .body("[2].'languages'", hasItems("es", "ay", "qu"))
                .body("[2].'translations'.'de'", containsString("Bolivien"))
                .body("[2].'translations'.'es'", containsString("Bolivia"))
                .body("[2].'translations'.'fr'", containsString("Bolivie"))
                .body("[2].'translations'.'ja'", containsString("ボリビア多民族国"))
                .body("[2].'translations'.'it'", containsString("Bolivia"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 21 elements. This limit of 3 elements can be increased in the configurations
    }
}
