package em.emtests.single_class;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T15:08:59.479-04:00[America/New_York]
 * <br>
*  The generated test suite contains 1032 tests
 * <br>
*  Covered targets: 3148
 * <br>
*  Used time: 1h 3m 23s
 * <br>
*  Needed budget for current results: 97%
 * <br>
*  
*/
public class EM_restcountriesdefault_1234_Test {

    
    private static final SutHandler controller = new em.external.eu.fayder.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/restcountries-sut.jar");
    private static String baseUrlOfSut;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (200) GET:/openapi.yaml
    */
    @Test @Timeout(60)
    public void test_0_getOnOpenapi_yamlReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/openapi.yaml")
                .then()
                .statusCode(200);
    }
    
    
    /**
    * Calls:
    * (500) GET:/rest/v2/alpha
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_1_getOnAlphaShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. eu/fayder/restcountries/v2/rest/CountryRestV2_268_getCountriesJson.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_381_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=_EM_380_XYZ_&" + 
                    "codes=LYD&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(500)// eu/fayder/restcountries/v2/rest/CountryRestV2_268_getCountriesJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'message'", containsString("Internal Server Error"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_2_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/alpha?codes=PYG")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0]", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_3_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=_EM_5488_XYZ_&" + 
                    "codes=KW")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_4_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "codes=NAD&" + 
                    "EMextraParam123=_EM_1058_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0]", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/all
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_5_getOnV1AllReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_5_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("[0].'name'", containsString("Afghanistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".af"))
                .body("[0].'alpha2Code'", containsString("AF"))
                .body("[0].'alpha3Code'", containsString("AFG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("93"))
                .body("[0].'capital'", containsString("Kabul"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AF", "Afġānistān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.60231E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(65.0))
                .body("[0].'demonym'", containsString("Afghan"))
                .body("[0].'area'", numberMatches(652230.0))
                .body("[0].'gini'", numberMatches(27.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:30"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "PAK", "TKM", "UZB", "TJK", "CHN"))
                .body("[0].'nativeName'", containsString("افغانستان"))
                .body("[0].'numericCode'", containsString("004"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AFN"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("ps", "uz", "tk"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Åland Islands"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ax"))
                .body("[1].'alpha2Code'", containsString("AX"))
                .body("[1].'alpha3Code'", containsString("ALA"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("358"))
                .body("[1].'capital'", containsString("Mariehamn"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("AX", "Aaland", "Aland", "Ahvenanmaa"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Northern Europe"))
                .body("[1].'population'", numberMatches(28875.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(60.116667))
                .body("[1].'latlng'[1]", numberMatches(19.9))
                .body("[1].'demonym'", containsString("Ålandish"))
                .body("[1].'area'", numberMatches(1580.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Åland"))
                .body("[1].'numericCode'", containsString("248"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EUR"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("sv"))
                .body("[1].'translations'.'de'", containsString("Åland"))
                .body("[1].'translations'.'es'", containsString("Alandia"))
                .body("[1].'translations'.'fr'", containsString("Åland"))
                .body("[1].'translations'.'ja'", containsString("オーランド諸島"))
                .body("[1].'translations'.'it'", containsString("Isole Aland"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Albania"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".al"))
                .body("[2].'alpha2Code'", containsString("AL"))
                .body("[2].'alpha3Code'", containsString("ALB"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("355"))
                .body("[2].'capital'", containsString("Tirana"))
                .body("[2].'altSpellings'.size()", equalTo(4))
                .body("[2].'altSpellings'", hasItems("AL", "Shqipëri", "Shqipëria", "Shqipnia"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Southern Europe"))
                .body("[2].'population'", numberMatches(2893005.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(41.0))
                .body("[2].'latlng'[1]", numberMatches(20.0))
                .body("[2].'demonym'", containsString("Albanian"))
                .body("[2].'area'", numberMatches(28748.0))
                .body("[2].'gini'", numberMatches(34.5))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(4))
                .body("[2].'borders'", hasItems("MNE", "GRC", "MKD", "KOS"))
                .body("[2].'nativeName'", containsString("Shqipëria"))
                .body("[2].'numericCode'", containsString("008"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("ALL"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("sq"))
                .body("[2].'translations'.'de'", containsString("Albanien"))
                .body("[2].'translations'.'es'", containsString("Albania"))
                .body("[2].'translations'.'fr'", containsString("Albanie"))
                .body("[2].'translations'.'ja'", containsString("アルバニア"))
                .body("[2].'translations'.'it'", containsString("Albania"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_6_getOnV1AlphaWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/alpha?" + 
                    "codes=UEUU%3BUU%5BXUZ%60&" + 
                    "EMextraParam123=_EM_940_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0]", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_7_getOnV2AlphaWithQueryParamsEmptyFields() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=&" + 
                    "codes=C%3BvtRPrr")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0]", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_8_getOnV2AllReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("[0].'name'", containsString("Afghanistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".af"))
                .body("[0].'alpha2Code'", containsString("AF"))
                .body("[0].'alpha3Code'", containsString("AFG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("93"))
                .body("[0].'capital'", containsString("Kabul"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AF", "Afġānistān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.7657145E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(65.0))
                .body("[0].'demonym'", containsString("Afghan"))
                .body("[0].'area'", numberMatches(652230.0))
                .body("[0].'gini'", numberMatches(27.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:30"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "PAK", "TKM", "UZB", "TJK", "CHN"))
                .body("[0].'nativeName'", containsString("افغانستان"))
                .body("[0].'numericCode'", containsString("004"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("AFN"))
                .body("[0].'currencies'[0].'name'", containsString("Afghan afghani"))
                .body("[0].'currencies'[0].'symbol'", containsString("؋"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'[0].'iso639_1'", containsString("ps"))
                .body("[0].'languages'[0].'iso639_2'", containsString("pus"))
                .body("[0].'languages'[0].'name'", containsString("Pashto"))
                .body("[0].'languages'[0].'nativeName'", containsString("پښتو"))
                .body("[0].'languages'[1].'iso639_1'", containsString("uz"))
                .body("[0].'languages'[1].'iso639_2'", containsString("uzb"))
                .body("[0].'languages'[1].'name'", containsString("Uzbek"))
                .body("[0].'languages'[1].'nativeName'", containsString("Oʻzbek"))
                .body("[0].'languages'[2].'iso639_1'", containsString("tk"))
                .body("[0].'languages'[2].'iso639_2'", containsString("tuk"))
                .body("[0].'languages'[2].'name'", containsString("Turkmen"))
                .body("[0].'languages'[2].'nativeName'", containsString("Türkmen"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[0].'translations'.'br'", containsString("Afeganistão"))
                .body("[0].'translations'.'pt'", containsString("Afeganistão"))
                .body("[0].'translations'.'nl'", containsString("Afghanistan"))
                .body("[0].'translations'.'hr'", containsString("Afganistan"))
                .body("[0].'translations'.'fa'", containsString("افغانستان"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/afg.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("SAARC"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("South Asian Association for Regional Cooperation"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("AFG"))
                .body("[1].'name'", containsString("Åland Islands"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ax"))
                .body("[1].'alpha2Code'", containsString("AX"))
                .body("[1].'alpha3Code'", containsString("ALA"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("358"))
                .body("[1].'capital'", containsString("Mariehamn"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("AX", "Aaland", "Aland", "Ahvenanmaa"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Northern Europe"))
                .body("[1].'population'", numberMatches(28875.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(60.116667))
                .body("[1].'latlng'[1]", numberMatches(19.9))
                .body("[1].'demonym'", containsString("Ålandish"))
                .body("[1].'area'", numberMatches(1580.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Åland"))
                .body("[1].'numericCode'", containsString("248"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("EUR"))
                .body("[1].'currencies'[0].'name'", containsString("Euro"))
                .body("[1].'currencies'[0].'symbol'", containsString("€"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'[0].'iso639_1'", containsString("sv"))
                .body("[1].'languages'[0].'iso639_2'", containsString("swe"))
                .body("[1].'languages'[0].'name'", containsString("Swedish"))
                .body("[1].'languages'[0].'nativeName'", containsString("svenska"))
                .body("[1].'translations'.'de'", containsString("Åland"))
                .body("[1].'translations'.'es'", containsString("Alandia"))
                .body("[1].'translations'.'fr'", containsString("Åland"))
                .body("[1].'translations'.'ja'", containsString("オーランド諸島"))
                .body("[1].'translations'.'it'", containsString("Isole Aland"))
                .body("[1].'translations'.'br'", containsString("Ilhas de Aland"))
                .body("[1].'translations'.'pt'", containsString("Ilhas de Aland"))
                .body("[1].'translations'.'nl'", containsString("Ålandeilanden"))
                .body("[1].'translations'.'hr'", containsString("Ålandski otoci"))
                .body("[1].'translations'.'fa'", containsString("جزایر الند"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/ala.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("EU"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("European Union"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[1].'cioc'", containsString(""))
                .body("[2].'name'", containsString("Albania"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".al"))
                .body("[2].'alpha2Code'", containsString("AL"))
                .body("[2].'alpha3Code'", containsString("ALB"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("355"))
                .body("[2].'capital'", containsString("Tirana"))
                .body("[2].'altSpellings'.size()", equalTo(4))
                .body("[2].'altSpellings'", hasItems("AL", "Shqipëri", "Shqipëria", "Shqipnia"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Southern Europe"))
                .body("[2].'population'", numberMatches(2886026.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(41.0))
                .body("[2].'latlng'[1]", numberMatches(20.0))
                .body("[2].'demonym'", containsString("Albanian"))
                .body("[2].'area'", numberMatches(28748.0))
                .body("[2].'gini'", numberMatches(34.5))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(4))
                .body("[2].'borders'", hasItems("MNE", "GRC", "MKD", "KOS"))
                .body("[2].'nativeName'", containsString("Shqipëria"))
                .body("[2].'numericCode'", containsString("008"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'[0].'code'", containsString("ALL"))
                .body("[2].'currencies'[0].'name'", containsString("Albanian lek"))
                .body("[2].'currencies'[0].'symbol'", containsString("L"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'[0].'iso639_1'", containsString("sq"))
                .body("[2].'languages'[0].'iso639_2'", containsString("sqi"))
                .body("[2].'languages'[0].'name'", containsString("Albanian"))
                .body("[2].'languages'[0].'nativeName'", containsString("Shqip"))
                .body("[2].'translations'.'de'", containsString("Albanien"))
                .body("[2].'translations'.'es'", containsString("Albania"))
                .body("[2].'translations'.'fr'", containsString("Albanie"))
                .body("[2].'translations'.'ja'", containsString("アルバニア"))
                .body("[2].'translations'.'it'", containsString("Albania"))
                .body("[2].'translations'.'br'", containsString("Albânia"))
                .body("[2].'translations'.'pt'", containsString("Albânia"))
                .body("[2].'translations'.'nl'", containsString("Albanië"))
                .body("[2].'translations'.'hr'", containsString("Albanija"))
                .body("[2].'translations'.'fa'", containsString("آلبانی"))
                .body("[2].'flag'", containsString("https://restcountries.eu/data/alb.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[0].'acronym'", containsString("CEFTA"))
                .body("[2].'regionalBlocs'[0].'name'", containsString("Central European Free Trade Agreement"))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[2].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[2].'cioc'", containsString("ALB"))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_9_getOnAllReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/all?" + 
                    "fields=_EM_13_XYZ_&" + 
                    "EMextraParam123=_EM_14_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_10_getOnAllReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_118_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/all?" + 
                    "fields=_EM_116_XYZ_&" + 
                    "EMextraParam123=_EM_117_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_11_getOnAllReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/all?" + 
                    "fields=_EM_505_XYZ_&" + 
                    "EMextraParam123=_EM_506_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_12_getOnAllReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/all?fields=_EM_756_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_13_getOnAllReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/all?" + 
                    "fields=_EM_1101_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_14_getOnAllReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/all?fields=_EM_1463_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_15_getOnAllReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/all?" + 
                    "fields=_EM_1808_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_16_getOnAllReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1726_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/all?" + 
                    "fields=_EM_1724_XYZ_&" + 
                    "EMextraParam123=_EM_1725_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_17_getOnAllReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/all?fields=_EM_2563_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_18_getOnAllReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/all?fields=_EM_2563_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_19_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/alpha?codes=zi5o")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_20_getOnV1AlphaWithQueryParamEmptyCodesReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_295_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/alpha?codes=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_21_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_17_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=_EM_15_XYZ_&" + 
                    "codes=MqgH8l3hqO")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_22_getOnV2AlphaWithQueryParamsEmptyCodesReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "codes=&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_23_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1597_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/alpha?codes=X")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_24_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=_EM_1057_XYZ_&" + 
                    "codes=b")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_25_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_93_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/alpha/ET")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("Ethiopia"))
                .body("'topLevelDomain'.size()", equalTo(1))
                .body("'topLevelDomain'", hasItems(".et"))
                .body("'alpha2Code'", containsString("ET"))
                .body("'alpha3Code'", containsString("ETH"))
                .body("'callingCodes'.size()", equalTo(1))
                .body("'callingCodes'", hasItems("251"))
                .body("'capital'", containsString("Addis Ababa"))
                .body("'altSpellings'.size()", equalTo(4))
                .body("'altSpellings'", hasItems("ET", "ʾĪtyōṗṗyā", "Federal Democratic Republic of Ethiopia", "የኢትዮጵያ ፌዴራላዊ ዲሞክራሲያዊ ሪፐብሊክ"))
                .body("'region'", containsString("Africa"))
                .body("'subregion'", containsString("Eastern Africa"))
                .body("'population'", numberMatches(9.0076012E7))
                .body("'latlng'.size()", equalTo(2))
                .body("'latlng'[0]", numberMatches(8.0))
                .body("'latlng'[1]", numberMatches(38.0))
                .body("'demonym'", containsString("Ethiopian"))
                .body("'area'", numberMatches(1104300.0))
                .body("'gini'", numberMatches(29.8))
                .body("'timezones'.size()", equalTo(1))
                .body("'timezones'", hasItems("UTC+03:00"))
                .body("'borders'.size()", equalTo(6))
                .body("'borders'", hasItems("DJI", "ERI", "KEN", "SOM", "SSD", "SDN"))
                .body("'nativeName'", containsString("ኢትዮጵያ"))
                .body("'numericCode'", containsString("231"))
                .body("'currencies'.size()", equalTo(1))
                .body("'currencies'", hasItems("ETB"))
                .body("'languages'.size()", equalTo(1))
                .body("'languages'", hasItems("am"))
                .body("'translations'.'de'", containsString("Äthiopien"))
                .body("'translations'.'es'", containsString("Etiopía"))
                .body("'translations'.'fr'", containsString("Éthiopie"))
                .body("'translations'.'ja'", containsString("エチオピア"))
                .body("'translations'.'it'", containsString("Etiopia"))
                .body("'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_26_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Neukaledonien")
                .get(baseUrlOfSut + "/rest/v1/currency/PAB")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Panama"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pa"))
                .body("[0].'alpha2Code'", containsString("PA"))
                .body("[0].'alpha3Code'", containsString("PAN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("507"))
                .body("[0].'capital'", containsString("Panama City"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("PA", "Republic of Panama", "República de Panamá"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Central America"))
                .body("[0].'population'", numberMatches(3764166.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(9.0))
                .body("[0].'latlng'[1]", numberMatches(-80.0))
                .body("[0].'demonym'", containsString("Panamanian"))
                .body("[0].'area'", numberMatches(75417.0))
                .body("[0].'gini'", numberMatches(51.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-05:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("COL", "CRI"))
                .body("[0].'nativeName'", containsString("Panamá"))
                .body("[0].'numericCode'", containsString("591"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("PAB", "USD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("Panama"))
                .body("[0].'translations'.'es'", containsString("Panamá"))
                .body("[0].'translations'.'fr'", containsString("Panama"))
                .body("[0].'translations'.'ja'", containsString("パナマ"))
                .body("[0].'translations'.'it'", containsString("Panama"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_27_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/kh?" + 
                    "fields=topLevelDomain&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'topLevelDomain'.size()", equalTo(2))
                .body("[0].'topLevelDomain'", hasItems(".kz", ".қаз"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".kh"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_28_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/mu?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(7))
                .body("[0].'name'", containsString("Bermuda"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bm"))
                .body("[0].'alpha2Code'", containsString("BM"))
                .body("[0].'alpha3Code'", containsString("BMU"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Hamilton"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("BM", "The Islands of Bermuda", "The Bermudas", "Somers Isles"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Northern America"))
                .body("[0].'population'", numberMatches(64237.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(32.33333333))
                .body("[0].'latlng'[1]", numberMatches(-64.75))
                .body("[0].'demonym'", containsString("Bermudian"))
                .body("[0].'area'", numberMatches(54.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Bermuda"))
                .body("[0].'numericCode'", containsString("060"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BMD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Bermuda"))
                .body("[0].'translations'.'es'", containsString("Bermudas"))
                .body("[0].'translations'.'fr'", containsString("Bermudes"))
                .body("[0].'translations'.'ja'", containsString("バミューダ"))
                .body("[0].'translations'.'it'", containsString("Bermuda"))
                .body("[0].'relevance'", containsString("0.5"))
                .body("[1].'name'", containsString("Comoros"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".km"))
                .body("[1].'alpha2Code'", containsString("KM"))
                .body("[1].'alpha3Code'", containsString("COM"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("269"))
                .body("[1].'capital'", containsString("Moroni"))
                .body("[1].'altSpellings'.size()", equalTo(5))
                .body("[1].'altSpellings'", hasItems("KM", "Union of the Comoros", "Union des Comores", "Udzima wa Komori", "al-Ittiḥād al-Qumurī"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Eastern Africa"))
                .body("[1].'population'", numberMatches(784745.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-12.16666666))
                .body("[1].'latlng'[1]", numberMatches(44.25))
                .body("[1].'demonym'", containsString("Comoran"))
                .body("[1].'area'", numberMatches(1862.0))
                .body("[1].'gini'", numberMatches(64.3))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+03:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Komori"))
                .body("[1].'numericCode'", containsString("174"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("KMF"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("ar", "fr"))
                .body("[1].'translations'.'de'", containsString("Union der Komoren"))
                .body("[1].'translations'.'es'", containsString("Comoras"))
                .body("[1].'translations'.'fr'", containsString("Comores"))
                .body("[1].'translations'.'ja'", containsString("コモロ"))
                .body("[1].'translations'.'it'", containsString("Comore"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Djibouti"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".dj"))
                .body("[2].'alpha2Code'", containsString("DJ"))
                .body("[2].'alpha3Code'", containsString("DJI"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("253"))
                .body("[2].'capital'", containsString("Djibouti"))
                .body("[2].'altSpellings'.size()", equalTo(7))
                .body("[2].'altSpellings'", hasItems("DJ", "Jabuuti", "Gabuuti", "Republic of Djibouti", "République de Djibouti", "Gabuutih Ummuuno", "Jamhuuriyadda Jabuuti"))
                .body("[2].'region'", containsString("Africa"))
                .body("[2].'subregion'", containsString("Eastern Africa"))
                .body("[2].'population'", numberMatches(888000.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(11.5))
                .body("[2].'latlng'[1]", numberMatches(43.0))
                .body("[2].'demonym'", containsString("Djibouti"))
                .body("[2].'area'", numberMatches(23200.0))
                .body("[2].'gini'", numberMatches(40.0))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+03:00"))
                .body("[2].'borders'.size()", equalTo(3))
                .body("[2].'borders'", hasItems("ERI", "ETH", "SOM"))
                .body("[2].'nativeName'", containsString("Djibouti"))
                .body("[2].'numericCode'", containsString("262"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("DJF"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'", hasItems("fr", "ar"))
                .body("[2].'translations'.'de'", containsString("Dschibuti"))
                .body("[2].'translations'.'es'", containsString("Yibuti"))
                .body("[2].'translations'.'fr'", containsString("Djibouti"))
                .body("[2].'translations'.'ja'", containsString("ジブチ"))
                .body("[2].'translations'.'it'", containsString("Gibuti"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 4 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_29_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/turks%20and%20caicos%20islands?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Turks and Caicos Islands"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tc"))
                .body("[0].'alpha2Code'", containsString("TC"))
                .body("[0].'alpha3Code'", containsString("TCA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Cockburn Town"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("TC"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(31458.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(21.75))
                .body("[0].'latlng'[1]", numberMatches(-71.58333333))
                .body("[0].'demonym'", containsString("Turks and Caicos Islander"))
                .body("[0].'area'", numberMatches(948.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Turks and Caicos Islands"))
                .body("[0].'numericCode'", containsString("796"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("USD"))
                .body("[0].'currencies'[0].'name'", containsString("United States dollar"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'translations'.'de'", containsString("Turks- und Caicosinseln"))
                .body("[0].'translations'.'es'", containsString("Islas Turks y Caicos"))
                .body("[0].'translations'.'fr'", containsString("Îles Turques-et-Caïques"))
                .body("[0].'translations'.'ja'", containsString("タークス・カイコス諸島"))
                .body("[0].'translations'.'it'", containsString("Isole Turks e Caicos"))
                .body("[0].'translations'.'br'", containsString("Ilhas Turcas e Caicos"))
                .body("[0].'translations'.'pt'", containsString("Ilhas Turcas e Caicos"))
                .body("[0].'translations'.'nl'", containsString("Turks- en Caicoseilanden"))
                .body("[0].'translations'.'hr'", containsString("Otoci Turks i Caicos"))
                .body("[0].'translations'.'fa'", containsString("جزایر تورکس و کایکوس"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/tca.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString(""));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_30_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_59_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/alpha/ch?EMextraParam123=_EM_58_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("Switzerland"))
                .body("'topLevelDomain'.size()", equalTo(1))
                .body("'topLevelDomain'", hasItems(".ch"))
                .body("'alpha2Code'", containsString("CH"))
                .body("'alpha3Code'", containsString("CHE"))
                .body("'callingCodes'.size()", equalTo(1))
                .body("'callingCodes'", hasItems("41"))
                .body("'capital'", containsString("Bern"))
                .body("'altSpellings'.size()", equalTo(6))
                .body("'altSpellings'", hasItems("CH", "Swiss Confederation", "Schweiz", "Suisse", "Svizzera", "Svizra"))
                .body("'region'", containsString("Europe"))
                .body("'subregion'", containsString("Western Europe"))
                .body("'population'", numberMatches(8341600.0))
                .body("'latlng'.size()", equalTo(2))
                .body("'latlng'[0]", numberMatches(47.0))
                .body("'latlng'[1]", numberMatches(8.0))
                .body("'demonym'", containsString("Swiss"))
                .body("'area'", numberMatches(41284.0))
                .body("'gini'", numberMatches(33.7))
                .body("'timezones'.size()", equalTo(1))
                .body("'timezones'", hasItems("UTC+01:00"))
                .body("'borders'.size()", equalTo(5))
                .body("'borders'", hasItems("AUT", "FRA", "ITA", "LIE", "DEU"))
                .body("'nativeName'", containsString("Schweiz"))
                .body("'numericCode'", containsString("756"))
                .body("'currencies'.size()", equalTo(1))
                .body("'currencies'[0].'code'", containsString("CHF"))
                .body("'currencies'[0].'name'", containsString("Swiss franc"))
                .body("'currencies'[0].'symbol'", containsString("Fr"))
                .body("'languages'.size()", equalTo(3))
                .body("'languages'[0].'iso639_1'", containsString("de"))
                .body("'languages'[0].'iso639_2'", containsString("deu"))
                .body("'languages'[0].'name'", containsString("German"))
                .body("'languages'[0].'nativeName'", containsString("Deutsch"))
                .body("'languages'[1].'iso639_1'", containsString("fr"))
                .body("'languages'[1].'iso639_2'", containsString("fra"))
                .body("'languages'[1].'name'", containsString("French"))
                .body("'languages'[1].'nativeName'", containsString("français"))
                .body("'languages'[2].'iso639_1'", containsString("it"))
                .body("'languages'[2].'iso639_2'", containsString("ita"))
                .body("'languages'[2].'name'", containsString("Italian"))
                .body("'languages'[2].'nativeName'", containsString("Italiano"))
                .body("'translations'.'de'", containsString("Schweiz"))
                .body("'translations'.'es'", containsString("Suiza"))
                .body("'translations'.'fr'", containsString("Suisse"))
                .body("'translations'.'ja'", containsString("スイス"))
                .body("'translations'.'it'", containsString("Svizzera"))
                .body("'translations'.'br'", containsString("Suíça"))
                .body("'translations'.'pt'", containsString("Suíça"))
                .body("'translations'.'nl'", containsString("Zwitserland"))
                .body("'translations'.'hr'", containsString("Švicarska"))
                .body("'translations'.'fa'", containsString("سوئیس"))
                .body("'flag'", containsString("https://restcountries.eu/data/che.svg"))
                .body("'regionalBlocs'.size()", equalTo(1))
                .body("'regionalBlocs'[0].'acronym'", containsString("EFTA"))
                .body("'regionalBlocs'[0].'name'", containsString("European Free Trade Association"))
                .body("'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("'cioc'", containsString("SUI"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_31_getOnV2RegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/SAARC")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(8))
                .body("[0].'name'", containsString("Afghanistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".af"))
                .body("[0].'alpha2Code'", containsString("AF"))
                .body("[0].'alpha3Code'", containsString("AFG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("93"))
                .body("[0].'capital'", containsString("Kabul"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AF", "Afġānistān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.7657145E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(65.0))
                .body("[0].'demonym'", containsString("Afghan"))
                .body("[0].'area'", numberMatches(652230.0))
                .body("[0].'gini'", numberMatches(27.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:30"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "PAK", "TKM", "UZB", "TJK", "CHN"))
                .body("[0].'nativeName'", containsString("افغانستان"))
                .body("[0].'numericCode'", containsString("004"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("AFN"))
                .body("[0].'currencies'[0].'name'", containsString("Afghan afghani"))
                .body("[0].'currencies'[0].'symbol'", containsString("؋"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'[0].'iso639_1'", containsString("ps"))
                .body("[0].'languages'[0].'iso639_2'", containsString("pus"))
                .body("[0].'languages'[0].'name'", containsString("Pashto"))
                .body("[0].'languages'[0].'nativeName'", containsString("پښتو"))
                .body("[0].'languages'[1].'iso639_1'", containsString("uz"))
                .body("[0].'languages'[1].'iso639_2'", containsString("uzb"))
                .body("[0].'languages'[1].'name'", containsString("Uzbek"))
                .body("[0].'languages'[1].'nativeName'", containsString("Oʻzbek"))
                .body("[0].'languages'[2].'iso639_1'", containsString("tk"))
                .body("[0].'languages'[2].'iso639_2'", containsString("tuk"))
                .body("[0].'languages'[2].'name'", containsString("Turkmen"))
                .body("[0].'languages'[2].'nativeName'", containsString("Türkmen"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[0].'translations'.'br'", containsString("Afeganistão"))
                .body("[0].'translations'.'pt'", containsString("Afeganistão"))
                .body("[0].'translations'.'nl'", containsString("Afghanistan"))
                .body("[0].'translations'.'hr'", containsString("Afganistan"))
                .body("[0].'translations'.'fa'", containsString("افغانستان"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/afg.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("SAARC"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("South Asian Association for Regional Cooperation"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("AFG"))
                .body("[1].'name'", containsString("Bangladesh"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".bd"))
                .body("[1].'alpha2Code'", containsString("BD"))
                .body("[1].'alpha3Code'", containsString("BGD"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("880"))
                .body("[1].'capital'", containsString("Dhaka"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("BD", "People's Republic of Bangladesh", "Gônôprôjatôntri Bangladesh"))
                .body("[1].'region'", containsString("Asia"))
                .body("[1].'subregion'", containsString("Southern Asia"))
                .body("[1].'population'", numberMatches(1.6100679E8))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(24.0))
                .body("[1].'latlng'[1]", numberMatches(90.0))
                .body("[1].'demonym'", containsString("Bangladeshi"))
                .body("[1].'area'", numberMatches(147570.0))
                .body("[1].'gini'", numberMatches(32.1))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+06:00"))
                .body("[1].'borders'.size()", equalTo(2))
                .body("[1].'borders'", hasItems("MMR", "IND"))
                .body("[1].'nativeName'", containsString("Bangladesh"))
                .body("[1].'numericCode'", containsString("050"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("BDT"))
                .body("[1].'currencies'[0].'name'", containsString("Bangladeshi taka"))
                .body("[1].'currencies'[0].'symbol'", containsString("৳"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'[0].'iso639_1'", containsString("bn"))
                .body("[1].'languages'[0].'iso639_2'", containsString("ben"))
                .body("[1].'languages'[0].'name'", containsString("Bengali"))
                .body("[1].'languages'[0].'nativeName'", containsString("বাংলা"))
                .body("[1].'translations'.'de'", containsString("Bangladesch"))
                .body("[1].'translations'.'es'", containsString("Bangladesh"))
                .body("[1].'translations'.'fr'", containsString("Bangladesh"))
                .body("[1].'translations'.'ja'", containsString("バングラデシュ"))
                .body("[1].'translations'.'it'", containsString("Bangladesh"))
                .body("[1].'translations'.'br'", containsString("Bangladesh"))
                .body("[1].'translations'.'pt'", containsString("Bangladeche"))
                .body("[1].'translations'.'nl'", containsString("Bangladesh"))
                .body("[1].'translations'.'hr'", containsString("Bangladeš"))
                .body("[1].'translations'.'fa'", containsString("بنگلادش"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/bgd.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("SAARC"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("South Asian Association for Regional Cooperation"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[1].'cioc'", containsString("BAN"))
                .body("[2].'name'", containsString("Bhutan"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".bt"))
                .body("[2].'alpha2Code'", containsString("BT"))
                .body("[2].'alpha3Code'", containsString("BTN"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("975"))
                .body("[2].'capital'", containsString("Thimphu"))
                .body("[2].'altSpellings'.size()", equalTo(2))
                .body("[2].'altSpellings'", hasItems("BT", "Kingdom of Bhutan"))
                .body("[2].'region'", containsString("Asia"))
                .body("[2].'subregion'", containsString("Southern Asia"))
                .body("[2].'population'", numberMatches(775620.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(27.5))
                .body("[2].'latlng'[1]", numberMatches(90.5))
                .body("[2].'demonym'", containsString("Bhutanese"))
                .body("[2].'area'", numberMatches(38394.0))
                .body("[2].'gini'", numberMatches(38.1))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+06:00"))
                .body("[2].'borders'.size()", equalTo(2))
                .body("[2].'borders'", hasItems("CHN", "IND"))
                .body("[2].'nativeName'", containsString("ʼbrug-yul"))
                .body("[2].'numericCode'", containsString("064"))
                .body("[2].'currencies'.size()", equalTo(2))
                .body("[2].'currencies'[0].'code'", containsString("BTN"))
                .body("[2].'currencies'[0].'name'", containsString("Bhutanese ngultrum"))
                .body("[2].'currencies'[0].'symbol'", containsString("Nu."))
                .body("[2].'currencies'[1].'code'", containsString("INR"))
                .body("[2].'currencies'[1].'name'", containsString("Indian rupee"))
                .body("[2].'currencies'[1].'symbol'", containsString("₹"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'[0].'iso639_1'", containsString("dz"))
                .body("[2].'languages'[0].'iso639_2'", containsString("dzo"))
                .body("[2].'languages'[0].'name'", containsString("Dzongkha"))
                .body("[2].'languages'[0].'nativeName'", containsString("རྫོང་ཁ"))
                .body("[2].'translations'.'de'", containsString("Bhutan"))
                .body("[2].'translations'.'es'", containsString("Bután"))
                .body("[2].'translations'.'fr'", containsString("Bhoutan"))
                .body("[2].'translations'.'ja'", containsString("ブータン"))
                .body("[2].'translations'.'it'", containsString("Bhutan"))
                .body("[2].'translations'.'br'", containsString("Butão"))
                .body("[2].'translations'.'pt'", containsString("Butão"))
                .body("[2].'translations'.'nl'", containsString("Bhutan"))
                .body("[2].'translations'.'hr'", containsString("Butan"))
                .body("[2].'translations'.'fa'", containsString("بوتان"))
                .body("[2].'flag'", containsString("https://restcountries.eu/data/btn.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[0].'acronym'", containsString("SAARC"))
                .body("[2].'regionalBlocs'[0].'name'", containsString("South Asian Association for Regional Cooperation"))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[2].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[2].'cioc'", containsString("BHU"))
                ; // Skipping assertions on the remaining 5 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_32_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/EU?fields=alpha3Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(33))
                .body("[0].'alpha3Code'", containsString("ALA"))
                .body("[1].'alpha3Code'", containsString("AUT"))
                .body("[2].'alpha3Code'", containsString("BEL"))
                ; // Skipping assertions on the remaining 30 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_33_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/re")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(143))
                .body("[0].'name'", containsString("Bonaire"))
                .body("[0].'topLevelDomain'.size()", equalTo(2))
                .body("[0].'topLevelDomain'", hasItems(".an", ".nl"))
                .body("[0].'alpha2Code'", containsString("BQ"))
                .body("[0].'alpha3Code'", containsString("BES"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("599"))
                .body("[0].'capital'", containsString("Kralendijk"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("BQ", "Boneiru"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(17408.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(12.15))
                .body("[0].'latlng'[1]", numberMatches(-68.266667))
                .body("[0].'demonym'", containsString("Dutch"))
                .body("[0].'area'", numberMatches(294.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Bonaire"))
                .body("[0].'numericCode'", containsString("535"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("nl"))
                .body("[0].'translations'.'de'", nullValue())
                .body("[0].'translations'.'es'", nullValue())
                .body("[0].'translations'.'fr'", nullValue())
                .body("[0].'translations'.'ja'", nullValue())
                .body("[0].'translations'.'it'", nullValue())
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Central African Republic"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".cf"))
                .body("[1].'alpha2Code'", containsString("CF"))
                .body("[1].'alpha3Code'", containsString("CAF"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("236"))
                .body("[1].'capital'", containsString("Bangui"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("CF", "Central African Republic", "République centrafricaine"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Middle Africa"))
                .body("[1].'population'", numberMatches(4900000.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(7.0))
                .body("[1].'latlng'[1]", numberMatches(21.0))
                .body("[1].'demonym'", containsString("Central African"))
                .body("[1].'area'", numberMatches(622984.0))
                .body("[1].'gini'", numberMatches(56.3))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(6))
                .body("[1].'borders'", hasItems("CMR", "TCD", "COD", "COG", "SSD", "SDN"))
                .body("[1].'nativeName'", containsString("Ködörösêse tî Bêafrîka"))
                .body("[1].'numericCode'", containsString("140"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("XAF"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("fr", "sg"))
                .body("[1].'translations'.'de'", containsString("Zentralafrikanische Republik"))
                .body("[1].'translations'.'es'", containsString("República Centroafricana"))
                .body("[1].'translations'.'fr'", containsString("République centrafricaine"))
                .body("[1].'translations'.'ja'", containsString("中央アフリカ共和国"))
                .body("[1].'translations'.'it'", containsString("Repubblica Centrafricana"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Republic of the Congo"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".cg"))
                .body("[2].'alpha2Code'", containsString("CG"))
                .body("[2].'alpha3Code'", containsString("COG"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("242"))
                .body("[2].'capital'", containsString("Brazzaville"))
                .body("[2].'altSpellings'.size()", equalTo(2))
                .body("[2].'altSpellings'", hasItems("CG", "Congo-Brazzaville"))
                .body("[2].'region'", containsString("Africa"))
                .body("[2].'subregion'", containsString("Middle Africa"))
                .body("[2].'population'", numberMatches(4620000.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-1.0))
                .body("[2].'latlng'[1]", numberMatches(15.0))
                .body("[2].'demonym'", containsString("Congolese"))
                .body("[2].'area'", numberMatches(342000.0))
                .body("[2].'gini'", numberMatches(47.3))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(5))
                .body("[2].'borders'", hasItems("AGO", "CMR", "CAF", "COD", "GAB"))
                .body("[2].'nativeName'", containsString("République du Congo"))
                .body("[2].'numericCode'", containsString("178"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("XAF"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'", hasItems("fr", "ln"))
                .body("[2].'translations'.'de'", containsString("Kongo"))
                .body("[2].'translations'.'es'", containsString("Congo"))
                .body("[2].'translations'.'fr'", containsString("Congo"))
                .body("[2].'translations'.'ja'", containsString("コンゴ共和国"))
                .body("[2].'translations'.'it'", containsString("Congo"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 140 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_34_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/211")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("South Sudan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ss"))
                .body("[0].'alpha2Code'", containsString("SS"))
                .body("[0].'alpha3Code'", containsString("SSD"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("211"))
                .body("[0].'capital'", containsString("Juba"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("SS"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(1.1892934E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(7.0))
                .body("[0].'latlng'[1]", numberMatches(30.0))
                .body("[0].'demonym'", containsString("South Sudanese"))
                .body("[0].'area'", numberMatches(619745.0))
                .body("[0].'gini'", numberMatches(45.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("CAF", "COD", "ETH", "KEN", "SDN", "UGA"))
                .body("[0].'nativeName'", containsString("South Sudan"))
                .body("[0].'numericCode'", containsString("728"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("SSP"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Südsudan"))
                .body("[0].'translations'.'es'", containsString("Sudán del Sur"))
                .body("[0].'translations'.'fr'", containsString("Soudan du Sud"))
                .body("[0].'translations'.'ja'", containsString("南スーダン"))
                .body("[0].'translations'.'it'", containsString("Sudan del sud"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_35_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/358?fields=YWD")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_36_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/261?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Madagascar"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mg"))
                .body("[0].'alpha2Code'", containsString("MG"))
                .body("[0].'alpha3Code'", containsString("MDG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("261"))
                .body("[0].'capital'", containsString("Antananarivo"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("MG", "Republic of Madagascar", "Repoblikan'i Madagasikara", "République de Madagascar"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(2.2434363E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-20.0))
                .body("[0].'latlng'[1]", numberMatches(47.0))
                .body("[0].'demonym'", containsString("Malagasy"))
                .body("[0].'area'", numberMatches(587041.0))
                .body("[0].'gini'", numberMatches(44.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Madagasikara"))
                .body("[0].'numericCode'", containsString("450"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("MGA"))
                .body("[0].'currencies'[0].'name'", containsString("Malagasy ariary"))
                .body("[0].'currencies'[0].'symbol'", containsString("Ar"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("fr"))
                .body("[0].'languages'[0].'iso639_2'", containsString("fra"))
                .body("[0].'languages'[0].'name'", containsString("French"))
                .body("[0].'languages'[0].'nativeName'", containsString("français"))
                .body("[0].'languages'[1].'iso639_1'", containsString("mg"))
                .body("[0].'languages'[1].'iso639_2'", containsString("mlg"))
                .body("[0].'languages'[1].'name'", containsString("Malagasy"))
                .body("[0].'languages'[1].'nativeName'", containsString("fiteny malagasy"))
                .body("[0].'translations'.'de'", containsString("Madagaskar"))
                .body("[0].'translations'.'es'", containsString("Madagascar"))
                .body("[0].'translations'.'fr'", containsString("Madagascar"))
                .body("[0].'translations'.'ja'", containsString("マダガスカル"))
                .body("[0].'translations'.'it'", containsString("Madagascar"))
                .body("[0].'translations'.'br'", containsString("Madagascar"))
                .body("[0].'translations'.'pt'", containsString("Madagáscar"))
                .body("[0].'translations'.'nl'", containsString("Madagaskar"))
                .body("[0].'translations'.'hr'", containsString("Madagaskar"))
                .body("[0].'translations'.'fa'", containsString("ماداگاسکار"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/mdg.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[0].'cioc'", containsString("MAD"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_37_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/ramallah")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Palestine"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ps"))
                .body("[0].'alpha2Code'", containsString("PS"))
                .body("[0].'alpha3Code'", containsString("PSE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("970"))
                .body("[0].'capital'", containsString("Ramallah"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("PS", "State of Palestine", "Dawlat Filasṭin"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(4682467.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(31.9))
                .body("[0].'latlng'[1]", numberMatches(35.2))
                .body("[0].'demonym'", containsString("Palestinian"))
                .body("[0].'area'", nullValue())
                .body("[0].'gini'", numberMatches(35.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("ISR", "EGY", "JOR"))
                .body("[0].'nativeName'", containsString("فلسطين"))
                .body("[0].'numericCode'", containsString("275"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ILS"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Palästina"))
                .body("[0].'translations'.'es'", containsString("Palestina"))
                .body("[0].'translations'.'fr'", containsString("Palestine"))
                .body("[0].'translations'.'ja'", containsString("パレスチナ"))
                .body("[0].'translations'.'it'", containsString("Palestina"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_38_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/cayenne?fields=cK")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_39_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_704_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/region/europe?EMextraParam123=_EM_703_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(53))
                .body("[0].'name'", containsString("Åland Islands"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ax"))
                .body("[0].'alpha2Code'", containsString("AX"))
                .body("[0].'alpha3Code'", containsString("ALA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("358"))
                .body("[0].'capital'", containsString("Mariehamn"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AX", "Aaland", "Aland", "Ahvenanmaa"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(28875.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(60.116667))
                .body("[0].'latlng'[1]", numberMatches(19.9))
                .body("[0].'demonym'", containsString("Ålandish"))
                .body("[0].'area'", numberMatches(1580.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Åland"))
                .body("[0].'numericCode'", containsString("248"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("sv"))
                .body("[0].'translations'.'de'", containsString("Åland"))
                .body("[0].'translations'.'es'", containsString("Alandia"))
                .body("[0].'translations'.'fr'", containsString("Åland"))
                .body("[0].'translations'.'ja'", containsString("オーランド諸島"))
                .body("[0].'translations'.'it'", containsString("Isole Aland"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Albania"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".al"))
                .body("[1].'alpha2Code'", containsString("AL"))
                .body("[1].'alpha3Code'", containsString("ALB"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("355"))
                .body("[1].'capital'", containsString("Tirana"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("AL", "Shqipëri", "Shqipëria", "Shqipnia"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Southern Europe"))
                .body("[1].'population'", numberMatches(2893005.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(41.0))
                .body("[1].'latlng'[1]", numberMatches(20.0))
                .body("[1].'demonym'", containsString("Albanian"))
                .body("[1].'area'", numberMatches(28748.0))
                .body("[1].'gini'", numberMatches(34.5))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(4))
                .body("[1].'borders'", hasItems("MNE", "GRC", "MKD", "KOS"))
                .body("[1].'nativeName'", containsString("Shqipëria"))
                .body("[1].'numericCode'", containsString("008"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("ALL"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("sq"))
                .body("[1].'translations'.'de'", containsString("Albanien"))
                .body("[1].'translations'.'es'", containsString("Albania"))
                .body("[1].'translations'.'fr'", containsString("Albanie"))
                .body("[1].'translations'.'ja'", containsString("アルバニア"))
                .body("[1].'translations'.'it'", containsString("Albania"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Andorra"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".ad"))
                .body("[2].'alpha2Code'", containsString("AD"))
                .body("[2].'alpha3Code'", containsString("AND"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("376"))
                .body("[2].'capital'", containsString("Andorra la Vella"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("AD", "Principality of Andorra", "Principat d'Andorra"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Southern Europe"))
                .body("[2].'population'", numberMatches(76949.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(42.5))
                .body("[2].'latlng'[1]", numberMatches(1.5))
                .body("[2].'demonym'", containsString("Andorran"))
                .body("[2].'area'", numberMatches(468.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(2))
                .body("[2].'borders'", hasItems("FRA", "ESP"))
                .body("[2].'nativeName'", containsString("Andorra"))
                .body("[2].'numericCode'", containsString("020"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("EUR"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("ca"))
                .body("[2].'translations'.'de'", containsString("Andorra"))
                .body("[2].'translations'.'es'", containsString("Andorra"))
                .body("[2].'translations'.'fr'", containsString("Andorre"))
                .body("[2].'translations'.'ja'", containsString("アンドラ"))
                .body("[2].'translations'.'it'", containsString("Andorra"))
                .body("[2].'relevance'", containsString("0.5"))
                ; // Skipping assertions on the remaining 50 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_40_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/Polar?fields=name")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Antarctica"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_41_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/eastern%20asia")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(8))
                .body("[0].'name'", containsString("China"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cn"))
                .body("[0].'alpha2Code'", containsString("CN"))
                .body("[0].'alpha3Code'", containsString("CHN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("86"))
                .body("[0].'capital'", containsString("Beijing"))
                .body("[0].'altSpellings'.size()", equalTo(7))
                .body("[0].'altSpellings'", hasItems("CN", "Zhōngguó", "Zhongguo", "Zhonghua", "People's Republic of China", "中华人民共和国", "Zhōnghuá Rénmín Gònghéguó"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(1.37159E9))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(35.0))
                .body("[0].'latlng'[1]", numberMatches(105.0))
                .body("[0].'demonym'", containsString("Chinese"))
                .body("[0].'area'", numberMatches(9640011.0))
                .body("[0].'gini'", numberMatches(47.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(15))
                .body("[0].'borders'", hasItems("AFG", "BTN", "MMR", "HKG", "IND", "KAZ", "PRK", "KGZ", "LAO", "MAC", "MNG", "PAK", "RUS", "TJK", "VNM"))
                .body("[0].'nativeName'", containsString("中国"))
                .body("[0].'numericCode'", containsString("156"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("CNY"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("zh"))
                .body("[0].'translations'.'de'", containsString("China"))
                .body("[0].'translations'.'es'", containsString("China"))
                .body("[0].'translations'.'fr'", containsString("Chine"))
                .body("[0].'translations'.'ja'", containsString("中国"))
                .body("[0].'translations'.'it'", containsString("Cina"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Hong Kong"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".hk"))
                .body("[1].'alpha2Code'", containsString("HK"))
                .body("[1].'alpha3Code'", containsString("HKG"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("852"))
                .body("[1].'capital'", containsString("City of Victoria"))
                .body("[1].'altSpellings'.size()", equalTo(2))
                .body("[1].'altSpellings'", hasItems("HK", "香港"))
                .body("[1].'region'", containsString("Asia"))
                .body("[1].'subregion'", containsString("Eastern Asia"))
                .body("[1].'population'", numberMatches(7298600.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(22.25))
                .body("[1].'latlng'[1]", numberMatches(114.16666666))
                .body("[1].'demonym'", containsString("Chinese"))
                .body("[1].'area'", numberMatches(1104.0))
                .body("[1].'gini'", numberMatches(53.3))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+08:00"))
                .body("[1].'borders'.size()", equalTo(1))
                .body("[1].'borders'", hasItems("CHN"))
                .body("[1].'nativeName'", containsString("香港"))
                .body("[1].'numericCode'", containsString("344"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("HKD"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("en", "zh"))
                .body("[1].'translations'.'de'", containsString("Hong Kong"))
                .body("[1].'translations'.'es'", containsString("Hong Kong"))
                .body("[1].'translations'.'fr'", containsString("Hong Kong"))
                .body("[1].'translations'.'ja'", containsString("香港"))
                .body("[1].'translations'.'it'", containsString("Hong Kong"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Japan"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".jp"))
                .body("[2].'alpha2Code'", containsString("JP"))
                .body("[2].'alpha3Code'", containsString("JPN"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("81"))
                .body("[2].'capital'", containsString("Tokyo"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("JP", "Nippon", "Nihon"))
                .body("[2].'region'", containsString("Asia"))
                .body("[2].'subregion'", containsString("Eastern Asia"))
                .body("[2].'population'", numberMatches(1.26865E8))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(36.0))
                .body("[2].'latlng'[1]", numberMatches(138.0))
                .body("[2].'demonym'", containsString("Japanese"))
                .body("[2].'area'", numberMatches(377930.0))
                .body("[2].'gini'", numberMatches(38.1))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+09:00"))
                .body("[2].'borders'.size()", equalTo(0))
                .body("[2].'nativeName'", containsString("日本"))
                .body("[2].'numericCode'", containsString("392"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("JPY"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("ja"))
                .body("[2].'translations'.'de'", containsString("Japan"))
                .body("[2].'translations'.'es'", containsString("Japón"))
                .body("[2].'translations'.'fr'", containsString("Japon"))
                .body("[2].'translations'.'ja'", containsString("日本"))
                .body("[2].'translations'.'it'", containsString("Giappone"))
                .body("[2].'relevance'", containsString("2.5"))
                ; // Skipping assertions on the remaining 5 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_42_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/southern%20africa")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(6))
                .body("[0].'name'", containsString("Botswana"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bw"))
                .body("[0].'alpha2Code'", containsString("BW"))
                .body("[0].'alpha3Code'", containsString("BWA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("267"))
                .body("[0].'capital'", containsString("Gaborone"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("BW", "Republic of Botswana", "Lefatshe la Botswana"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Southern Africa"))
                .body("[0].'population'", numberMatches(2141206.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-22.0))
                .body("[0].'latlng'[1]", numberMatches(24.0))
                .body("[0].'demonym'", containsString("Motswana"))
                .body("[0].'area'", numberMatches(582000.0))
                .body("[0].'gini'", numberMatches(61.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("NAM", "ZAF", "ZMB", "ZWE"))
                .body("[0].'nativeName'", containsString("Botswana"))
                .body("[0].'numericCode'", containsString("072"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("BWP"))
                .body("[0].'currencies'[0].'name'", containsString("Botswana pula"))
                .body("[0].'currencies'[0].'symbol'", containsString("P"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'languages'[1].'iso639_1'", containsString("tn"))
                .body("[0].'languages'[1].'iso639_2'", containsString("tsn"))
                .body("[0].'languages'[1].'name'", containsString("Tswana"))
                .body("[0].'languages'[1].'nativeName'", containsString("Setswana"))
                .body("[0].'translations'.'de'", containsString("Botswana"))
                .body("[0].'translations'.'es'", containsString("Botswana"))
                .body("[0].'translations'.'fr'", containsString("Botswana"))
                .body("[0].'translations'.'ja'", containsString("ボツワナ"))
                .body("[0].'translations'.'it'", containsString("Botswana"))
                .body("[0].'translations'.'br'", containsString("Botsuana"))
                .body("[0].'translations'.'pt'", containsString("Botsuana"))
                .body("[0].'translations'.'nl'", containsString("Botswana"))
                .body("[0].'translations'.'hr'", containsString("Bocvana"))
                .body("[0].'translations'.'fa'", containsString("بوتسوانا"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/bwa.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[0].'cioc'", containsString("BOT"))
                .body("[1].'name'", containsString("French Southern Territories"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".tf"))
                .body("[1].'alpha2Code'", containsString("TF"))
                .body("[1].'alpha3Code'", containsString("ATF"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("262"))
                .body("[1].'capital'", containsString("Port-aux-Français"))
                .body("[1].'altSpellings'.size()", equalTo(1))
                .body("[1].'altSpellings'", hasItems("TF"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Southern Africa"))
                .body("[1].'population'", numberMatches(140.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-49.25))
                .body("[1].'latlng'[1]", numberMatches(69.167))
                .body("[1].'demonym'", containsString("French"))
                .body("[1].'area'", numberMatches(7747.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+05:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Territoire des Terres australes et antarctiques françaises"))
                .body("[1].'numericCode'", containsString("260"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("EUR"))
                .body("[1].'currencies'[0].'name'", containsString("Euro"))
                .body("[1].'currencies'[0].'symbol'", containsString("€"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'[0].'iso639_1'", containsString("fr"))
                .body("[1].'languages'[0].'iso639_2'", containsString("fra"))
                .body("[1].'languages'[0].'name'", containsString("French"))
                .body("[1].'languages'[0].'nativeName'", containsString("français"))
                .body("[1].'translations'.'de'", containsString("Französische Süd- und Antarktisgebiete"))
                .body("[1].'translations'.'es'", containsString("Tierras Australes y Antárticas Francesas"))
                .body("[1].'translations'.'fr'", containsString("Terres australes et antarctiques françaises"))
                .body("[1].'translations'.'ja'", containsString("フランス領南方・南極地域"))
                .body("[1].'translations'.'it'", containsString("Territori Francesi del Sud"))
                .body("[1].'translations'.'br'", containsString("Terras Austrais e Antárticas Francesas"))
                .body("[1].'translations'.'pt'", containsString("Terras Austrais e Antárticas Francesas"))
                .body("[1].'translations'.'nl'", containsString("Franse Gebieden in de zuidelijke Indische Oceaan"))
                .body("[1].'translations'.'hr'", containsString("Francuski južni i antarktički teritoriji"))
                .body("[1].'translations'.'fa'", containsString("سرزمین‌های جنوبی و جنوبگانی فرانسه"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/atf.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[1].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[1].'cioc'", containsString(""))
                .body("[2].'name'", containsString("Lesotho"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".ls"))
                .body("[2].'alpha2Code'", containsString("LS"))
                .body("[2].'alpha3Code'", containsString("LSO"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("266"))
                .body("[2].'capital'", containsString("Maseru"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("LS", "Kingdom of Lesotho", "Muso oa Lesotho"))
                .body("[2].'region'", containsString("Africa"))
                .body("[2].'subregion'", containsString("Southern Africa"))
                .body("[2].'population'", numberMatches(1894194.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-29.5))
                .body("[2].'latlng'[1]", numberMatches(28.5))
                .body("[2].'demonym'", containsString("Mosotho"))
                .body("[2].'area'", numberMatches(30355.0))
                .body("[2].'gini'", numberMatches(52.5))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+02:00"))
                .body("[2].'borders'.size()", equalTo(1))
                .body("[2].'borders'", hasItems("ZAF"))
                .body("[2].'nativeName'", containsString("Lesotho"))
                .body("[2].'numericCode'", containsString("426"))
                .body("[2].'currencies'.size()", equalTo(2))
                .body("[2].'currencies'[0].'code'", containsString("LSL"))
                .body("[2].'currencies'[0].'name'", containsString("Lesotho loti"))
                .body("[2].'currencies'[0].'symbol'", containsString("L"))
                .body("[2].'currencies'[1].'code'", containsString("ZAR"))
                .body("[2].'currencies'[1].'name'", containsString("South African rand"))
                .body("[2].'currencies'[1].'symbol'", containsString("R"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'[0].'iso639_1'", containsString("en"))
                .body("[2].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[2].'languages'[0].'name'", containsString("English"))
                .body("[2].'languages'[0].'nativeName'", containsString("English"))
                .body("[2].'languages'[1].'iso639_1'", containsString("st"))
                .body("[2].'languages'[1].'iso639_2'", containsString("sot"))
                .body("[2].'languages'[1].'name'", containsString("Southern Sotho"))
                .body("[2].'languages'[1].'nativeName'", containsString("Sesotho"))
                .body("[2].'translations'.'de'", containsString("Lesotho"))
                .body("[2].'translations'.'es'", containsString("Lesotho"))
                .body("[2].'translations'.'fr'", containsString("Lesotho"))
                .body("[2].'translations'.'ja'", containsString("レソト"))
                .body("[2].'translations'.'it'", containsString("Lesotho"))
                .body("[2].'translations'.'br'", containsString("Lesoto"))
                .body("[2].'translations'.'pt'", containsString("Lesoto"))
                .body("[2].'translations'.'nl'", containsString("Lesotho"))
                .body("[2].'translations'.'hr'", containsString("Lesoto"))
                .body("[2].'translations'.'fa'", containsString("لسوتو"))
                .body("[2].'flag'", containsString("https://restcountries.eu/data/lso.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[2].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[2].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[2].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[2].'cioc'", containsString("LES"))
                ; // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_43_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/western%20africa")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(17))
                .body("[0].'name'", containsString("Benin"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bj"))
                .body("[0].'alpha2Code'", containsString("BJ"))
                .body("[0].'alpha3Code'", containsString("BEN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("229"))
                .body("[0].'capital'", containsString("Porto-Novo"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("BJ", "Republic of Benin", "République du Bénin"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(1.0315244E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(9.5))
                .body("[0].'latlng'[1]", numberMatches(2.25))
                .body("[0].'demonym'", containsString("Beninese"))
                .body("[0].'area'", numberMatches(112622.0))
                .body("[0].'gini'", numberMatches(38.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("BFA", "NER", "NGA", "TGO"))
                .body("[0].'nativeName'", containsString("Bénin"))
                .body("[0].'numericCode'", containsString("204"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XOF"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Benin"))
                .body("[0].'translations'.'es'", containsString("Benín"))
                .body("[0].'translations'.'fr'", containsString("Bénin"))
                .body("[0].'translations'.'ja'", containsString("ベナン"))
                .body("[0].'translations'.'it'", containsString("Benin"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Burkina Faso"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".bf"))
                .body("[1].'alpha2Code'", containsString("BF"))
                .body("[1].'alpha3Code'", containsString("BFA"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("226"))
                .body("[1].'capital'", containsString("Ouagadougou"))
                .body("[1].'altSpellings'.size()", equalTo(1))
                .body("[1].'altSpellings'", hasItems("BF"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Western Africa"))
                .body("[1].'population'", numberMatches(1.8450494E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(13.0))
                .body("[1].'latlng'[1]", numberMatches(-2.0))
                .body("[1].'demonym'", containsString("Burkinabe"))
                .body("[1].'area'", numberMatches(272967.0))
                .body("[1].'gini'", numberMatches(39.8))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC"))
                .body("[1].'borders'.size()", equalTo(6))
                .body("[1].'borders'", hasItems("BEN", "CIV", "GHA", "MLI", "NER", "TGO"))
                .body("[1].'nativeName'", containsString("Burkina Faso"))
                .body("[1].'numericCode'", containsString("854"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("XOF"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("fr", "ff"))
                .body("[1].'translations'.'de'", containsString("Burkina Faso"))
                .body("[1].'translations'.'es'", containsString("Burkina Faso"))
                .body("[1].'translations'.'fr'", containsString("Burkina Faso"))
                .body("[1].'translations'.'ja'", containsString("ブルキナファソ"))
                .body("[1].'translations'.'it'", containsString("Burkina Faso"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Cape Verde"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".cv"))
                .body("[2].'alpha2Code'", containsString("CV"))
                .body("[2].'alpha3Code'", containsString("CPV"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("238"))
                .body("[2].'capital'", containsString("Praia"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("CV", "Republic of Cabo Verde", "República de Cabo Verde"))
                .body("[2].'region'", containsString("Africa"))
                .body("[2].'subregion'", containsString("Western Africa"))
                .body("[2].'population'", numberMatches(524833.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(16.0))
                .body("[2].'latlng'[1]", numberMatches(-24.0))
                .body("[2].'demonym'", containsString("Cape Verdian"))
                .body("[2].'area'", numberMatches(4033.0))
                .body("[2].'gini'", numberMatches(50.5))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC-01:00"))
                .body("[2].'borders'.size()", equalTo(0))
                .body("[2].'nativeName'", containsString("Cabo Verde"))
                .body("[2].'numericCode'", containsString("132"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("CVE"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("pt"))
                .body("[2].'translations'.'de'", containsString("Kap Verde"))
                .body("[2].'translations'.'es'", containsString("Cabo Verde"))
                .body("[2].'translations'.'fr'", containsString("Cap Vert"))
                .body("[2].'translations'.'ja'", containsString("カーボベルデ"))
                .body("[2].'translations'.'it'", containsString("Capo Verde"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 14 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_44_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/tm?" + 
                    "fields=_EM_411_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_45_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/south%20america?fields=_EM_2049_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(15))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_46_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/ro?EMextraParam123=_EM_33_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Moldova"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".md"))
                .body("[0].'alpha2Code'", containsString("MD"))
                .body("[0].'alpha3Code'", containsString("MDA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("373"))
                .body("[0].'capital'", containsString("Chișinău"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MD", "Republic of Moldova", "Republica Moldova"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(3555200.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(47.0))
                .body("[0].'latlng'[1]", numberMatches(29.0))
                .body("[0].'demonym'", containsString("Moldovan"))
                .body("[0].'area'", numberMatches(33846.0))
                .body("[0].'gini'", numberMatches(33.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("ROU", "UKR"))
                .body("[0].'nativeName'", containsString("Moldova"))
                .body("[0].'numericCode'", containsString("498"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MDL"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ro"))
                .body("[0].'translations'.'de'", containsString("Moldawie"))
                .body("[0].'translations'.'es'", containsString("Moldavia"))
                .body("[0].'translations'.'fr'", containsString("Moldavie"))
                .body("[0].'translations'.'ja'", containsString("モルドバ共和国"))
                .body("[0].'translations'.'it'", containsString("Moldavia"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Romania"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ro"))
                .body("[1].'alpha2Code'", containsString("RO"))
                .body("[1].'alpha3Code'", containsString("ROU"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("40"))
                .body("[1].'capital'", containsString("Bucharest"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("RO", "Rumania", "Roumania", "România"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Eastern Europe"))
                .body("[1].'population'", numberMatches(1.9942642E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(46.0))
                .body("[1].'latlng'[1]", numberMatches(25.0))
                .body("[1].'demonym'", containsString("Romanian"))
                .body("[1].'area'", numberMatches(238391.0))
                .body("[1].'gini'", numberMatches(30.0))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(5))
                .body("[1].'borders'", hasItems("BGR", "HUN", "MDA", "SRB", "UKR"))
                .body("[1].'nativeName'", containsString("România"))
                .body("[1].'numericCode'", containsString("642"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("RON"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("ro"))
                .body("[1].'translations'.'de'", containsString("Rumänien"))
                .body("[1].'translations'.'es'", containsString("Rumania"))
                .body("[1].'translations'.'fr'", containsString("Roumanie"))
                .body("[1].'translations'.'ja'", containsString("ルーマニア"))
                .body("[1].'translations'.'it'", containsString("Romania"))
                .body("[1].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_47_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/fa")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Iran"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ir"))
                .body("[0].'alpha2Code'", containsString("IR"))
                .body("[0].'alpha3Code'", containsString("IRN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("98"))
                .body("[0].'capital'", containsString("Tehran"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("IR", "Islamic Republic of Iran", "Jomhuri-ye Eslāmi-ye Irān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(7.85725E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(32.0))
                .body("[0].'latlng'[1]", numberMatches(53.0))
                .body("[0].'demonym'", containsString("Iranian"))
                .body("[0].'area'", numberMatches(1648195.0))
                .body("[0].'gini'", numberMatches(38.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:30"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("AFG", "ARM", "AZE", "IRQ", "PAK", "TUR", "TKM"))
                .body("[0].'nativeName'", containsString("ایران"))
                .body("[0].'numericCode'", containsString("364"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("IRR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fa"))
                .body("[0].'translations'.'de'", containsString("Iran"))
                .body("[0].'translations'.'es'", containsString("Iran"))
                .body("[0].'translations'.'fr'", containsString("Iran"))
                .body("[0].'translations'.'ja'", containsString("イラン・イスラム共和国"))
                .body("[0].'translations'.'it'", nullValue())
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_48_getOnV2DemonymWithQueryParamEmptyFields() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/gabonese?fields=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Gabon"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ga"))
                .body("[0].'alpha2Code'", containsString("GA"))
                .body("[0].'alpha3Code'", containsString("GAB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("241"))
                .body("[0].'capital'", containsString("Libreville"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("GA", "Gabonese Republic", "République Gabonaise"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(1802278.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-1.0))
                .body("[0].'latlng'[1]", numberMatches(11.75))
                .body("[0].'demonym'", containsString("Gabonese"))
                .body("[0].'area'", numberMatches(267668.0))
                .body("[0].'gini'", numberMatches(41.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("CMR", "COG", "GNQ"))
                .body("[0].'nativeName'", containsString("Gabon"))
                .body("[0].'numericCode'", containsString("266"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("XAF"))
                .body("[0].'currencies'[0].'name'", containsString("Central African CFA franc"))
                .body("[0].'currencies'[0].'symbol'", containsString("Fr"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("fr"))
                .body("[0].'languages'[0].'iso639_2'", containsString("fra"))
                .body("[0].'languages'[0].'name'", containsString("French"))
                .body("[0].'languages'[0].'nativeName'", containsString("français"))
                .body("[0].'translations'.'de'", containsString("Gabun"))
                .body("[0].'translations'.'es'", containsString("Gabón"))
                .body("[0].'translations'.'fr'", containsString("Gabon"))
                .body("[0].'translations'.'ja'", containsString("ガボン"))
                .body("[0].'translations'.'it'", containsString("Gabon"))
                .body("[0].'translations'.'br'", containsString("Gabão"))
                .body("[0].'translations'.'pt'", containsString("Gabão"))
                .body("[0].'translations'.'nl'", containsString("Gabon"))
                .body("[0].'translations'.'hr'", containsString("Gabon"))
                .body("[0].'translations'.'fa'", containsString("گابن"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/gab.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[0].'cioc'", containsString("GAB"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_49_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_260_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/currency/MVR?" + 
                    "fields=_EM_258_XYZ_&" + 
                    "EMextraParam123=_EM_259_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_50_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Vanuatu")
                .get(baseUrlOfSut + "/rest/v2/currency/TMT?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Turkmenistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tm"))
                .body("[0].'alpha2Code'", containsString("TM"))
                .body("[0].'alpha3Code'", containsString("TKM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("993"))
                .body("[0].'capital'", containsString("Ashgabat"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("TM"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Central Asia"))
                .body("[0].'population'", numberMatches(4751120.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(40.0))
                .body("[0].'latlng'[1]", numberMatches(60.0))
                .body("[0].'demonym'", containsString("Turkmen"))
                .body("[0].'area'", numberMatches(488100.0))
                .body("[0].'gini'", numberMatches(40.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+05:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("AFG", "IRN", "KAZ", "UZB"))
                .body("[0].'nativeName'", containsString("Türkmenistan"))
                .body("[0].'numericCode'", containsString("795"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("TMT"))
                .body("[0].'currencies'[0].'name'", containsString("Turkmenistan manat"))
                .body("[0].'currencies'[0].'symbol'", containsString("m"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("tk"))
                .body("[0].'languages'[0].'iso639_2'", containsString("tuk"))
                .body("[0].'languages'[0].'name'", containsString("Turkmen"))
                .body("[0].'languages'[0].'nativeName'", containsString("Türkmen"))
                .body("[0].'languages'[1].'iso639_1'", containsString("ru"))
                .body("[0].'languages'[1].'iso639_2'", containsString("rus"))
                .body("[0].'languages'[1].'name'", containsString("Russian"))
                .body("[0].'languages'[1].'nativeName'", containsString("Русский"))
                .body("[0].'translations'.'de'", containsString("Turkmenistan"))
                .body("[0].'translations'.'es'", containsString("Turkmenistán"))
                .body("[0].'translations'.'fr'", containsString("Turkménistan"))
                .body("[0].'translations'.'ja'", containsString("トルクメニスタン"))
                .body("[0].'translations'.'it'", containsString("Turkmenistan"))
                .body("[0].'translations'.'br'", containsString("Turcomenistão"))
                .body("[0].'translations'.'pt'", containsString("Turquemenistão"))
                .body("[0].'translations'.'nl'", containsString("Turkmenistan"))
                .body("[0].'translations'.'hr'", containsString("Turkmenistan"))
                .body("[0].'translations'.'fa'", containsString("ترکمنستان"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/tkm.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("TKM"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_51_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/cd?fields=JlPU")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_52_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/kiribati?" + 
                    "fields=_EM_411_XYZ_&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_53_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/kingdom%20of%20bhutan?" + 
                    "fields=alpha3Code&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha3Code'", containsString("BTN"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_54_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/km?" + 
                    "fields=translations&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'translations'.'br'", containsString("Turcomenistão"))
                .body("[0].'translations'.'pt'", containsString("Turquemenistão"))
                .body("[0].'translations'.'nl'", containsString("Turkmenistan"))
                .body("[0].'translations'.'hr'", containsString("Turkmenistan"))
                .body("[0].'translations'.'fa'", containsString("ترکمنستان"))
                .body("[0].'translations'.'de'", containsString("Turkmenistan"))
                .body("[0].'translations'.'es'", containsString("Turkmenistán"))
                .body("[0].'translations'.'fr'", containsString("Turkménistan"))
                .body("[0].'translations'.'ja'", containsString("トルクメニスタン"))
                .body("[0].'translations'.'it'", containsString("Turkmenistan"))
                .body("[1].'translations'.'br'", containsString("Comores"))
                .body("[1].'translations'.'pt'", containsString("Comores"))
                .body("[1].'translations'.'nl'", containsString("Comoren"))
                .body("[1].'translations'.'hr'", containsString("Komori"))
                .body("[1].'translations'.'fa'", containsString("کومور"))
                .body("[1].'translations'.'de'", containsString("Union der Komoren"))
                .body("[1].'translations'.'es'", containsString("Comoras"))
                .body("[1].'translations'.'fr'", containsString("Comores"))
                .body("[1].'translations'.'ja'", containsString("コモロ"))
                .body("[1].'translations'.'it'", containsString("Comore"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_55_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/republic%20of%20estonia?" + 
                    "fields=translations&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'translations'.'br'", containsString("Estônia"))
                .body("[0].'translations'.'pt'", containsString("Estónia"))
                .body("[0].'translations'.'nl'", containsString("Estland"))
                .body("[0].'translations'.'hr'", containsString("Estonija"))
                .body("[0].'translations'.'fa'", containsString("استونی"))
                .body("[0].'translations'.'de'", containsString("Estland"))
                .body("[0].'translations'.'es'", containsString("Estonia"))
                .body("[0].'translations'.'fr'", containsString("Estonie"))
                .body("[0].'translations'.'ja'", containsString("エストニア"))
                .body("[0].'translations'.'it'", containsString("Estonia"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_56_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/34?fields=zQueV4w3g2")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_57_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/basse-terre?fields=_EM_6621_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_58_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/rome")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Holy See"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".va"))
                .body("[0].'alpha2Code'", containsString("VA"))
                .body("[0].'alpha3Code'", containsString("VAT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("379"))
                .body("[0].'capital'", containsString("Rome"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("Sancta Sedes", "Vatican", "The Vatican"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(451.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(41.9))
                .body("[0].'latlng'[1]", numberMatches(12.45))
                .body("[0].'demonym'", containsString(""))
                .body("[0].'area'", numberMatches(0.44))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("ITA"))
                .body("[0].'nativeName'", containsString("Sancta Sedes"))
                .body("[0].'numericCode'", containsString("336"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("EUR"))
                .body("[0].'currencies'[0].'name'", containsString("Euro"))
                .body("[0].'currencies'[0].'symbol'", containsString("€"))
                .body("[0].'languages'.size()", equalTo(4))
                .body("[0].'languages'[0].'iso639_1'", containsString("la"))
                .body("[0].'languages'[0].'iso639_2'", containsString("lat"))
                .body("[0].'languages'[0].'name'", containsString("Latin"))
                .body("[0].'languages'[0].'nativeName'", containsString("latine"))
                .body("[0].'languages'[1].'iso639_1'", containsString("it"))
                .body("[0].'languages'[1].'iso639_2'", containsString("ita"))
                .body("[0].'languages'[1].'name'", containsString("Italian"))
                .body("[0].'languages'[1].'nativeName'", containsString("Italiano"))
                .body("[0].'languages'[2].'iso639_1'", containsString("fr"))
                .body("[0].'languages'[2].'iso639_2'", containsString("fra"))
                .body("[0].'languages'[2].'name'", containsString("French"))
                .body("[0].'languages'[2].'nativeName'", containsString("français"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("[0].'translations'.'de'", containsString("Heiliger Stuhl"))
                .body("[0].'translations'.'es'", containsString("Santa Sede"))
                .body("[0].'translations'.'fr'", containsString("voir Saint"))
                .body("[0].'translations'.'ja'", containsString("聖座"))
                .body("[0].'translations'.'it'", containsString("Santa Sede"))
                .body("[0].'translations'.'br'", containsString("Vaticano"))
                .body("[0].'translations'.'pt'", containsString("Vaticano"))
                .body("[0].'translations'.'nl'", containsString("Heilige Stoel"))
                .body("[0].'translations'.'hr'", containsString("Sveta Stolica"))
                .body("[0].'translations'.'fa'", containsString("سریر مقدس"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/vat.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString(""))
                .body("[1].'name'", containsString("Italy"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".it"))
                .body("[1].'alpha2Code'", containsString("IT"))
                .body("[1].'alpha3Code'", containsString("ITA"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("39"))
                .body("[1].'capital'", containsString("Rome"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("IT", "Italian Republic", "Repubblica italiana"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Southern Europe"))
                .body("[1].'population'", numberMatches(6.0665551E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(42.83333333))
                .body("[1].'latlng'[1]", numberMatches(12.83333333))
                .body("[1].'demonym'", containsString("Italian"))
                .body("[1].'area'", numberMatches(301336.0))
                .body("[1].'gini'", numberMatches(36.0))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(6))
                .body("[1].'borders'", hasItems("AUT", "FRA", "SMR", "SVN", "CHE", "VAT"))
                .body("[1].'nativeName'", containsString("Italia"))
                .body("[1].'numericCode'", containsString("380"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("EUR"))
                .body("[1].'currencies'[0].'name'", containsString("Euro"))
                .body("[1].'currencies'[0].'symbol'", containsString("€"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'[0].'iso639_1'", containsString("it"))
                .body("[1].'languages'[0].'iso639_2'", containsString("ita"))
                .body("[1].'languages'[0].'name'", containsString("Italian"))
                .body("[1].'languages'[0].'nativeName'", containsString("Italiano"))
                .body("[1].'translations'.'de'", containsString("Italien"))
                .body("[1].'translations'.'es'", containsString("Italia"))
                .body("[1].'translations'.'fr'", containsString("Italie"))
                .body("[1].'translations'.'ja'", containsString("イタリア"))
                .body("[1].'translations'.'it'", containsString("Italia"))
                .body("[1].'translations'.'br'", containsString("Itália"))
                .body("[1].'translations'.'pt'", containsString("Itália"))
                .body("[1].'translations'.'nl'", containsString("Italië"))
                .body("[1].'translations'.'hr'", containsString("Italija"))
                .body("[1].'translations'.'fa'", containsString("ایتالیا"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/ita.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("EU"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("European Union"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[1].'cioc'", containsString("ITA"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_59_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/KHM?fields=_EM_3631_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_60_getOnV2LangWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Palau")
                .get(baseUrlOfSut + "/rest/v2/lang/de?" + 
                    "fields=_EM_279_XYZ_&" + 
                    "EMextraParam123=_EM_280_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(7))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 4 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_61_getOnV2LangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/KHM")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Cambodia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".kh"))
                .body("[0].'alpha2Code'", containsString("KH"))
                .body("[0].'alpha3Code'", containsString("KHM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("855"))
                .body("[0].'capital'", containsString("Phnom Penh"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("KH", "Kingdom of Cambodia"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(1.5626444E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(13.0))
                .body("[0].'latlng'[1]", numberMatches(105.0))
                .body("[0].'demonym'", containsString("Cambodian"))
                .body("[0].'area'", numberMatches(181035.0))
                .body("[0].'gini'", numberMatches(37.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+07:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("LAO", "THA", "VNM"))
                .body("[0].'nativeName'", containsString("Kâmpŭchéa"))
                .body("[0].'numericCode'", containsString("116"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'[0].'code'", containsString("KHR"))
                .body("[0].'currencies'[0].'name'", containsString("Cambodian riel"))
                .body("[0].'currencies'[0].'symbol'", containsString("៛"))
                .body("[0].'currencies'[1].'code'", containsString("USD"))
                .body("[0].'currencies'[1].'name'", containsString("United States dollar"))
                .body("[0].'currencies'[1].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("km"))
                .body("[0].'languages'[0].'iso639_2'", containsString("khm"))
                .body("[0].'languages'[0].'name'", containsString("Khmer"))
                .body("[0].'languages'[0].'nativeName'", containsString("ខ្មែរ"))
                .body("[0].'translations'.'de'", containsString("Kambodscha"))
                .body("[0].'translations'.'es'", containsString("Camboya"))
                .body("[0].'translations'.'fr'", containsString("Cambodge"))
                .body("[0].'translations'.'ja'", containsString("カンボジア"))
                .body("[0].'translations'.'it'", containsString("Cambogia"))
                .body("[0].'translations'.'br'", containsString("Camboja"))
                .body("[0].'translations'.'pt'", containsString("Camboja"))
                .body("[0].'translations'.'nl'", containsString("Cambodja"))
                .body("[0].'translations'.'hr'", containsString("Kambodža"))
                .body("[0].'translations'.'fa'", containsString("کامبوج"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/khm.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("ASEAN"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Association of Southeast Asian Nations"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("CAM"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_62_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/chilean")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Chile"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cl"))
                .body("[0].'alpha2Code'", containsString("CL"))
                .body("[0].'alpha3Code'", containsString("CHL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("56"))
                .body("[0].'capital'", containsString("Santiago"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("CL", "Republic of Chile", "República de Chile"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(1.81919E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-30.0))
                .body("[0].'latlng'[1]", numberMatches(-71.0))
                .body("[0].'demonym'", containsString("Chilean"))
                .body("[0].'area'", numberMatches(756102.0))
                .body("[0].'gini'", numberMatches(52.1))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC-06:00", "UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("ARG", "BOL", "PER"))
                .body("[0].'nativeName'", containsString("Chile"))
                .body("[0].'numericCode'", containsString("152"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("CLP"))
                .body("[0].'currencies'[0].'name'", containsString("Chilean peso"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("es"))
                .body("[0].'languages'[0].'iso639_2'", containsString("spa"))
                .body("[0].'languages'[0].'name'", containsString("Spanish"))
                .body("[0].'languages'[0].'nativeName'", containsString("Español"))
                .body("[0].'translations'.'de'", containsString("Chile"))
                .body("[0].'translations'.'es'", containsString("Chile"))
                .body("[0].'translations'.'fr'", containsString("Chili"))
                .body("[0].'translations'.'ja'", containsString("チリ"))
                .body("[0].'translations'.'it'", containsString("Cile"))
                .body("[0].'translations'.'br'", containsString("Chile"))
                .body("[0].'translations'.'pt'", containsString("Chile"))
                .body("[0].'translations'.'nl'", containsString("Chili"))
                .body("[0].'translations'.'hr'", containsString("Čile"))
                .body("[0].'translations'.'fa'", containsString("شیلی"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/chl.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(2))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("PA"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Pacific Alliance"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("Alianza del Pacífico"))
                .body("[0].'regionalBlocs'[1].'acronym'", containsString("USAN"))
                .body("[0].'regionalBlocs'[1].'name'", containsString("Union of South American Nations"))
                .body("[0].'regionalBlocs'[1].'otherAcronyms'.size()", equalTo(3))
                .body("[0].'regionalBlocs'[1].'otherAcronyms'", hasItems("UNASUR", "UNASUL", "UZAN"))
                .body("[0].'regionalBlocs'[1].'otherNames'.size()", equalTo(4))
                .body("[0].'regionalBlocs'[1].'otherNames'", hasItems("Unión de Naciones Suramericanas", "União de Nações Sul-Americanas", "Unie van Zuid-Amerikaanse Naties", "South American Union"))
                .body("[0].'cioc'", containsString("CHI"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_63_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/AL?fields=_EM_2775_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(22))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 19 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_64_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/SICA?fields=altSpellings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(8))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("BZ"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("CR", "Republic of Costa Rica", "República de Costa Rica"))
                .body("[2].'altSpellings'.size()", equalTo(1))
                .body("[2].'altSpellings'", hasItems("DO"))
                ; // Skipping assertions on the remaining 5 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_65_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/UZAN?fields=FNsxoXAX8Uogas")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(15))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_66_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/romania?" + 
                    "fullText=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Romania"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ro"))
                .body("[0].'alpha2Code'", containsString("RO"))
                .body("[0].'alpha3Code'", containsString("ROU"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("40"))
                .body("[0].'capital'", containsString("Bucharest"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("RO", "Rumania", "Roumania", "România"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(1.9942642E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(46.0))
                .body("[0].'latlng'[1]", numberMatches(25.0))
                .body("[0].'demonym'", containsString("Romanian"))
                .body("[0].'area'", numberMatches(238391.0))
                .body("[0].'gini'", numberMatches(30.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("BGR", "HUN", "MDA", "SRB", "UKR"))
                .body("[0].'nativeName'", containsString("România"))
                .body("[0].'numericCode'", containsString("642"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("RON"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ro"))
                .body("[0].'translations'.'de'", containsString("Rumänien"))
                .body("[0].'translations'.'es'", containsString("Rumania"))
                .body("[0].'translations'.'fr'", containsString("Roumanie"))
                .body("[0].'translations'.'ja'", containsString("ルーマニア"))
                .body("[0].'translations'.'it'", containsString("Romania"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_67_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/name/ms?" + 
                    "fullText=true&" + 
                    "EMextraParam123=_EM_393_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Montserrat"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ms"))
                .body("[0].'alpha2Code'", containsString("MS"))
                .body("[0].'alpha3Code'", containsString("MSR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Plymouth"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("MS"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(4922.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(16.75))
                .body("[0].'latlng'[1]", numberMatches(-62.2))
                .body("[0].'demonym'", containsString("Montserratian"))
                .body("[0].'area'", numberMatches(102.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Montserrat"))
                .body("[0].'numericCode'", containsString("500"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XCD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Montserrat"))
                .body("[0].'translations'.'es'", containsString("Montserrat"))
                .body("[0].'translations'.'fr'", containsString("Montserrat"))
                .body("[0].'translations'.'ja'", containsString("モントセラト"))
                .body("[0].'translations'.'it'", containsString("Montserrat"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_68_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/SAARC?fields=alpha3Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(8))
                .body("[0].'alpha3Code'", containsString("AFG"))
                .body("[1].'alpha3Code'", containsString("BGD"))
                .body("[2].'alpha3Code'", containsString("BTN"))
                ; // Skipping assertions on the remaining 5 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_69_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/Americas?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(57))
                .body("[0].'name'", containsString("Anguilla"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ai"))
                .body("[0].'alpha2Code'", containsString("AI"))
                .body("[0].'alpha3Code'", containsString("AIA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("The Valley"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("AI"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(13452.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(18.25))
                .body("[0].'latlng'[1]", numberMatches(-63.16666666))
                .body("[0].'demonym'", containsString("Anguillian"))
                .body("[0].'area'", numberMatches(91.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Anguilla"))
                .body("[0].'numericCode'", containsString("660"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("XCD"))
                .body("[0].'currencies'[0].'name'", containsString("East Caribbean dollar"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'translations'.'de'", containsString("Anguilla"))
                .body("[0].'translations'.'es'", containsString("Anguilla"))
                .body("[0].'translations'.'fr'", containsString("Anguilla"))
                .body("[0].'translations'.'ja'", containsString("アンギラ"))
                .body("[0].'translations'.'it'", containsString("Anguilla"))
                .body("[0].'translations'.'br'", containsString("Anguila"))
                .body("[0].'translations'.'pt'", containsString("Anguila"))
                .body("[0].'translations'.'nl'", containsString("Anguilla"))
                .body("[0].'translations'.'hr'", containsString("Angvila"))
                .body("[0].'translations'.'fa'", containsString("آنگویلا"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/aia.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString(""))
                .body("[1].'name'", containsString("Antigua and Barbuda"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ag"))
                .body("[1].'alpha2Code'", containsString("AG"))
                .body("[1].'alpha3Code'", containsString("ATG"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("1"))
                .body("[1].'capital'", containsString("Saint John's"))
                .body("[1].'altSpellings'.size()", equalTo(1))
                .body("[1].'altSpellings'", hasItems("AG"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("Caribbean"))
                .body("[1].'population'", numberMatches(86295.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(17.05))
                .body("[1].'latlng'[1]", numberMatches(-61.8))
                .body("[1].'demonym'", containsString("Antiguan, Barbudan"))
                .body("[1].'area'", numberMatches(442.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-04:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Antigua and Barbuda"))
                .body("[1].'numericCode'", containsString("028"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("XCD"))
                .body("[1].'currencies'[0].'name'", containsString("East Caribbean dollar"))
                .body("[1].'currencies'[0].'symbol'", containsString("$"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'[0].'iso639_1'", containsString("en"))
                .body("[1].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[1].'languages'[0].'name'", containsString("English"))
                .body("[1].'languages'[0].'nativeName'", containsString("English"))
                .body("[1].'translations'.'de'", containsString("Antigua und Barbuda"))
                .body("[1].'translations'.'es'", containsString("Antigua y Barbuda"))
                .body("[1].'translations'.'fr'", containsString("Antigua-et-Barbuda"))
                .body("[1].'translations'.'ja'", containsString("アンティグア・バーブーダ"))
                .body("[1].'translations'.'it'", containsString("Antigua e Barbuda"))
                .body("[1].'translations'.'br'", containsString("Antígua e Barbuda"))
                .body("[1].'translations'.'pt'", containsString("Antígua e Barbuda"))
                .body("[1].'translations'.'nl'", containsString("Antigua en Barbuda"))
                .body("[1].'translations'.'hr'", containsString("Antigva i Barbuda"))
                .body("[1].'translations'.'fa'", containsString("آنتیگوا و باربودا"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/atg.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("CARICOM"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("Caribbean Community"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(3))
                .body("[1].'regionalBlocs'[0].'otherNames'", hasItems("Comunidad del Caribe", "Communauté Caribéenne", "Caribische Gemeenschap"))
                .body("[1].'cioc'", containsString("ANT"))
                .body("[2].'name'", containsString("Argentina"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".ar"))
                .body("[2].'alpha2Code'", containsString("AR"))
                .body("[2].'alpha3Code'", containsString("ARG"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("54"))
                .body("[2].'capital'", containsString("Buenos Aires"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("AR", "Argentine Republic", "República Argentina"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("South America"))
                .body("[2].'population'", numberMatches(4.35904E7))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-34.0))
                .body("[2].'latlng'[1]", numberMatches(-64.0))
                .body("[2].'demonym'", containsString("Argentinean"))
                .body("[2].'area'", numberMatches(2780400.0))
                .body("[2].'gini'", numberMatches(44.5))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC-03:00"))
                .body("[2].'borders'.size()", equalTo(5))
                .body("[2].'borders'", hasItems("BOL", "BRA", "CHL", "PRY", "URY"))
                .body("[2].'nativeName'", containsString("Argentina"))
                .body("[2].'numericCode'", containsString("032"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'[0].'code'", containsString("ARS"))
                .body("[2].'currencies'[0].'name'", containsString("Argentine peso"))
                .body("[2].'currencies'[0].'symbol'", containsString("$"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'[0].'iso639_1'", containsString("es"))
                .body("[2].'languages'[0].'iso639_2'", containsString("spa"))
                .body("[2].'languages'[0].'name'", containsString("Spanish"))
                .body("[2].'languages'[0].'nativeName'", containsString("Español"))
                .body("[2].'languages'[1].'iso639_1'", containsString("gn"))
                .body("[2].'languages'[1].'iso639_2'", containsString("grn"))
                .body("[2].'languages'[1].'name'", containsString("Guaraní"))
                .body("[2].'languages'[1].'nativeName'", containsString("Avañe'ẽ"))
                .body("[2].'translations'.'de'", containsString("Argentinien"))
                .body("[2].'translations'.'es'", containsString("Argentina"))
                .body("[2].'translations'.'fr'", containsString("Argentine"))
                .body("[2].'translations'.'ja'", containsString("アルゼンチン"))
                .body("[2].'translations'.'it'", containsString("Argentina"))
                .body("[2].'translations'.'br'", containsString("Argentina"))
                .body("[2].'translations'.'pt'", containsString("Argentina"))
                .body("[2].'translations'.'nl'", containsString("Argentinië"))
                .body("[2].'translations'.'hr'", containsString("Argentina"))
                .body("[2].'translations'.'fa'", containsString("آرژانتین"))
                .body("[2].'flag'", containsString("https://restcountries.eu/data/arg.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[0].'acronym'", containsString("USAN"))
                .body("[2].'regionalBlocs'[0].'name'", containsString("Union of South American Nations"))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(3))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'", hasItems("UNASUR", "UNASUL", "UZAN"))
                .body("[2].'regionalBlocs'[0].'otherNames'.size()", equalTo(4))
                .body("[2].'regionalBlocs'[0].'otherNames'", hasItems("Unión de Naciones Suramericanas", "União de Nações Sul-Americanas", "Unie van Zuid-Amerikaanse Naties", "South American Union"))
                .body("[2].'cioc'", containsString("ARG"))
                ; // Skipping assertions on the remaining 54 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_70_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_82_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/subregion/Southern%20Africa?fields=_EM_80_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(6))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_71_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/CEFTA?fields=topLevelDomain")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(7))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".al"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ba"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".mk"))
                ; // Skipping assertions on the remaining 4 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_72_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/TCA?fields=_EM_2697_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_73_getOnV2AlphaWithQueryParamEmptyFieldsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/TC?fields=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("Turks and Caicos Islands"))
                .body("'topLevelDomain'.size()", equalTo(1))
                .body("'topLevelDomain'", hasItems(".tc"))
                .body("'alpha2Code'", containsString("TC"))
                .body("'alpha3Code'", containsString("TCA"))
                .body("'callingCodes'.size()", equalTo(1))
                .body("'callingCodes'", hasItems("1"))
                .body("'capital'", containsString("Cockburn Town"))
                .body("'altSpellings'.size()", equalTo(1))
                .body("'altSpellings'", hasItems("TC"))
                .body("'region'", containsString("Americas"))
                .body("'subregion'", containsString("Caribbean"))
                .body("'population'", numberMatches(31458.0))
                .body("'latlng'.size()", equalTo(2))
                .body("'latlng'[0]", numberMatches(21.75))
                .body("'latlng'[1]", numberMatches(-71.58333333))
                .body("'demonym'", containsString("Turks and Caicos Islander"))
                .body("'area'", numberMatches(948.0))
                .body("'gini'", nullValue())
                .body("'timezones'.size()", equalTo(1))
                .body("'timezones'", hasItems("UTC-04:00"))
                .body("'borders'.size()", equalTo(0))
                .body("'nativeName'", containsString("Turks and Caicos Islands"))
                .body("'numericCode'", containsString("796"))
                .body("'currencies'.size()", equalTo(1))
                .body("'currencies'[0].'code'", containsString("USD"))
                .body("'currencies'[0].'name'", containsString("United States dollar"))
                .body("'currencies'[0].'symbol'", containsString("$"))
                .body("'languages'.size()", equalTo(1))
                .body("'languages'[0].'iso639_1'", containsString("en"))
                .body("'languages'[0].'iso639_2'", containsString("eng"))
                .body("'languages'[0].'name'", containsString("English"))
                .body("'languages'[0].'nativeName'", containsString("English"))
                .body("'translations'.'de'", containsString("Turks- und Caicosinseln"))
                .body("'translations'.'es'", containsString("Islas Turks y Caicos"))
                .body("'translations'.'fr'", containsString("Îles Turques-et-Caïques"))
                .body("'translations'.'ja'", containsString("タークス・カイコス諸島"))
                .body("'translations'.'it'", containsString("Isole Turks e Caicos"))
                .body("'translations'.'br'", containsString("Ilhas Turcas e Caicos"))
                .body("'translations'.'pt'", containsString("Ilhas Turcas e Caicos"))
                .body("'translations'.'nl'", containsString("Turks- en Caicoseilanden"))
                .body("'translations'.'hr'", containsString("Otoci Turks i Caicos"))
                .body("'translations'.'fa'", containsString("جزایر تورکس و کایکوس"))
                .body("'flag'", containsString("https://restcountries.eu/data/tca.svg"))
                .body("'regionalBlocs'.size()", equalTo(0))
                .body("'cioc'", containsString(""));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_74_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/EFTA?fields=alpha2Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'alpha2Code'", containsString("IS"))
                .body("[1].'alpha2Code'", containsString("LI"))
                .body("[2].'alpha2Code'", containsString("NO"))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_75_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/238?fields=_EM_4011_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_76_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/da")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Denmark"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".dk"))
                .body("[0].'alpha2Code'", containsString("DK"))
                .body("[0].'alpha3Code'", containsString("DNK"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("45"))
                .body("[0].'capital'", containsString("Copenhagen"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("DK", "Danmark", "Kingdom of Denmark", "Kongeriget Danmark"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(5678348.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(56.0))
                .body("[0].'latlng'[1]", numberMatches(10.0))
                .body("[0].'demonym'", containsString("Danish"))
                .body("[0].'area'", numberMatches(43094.0))
                .body("[0].'gini'", numberMatches(24.0))
                .body("[0].'timezones'.size()", equalTo(5))
                .body("[0].'timezones'", hasItems("UTC-04:00", "UTC-03:00", "UTC-01:00", "UTC", "UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("DEU"))
                .body("[0].'nativeName'", containsString("Danmark"))
                .body("[0].'numericCode'", containsString("208"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("DKK"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("da"))
                .body("[0].'translations'.'de'", containsString("Dänemark"))
                .body("[0].'translations'.'es'", containsString("Dinamarca"))
                .body("[0].'translations'.'fr'", containsString("Danemark"))
                .body("[0].'translations'.'ja'", containsString("デンマーク"))
                .body("[0].'translations'.'it'", containsString("Danimarca"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_77_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/PA?fields=alpha3Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'alpha3Code'", containsString("CHL"))
                .body("[1].'alpha3Code'", containsString("COL"))
                .body("[2].'alpha3Code'", containsString("MEX"))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_78_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/equatorial%20guinean?fields=_EM_4137_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_79_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/af")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Namibia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".na"))
                .body("[0].'alpha2Code'", containsString("NA"))
                .body("[0].'alpha3Code'", containsString("NAM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("264"))
                .body("[0].'capital'", containsString("Windhoek"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("NA", "Namibië", "Republic of Namibia"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Southern Africa"))
                .body("[0].'population'", numberMatches(2280700.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-22.0))
                .body("[0].'latlng'[1]", numberMatches(17.0))
                .body("[0].'demonym'", containsString("Namibian"))
                .body("[0].'area'", numberMatches(825615.0))
                .body("[0].'gini'", numberMatches(63.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("AGO", "BWA", "ZAF", "ZMB"))
                .body("[0].'nativeName'", containsString("Namibia"))
                .body("[0].'numericCode'", containsString("516"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("NAD", "ZAR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "af"))
                .body("[0].'translations'.'de'", containsString("Namibia"))
                .body("[0].'translations'.'es'", containsString("Namibia"))
                .body("[0].'translations'.'fr'", containsString("Namibie"))
                .body("[0].'translations'.'ja'", containsString("ナミビア"))
                .body("[0].'translations'.'it'", containsString("Namibia"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("South Africa"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".za"))
                .body("[1].'alpha2Code'", containsString("ZA"))
                .body("[1].'alpha3Code'", containsString("ZAF"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("27"))
                .body("[1].'capital'", containsString("Pretoria"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("ZA", "RSA", "Suid-Afrika", "Republic of South Africa"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Southern Africa"))
                .body("[1].'population'", numberMatches(5.49569E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-29.0))
                .body("[1].'latlng'[1]", numberMatches(24.0))
                .body("[1].'demonym'", containsString("South African"))
                .body("[1].'area'", numberMatches(1221037.0))
                .body("[1].'gini'", numberMatches(63.1))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(6))
                .body("[1].'borders'", hasItems("BWA", "LSO", "MOZ", "NAM", "SWZ", "ZWE"))
                .body("[1].'nativeName'", containsString("South Africa"))
                .body("[1].'numericCode'", containsString("710"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("ZAR"))
                .body("[1].'languages'.size()", equalTo(10))
                .body("[1].'languages'", hasItems("af", "en", "nr", "st", "ss", "tn", "ts", "ve", "xh", "zu"))
                .body("[1].'translations'.'de'", containsString("Republik Südafrika"))
                .body("[1].'translations'.'es'", containsString("República de Sudáfrica"))
                .body("[1].'translations'.'fr'", containsString("Afrique du Sud"))
                .body("[1].'translations'.'ja'", containsString("南アフリカ"))
                .body("[1].'translations'.'it'", containsString("Sud Africa"))
                .body("[1].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_80_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1017_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/CARICOM?fields=topLevelDomain")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(15))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ag"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".bs"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".bb"))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_81_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/374")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Armenia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".am"))
                .body("[0].'alpha2Code'", containsString("AM"))
                .body("[0].'alpha3Code'", containsString("ARM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("374"))
                .body("[0].'capital'", containsString("Yerevan"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AM", "Hayastan", "Republic of Armenia", "Հայաստանի Հանրապետություն"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(3006800.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(40.0))
                .body("[0].'latlng'[1]", numberMatches(45.0))
                .body("[0].'demonym'", containsString("Armenian"))
                .body("[0].'area'", numberMatches(29743.0))
                .body("[0].'gini'", numberMatches(30.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("AZE", "GEO", "IRN", "TUR"))
                .body("[0].'nativeName'", containsString("Հայաստան"))
                .body("[0].'numericCode'", containsString("051"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AMD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("hy", "ru"))
                .body("[0].'translations'.'de'", containsString("Armenien"))
                .body("[0].'translations'.'es'", containsString("Armenia"))
                .body("[0].'translations'.'fr'", containsString("Arménie"))
                .body("[0].'translations'.'ja'", containsString("アルメニア"))
                .body("[0].'translations'.'it'", containsString("Armenia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_82_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Usbekistan")
                .get(baseUrlOfSut + "/rest/v1/callingcode/233")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Ghana"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gh"))
                .body("[0].'alpha2Code'", containsString("GH"))
                .body("[0].'alpha3Code'", containsString("GHA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("233"))
                .body("[0].'capital'", containsString("Accra"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("GH"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(2.7043093E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(8.0))
                .body("[0].'latlng'[1]", numberMatches(-2.0))
                .body("[0].'demonym'", containsString("Ghanaian"))
                .body("[0].'area'", numberMatches(238533.0))
                .body("[0].'gini'", numberMatches(42.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("BFA", "CIV", "TGO"))
                .body("[0].'nativeName'", containsString("Ghana"))
                .body("[0].'numericCode'", containsString("288"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("GHS"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Ghana"))
                .body("[0].'translations'.'es'", containsString("Ghana"))
                .body("[0].'translations'.'fr'", containsString("Ghana"))
                .body("[0].'translations'.'ja'", containsString("ガーナ"))
                .body("[0].'translations'.'it'", containsString("Ghana"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_83_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/kingdom%20of%20denmark?" + 
                    "fields=alpha3Code&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha3Code'", containsString("DNK"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_84_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Niue")
                .get(baseUrlOfSut + "/rest/v1/subregion/southern%20europe")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(17))
                .body("[0].'name'", containsString("Albania"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".al"))
                .body("[0].'alpha2Code'", containsString("AL"))
                .body("[0].'alpha3Code'", containsString("ALB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("355"))
                .body("[0].'capital'", containsString("Tirana"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AL", "Shqipëri", "Shqipëria", "Shqipnia"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(2893005.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(41.0))
                .body("[0].'latlng'[1]", numberMatches(20.0))
                .body("[0].'demonym'", containsString("Albanian"))
                .body("[0].'area'", numberMatches(28748.0))
                .body("[0].'gini'", numberMatches(34.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("MNE", "GRC", "MKD", "KOS"))
                .body("[0].'nativeName'", containsString("Shqipëria"))
                .body("[0].'numericCode'", containsString("008"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ALL"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("sq"))
                .body("[0].'translations'.'de'", containsString("Albanien"))
                .body("[0].'translations'.'es'", containsString("Albania"))
                .body("[0].'translations'.'fr'", containsString("Albanie"))
                .body("[0].'translations'.'ja'", containsString("アルバニア"))
                .body("[0].'translations'.'it'", containsString("Albania"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Andorra"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ad"))
                .body("[1].'alpha2Code'", containsString("AD"))
                .body("[1].'alpha3Code'", containsString("AND"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("376"))
                .body("[1].'capital'", containsString("Andorra la Vella"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("AD", "Principality of Andorra", "Principat d'Andorra"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Southern Europe"))
                .body("[1].'population'", numberMatches(76949.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(42.5))
                .body("[1].'latlng'[1]", numberMatches(1.5))
                .body("[1].'demonym'", containsString("Andorran"))
                .body("[1].'area'", numberMatches(468.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(2))
                .body("[1].'borders'", hasItems("FRA", "ESP"))
                .body("[1].'nativeName'", containsString("Andorra"))
                .body("[1].'numericCode'", containsString("020"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EUR"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("ca"))
                .body("[1].'translations'.'de'", containsString("Andorra"))
                .body("[1].'translations'.'es'", containsString("Andorra"))
                .body("[1].'translations'.'fr'", containsString("Andorre"))
                .body("[1].'translations'.'ja'", containsString("アンドラ"))
                .body("[1].'translations'.'it'", containsString("Andorra"))
                .body("[1].'relevance'", containsString("0.5"))
                .body("[2].'name'", containsString("Bosnia and Herzegovina"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".ba"))
                .body("[2].'alpha2Code'", containsString("BA"))
                .body("[2].'alpha3Code'", containsString("BIH"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("387"))
                .body("[2].'capital'", containsString("Sarajevo"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("BA", "Bosnia-Herzegovina", "Босна и Херцеговина"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Southern Europe"))
                .body("[2].'population'", numberMatches(3791622.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(44.0))
                .body("[2].'latlng'[1]", numberMatches(18.0))
                .body("[2].'demonym'", containsString("Bosnian, Herzegovinian"))
                .body("[2].'area'", numberMatches(51209.0))
                .body("[2].'gini'", numberMatches(36.2))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(3))
                .body("[2].'borders'", hasItems("HRV", "MNE", "SRB"))
                .body("[2].'nativeName'", containsString("Bosna i Hercegovina"))
                .body("[2].'numericCode'", containsString("070"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("BAM"))
                .body("[2].'languages'.size()", equalTo(3))
                .body("[2].'languages'", hasItems("bs", "hr", "sr"))
                .body("[2].'translations'.'de'", containsString("Bosnien und Herzegowina"))
                .body("[2].'translations'.'es'", containsString("Bosnia y Herzegovina"))
                .body("[2].'translations'.'fr'", containsString("Bosnie-Herzégovine"))
                .body("[2].'translations'.'ja'", containsString("ボスニア・ヘルツェゴビナ"))
                .body("[2].'translations'.'it'", containsString("Bosnia ed Erzegovina"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 14 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_85_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/saudi%20arabian?fields=translations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'translations'.'br'", containsString("Arábia Saudita"))
                .body("[0].'translations'.'pt'", containsString("Arábia Saudita"))
                .body("[0].'translations'.'nl'", containsString("Saoedi-Arabië"))
                .body("[0].'translations'.'hr'", containsString("Saudijska Arabija"))
                .body("[0].'translations'.'fa'", containsString("عربستان سعودی"))
                .body("[0].'translations'.'de'", containsString("Saudi-Arabien"))
                .body("[0].'translations'.'es'", containsString("Arabia Saudí"))
                .body("[0].'translations'.'fr'", containsString("Arabie Saoudite"))
                .body("[0].'translations'.'ja'", containsString("サウジアラビア"))
                .body("[0].'translations'.'it'", containsString("Arabia Saudita"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_86_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/accra")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Ghana"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gh"))
                .body("[0].'alpha2Code'", containsString("GH"))
                .body("[0].'alpha3Code'", containsString("GHA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("233"))
                .body("[0].'capital'", containsString("Accra"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("GH"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(2.7043093E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(8.0))
                .body("[0].'latlng'[1]", numberMatches(-2.0))
                .body("[0].'demonym'", containsString("Ghanaian"))
                .body("[0].'area'", numberMatches(238533.0))
                .body("[0].'gini'", numberMatches(42.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("BFA", "CIV", "TGO"))
                .body("[0].'nativeName'", containsString("Ghana"))
                .body("[0].'numericCode'", containsString("288"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("GHS"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Ghana"))
                .body("[0].'translations'.'es'", containsString("Ghana"))
                .body("[0].'translations'.'fr'", containsString("Ghana"))
                .body("[0].'translations'.'ja'", containsString("ガーナ"))
                .body("[0].'translations'.'it'", containsString("Ghana"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_87_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/Peru?" + 
                    "fields=_EM_500_XYZ_&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_88_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/590?EMextraParam123=_EM_523_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'name'", containsString("Guadeloupe"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gp"))
                .body("[0].'alpha2Code'", containsString("GP"))
                .body("[0].'alpha3Code'", containsString("GLP"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("590"))
                .body("[0].'capital'", containsString("Basse-Terre"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("GP", "Gwadloup"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(403750.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(16.25))
                .body("[0].'latlng'[1]", numberMatches(-61.583333))
                .body("[0].'demonym'", containsString("Guadeloupian"))
                .body("[0].'area'", nullValue())
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Guadeloupe"))
                .body("[0].'numericCode'", containsString("312"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Guadeloupe"))
                .body("[0].'translations'.'es'", containsString("Guadalupe"))
                .body("[0].'translations'.'fr'", containsString("Guadeloupe"))
                .body("[0].'translations'.'ja'", containsString("グアドループ"))
                .body("[0].'translations'.'it'", containsString("Guadeloupa"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Saint Barthélemy"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".bl"))
                .body("[1].'alpha2Code'", containsString("BL"))
                .body("[1].'alpha3Code'", containsString("BLM"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("590"))
                .body("[1].'capital'", containsString("Gustavia"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("BL", "St. Barthelemy", "Collectivity of Saint Barthélemy", "Collectivité de Saint-Barthélemy"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("Caribbean"))
                .body("[1].'population'", numberMatches(9269.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(18.5))
                .body("[1].'latlng'[1]", numberMatches(-63.41666666))
                .body("[1].'demonym'", containsString("Saint Barthélemy Islander"))
                .body("[1].'area'", numberMatches(21.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-04:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Saint-Barthélemy"))
                .body("[1].'numericCode'", containsString("652"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EUR"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("fr"))
                .body("[1].'translations'.'de'", containsString("Saint-Barthélemy"))
                .body("[1].'translations'.'es'", containsString("San Bartolomé"))
                .body("[1].'translations'.'fr'", containsString("Saint-Barthélemy"))
                .body("[1].'translations'.'ja'", containsString("サン・バルテルミー"))
                .body("[1].'translations'.'it'", containsString("Antille Francesi"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Saint Martin"))
                .body("[2].'topLevelDomain'.size()", equalTo(3))
                .body("[2].'topLevelDomain'", hasItems(".mf", ".fr", ".gp"))
                .body("[2].'alpha2Code'", containsString("MF"))
                .body("[2].'alpha3Code'", containsString("MAF"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("590"))
                .body("[2].'capital'", containsString("Marigot"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("MF", "Collectivity of Saint Martin", "Collectivité de Saint-Martin"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("Caribbean"))
                .body("[2].'population'", numberMatches(36979.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(18.08333333))
                .body("[2].'latlng'[1]", numberMatches(-63.95))
                .body("[2].'demonym'", containsString("Saint Martin Islander"))
                .body("[2].'area'", numberMatches(53.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC-04:00"))
                .body("[2].'borders'.size()", equalTo(2))
                .body("[2].'borders'", hasItems("SXM", "NLD"))
                .body("[2].'nativeName'", containsString("Saint-Martin"))
                .body("[2].'numericCode'", containsString("663"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("EUR"))
                .body("[2].'languages'.size()", equalTo(3))
                .body("[2].'languages'", hasItems("en", "fr", "nl"))
                .body("[2].'translations'.'de'", containsString("Saint Martin"))
                .body("[2].'translations'.'es'", containsString("Saint Martin"))
                .body("[2].'translations'.'fr'", containsString("Saint-Martin"))
                .body("[2].'translations'.'ja'", containsString("サン・マルタン（フランス領）"))
                .body("[2].'translations'.'it'", containsString("Saint Martin"))
                .body("[2].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_89_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/fo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Faroe Islands"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".fo"))
                .body("[0].'alpha2Code'", containsString("FO"))
                .body("[0].'alpha3Code'", containsString("FRO"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("298"))
                .body("[0].'capital'", containsString("Tórshavn"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("FO", "Føroyar", "Færøerne"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(48846.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(62.0))
                .body("[0].'latlng'[1]", numberMatches(-7.0))
                .body("[0].'demonym'", containsString("Faroese"))
                .body("[0].'area'", numberMatches(1393.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+00:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Føroyar"))
                .body("[0].'numericCode'", containsString("234"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("DKK"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fo"))
                .body("[0].'translations'.'de'", containsString("Färöer-Inseln"))
                .body("[0].'translations'.'es'", containsString("Islas Faroe"))
                .body("[0].'translations'.'fr'", containsString("Îles Féroé"))
                .body("[0].'translations'.'ja'", containsString("フェロー諸島"))
                .body("[0].'translations'.'it'", containsString("Isole Far Oer"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_90_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/South%20Sudan?" + 
                    "fields=_EM_556_XYZ_&" + 
                    "fullText=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_91_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/eastern%20africa")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(20))
                .body("[0].'name'", containsString("British Indian Ocean Territory"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".io"))
                .body("[0].'alpha2Code'", containsString("IO"))
                .body("[0].'alpha3Code'", containsString("IOT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("246"))
                .body("[0].'capital'", containsString("Diego Garcia"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("IO"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(3000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-6.0))
                .body("[0].'latlng'[1]", numberMatches(71.5))
                .body("[0].'demonym'", containsString("Indian"))
                .body("[0].'area'", numberMatches(60.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+06:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("British Indian Ocean Territory"))
                .body("[0].'numericCode'", containsString("086"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Britisches Territorium im Indischen Ozean"))
                .body("[0].'translations'.'es'", containsString("Territorio Británico del Océano Índico"))
                .body("[0].'translations'.'fr'", containsString("Territoire britannique de l'océan Indien"))
                .body("[0].'translations'.'ja'", containsString("イギリス領インド洋地域"))
                .body("[0].'translations'.'it'", containsString("Territorio britannico dell'oceano indiano"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Burundi"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".bi"))
                .body("[1].'alpha2Code'", containsString("BI"))
                .body("[1].'alpha3Code'", containsString("BDI"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("257"))
                .body("[1].'capital'", containsString("Bujumbura"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("BI", "Republic of Burundi", "Republika y'Uburundi", "République du Burundi"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Eastern Africa"))
                .body("[1].'population'", numberMatches(9823827.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-3.5))
                .body("[1].'latlng'[1]", numberMatches(30.0))
                .body("[1].'demonym'", containsString("Burundian"))
                .body("[1].'area'", numberMatches(27834.0))
                .body("[1].'gini'", numberMatches(33.3))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(3))
                .body("[1].'borders'", hasItems("COD", "RWA", "TZA"))
                .body("[1].'nativeName'", containsString("Burundi"))
                .body("[1].'numericCode'", containsString("108"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("BIF"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("fr", "rn"))
                .body("[1].'translations'.'de'", containsString("Burundi"))
                .body("[1].'translations'.'es'", containsString("Burundi"))
                .body("[1].'translations'.'fr'", containsString("Burundi"))
                .body("[1].'translations'.'ja'", containsString("ブルンジ"))
                .body("[1].'translations'.'it'", containsString("Burundi"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Comoros"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".km"))
                .body("[2].'alpha2Code'", containsString("KM"))
                .body("[2].'alpha3Code'", containsString("COM"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("269"))
                .body("[2].'capital'", containsString("Moroni"))
                .body("[2].'altSpellings'.size()", equalTo(5))
                .body("[2].'altSpellings'", hasItems("KM", "Union of the Comoros", "Union des Comores", "Udzima wa Komori", "al-Ittiḥād al-Qumurī"))
                .body("[2].'region'", containsString("Africa"))
                .body("[2].'subregion'", containsString("Eastern Africa"))
                .body("[2].'population'", numberMatches(784745.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-12.16666666))
                .body("[2].'latlng'[1]", numberMatches(44.25))
                .body("[2].'demonym'", containsString("Comoran"))
                .body("[2].'area'", numberMatches(1862.0))
                .body("[2].'gini'", numberMatches(64.3))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+03:00"))
                .body("[2].'borders'.size()", equalTo(0))
                .body("[2].'nativeName'", containsString("Komori"))
                .body("[2].'numericCode'", containsString("174"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("KMF"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'", hasItems("ar", "fr"))
                .body("[2].'translations'.'de'", containsString("Union der Komoren"))
                .body("[2].'translations'.'es'", containsString("Comoras"))
                .body("[2].'translations'.'fr'", containsString("Comores"))
                .body("[2].'translations'.'ja'", containsString("コモロ"))
                .body("[2].'translations'.'it'", containsString("Comore"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 17 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_92_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/30")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Greece"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gr"))
                .body("[0].'alpha2Code'", containsString("GR"))
                .body("[0].'alpha3Code'", containsString("GRC"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("30"))
                .body("[0].'capital'", containsString("Athens"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("GR", "Elláda", "Hellenic Republic", "Ελληνική Δημοκρατία"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(1.0846979E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(39.0))
                .body("[0].'latlng'[1]", numberMatches(22.0))
                .body("[0].'demonym'", containsString("Greek"))
                .body("[0].'area'", numberMatches(131990.0))
                .body("[0].'gini'", numberMatches(34.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("ALB", "BGR", "TUR", "MKD"))
                .body("[0].'nativeName'", containsString("Ελλάδα"))
                .body("[0].'numericCode'", containsString("300"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("el"))
                .body("[0].'translations'.'de'", containsString("Griechenland"))
                .body("[0].'translations'.'es'", containsString("Grecia"))
                .body("[0].'translations'.'fr'", containsString("Grèce"))
                .body("[0].'translations'.'ja'", containsString("ギリシャ"))
                .body("[0].'translations'.'it'", containsString("Grecia"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_93_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_524_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/callingcode/591")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bolivia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bo"))
                .body("[0].'alpha2Code'", containsString("BO"))
                .body("[0].'alpha3Code'", containsString("BOL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("591"))
                .body("[0].'capital'", containsString("Sucre"))
                .body("[0].'altSpellings'.size()", equalTo(8))
                .body("[0].'altSpellings'", hasItems("BO", "Buliwya", "Wuliwya", "Plurinational State of Bolivia", "Estado Plurinacional de Bolivia", "Buliwya Mamallaqta", "Wuliwya Suyu", "Tetã Volívia"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(1.1410651E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-17.0))
                .body("[0].'latlng'[1]", numberMatches(-65.0))
                .body("[0].'demonym'", containsString("Bolivian"))
                .body("[0].'area'", numberMatches(1098581.0))
                .body("[0].'gini'", numberMatches(56.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("ARG", "BRA", "CHL", "PRY", "PER"))
                .body("[0].'nativeName'", containsString("Bolivia"))
                .body("[0].'numericCode'", containsString("068"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("BOB", "BOV"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("es", "ay", "qu"))
                .body("[0].'translations'.'de'", containsString("Bolivien"))
                .body("[0].'translations'.'es'", containsString("Bolivia"))
                .body("[0].'translations'.'fr'", containsString("Bolivie"))
                .body("[0].'translations'.'ja'", containsString("ボリビア多民族国"))
                .body("[0].'translations'.'it'", containsString("Bolivia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_94_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Usbekistan")
                .get(baseUrlOfSut + "/rest/v1/callingcode/234")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Nigeria"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ng"))
                .body("[0].'alpha2Code'", containsString("NG"))
                .body("[0].'alpha3Code'", containsString("NGA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("234"))
                .body("[0].'capital'", containsString("Abuja"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("NG", "Nijeriya", "Naíjíríà", "Federal Republic of Nigeria"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(1.82202E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(10.0))
                .body("[0].'latlng'[1]", numberMatches(8.0))
                .body("[0].'demonym'", containsString("Nigerian"))
                .body("[0].'area'", numberMatches(923768.0))
                .body("[0].'gini'", numberMatches(48.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("BEN", "CMR", "TCD", "NER"))
                .body("[0].'nativeName'", containsString("Nigeria"))
                .body("[0].'numericCode'", containsString("566"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("NGN"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Nigeria"))
                .body("[0].'translations'.'es'", containsString("Nigeria"))
                .body("[0].'translations'.'fr'", containsString("Nigéria"))
                .body("[0].'translations'.'ja'", containsString("ナイジェリア"))
                .body("[0].'translations'.'it'", containsString("Nigeria"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_95_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/saipan")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Northern Mariana Islands"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mp"))
                .body("[0].'alpha2Code'", containsString("MP"))
                .body("[0].'alpha3Code'", containsString("MNP"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Saipan"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MP", "Commonwealth of the Northern Mariana Islands", "Sankattan Siha Na Islas Mariånas"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Micronesia"))
                .body("[0].'population'", numberMatches(53883.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(15.2))
                .body("[0].'latlng'[1]", numberMatches(145.75))
                .body("[0].'demonym'", containsString("American"))
                .body("[0].'area'", numberMatches(464.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+10:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Northern Mariana Islands"))
                .body("[0].'numericCode'", containsString("580"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "ch"))
                .body("[0].'translations'.'de'", containsString("Nördliche Marianen"))
                .body("[0].'translations'.'es'", containsString("Islas Marianas del Norte"))
                .body("[0].'translations'.'fr'", containsString("Îles Mariannes du Nord"))
                .body("[0].'translations'.'ja'", containsString("北マリアナ諸島"))
                .body("[0].'translations'.'it'", containsString("Isole Marianne Settentrionali"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_96_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/235?EMextraParam123=_EM_9_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Chad"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".td"))
                .body("[0].'alpha2Code'", containsString("TD"))
                .body("[0].'alpha3Code'", containsString("TCD"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("235"))
                .body("[0].'capital'", containsString("N'Djamena"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("TD", "Tchad", "Republic of Chad", "République du Tchad"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(1.4037E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(15.0))
                .body("[0].'latlng'[1]", numberMatches(19.0))
                .body("[0].'demonym'", containsString("Chadian"))
                .body("[0].'area'", numberMatches(1284000.0))
                .body("[0].'gini'", numberMatches(39.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("CMR", "CAF", "LBY", "NER", "NGA", "SSD"))
                .body("[0].'nativeName'", containsString("Tchad"))
                .body("[0].'numericCode'", containsString("148"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XAF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "ar"))
                .body("[0].'translations'.'de'", containsString("Tschad"))
                .body("[0].'translations'.'es'", containsString("Chad"))
                .body("[0].'translations'.'fr'", containsString("Tchad"))
                .body("[0].'translations'.'ja'", containsString("チャド"))
                .body("[0].'translations'.'it'", containsString("Ciad"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_97_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/USD?fields=_EM_709_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(20))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 17 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_98_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Usbekistan")
                .get(baseUrlOfSut + "/rest/v1/callingcode/236")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Central African Republic"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cf"))
                .body("[0].'alpha2Code'", containsString("CF"))
                .body("[0].'alpha3Code'", containsString("CAF"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("236"))
                .body("[0].'capital'", containsString("Bangui"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("CF", "Central African Republic", "République centrafricaine"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(4900000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(7.0))
                .body("[0].'latlng'[1]", numberMatches(21.0))
                .body("[0].'demonym'", containsString("Central African"))
                .body("[0].'area'", numberMatches(622984.0))
                .body("[0].'gini'", numberMatches(56.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("CMR", "TCD", "COD", "COG", "SSD", "SDN"))
                .body("[0].'nativeName'", containsString("Ködörösêse tî Bêafrîka"))
                .body("[0].'numericCode'", containsString("140"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XAF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "sg"))
                .body("[0].'translations'.'de'", containsString("Zentralafrikanische Republik"))
                .body("[0].'translations'.'es'", containsString("República Centroafricana"))
                .body("[0].'translations'.'fr'", containsString("République centrafricaine"))
                .body("[0].'translations'.'ja'", containsString("中央アフリカ共和国"))
                .body("[0].'translations'.'it'", containsString("Repubblica Centrafricana"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_99_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/nairobi?fields=topLevelDomain")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ke"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_100_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/melanesia")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'name'", containsString("Fiji"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".fj"))
                .body("[0].'alpha2Code'", containsString("FJ"))
                .body("[0].'alpha3Code'", containsString("FJI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("679"))
                .body("[0].'capital'", containsString("Suva"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("FJ", "Viti", "Republic of Fiji", "Matanitu ko Viti", "Fijī Gaṇarājya"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Melanesia"))
                .body("[0].'population'", numberMatches(859178.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-18.0))
                .body("[0].'latlng'[1]", numberMatches(175.0))
                .body("[0].'demonym'", containsString("Fijian"))
                .body("[0].'area'", numberMatches(18272.0))
                .body("[0].'gini'", numberMatches(42.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Fiji"))
                .body("[0].'numericCode'", containsString("242"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("FJD"))
                .body("[0].'languages'.size()", equalTo(4))
                .body("[0].'languages'", hasItems("en", "fj", "hi", "ur"))
                .body("[0].'translations'.'de'", containsString("Fidschi"))
                .body("[0].'translations'.'es'", containsString("Fiyi"))
                .body("[0].'translations'.'fr'", containsString("Fidji"))
                .body("[0].'translations'.'ja'", containsString("フィジー"))
                .body("[0].'translations'.'it'", containsString("Figi"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("New Caledonia"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".nc"))
                .body("[1].'alpha2Code'", containsString("NC"))
                .body("[1].'alpha3Code'", containsString("NCL"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("687"))
                .body("[1].'capital'", containsString("Nouméa"))
                .body("[1].'altSpellings'.size()", equalTo(1))
                .body("[1].'altSpellings'", hasItems("NC"))
                .body("[1].'region'", containsString("Oceania"))
                .body("[1].'subregion'", containsString("Melanesia"))
                .body("[1].'population'", numberMatches(268767.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-21.5))
                .body("[1].'latlng'[1]", numberMatches(165.5))
                .body("[1].'demonym'", containsString("New Caledonian"))
                .body("[1].'area'", numberMatches(18575.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+11:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Nouvelle-Calédonie"))
                .body("[1].'numericCode'", containsString("540"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("XPF"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("fr"))
                .body("[1].'translations'.'de'", containsString("Neukaledonien"))
                .body("[1].'translations'.'es'", containsString("Nueva Caledonia"))
                .body("[1].'translations'.'fr'", containsString("Nouvelle-Calédonie"))
                .body("[1].'translations'.'ja'", containsString("ニューカレドニア"))
                .body("[1].'translations'.'it'", containsString("Nuova Caledonia"))
                .body("[1].'relevance'", containsString("0.5"))
                .body("[2].'name'", containsString("Papua New Guinea"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".pg"))
                .body("[2].'alpha2Code'", containsString("PG"))
                .body("[2].'alpha3Code'", containsString("PNG"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("675"))
                .body("[2].'capital'", containsString("Port Moresby"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("PG", "Independent State of Papua New Guinea", "Independen Stet bilong Papua Niugini"))
                .body("[2].'region'", containsString("Oceania"))
                .body("[2].'subregion'", containsString("Melanesia"))
                .body("[2].'population'", numberMatches(7398500.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-6.0))
                .body("[2].'latlng'[1]", numberMatches(147.0))
                .body("[2].'demonym'", containsString("Papua New Guinean"))
                .body("[2].'area'", numberMatches(462840.0))
                .body("[2].'gini'", numberMatches(50.9))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+10:00"))
                .body("[2].'borders'.size()", equalTo(1))
                .body("[2].'borders'", hasItems("IDN"))
                .body("[2].'nativeName'", containsString("Papua Niugini"))
                .body("[2].'numericCode'", containsString("598"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("PGK"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("en"))
                .body("[2].'translations'.'de'", containsString("Papua-Neuguinea"))
                .body("[2].'translations'.'es'", containsString("Papúa Nueva Guinea"))
                .body("[2].'translations'.'fr'", containsString("Papouasie-Nouvelle-Guinée"))
                .body("[2].'translations'.'ja'", containsString("パプアニューギニア"))
                .body("[2].'translations'.'it'", containsString("Papua Nuova Guinea"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_101_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/UNASUR?fields=callingCodes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(15))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("54"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("591"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("55"))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_102_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/eastern%20europe")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(11))
                .body("[0].'name'", containsString("Belarus"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".by"))
                .body("[0].'alpha2Code'", containsString("BY"))
                .body("[0].'alpha3Code'", containsString("BLR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("375"))
                .body("[0].'capital'", containsString("Minsk"))
                .body("[0].'altSpellings'.size()", equalTo(7))
                .body("[0].'altSpellings'", hasItems("BY", "Bielaruś", "Republic of Belarus", "Белоруссия", "Республика Беларусь", "Belorussiya", "Respublika Belarus’"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(9485300.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(53.0))
                .body("[0].'latlng'[1]", numberMatches(28.0))
                .body("[0].'demonym'", containsString("Belarusian"))
                .body("[0].'area'", numberMatches(207600.0))
                .body("[0].'gini'", numberMatches(26.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("LVA", "LTU", "POL", "RUS", "UKR"))
                .body("[0].'nativeName'", containsString("Белару́сь"))
                .body("[0].'numericCode'", containsString("112"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BYR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("be", "ru"))
                .body("[0].'translations'.'de'", containsString("Weißrussland"))
                .body("[0].'translations'.'es'", containsString("Bielorrusia"))
                .body("[0].'translations'.'fr'", containsString("Biélorussie"))
                .body("[0].'translations'.'ja'", containsString("ベラルーシ"))
                .body("[0].'translations'.'it'", containsString("Bielorussia"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Bulgaria"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".bg"))
                .body("[1].'alpha2Code'", containsString("BG"))
                .body("[1].'alpha3Code'", containsString("BGR"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("359"))
                .body("[1].'capital'", containsString("Sofia"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("BG", "Republic of Bulgaria", "Република България"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Eastern Europe"))
                .body("[1].'population'", numberMatches(7202198.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(43.0))
                .body("[1].'latlng'[1]", numberMatches(25.0))
                .body("[1].'demonym'", containsString("Bulgarian"))
                .body("[1].'area'", numberMatches(110879.0))
                .body("[1].'gini'", numberMatches(28.2))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(5))
                .body("[1].'borders'", hasItems("GRC", "MKD", "ROU", "SRB", "TUR"))
                .body("[1].'nativeName'", containsString("България"))
                .body("[1].'numericCode'", containsString("100"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("BGN"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("bg"))
                .body("[1].'translations'.'de'", containsString("Bulgarien"))
                .body("[1].'translations'.'es'", containsString("Bulgaria"))
                .body("[1].'translations'.'fr'", containsString("Bulgarie"))
                .body("[1].'translations'.'ja'", containsString("ブルガリア"))
                .body("[1].'translations'.'it'", containsString("Bulgaria"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Czech Republic"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".cz"))
                .body("[2].'alpha2Code'", containsString("CZ"))
                .body("[2].'alpha3Code'", containsString("CZE"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("420"))
                .body("[2].'capital'", containsString("Prague"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("CZ", "Česká republika", "Česko"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Eastern Europe"))
                .body("[2].'population'", numberMatches(1.0537818E7))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(49.75))
                .body("[2].'latlng'[1]", numberMatches(15.5))
                .body("[2].'demonym'", containsString("Czech"))
                .body("[2].'area'", numberMatches(78865.0))
                .body("[2].'gini'", numberMatches(26.0))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(4))
                .body("[2].'borders'", hasItems("AUT", "DEU", "POL", "SVK"))
                .body("[2].'nativeName'", containsString("Česká republika"))
                .body("[2].'numericCode'", containsString("203"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("CZK"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'", hasItems("cs", "sk"))
                .body("[2].'translations'.'de'", containsString("Tschechische Republik"))
                .body("[2].'translations'.'es'", containsString("República Checa"))
                .body("[2].'translations'.'fr'", containsString("République tchèque"))
                .body("[2].'translations'.'ja'", containsString("チェコ"))
                .body("[2].'translations'.'it'", containsString("Repubblica Ceca"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 8 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_103_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/USAN?fields=callingCodes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(15))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("54"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("591"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("55"))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_104_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/dutch?fields=capital")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'capital'", containsString("Kralendijk"))
                .body("[1].'capital'", containsString("Willemstad"))
                .body("[2].'capital'", containsString("Amsterdam"))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_105_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/samoan?fields=topLevelDomain")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ws"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_106_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/Romanian?" + 
                    "fields=_EM_888_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_107_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1017_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/CAIS?" + 
                    "fields=topLevelDomain&" + 
                    "EMextraParam123=_EM_1016_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(8))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bz"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".cr"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".do"))
                ; // Skipping assertions on the remaining 5 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_108_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/352")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Luxembourg"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".lu"))
                .body("[0].'alpha2Code'", containsString("LU"))
                .body("[0].'alpha3Code'", containsString("LUX"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("352"))
                .body("[0].'capital'", containsString("Luxembourg"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("LU", "Grand Duchy of Luxembourg", "Grand-Duché de Luxembourg", "Großherzogtum Luxemburg", "Groussherzogtum Lëtzebuerg"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(562958.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(49.75))
                .body("[0].'latlng'[1]", numberMatches(6.16666666))
                .body("[0].'demonym'", containsString("Luxembourger"))
                .body("[0].'area'", numberMatches(2586.0))
                .body("[0].'gini'", numberMatches(30.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("BEL", "FRA", "DEU"))
                .body("[0].'nativeName'", containsString("Luxembourg"))
                .body("[0].'numericCode'", containsString("442"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("fr", "de", "lb"))
                .body("[0].'translations'.'de'", containsString("Luxemburg"))
                .body("[0].'translations'.'es'", containsString("Luxemburgo"))
                .body("[0].'translations'.'fr'", containsString("Luxembourg"))
                .body("[0].'translations'.'ja'", containsString("ルクセンブルク"))
                .body("[0].'translations'.'it'", containsString("Lussemburgo"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_109_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/34")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Spain"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".es"))
                .body("[0].'alpha2Code'", containsString("ES"))
                .body("[0].'alpha3Code'", containsString("ESP"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("34"))
                .body("[0].'capital'", containsString("Madrid"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("ES", "Kingdom of Spain", "Reino de España"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(4.6439864E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(40.0))
                .body("[0].'latlng'[1]", numberMatches(-4.0))
                .body("[0].'demonym'", containsString("Spanish"))
                .body("[0].'area'", numberMatches(505992.0))
                .body("[0].'gini'", numberMatches(34.7))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC", "UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("AND", "FRA", "GIB", "PRT", "MAR"))
                .body("[0].'nativeName'", containsString("España"))
                .body("[0].'numericCode'", containsString("724"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("Spanien"))
                .body("[0].'translations'.'es'", containsString("España"))
                .body("[0].'translations'.'fr'", containsString("Espagne"))
                .body("[0].'translations'.'ja'", containsString("スペイン"))
                .body("[0].'translations'.'it'", containsString("Spagna"))
                .body("[0].'relevance'", containsString("2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_110_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/khartoum?fields=alpha2Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha2Code'", containsString("SD"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_111_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/353?fields=q")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_112_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/UNASUL?fields=altSpellings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(15))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("AR", "Argentine Republic", "República Argentina"))
                .body("[1].'altSpellings'.size()", equalTo(8))
                .body("[1].'altSpellings'", hasItems("BO", "Buliwya", "Wuliwya", "Plurinational State of Bolivia", "Estado Plurinacional de Bolivia", "Buliwya Mamallaqta", "Wuliwya Suyu", "Tetã Volívia"))
                .body("[2].'altSpellings'.size()", equalTo(4))
                .body("[2].'altSpellings'", hasItems("BR", "Brasil", "Federative Republic of Brazil", "República Federativa do Brasil"))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_113_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/northern%20africa")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(7))
                .body("[0].'name'", containsString("Algeria"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".dz"))
                .body("[0].'alpha2Code'", containsString("DZ"))
                .body("[0].'alpha3Code'", containsString("DZA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("213"))
                .body("[0].'capital'", containsString("Algiers"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("DZ", "Dzayer", "Algérie"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Northern Africa"))
                .body("[0].'population'", numberMatches(3.95E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(28.0))
                .body("[0].'latlng'[1]", numberMatches(3.0))
                .body("[0].'demonym'", containsString("Algerian"))
                .body("[0].'area'", numberMatches(2381741.0))
                .body("[0].'gini'", numberMatches(35.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("TUN", "LBY", "NER", "ESH", "MRT", "MLI", "MAR"))
                .body("[0].'nativeName'", containsString("الجزائر"))
                .body("[0].'numericCode'", containsString("012"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("DZD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Algerien"))
                .body("[0].'translations'.'es'", containsString("Argelia"))
                .body("[0].'translations'.'fr'", containsString("Algérie"))
                .body("[0].'translations'.'ja'", containsString("アルジェリア"))
                .body("[0].'translations'.'it'", containsString("Algeria"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Egypt"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".eg"))
                .body("[1].'alpha2Code'", containsString("EG"))
                .body("[1].'alpha3Code'", containsString("EGY"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("20"))
                .body("[1].'capital'", containsString("Cairo"))
                .body("[1].'altSpellings'.size()", equalTo(2))
                .body("[1].'altSpellings'", hasItems("EG", "Arab Republic of Egypt"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Northern Africa"))
                .body("[1].'population'", numberMatches(8.93356E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(27.0))
                .body("[1].'latlng'[1]", numberMatches(30.0))
                .body("[1].'demonym'", containsString("Egyptian"))
                .body("[1].'area'", numberMatches(1002450.0))
                .body("[1].'gini'", numberMatches(30.8))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(3))
                .body("[1].'borders'", hasItems("ISR", "LBY", "SDN"))
                .body("[1].'nativeName'", containsString("مصر‎"))
                .body("[1].'numericCode'", containsString("818"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EGP"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("ar"))
                .body("[1].'translations'.'de'", containsString("Ägypten"))
                .body("[1].'translations'.'es'", containsString("Egipto"))
                .body("[1].'translations'.'fr'", containsString("Égypte"))
                .body("[1].'translations'.'ja'", containsString("エジプト"))
                .body("[1].'translations'.'it'", containsString("Egitto"))
                .body("[1].'relevance'", containsString("1.5"))
                .body("[2].'name'", containsString("Libya"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".ly"))
                .body("[2].'alpha2Code'", containsString("LY"))
                .body("[2].'alpha3Code'", containsString("LBY"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("218"))
                .body("[2].'capital'", containsString("Tripoli"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("LY", "State of Libya", "Dawlat Libya"))
                .body("[2].'region'", containsString("Africa"))
                .body("[2].'subregion'", containsString("Northern Africa"))
                .body("[2].'population'", numberMatches(6278000.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(25.0))
                .body("[2].'latlng'[1]", numberMatches(17.0))
                .body("[2].'demonym'", containsString("Libyan"))
                .body("[2].'area'", numberMatches(1759540.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(6))
                .body("[2].'borders'", hasItems("DZA", "TCD", "EGY", "NER", "SDN", "TUN"))
                .body("[2].'nativeName'", containsString("‏ليبيا"))
                .body("[2].'numericCode'", containsString("434"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("LYD"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("ar"))
                .body("[2].'translations'.'de'", containsString("Libyen"))
                .body("[2].'translations'.'es'", containsString("Libia"))
                .body("[2].'translations'.'fr'", containsString("Libye"))
                .body("[2].'translations'.'ja'", containsString("リビア"))
                .body("[2].'translations'.'it'", containsString("Libia"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 4 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_114_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/roseau")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Dominica"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".dm"))
                .body("[0].'alpha2Code'", containsString("DM"))
                .body("[0].'alpha3Code'", containsString("DMA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Roseau"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("DM", "Dominique", "Wai‘tu kubuli", "Commonwealth of Dominica"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(71293.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(15.41666666))
                .body("[0].'latlng'[1]", numberMatches(-61.33333333))
                .body("[0].'demonym'", containsString("Dominican"))
                .body("[0].'area'", numberMatches(751.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Dominica"))
                .body("[0].'numericCode'", containsString("212"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XCD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Dominica"))
                .body("[0].'translations'.'es'", containsString("Dominica"))
                .body("[0].'translations'.'fr'", containsString("Dominique"))
                .body("[0].'translations'.'ja'", containsString("ドミニカ国"))
                .body("[0].'translations'.'it'", containsString("Dominica"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_115_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/saint%20helier")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Jersey"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".je"))
                .body("[0].'alpha2Code'", containsString("JE"))
                .body("[0].'alpha3Code'", containsString("JEY"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("44"))
                .body("[0].'capital'", containsString("Saint Helier"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("JE", "Bailiwick of Jersey", "Bailliage de Jersey", "Bailliage dé Jèrri"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(99000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(49.25))
                .body("[0].'latlng'[1]", numberMatches(-2.16666666))
                .body("[0].'demonym'", containsString("Channel Islander"))
                .body("[0].'area'", numberMatches(116.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Jersey"))
                .body("[0].'numericCode'", containsString("832"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("GBP"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "fr"))
                .body("[0].'translations'.'de'", containsString("Jersey"))
                .body("[0].'translations'.'es'", containsString("Jersey"))
                .body("[0].'translations'.'fr'", containsString("Jersey"))
                .body("[0].'translations'.'ja'", containsString("ジャージー"))
                .body("[0].'translations'.'it'", containsString("Isola di Jersey"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_116_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Niue")
                .get(baseUrlOfSut + "/rest/v1/subregion/western%20asia")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(17))
                .body("[0].'name'", containsString("Armenia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".am"))
                .body("[0].'alpha2Code'", containsString("AM"))
                .body("[0].'alpha3Code'", containsString("ARM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("374"))
                .body("[0].'capital'", containsString("Yerevan"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AM", "Hayastan", "Republic of Armenia", "Հայաստանի Հանրապետություն"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(3006800.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(40.0))
                .body("[0].'latlng'[1]", numberMatches(45.0))
                .body("[0].'demonym'", containsString("Armenian"))
                .body("[0].'area'", numberMatches(29743.0))
                .body("[0].'gini'", numberMatches(30.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("AZE", "GEO", "IRN", "TUR"))
                .body("[0].'nativeName'", containsString("Հայաստան"))
                .body("[0].'numericCode'", containsString("051"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AMD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("hy", "ru"))
                .body("[0].'translations'.'de'", containsString("Armenien"))
                .body("[0].'translations'.'es'", containsString("Armenia"))
                .body("[0].'translations'.'fr'", containsString("Arménie"))
                .body("[0].'translations'.'ja'", containsString("アルメニア"))
                .body("[0].'translations'.'it'", containsString("Armenia"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Azerbaijan"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".az"))
                .body("[1].'alpha2Code'", containsString("AZ"))
                .body("[1].'alpha3Code'", containsString("AZE"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("994"))
                .body("[1].'capital'", containsString("Baku"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("AZ", "Republic of Azerbaijan", "Azərbaycan Respublikası"))
                .body("[1].'region'", containsString("Asia"))
                .body("[1].'subregion'", containsString("Western Asia"))
                .body("[1].'population'", numberMatches(9636300.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(40.5))
                .body("[1].'latlng'[1]", numberMatches(47.5))
                .body("[1].'demonym'", containsString("Azerbaijani"))
                .body("[1].'area'", numberMatches(86600.0))
                .body("[1].'gini'", numberMatches(33.7))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+04:00"))
                .body("[1].'borders'.size()", equalTo(5))
                .body("[1].'borders'", hasItems("ARM", "GEO", "IRN", "RUS", "TUR"))
                .body("[1].'nativeName'", containsString("Azərbaycan"))
                .body("[1].'numericCode'", containsString("031"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("AZN"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("az"))
                .body("[1].'translations'.'de'", containsString("Aserbaidschan"))
                .body("[1].'translations'.'es'", containsString("Azerbaiyán"))
                .body("[1].'translations'.'fr'", containsString("Azerbaïdjan"))
                .body("[1].'translations'.'ja'", containsString("アゼルバイジャン"))
                .body("[1].'translations'.'it'", containsString("Azerbaijan"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Bahrain"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".bh"))
                .body("[2].'alpha2Code'", containsString("BH"))
                .body("[2].'alpha3Code'", containsString("BHR"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("973"))
                .body("[2].'capital'", containsString("Manama"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("BH", "Kingdom of Bahrain", "Mamlakat al-Baḥrayn"))
                .body("[2].'region'", containsString("Asia"))
                .body("[2].'subregion'", containsString("Western Asia"))
                .body("[2].'population'", numberMatches(1359800.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(26.0))
                .body("[2].'latlng'[1]", numberMatches(50.55))
                .body("[2].'demonym'", containsString("Bahraini"))
                .body("[2].'area'", numberMatches(765.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+03:00"))
                .body("[2].'borders'.size()", equalTo(0))
                .body("[2].'nativeName'", containsString("‏البحرين"))
                .body("[2].'numericCode'", containsString("048"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("BHD"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("ar"))
                .body("[2].'translations'.'de'", containsString("Bahrain"))
                .body("[2].'translations'.'es'", containsString("Bahrein"))
                .body("[2].'translations'.'fr'", containsString("Bahreïn"))
                .body("[2].'translations'.'ja'", containsString("バーレーン"))
                .body("[2].'translations'.'it'", containsString("Bahrein"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 14 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_117_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/NAFTA?fields=alpha3Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'alpha3Code'", containsString("CAN"))
                .body("[1].'alpha3Code'", containsString("MEX"))
                .body("[2].'alpha3Code'", containsString("USA"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_118_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/EEU?fields=translations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'translations'.'br'", containsString("Armênia"))
                .body("[0].'translations'.'pt'", containsString("Arménia"))
                .body("[0].'translations'.'nl'", containsString("Armenië"))
                .body("[0].'translations'.'hr'", containsString("Armenija"))
                .body("[0].'translations'.'fa'", containsString("ارمنستان"))
                .body("[0].'translations'.'de'", containsString("Armenien"))
                .body("[0].'translations'.'es'", containsString("Armenia"))
                .body("[0].'translations'.'fr'", containsString("Arménie"))
                .body("[0].'translations'.'ja'", containsString("アルメニア"))
                .body("[0].'translations'.'it'", containsString("Armenia"))
                .body("[1].'translations'.'br'", containsString("Bielorrússia"))
                .body("[1].'translations'.'pt'", containsString("Bielorrússia"))
                .body("[1].'translations'.'nl'", containsString("Wit-Rusland"))
                .body("[1].'translations'.'hr'", containsString("Bjelorusija"))
                .body("[1].'translations'.'fa'", containsString("بلاروس"))
                .body("[1].'translations'.'de'", containsString("Weißrussland"))
                .body("[1].'translations'.'es'", containsString("Bielorrusia"))
                .body("[1].'translations'.'fr'", containsString("Biélorussie"))
                .body("[1].'translations'.'ja'", containsString("ベラルーシ"))
                .body("[1].'translations'.'it'", containsString("Bielorussia"))
                .body("[2].'translations'.'br'", containsString("Cazaquistão"))
                .body("[2].'translations'.'pt'", containsString("Cazaquistão"))
                .body("[2].'translations'.'nl'", containsString("Kazachstan"))
                .body("[2].'translations'.'hr'", containsString("Kazahstan"))
                .body("[2].'translations'.'fa'", containsString("قزاقستان"))
                .body("[2].'translations'.'de'", containsString("Kasachstan"))
                .body("[2].'translations'.'es'", containsString("Kazajistán"))
                .body("[2].'translations'.'fr'", containsString("Kazakhstan"))
                .body("[2].'translations'.'ja'", containsString("カザフスタン"))
                .body("[2].'translations'.'it'", containsString("Kazakistan"))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_119_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/saint%20john's")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Antigua and Barbuda"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ag"))
                .body("[0].'alpha2Code'", containsString("AG"))
                .body("[0].'alpha3Code'", containsString("ATG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Saint John's"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("AG"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(86295.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(17.05))
                .body("[0].'latlng'[1]", numberMatches(-61.8))
                .body("[0].'demonym'", containsString("Antiguan, Barbudan"))
                .body("[0].'area'", numberMatches(442.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Antigua and Barbuda"))
                .body("[0].'numericCode'", containsString("028"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XCD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Antigua und Barbuda"))
                .body("[0].'translations'.'es'", containsString("Antigua y Barbuda"))
                .body("[0].'translations'.'fr'", containsString("Antigua-et-Barbuda"))
                .body("[0].'translations'.'ja'", containsString("アンティグア・バーブーダ"))
                .body("[0].'translations'.'it'", containsString("Antigua e Barbuda"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_120_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/kigali?fields=altSpellings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("RW", "Republic of Rwanda", "Repubulika y'u Rwanda", "République du Rwanda"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_121_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/alpha/RO?fields=_EM_1131_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_122_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/quito")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Ecuador"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ec"))
                .body("[0].'alpha2Code'", containsString("EC"))
                .body("[0].'alpha3Code'", containsString("ECU"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("593"))
                .body("[0].'capital'", containsString("Quito"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("EC", "Republic of Ecuador", "República del Ecuador"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(1.60275E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-2.0))
                .body("[0].'latlng'[1]", numberMatches(-77.5))
                .body("[0].'demonym'", containsString("Ecuadorean"))
                .body("[0].'area'", numberMatches(276841.0))
                .body("[0].'gini'", numberMatches(49.3))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC-06:00", "UTC-05:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("COL", "PER"))
                .body("[0].'nativeName'", containsString("Ecuador"))
                .body("[0].'numericCode'", containsString("218"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("Ecuador"))
                .body("[0].'translations'.'es'", containsString("Ecuador"))
                .body("[0].'translations'.'fr'", containsString("Équateur"))
                .body("[0].'translations'.'ja'", containsString("エクアドル"))
                .body("[0].'translations'.'it'", containsString("Ecuador"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_123_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/port%20vila?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Vanuatu"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".vu"))
                .body("[0].'alpha2Code'", containsString("VU"))
                .body("[0].'alpha3Code'", containsString("VUT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("678"))
                .body("[0].'capital'", containsString("Port Vila"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("VU", "Republic of Vanuatu", "Ripablik blong Vanuatu", "République de Vanuatu"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Melanesia"))
                .body("[0].'population'", numberMatches(264652.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-16.0))
                .body("[0].'latlng'[1]", numberMatches(167.0))
                .body("[0].'demonym'", containsString("Ni-Vanuatu"))
                .body("[0].'area'", numberMatches(12189.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+11:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Vanuatu"))
                .body("[0].'numericCode'", containsString("548"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("VUV"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("bi", "en", "fr"))
                .body("[0].'translations'.'de'", containsString("Vanuatu"))
                .body("[0].'translations'.'es'", containsString("Vanuatu"))
                .body("[0].'translations'.'fr'", containsString("Vanuatu"))
                .body("[0].'translations'.'ja'", containsString("バヌアツ"))
                .body("[0].'translations'.'it'", containsString("Vanuatu"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_124_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/47?fields=subregion")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'subregion'", containsString(""))
                .body("[1].'subregion'", containsString("Northern Europe"))
                .body("[2].'subregion'", containsString("Northern Europe"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_125_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/riyadh")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Saudi Arabia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sa"))
                .body("[0].'alpha2Code'", containsString("SA"))
                .body("[0].'alpha3Code'", containsString("SAU"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("966"))
                .body("[0].'capital'", containsString("Riyadh"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("SA", "Kingdom of Saudi Arabia", "Al-Mamlakah al-‘Arabiyyah as-Su‘ūdiyyah"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(3.1521418E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(25.0))
                .body("[0].'latlng'[1]", numberMatches(45.0))
                .body("[0].'demonym'", containsString("Saudi Arabian"))
                .body("[0].'area'", numberMatches(2149690.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("IRQ", "JOR", "KWT", "OMN", "QAT", "ARE", "YEM"))
                .body("[0].'nativeName'", containsString("العربية السعودية"))
                .body("[0].'numericCode'", containsString("682"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("SAR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Saudi-Arabien"))
                .body("[0].'translations'.'es'", containsString("Arabia Saudí"))
                .body("[0].'translations'.'fr'", containsString("Arabie Saoudite"))
                .body("[0].'translations'.'ja'", containsString("サウジアラビア"))
                .body("[0].'translations'.'it'", containsString("Arabia Saudita"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_126_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/64?fields=translations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'translations'.'br'", containsString("Nova Zelândia"))
                .body("[0].'translations'.'pt'", containsString("Nova Zelândia"))
                .body("[0].'translations'.'nl'", containsString("Nieuw-Zeeland"))
                .body("[0].'translations'.'hr'", containsString("Novi Zeland"))
                .body("[0].'translations'.'fa'", containsString("نیوزیلند"))
                .body("[0].'translations'.'de'", containsString("Neuseeland"))
                .body("[0].'translations'.'es'", containsString("Nueva Zelanda"))
                .body("[0].'translations'.'fr'", containsString("Nouvelle-Zélande"))
                .body("[0].'translations'.'ja'", containsString("ニュージーランド"))
                .body("[0].'translations'.'it'", containsString("Nuova Zelanda"))
                .body("[1].'translations'.'br'", containsString("Ilhas Pitcairn"))
                .body("[1].'translations'.'pt'", containsString("Ilhas Picárnia"))
                .body("[1].'translations'.'nl'", containsString("Pitcairneilanden"))
                .body("[1].'translations'.'hr'", containsString("Pitcairnovo otočje"))
                .body("[1].'translations'.'fa'", containsString("پیتکرن"))
                .body("[1].'translations'.'de'", containsString("Pitcairn"))
                .body("[1].'translations'.'es'", containsString("Islas Pitcairn"))
                .body("[1].'translations'.'fr'", containsString("Îles Pitcairn"))
                .body("[1].'translations'.'ja'", containsString("ピトケアン"))
                .body("[1].'translations'.'it'", containsString("Isole Pitcairn"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_127_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/zhongguo?" + 
                    "fields=3biKBeFHoYvpU&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_128_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/south%20america")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(15))
                .body("[0].'name'", containsString("Argentina"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ar"))
                .body("[0].'alpha2Code'", containsString("AR"))
                .body("[0].'alpha3Code'", containsString("ARG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("54"))
                .body("[0].'capital'", containsString("Buenos Aires"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("AR", "Argentine Republic", "República Argentina"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(4.3131966E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-34.0))
                .body("[0].'latlng'[1]", numberMatches(-64.0))
                .body("[0].'demonym'", containsString("Argentinean"))
                .body("[0].'area'", numberMatches(2780400.0))
                .body("[0].'gini'", numberMatches(44.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-03:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("BOL", "BRA", "CHL", "PRY", "URY"))
                .body("[0].'nativeName'", containsString("Argentina"))
                .body("[0].'numericCode'", containsString("032"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ARS"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("es", "gn"))
                .body("[0].'translations'.'de'", containsString("Argentinien"))
                .body("[0].'translations'.'es'", containsString("Argentina"))
                .body("[0].'translations'.'fr'", containsString("Argentine"))
                .body("[0].'translations'.'ja'", containsString("アルゼンチン"))
                .body("[0].'translations'.'it'", containsString("Argentina"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Bolivia"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".bo"))
                .body("[1].'alpha2Code'", containsString("BO"))
                .body("[1].'alpha3Code'", containsString("BOL"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("591"))
                .body("[1].'capital'", containsString("Sucre"))
                .body("[1].'altSpellings'.size()", equalTo(8))
                .body("[1].'altSpellings'", hasItems("BO", "Buliwya", "Wuliwya", "Plurinational State of Bolivia", "Estado Plurinacional de Bolivia", "Buliwya Mamallaqta", "Wuliwya Suyu", "Tetã Volívia"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("South America"))
                .body("[1].'population'", numberMatches(1.1410651E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-17.0))
                .body("[1].'latlng'[1]", numberMatches(-65.0))
                .body("[1].'demonym'", containsString("Bolivian"))
                .body("[1].'area'", numberMatches(1098581.0))
                .body("[1].'gini'", numberMatches(56.3))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-04:00"))
                .body("[1].'borders'.size()", equalTo(5))
                .body("[1].'borders'", hasItems("ARG", "BRA", "CHL", "PRY", "PER"))
                .body("[1].'nativeName'", containsString("Bolivia"))
                .body("[1].'numericCode'", containsString("068"))
                .body("[1].'currencies'.size()", equalTo(2))
                .body("[1].'currencies'", hasItems("BOB", "BOV"))
                .body("[1].'languages'.size()", equalTo(3))
                .body("[1].'languages'", hasItems("es", "ay", "qu"))
                .body("[1].'translations'.'de'", containsString("Bolivien"))
                .body("[1].'translations'.'es'", containsString("Bolivia"))
                .body("[1].'translations'.'fr'", containsString("Bolivie"))
                .body("[1].'translations'.'ja'", containsString("ボリビア多民族国"))
                .body("[1].'translations'.'it'", containsString("Bolivia"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Brazil"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".br"))
                .body("[2].'alpha2Code'", containsString("BR"))
                .body("[2].'alpha3Code'", containsString("BRA"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("55"))
                .body("[2].'capital'", containsString("Brasília"))
                .body("[2].'altSpellings'.size()", equalTo(4))
                .body("[2].'altSpellings'", hasItems("BR", "Brasil", "Federative Republic of Brazil", "República Federativa do Brasil"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("South America"))
                .body("[2].'population'", numberMatches(2.04772E8))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-10.0))
                .body("[2].'latlng'[1]", numberMatches(-55.0))
                .body("[2].'demonym'", containsString("Brazilian"))
                .body("[2].'area'", numberMatches(8515767.0))
                .body("[2].'gini'", numberMatches(54.7))
                .body("[2].'timezones'.size()", equalTo(4))
                .body("[2].'timezones'", hasItems("UTC-05:00", "UTC-04:00", "UTC-03:00", "UTC-02:00"))
                .body("[2].'borders'.size()", equalTo(10))
                .body("[2].'borders'", hasItems("ARG", "BOL", "COL", "GUF", "GUY", "PRY", "PER", "SUR", "URY", "VEN"))
                .body("[2].'nativeName'", containsString("Brasil"))
                .body("[2].'numericCode'", containsString("076"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("BRL"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("pt"))
                .body("[2].'translations'.'de'", containsString("Brasilien"))
                .body("[2].'translations'.'es'", containsString("Brasil"))
                .body("[2].'translations'.'fr'", containsString("Brésil"))
                .body("[2].'translations'.'ja'", containsString("ブラジル"))
                .body("[2].'translations'.'it'", containsString("Brasile"))
                .body("[2].'relevance'", containsString("2"))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_129_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/santiago")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Chile"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cl"))
                .body("[0].'alpha2Code'", containsString("CL"))
                .body("[0].'alpha3Code'", containsString("CHL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("56"))
                .body("[0].'capital'", containsString("Santiago"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("CL", "Republic of Chile", "República de Chile"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(1.8006407E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-30.0))
                .body("[0].'latlng'[1]", numberMatches(-71.0))
                .body("[0].'demonym'", containsString("Chilean"))
                .body("[0].'area'", numberMatches(756102.0))
                .body("[0].'gini'", numberMatches(52.1))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC-06:00", "UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("ARG", "BOL", "PER"))
                .body("[0].'nativeName'", containsString("Chile"))
                .body("[0].'numericCode'", containsString("152"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("CLF", "CLP"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("Chile"))
                .body("[0].'translations'.'es'", containsString("Chile"))
                .body("[0].'translations'.'fr'", containsString("Chili"))
                .body("[0].'translations'.'ja'", containsString("チリ"))
                .body("[0].'translations'.'it'", containsString("Cile"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_130_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Republik Südafrika")
                .get(baseUrlOfSut + "/rest/v1/name/rossiya?" + 
                    "fullText=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Russia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ru"))
                .body("[0].'alpha2Code'", containsString("RU"))
                .body("[0].'alpha3Code'", containsString("RUS"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("7"))
                .body("[0].'capital'", containsString("Moscow"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("RU", "Rossiya", "Russian Federation", "Российская Федерация", "Rossiyskaya Federatsiya"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(1.4655633E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(60.0))
                .body("[0].'latlng'[1]", numberMatches(100.0))
                .body("[0].'demonym'", containsString("Russian"))
                .body("[0].'area'", numberMatches(1.7124442E7))
                .body("[0].'gini'", numberMatches(40.1))
                .body("[0].'timezones'.size()", equalTo(9))
                .body("[0].'timezones'", hasItems("UTC+03:00", "UTC+04:00", "UTC+06:00", "UTC+07:00", "UTC+08:00", "UTC+09:00", "UTC+10:00", "UTC+11:00", "UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(14))
                .body("[0].'borders'", hasItems("AZE", "BLR", "CHN", "EST", "FIN", "GEO", "KAZ", "PRK", "LVA", "LTU", "MNG", "NOR", "POL", "UKR"))
                .body("[0].'nativeName'", containsString("Россия"))
                .body("[0].'numericCode'", containsString("643"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("RUB"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ru"))
                .body("[0].'translations'.'de'", containsString("Russland"))
                .body("[0].'translations'.'es'", containsString("Rusia"))
                .body("[0].'translations'.'fr'", containsString("Russie"))
                .body("[0].'translations'.'ja'", containsString("ロシア連邦"))
                .body("[0].'translations'.'it'", containsString("Russia"))
                .body("[0].'relevance'", containsString("2.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_131_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/212")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Morocco"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ma"))
                .body("[0].'alpha2Code'", containsString("MA"))
                .body("[0].'alpha3Code'", containsString("MAR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("212"))
                .body("[0].'capital'", containsString("Rabat"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MA", "Kingdom of Morocco", "Al-Mamlakah al-Maġribiyah"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Northern Africa"))
                .body("[0].'population'", numberMatches(3.3337529E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(32.0))
                .body("[0].'latlng'[1]", numberMatches(-5.0))
                .body("[0].'demonym'", containsString("Moroccan"))
                .body("[0].'area'", numberMatches(446550.0))
                .body("[0].'gini'", numberMatches(40.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("DZA", "ESH", "ESP"))
                .body("[0].'nativeName'", containsString("المغرب"))
                .body("[0].'numericCode'", containsString("504"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MAD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Marokko"))
                .body("[0].'translations'.'es'", containsString("Marruecos"))
                .body("[0].'translations'.'fr'", containsString("Maroc"))
                .body("[0].'translations'.'ja'", containsString("モロッコ"))
                .body("[0].'translations'.'it'", containsString("Marocco"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Western Sahara"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".eh"))
                .body("[1].'alpha2Code'", containsString("EH"))
                .body("[1].'alpha3Code'", containsString("ESH"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("212"))
                .body("[1].'capital'", containsString("El Aaiún"))
                .body("[1].'altSpellings'.size()", equalTo(2))
                .body("[1].'altSpellings'", hasItems("EH", "Taneẓroft Tutrimt"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Northern Africa"))
                .body("[1].'population'", numberMatches(510713.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(24.5))
                .body("[1].'latlng'[1]", numberMatches(-13.0))
                .body("[1].'demonym'", containsString("Sahrawi"))
                .body("[1].'area'", numberMatches(266000.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+00:00"))
                .body("[1].'borders'.size()", equalTo(3))
                .body("[1].'borders'", hasItems("DZA", "MRT", "MAR"))
                .body("[1].'nativeName'", containsString("الصحراء الغربية"))
                .body("[1].'numericCode'", containsString("732"))
                .body("[1].'currencies'.size()", equalTo(3))
                .body("[1].'currencies'", hasItems("MAD", "DZD", "MRO"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("es"))
                .body("[1].'translations'.'de'", containsString("Westsahara"))
                .body("[1].'translations'.'es'", containsString("Sahara Occidental"))
                .body("[1].'translations'.'fr'", containsString("Sahara Occidental"))
                .body("[1].'translations'.'ja'", containsString("西サハラ"))
                .body("[1].'translations'.'it'", containsString("Sahara Occidentale"))
                .body("[1].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_132_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/nouakchott?fields=_EM_5772_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_133_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/alpha/In?fields=_EM_1375_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_134_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/Americas?fields=_EM_1377_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(57))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 54 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_135_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/south-eastern%20asia")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(11))
                .body("[0].'name'", containsString("Brunei"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bn"))
                .body("[0].'alpha2Code'", containsString("BN"))
                .body("[0].'alpha3Code'", containsString("BRN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("673"))
                .body("[0].'capital'", containsString("Bandar Seri Begawan"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("BN", "Nation of Brunei", " the Abode of Peace"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(393372.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(4.5))
                .body("[0].'latlng'[1]", numberMatches(114.66666666))
                .body("[0].'demonym'", containsString("Bruneian"))
                .body("[0].'area'", numberMatches(5765.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("MYS"))
                .body("[0].'nativeName'", containsString("Negara Brunei Darussalam"))
                .body("[0].'numericCode'", containsString("096"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BND"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ms"))
                .body("[0].'translations'.'de'", containsString("Brunei"))
                .body("[0].'translations'.'es'", containsString("Brunei"))
                .body("[0].'translations'.'fr'", containsString("Brunei"))
                .body("[0].'translations'.'ja'", containsString("ブルネイ・ダルサラーム"))
                .body("[0].'translations'.'it'", containsString("Brunei"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Cambodia"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".kh"))
                .body("[1].'alpha2Code'", containsString("KH"))
                .body("[1].'alpha3Code'", containsString("KHM"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("855"))
                .body("[1].'capital'", containsString("Phnom Penh"))
                .body("[1].'altSpellings'.size()", equalTo(2))
                .body("[1].'altSpellings'", hasItems("KH", "Kingdom of Cambodia"))
                .body("[1].'region'", containsString("Asia"))
                .body("[1].'subregion'", containsString("South-Eastern Asia"))
                .body("[1].'population'", numberMatches(1.5405157E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(13.0))
                .body("[1].'latlng'[1]", numberMatches(105.0))
                .body("[1].'demonym'", containsString("Cambodian"))
                .body("[1].'area'", numberMatches(181035.0))
                .body("[1].'gini'", numberMatches(37.9))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+07:00"))
                .body("[1].'borders'.size()", equalTo(3))
                .body("[1].'borders'", hasItems("LAO", "THA", "VNM"))
                .body("[1].'nativeName'", containsString("Kâmpŭchéa"))
                .body("[1].'numericCode'", containsString("116"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("KHR"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("km"))
                .body("[1].'translations'.'de'", containsString("Kambodscha"))
                .body("[1].'translations'.'es'", containsString("Camboya"))
                .body("[1].'translations'.'fr'", containsString("Cambodge"))
                .body("[1].'translations'.'ja'", containsString("カンボジア"))
                .body("[1].'translations'.'it'", containsString("Cambogia"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Indonesia"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".id"))
                .body("[2].'alpha2Code'", containsString("ID"))
                .body("[2].'alpha3Code'", containsString("IDN"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("62"))
                .body("[2].'capital'", containsString("Jakarta"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("ID", "Republic of Indonesia", "Republik Indonesia"))
                .body("[2].'region'", containsString("Asia"))
                .body("[2].'subregion'", containsString("South-Eastern Asia"))
                .body("[2].'population'", numberMatches(2.554617E8))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-5.0))
                .body("[2].'latlng'[1]", numberMatches(120.0))
                .body("[2].'demonym'", containsString("Indonesian"))
                .body("[2].'area'", numberMatches(1904569.0))
                .body("[2].'gini'", numberMatches(34.0))
                .body("[2].'timezones'.size()", equalTo(3))
                .body("[2].'timezones'", hasItems("UTC+07:00", "UTC+08:00", "UTC+09:00"))
                .body("[2].'borders'.size()", equalTo(3))
                .body("[2].'borders'", hasItems("TLS", "MYS", "PNG"))
                .body("[2].'nativeName'", containsString("Indonesia"))
                .body("[2].'numericCode'", containsString("360"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("IDR"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("id"))
                .body("[2].'translations'.'de'", containsString("Indonesien"))
                .body("[2].'translations'.'es'", containsString("Indonesia"))
                .body("[2].'translations'.'fr'", containsString("Indonésie"))
                .body("[2].'translations'.'ja'", containsString("インドネシア"))
                .body("[2].'translations'.'it'", containsString("Indonesia"))
                .body("[2].'relevance'", containsString("2"))
                ; // Skipping assertions on the remaining 8 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_136_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/region/asia")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(50))
                .body("[0].'name'", containsString("Afghanistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".af"))
                .body("[0].'alpha2Code'", containsString("AF"))
                .body("[0].'alpha3Code'", containsString("AFG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("93"))
                .body("[0].'capital'", containsString("Kabul"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AF", "Afġānistān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.60231E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(65.0))
                .body("[0].'demonym'", containsString("Afghan"))
                .body("[0].'area'", numberMatches(652230.0))
                .body("[0].'gini'", numberMatches(27.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:30"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "PAK", "TKM", "UZB", "TJK", "CHN"))
                .body("[0].'nativeName'", containsString("افغانستان"))
                .body("[0].'numericCode'", containsString("004"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AFN"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("ps", "uz", "tk"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Armenia"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".am"))
                .body("[1].'alpha2Code'", containsString("AM"))
                .body("[1].'alpha3Code'", containsString("ARM"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("374"))
                .body("[1].'capital'", containsString("Yerevan"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("AM", "Hayastan", "Republic of Armenia", "Հայաստանի Հանրապետություն"))
                .body("[1].'region'", containsString("Asia"))
                .body("[1].'subregion'", containsString("Western Asia"))
                .body("[1].'population'", numberMatches(3006800.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(40.0))
                .body("[1].'latlng'[1]", numberMatches(45.0))
                .body("[1].'demonym'", containsString("Armenian"))
                .body("[1].'area'", numberMatches(29743.0))
                .body("[1].'gini'", numberMatches(30.9))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+04:00"))
                .body("[1].'borders'.size()", equalTo(4))
                .body("[1].'borders'", hasItems("AZE", "GEO", "IRN", "TUR"))
                .body("[1].'nativeName'", containsString("Հայաստան"))
                .body("[1].'numericCode'", containsString("051"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("AMD"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("hy", "ru"))
                .body("[1].'translations'.'de'", containsString("Armenien"))
                .body("[1].'translations'.'es'", containsString("Armenia"))
                .body("[1].'translations'.'fr'", containsString("Arménie"))
                .body("[1].'translations'.'ja'", containsString("アルメニア"))
                .body("[1].'translations'.'it'", containsString("Armenia"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Azerbaijan"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".az"))
                .body("[2].'alpha2Code'", containsString("AZ"))
                .body("[2].'alpha3Code'", containsString("AZE"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("994"))
                .body("[2].'capital'", containsString("Baku"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("AZ", "Republic of Azerbaijan", "Azərbaycan Respublikası"))
                .body("[2].'region'", containsString("Asia"))
                .body("[2].'subregion'", containsString("Western Asia"))
                .body("[2].'population'", numberMatches(9636300.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(40.5))
                .body("[2].'latlng'[1]", numberMatches(47.5))
                .body("[2].'demonym'", containsString("Azerbaijani"))
                .body("[2].'area'", numberMatches(86600.0))
                .body("[2].'gini'", numberMatches(33.7))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+04:00"))
                .body("[2].'borders'.size()", equalTo(5))
                .body("[2].'borders'", hasItems("ARM", "GEO", "IRN", "RUS", "TUR"))
                .body("[2].'nativeName'", containsString("Azərbaycan"))
                .body("[2].'numericCode'", containsString("031"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("AZN"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("az"))
                .body("[2].'translations'.'de'", containsString("Aserbaidschan"))
                .body("[2].'translations'.'es'", containsString("Azerbaiyán"))
                .body("[2].'translations'.'fr'", containsString("Azerbaïdjan"))
                .body("[2].'translations'.'ja'", containsString("アゼルバイジャン"))
                .body("[2].'translations'.'it'", containsString("Azerbaijan"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 47 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_137_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/EAEU?fields=topLevelDomain")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".am"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".by"))
                .body("[2].'topLevelDomain'.size()", equalTo(2))
                .body("[2].'topLevelDomain'", hasItems(".kz", ".қаз"))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_138_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1486_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/name/Sudan?fields=_EM_1484_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_139_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/central%20america?fields=callingCodes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(8))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("501"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("506"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("503"))
                ; // Skipping assertions on the remaining 5 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_140_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/polynesia")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(10))
                .body("[0].'name'", containsString("American Samoa"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".as"))
                .body("[0].'alpha2Code'", containsString("AS"))
                .body("[0].'alpha3Code'", containsString("ASM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Pago Pago"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AS", "Amerika Sāmoa", "Amelika Sāmoa", "Sāmoa Amelika"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Polynesia"))
                .body("[0].'population'", numberMatches(55519.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-14.33333333))
                .body("[0].'latlng'[1]", numberMatches(-170.0))
                .body("[0].'demonym'", containsString("American Samoan"))
                .body("[0].'area'", numberMatches(199.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-11:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("American Samoa"))
                .body("[0].'numericCode'", containsString("016"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "sm"))
                .body("[0].'translations'.'de'", containsString("Amerikanisch-Samoa"))
                .body("[0].'translations'.'es'", containsString("Samoa Americana"))
                .body("[0].'translations'.'fr'", containsString("Samoa américaines"))
                .body("[0].'translations'.'ja'", containsString("アメリカ領サモア"))
                .body("[0].'translations'.'it'", containsString("Samoa Americane"))
                .body("[0].'relevance'", containsString("0.5"))
                .body("[1].'name'", containsString("Cook Islands"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ck"))
                .body("[1].'alpha2Code'", containsString("CK"))
                .body("[1].'alpha3Code'", containsString("COK"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("682"))
                .body("[1].'capital'", containsString("Avarua"))
                .body("[1].'altSpellings'.size()", equalTo(2))
                .body("[1].'altSpellings'", hasItems("CK", "Kūki 'Āirani"))
                .body("[1].'region'", containsString("Oceania"))
                .body("[1].'subregion'", containsString("Polynesia"))
                .body("[1].'population'", numberMatches(14974.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-21.23333333))
                .body("[1].'latlng'[1]", numberMatches(-159.76666666))
                .body("[1].'demonym'", containsString("Cook Islander"))
                .body("[1].'area'", numberMatches(236.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-10:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Cook Islands"))
                .body("[1].'numericCode'", containsString("184"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("NZD"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("en"))
                .body("[1].'translations'.'de'", containsString("Cookinseln"))
                .body("[1].'translations'.'es'", containsString("Islas Cook"))
                .body("[1].'translations'.'fr'", containsString("Îles Cook"))
                .body("[1].'translations'.'ja'", containsString("クック諸島"))
                .body("[1].'translations'.'it'", containsString("Isole Cook"))
                .body("[1].'relevance'", containsString("0.5"))
                .body("[2].'name'", containsString("French Polynesia"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".pf"))
                .body("[2].'alpha2Code'", containsString("PF"))
                .body("[2].'alpha3Code'", containsString("PYF"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("689"))
                .body("[2].'capital'", containsString("Papeetē"))
                .body("[2].'altSpellings'.size()", equalTo(4))
                .body("[2].'altSpellings'", hasItems("PF", "Polynésie française", "French Polynesia", "Pōrīnetia Farāni"))
                .body("[2].'region'", containsString("Oceania"))
                .body("[2].'subregion'", containsString("Polynesia"))
                .body("[2].'population'", numberMatches(268270.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-15.0))
                .body("[2].'latlng'[1]", numberMatches(-140.0))
                .body("[2].'demonym'", containsString("French Polynesian"))
                .body("[2].'area'", numberMatches(4167.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(3))
                .body("[2].'timezones'", hasItems("UTC-10:00", "UTC-09:30", "UTC-09:00"))
                .body("[2].'borders'.size()", equalTo(0))
                .body("[2].'nativeName'", containsString("Polynésie française"))
                .body("[2].'numericCode'", containsString("258"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("XPF"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("fr"))
                .body("[2].'translations'.'de'", containsString("Französisch-Polynesien"))
                .body("[2].'translations'.'es'", containsString("Polinesia Francesa"))
                .body("[2].'translations'.'fr'", containsString("Polynésie française"))
                .body("[2].'translations'.'ja'", containsString("フランス領ポリネシア"))
                .body("[2].'translations'.'it'", containsString("Polinesia Francese"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_141_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/australia%20and%20new%20zealand")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'name'", containsString("Australia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".au"))
                .body("[0].'alpha2Code'", containsString("AU"))
                .body("[0].'alpha3Code'", containsString("AUS"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("61"))
                .body("[0].'capital'", containsString("Canberra"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("AU"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Australia and New Zealand"))
                .body("[0].'population'", numberMatches(2.38688E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-27.0))
                .body("[0].'latlng'[1]", numberMatches(133.0))
                .body("[0].'demonym'", containsString("Australian"))
                .body("[0].'area'", numberMatches(7692024.0))
                .body("[0].'gini'", numberMatches(30.5))
                .body("[0].'timezones'.size()", equalTo(8))
                .body("[0].'timezones'", hasItems("UTC+05:00", "UTC+06:30", "UTC+07:00", "UTC+08:00", "UTC+09:30", "UTC+10:00", "UTC+10:30", "UTC+11:30"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Australia"))
                .body("[0].'numericCode'", containsString("036"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AUD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Australien"))
                .body("[0].'translations'.'es'", containsString("Australia"))
                .body("[0].'translations'.'fr'", containsString("Australie"))
                .body("[0].'translations'.'ja'", containsString("オーストラリア"))
                .body("[0].'translations'.'it'", containsString("Australia"))
                .body("[0].'relevance'", containsString("1.5"))
                .body("[1].'name'", containsString("Christmas Island"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".cx"))
                .body("[1].'alpha2Code'", containsString("CX"))
                .body("[1].'alpha3Code'", containsString("CXR"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("61"))
                .body("[1].'capital'", containsString("Flying Fish Cove"))
                .body("[1].'altSpellings'.size()", equalTo(2))
                .body("[1].'altSpellings'", hasItems("CX", "Territory of Christmas Island"))
                .body("[1].'region'", containsString("Oceania"))
                .body("[1].'subregion'", containsString("Australia and New Zealand"))
                .body("[1].'population'", numberMatches(2072.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-10.5))
                .body("[1].'latlng'[1]", numberMatches(105.66666666))
                .body("[1].'demonym'", containsString("Christmas Island"))
                .body("[1].'area'", numberMatches(135.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+07:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Christmas Island"))
                .body("[1].'numericCode'", containsString("162"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("AUD"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("en"))
                .body("[1].'translations'.'de'", containsString("Weihnachtsinsel"))
                .body("[1].'translations'.'es'", containsString("Isla de Navidad"))
                .body("[1].'translations'.'fr'", containsString("Île Christmas"))
                .body("[1].'translations'.'ja'", containsString("クリスマス島"))
                .body("[1].'translations'.'it'", containsString("Isola di Natale"))
                .body("[1].'relevance'", containsString("0.5"))
                .body("[2].'name'", containsString("Cocos (Keeling) Islands"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".cc"))
                .body("[2].'alpha2Code'", containsString("CC"))
                .body("[2].'alpha3Code'", containsString("CCK"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("61"))
                .body("[2].'capital'", containsString("West Island"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("CC", "Territory of the Cocos (Keeling) Islands", "Keeling Islands"))
                .body("[2].'region'", containsString("Oceania"))
                .body("[2].'subregion'", containsString("Australia and New Zealand"))
                .body("[2].'population'", numberMatches(550.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-12.5))
                .body("[2].'latlng'[1]", numberMatches(96.83333333))
                .body("[2].'demonym'", containsString("Cocos Islander"))
                .body("[2].'area'", numberMatches(14.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+06:30"))
                .body("[2].'borders'.size()", equalTo(0))
                .body("[2].'nativeName'", containsString("Cocos (Keeling) Islands"))
                .body("[2].'numericCode'", containsString("166"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("AUD"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("en"))
                .body("[2].'translations'.'de'", containsString("Kokosinseln"))
                .body("[2].'translations'.'es'", containsString("Islas Cocos o Islas Keeling"))
                .body("[2].'translations'.'fr'", containsString("Îles Cocos"))
                .body("[2].'translations'.'ja'", containsString("ココス（キーリング）諸島"))
                .body("[2].'translations'.'it'", containsString("Isole Cocos e Keeling"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_142_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/sammarinese?fields=subregion")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'subregion'", containsString("Southern Europe"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_143_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/352?fields=q")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_144_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/378?fields=_m1jHFPpXXb")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_145_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/alpha/VU?" + 
                    "fields=_EM_1731_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_146_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/manila?fields=_EM_5253_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_147_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/nassau?fields=_EM_7038_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_148_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/saint-pierre")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Saint Pierre and Miquelon"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pm"))
                .body("[0].'alpha2Code'", containsString("PM"))
                .body("[0].'alpha3Code'", containsString("SPM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("508"))
                .body("[0].'capital'", containsString("Saint-Pierre"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("PM", "Collectivité territoriale de Saint-Pierre-et-Miquelon"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Northern America"))
                .body("[0].'population'", numberMatches(6069.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(46.83333333))
                .body("[0].'latlng'[1]", numberMatches(-56.33333333))
                .body("[0].'demonym'", containsString("French"))
                .body("[0].'area'", numberMatches(242.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-03:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Saint-Pierre-et-Miquelon"))
                .body("[0].'numericCode'", containsString("666"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Saint-Pierre und Miquelon"))
                .body("[0].'translations'.'es'", containsString("San Pedro y Miquelón"))
                .body("[0].'translations'.'fr'", containsString("Saint-Pierre-et-Miquelon"))
                .body("[0].'translations'.'ja'", containsString("サンピエール島・ミクロン島"))
                .body("[0].'translations'.'it'", containsString("Saint-Pierre e Miquelon"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_149_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/IDR?" + 
                    "fields=_EM_1747_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_150_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/vi?EMextraParam123=_EM_1736_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Vietnam"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".vn"))
                .body("[0].'alpha2Code'", containsString("VN"))
                .body("[0].'alpha3Code'", containsString("VNM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("84"))
                .body("[0].'capital'", containsString("Hanoi"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("VN", "Socialist Republic of Vietnam", "Cộng hòa Xã hội chủ nghĩa Việt Nam"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(9.1812E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(16.16666666))
                .body("[0].'latlng'[1]", numberMatches(107.83333333))
                .body("[0].'demonym'", containsString("Vietnamese"))
                .body("[0].'area'", numberMatches(331212.0))
                .body("[0].'gini'", numberMatches(35.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+07:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("KHM", "CHN", "LAO"))
                .body("[0].'nativeName'", containsString("Việt Nam"))
                .body("[0].'numericCode'", containsString("704"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("VND"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("vi"))
                .body("[0].'translations'.'de'", containsString("Vietnam"))
                .body("[0].'translations'.'es'", containsString("Vietnam"))
                .body("[0].'translations'.'fr'", containsString("Viêt Nam"))
                .body("[0].'translations'.'ja'", containsString("ベトナム"))
                .body("[0].'translations'.'it'", containsString("Vietnam"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_151_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/dv")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Maldives"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mv"))
                .body("[0].'alpha2Code'", containsString("MV"))
                .body("[0].'alpha3Code'", containsString("MDV"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("960"))
                .body("[0].'capital'", containsString("Malé"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("MV", "Maldive Islands", "Republic of the Maldives", "Dhivehi Raajjeyge Jumhooriyya"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(341256.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(3.25))
                .body("[0].'latlng'[1]", numberMatches(73.0))
                .body("[0].'demonym'", containsString("Maldivan"))
                .body("[0].'area'", numberMatches(300.0))
                .body("[0].'gini'", numberMatches(37.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+05:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Maldives"))
                .body("[0].'numericCode'", containsString("462"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MVR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("dv"))
                .body("[0].'translations'.'de'", containsString("Malediven"))
                .body("[0].'translations'.'es'", containsString("Maldivas"))
                .body("[0].'translations'.'fr'", containsString("Maldives"))
                .body("[0].'translations'.'ja'", containsString("モルディブ"))
                .body("[0].'translations'.'it'", containsString("Maldive"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_152_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/zh")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'name'", containsString("China"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cn"))
                .body("[0].'alpha2Code'", containsString("CN"))
                .body("[0].'alpha3Code'", containsString("CHN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("86"))
                .body("[0].'capital'", containsString("Beijing"))
                .body("[0].'altSpellings'.size()", equalTo(7))
                .body("[0].'altSpellings'", hasItems("CN", "Zhōngguó", "Zhongguo", "Zhonghua", "People's Republic of China", "中华人民共和国", "Zhōnghuá Rénmín Gònghéguó"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(1.37159E9))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(35.0))
                .body("[0].'latlng'[1]", numberMatches(105.0))
                .body("[0].'demonym'", containsString("Chinese"))
                .body("[0].'area'", numberMatches(9640011.0))
                .body("[0].'gini'", numberMatches(47.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(15))
                .body("[0].'borders'", hasItems("AFG", "BTN", "MMR", "HKG", "IND", "KAZ", "PRK", "KGZ", "LAO", "MAC", "MNG", "PAK", "RUS", "TJK", "VNM"))
                .body("[0].'nativeName'", containsString("中国"))
                .body("[0].'numericCode'", containsString("156"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("CNY"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("zh"))
                .body("[0].'translations'.'de'", containsString("China"))
                .body("[0].'translations'.'es'", containsString("China"))
                .body("[0].'translations'.'fr'", containsString("Chine"))
                .body("[0].'translations'.'ja'", containsString("中国"))
                .body("[0].'translations'.'it'", containsString("Cina"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Hong Kong"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".hk"))
                .body("[1].'alpha2Code'", containsString("HK"))
                .body("[1].'alpha3Code'", containsString("HKG"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("852"))
                .body("[1].'capital'", containsString("City of Victoria"))
                .body("[1].'altSpellings'.size()", equalTo(2))
                .body("[1].'altSpellings'", hasItems("HK", "香港"))
                .body("[1].'region'", containsString("Asia"))
                .body("[1].'subregion'", containsString("Eastern Asia"))
                .body("[1].'population'", numberMatches(7298600.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(22.25))
                .body("[1].'latlng'[1]", numberMatches(114.16666666))
                .body("[1].'demonym'", containsString("Chinese"))
                .body("[1].'area'", numberMatches(1104.0))
                .body("[1].'gini'", numberMatches(53.3))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+08:00"))
                .body("[1].'borders'.size()", equalTo(1))
                .body("[1].'borders'", hasItems("CHN"))
                .body("[1].'nativeName'", containsString("香港"))
                .body("[1].'numericCode'", containsString("344"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("HKD"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("en", "zh"))
                .body("[1].'translations'.'de'", containsString("Hong Kong"))
                .body("[1].'translations'.'es'", containsString("Hong Kong"))
                .body("[1].'translations'.'fr'", containsString("Hong Kong"))
                .body("[1].'translations'.'ja'", containsString("香港"))
                .body("[1].'translations'.'it'", containsString("Hong Kong"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Macau"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".mo"))
                .body("[2].'alpha2Code'", containsString("MO"))
                .body("[2].'alpha3Code'", containsString("MAC"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("853"))
                .body("[2].'capital'", containsString(""))
                .body("[2].'altSpellings'.size()", equalTo(5))
                .body("[2].'altSpellings'", hasItems("MO", "澳门", "Macao Special Administrative Region of the People's Republic of China", "中華人民共和國澳門特別行政區", "Região Administrativa Especial de Macau da República Popular da China"))
                .body("[2].'region'", containsString("Asia"))
                .body("[2].'subregion'", containsString("Eastern Asia"))
                .body("[2].'population'", numberMatches(642900.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(22.16666666))
                .body("[2].'latlng'[1]", numberMatches(113.55))
                .body("[2].'demonym'", containsString("Chinese"))
                .body("[2].'area'", numberMatches(30.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+08:00"))
                .body("[2].'borders'.size()", equalTo(1))
                .body("[2].'borders'", hasItems("CHN"))
                .body("[2].'nativeName'", containsString("澳門"))
                .body("[2].'numericCode'", containsString("446"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("MOP"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'", hasItems("zh", "pt"))
                .body("[2].'translations'.'de'", containsString("Macao"))
                .body("[2].'translations'.'es'", containsString("Macao"))
                .body("[2].'translations'.'fr'", containsString("Macao"))
                .body("[2].'translations'.'ja'", containsString("マカオ"))
                .body("[2].'translations'.'it'", containsString("Macao"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_153_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/ru?EMextraParam123=_EM_33_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(8))
                .body("[0].'name'", containsString("Armenia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".am"))
                .body("[0].'alpha2Code'", containsString("AM"))
                .body("[0].'alpha3Code'", containsString("ARM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("374"))
                .body("[0].'capital'", containsString("Yerevan"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AM", "Hayastan", "Republic of Armenia", "Հայաստանի Հանրապետություն"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(3006800.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(40.0))
                .body("[0].'latlng'[1]", numberMatches(45.0))
                .body("[0].'demonym'", containsString("Armenian"))
                .body("[0].'area'", numberMatches(29743.0))
                .body("[0].'gini'", numberMatches(30.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("AZE", "GEO", "IRN", "TUR"))
                .body("[0].'nativeName'", containsString("Հայաստան"))
                .body("[0].'numericCode'", containsString("051"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AMD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("hy", "ru"))
                .body("[0].'translations'.'de'", containsString("Armenien"))
                .body("[0].'translations'.'es'", containsString("Armenia"))
                .body("[0].'translations'.'fr'", containsString("Arménie"))
                .body("[0].'translations'.'ja'", containsString("アルメニア"))
                .body("[0].'translations'.'it'", containsString("Armenia"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Belarus"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".by"))
                .body("[1].'alpha2Code'", containsString("BY"))
                .body("[1].'alpha3Code'", containsString("BLR"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("375"))
                .body("[1].'capital'", containsString("Minsk"))
                .body("[1].'altSpellings'.size()", equalTo(7))
                .body("[1].'altSpellings'", hasItems("BY", "Bielaruś", "Republic of Belarus", "Белоруссия", "Республика Беларусь", "Belorussiya", "Respublika Belarus’"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Eastern Europe"))
                .body("[1].'population'", numberMatches(9485300.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(53.0))
                .body("[1].'latlng'[1]", numberMatches(28.0))
                .body("[1].'demonym'", containsString("Belarusian"))
                .body("[1].'area'", numberMatches(207600.0))
                .body("[1].'gini'", numberMatches(26.5))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+03:00"))
                .body("[1].'borders'.size()", equalTo(5))
                .body("[1].'borders'", hasItems("LVA", "LTU", "POL", "RUS", "UKR"))
                .body("[1].'nativeName'", containsString("Белару́сь"))
                .body("[1].'numericCode'", containsString("112"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("BYR"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("be", "ru"))
                .body("[1].'translations'.'de'", containsString("Weißrussland"))
                .body("[1].'translations'.'es'", containsString("Bielorrusia"))
                .body("[1].'translations'.'fr'", containsString("Biélorussie"))
                .body("[1].'translations'.'ja'", containsString("ベラルーシ"))
                .body("[1].'translations'.'it'", containsString("Bielorussia"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Kazakhstan"))
                .body("[2].'topLevelDomain'.size()", equalTo(2))
                .body("[2].'topLevelDomain'", hasItems(".kz", ".қаз"))
                .body("[2].'alpha2Code'", containsString("KZ"))
                .body("[2].'alpha3Code'", containsString("KAZ"))
                .body("[2].'callingCodes'.size()", equalTo(2))
                .body("[2].'callingCodes'", hasItems("76", "77"))
                .body("[2].'capital'", containsString("Astana"))
                .body("[2].'altSpellings'.size()", equalTo(8))
                .body("[2].'altSpellings'", hasItems("KZ", "Qazaqstan", "Казахстан", "Republic of Kazakhstan", "Қазақстан Республикасы", "Qazaqstan Respublïkası", "Республика Казахстан", "Respublika Kazakhstan"))
                .body("[2].'region'", containsString("Asia"))
                .body("[2].'subregion'", containsString("Central Asia"))
                .body("[2].'population'", numberMatches(1.75412E7))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(48.0))
                .body("[2].'latlng'[1]", numberMatches(68.0))
                .body("[2].'demonym'", containsString("Kazakhstani"))
                .body("[2].'area'", numberMatches(2724900.0))
                .body("[2].'gini'", numberMatches(29.0))
                .body("[2].'timezones'.size()", equalTo(2))
                .body("[2].'timezones'", hasItems("UTC+05:00", "UTC+06:00"))
                .body("[2].'borders'.size()", equalTo(5))
                .body("[2].'borders'", hasItems("CHN", "KGZ", "RUS", "TKM", "UZB"))
                .body("[2].'nativeName'", containsString("Қазақстан"))
                .body("[2].'numericCode'", containsString("398"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("KZT"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'", hasItems("kk", "ru"))
                .body("[2].'translations'.'de'", containsString("Kasachstan"))
                .body("[2].'translations'.'es'", containsString("Kazajistán"))
                .body("[2].'translations'.'fr'", containsString("Kazakhstan"))
                .body("[2].'translations'.'ja'", containsString("カザフスタン"))
                .body("[2].'translations'.'it'", containsString("Kazakistan"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 5 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_154_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "San Marino")
                .get(baseUrlOfSut + "/rest/v1/lang/rw")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Rwanda"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".rw"))
                .body("[0].'alpha2Code'", containsString("RW"))
                .body("[0].'alpha3Code'", containsString("RWA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("250"))
                .body("[0].'capital'", containsString("Kigali"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("RW", "Republic of Rwanda", "Repubulika y'u Rwanda", "République du Rwanda"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(1.1262564E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-2.0))
                .body("[0].'latlng'[1]", numberMatches(30.0))
                .body("[0].'demonym'", containsString("Rwandan"))
                .body("[0].'area'", numberMatches(26338.0))
                .body("[0].'gini'", numberMatches(50.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("BDI", "COD", "TZA", "UGA"))
                .body("[0].'nativeName'", containsString("Rwanda"))
                .body("[0].'numericCode'", containsString("646"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("RWF"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("rw", "en", "fr"))
                .body("[0].'translations'.'de'", containsString("Ruanda"))
                .body("[0].'translations'.'es'", containsString("Ruanda"))
                .body("[0].'translations'.'fr'", containsString("Rwanda"))
                .body("[0].'translations'.'ja'", containsString("ルワンダ"))
                .body("[0].'translations'.'it'", containsString("Ruanda"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_155_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/350")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Gibraltar"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gi"))
                .body("[0].'alpha2Code'", containsString("GI"))
                .body("[0].'alpha3Code'", containsString("GIB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("350"))
                .body("[0].'capital'", containsString("Gibraltar"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("GI"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(32734.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(36.13333333))
                .body("[0].'latlng'[1]", numberMatches(-5.35))
                .body("[0].'demonym'", containsString("Gibraltar"))
                .body("[0].'area'", numberMatches(6.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("ESP"))
                .body("[0].'nativeName'", containsString("Gibraltar"))
                .body("[0].'numericCode'", containsString("292"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("GIP"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Gibraltar"))
                .body("[0].'translations'.'es'", containsString("Gibraltar"))
                .body("[0].'translations'.'fr'", containsString("Gibraltar"))
                .body("[0].'translations'.'ja'", containsString("ジブラルタル"))
                .body("[0].'translations'.'it'", containsString("Gibilterra"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_156_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/31?fields=zYueV4w3g2")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_157_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/AU?" + 
                    "fields=_EM_2197_XYZ_&" + 
                    "EMextraParam123=_EM_1016_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(60))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 57 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_158_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/kampala?fields=alpha2Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha2Code'", containsString("UG"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_159_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/TC?fields=alpha3Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'alpha3Code'", containsString("TCA"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_160_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/Africa?fields=_EM_1943_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(60))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 57 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_161_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2007_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/region/Americas?fields=_EM_2005_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(57))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 54 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_162_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/237")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Cameroon"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cm"))
                .body("[0].'alpha2Code'", containsString("CM"))
                .body("[0].'alpha3Code'", containsString("CMR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("237"))
                .body("[0].'capital'", containsString("Yaoundé"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("CM", "Republic of Cameroon", "République du Cameroun"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(2.3344E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(6.0))
                .body("[0].'latlng'[1]", numberMatches(12.0))
                .body("[0].'demonym'", containsString("Cameroonian"))
                .body("[0].'area'", numberMatches(475442.0))
                .body("[0].'gini'", numberMatches(38.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("CAF", "TCD", "COG", "GNQ", "GAB", "NGA"))
                .body("[0].'nativeName'", containsString("Cameroon"))
                .body("[0].'numericCode'", containsString("120"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XAF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "fr"))
                .body("[0].'translations'.'de'", containsString("Kamerun"))
                .body("[0].'translations'.'es'", containsString("Camerún"))
                .body("[0].'translations'.'fr'", containsString("Cameroun"))
                .body("[0].'translations'.'ja'", containsString("カメルーン"))
                .body("[0].'translations'.'it'", containsString("Camerun"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_163_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/tallinn?fields=tG9HX_jSgAG")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_164_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_165_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/subregion/Southern%20Europe?" + 
                    "fields=_EM_163_XYZ_&" + 
                    "EMextraParam123=_EM_164_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(17))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 14 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_165_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1017_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/ASEAN?fields=_EM_2197_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(10))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_166_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/currency/TJS?" + 
                    "fields=_EM_2260_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_167_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/sao%20tomean?fields=topLevelDomain")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".st"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_168_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/micronesia")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(7))
                .body("[0].'name'", containsString("Guam"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gu"))
                .body("[0].'alpha2Code'", containsString("GU"))
                .body("[0].'alpha3Code'", containsString("GUM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Hagåtña"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("GU", "Guåhån"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Micronesia"))
                .body("[0].'population'", numberMatches(159358.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(13.46666666))
                .body("[0].'latlng'[1]", numberMatches(144.78333333))
                .body("[0].'demonym'", containsString("Guamanian"))
                .body("[0].'area'", numberMatches(549.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+10:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Guam"))
                .body("[0].'numericCode'", containsString("316"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("en", "ch", "es"))
                .body("[0].'translations'.'de'", containsString("Guam"))
                .body("[0].'translations'.'es'", containsString("Guam"))
                .body("[0].'translations'.'fr'", containsString("Guam"))
                .body("[0].'translations'.'ja'", containsString("グアム"))
                .body("[0].'translations'.'it'", containsString("Guam"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Kiribati"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ki"))
                .body("[1].'alpha2Code'", containsString("KI"))
                .body("[1].'alpha3Code'", containsString("KIR"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("686"))
                .body("[1].'capital'", containsString("South Tarawa"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("KI", "Republic of Kiribati", "Ribaberiki Kiribati"))
                .body("[1].'region'", containsString("Oceania"))
                .body("[1].'subregion'", containsString("Micronesia"))
                .body("[1].'population'", numberMatches(106461.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(1.41666666))
                .body("[1].'latlng'[1]", numberMatches(173.0))
                .body("[1].'demonym'", containsString("I-Kiribati"))
                .body("[1].'area'", numberMatches(811.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(3))
                .body("[1].'timezones'", hasItems("UTC+12:00", "UTC+13:00", "UTC+14:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Kiribati"))
                .body("[1].'numericCode'", containsString("296"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("AUD"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("en"))
                .body("[1].'translations'.'de'", containsString("Kiribati"))
                .body("[1].'translations'.'es'", containsString("Kiribati"))
                .body("[1].'translations'.'fr'", containsString("Kiribati"))
                .body("[1].'translations'.'ja'", containsString("キリバス"))
                .body("[1].'translations'.'it'", containsString("Kiribati"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Marshall Islands"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".mh"))
                .body("[2].'alpha2Code'", containsString("MH"))
                .body("[2].'alpha3Code'", containsString("MHL"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("692"))
                .body("[2].'capital'", containsString("Majuro"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("MH", "Republic of the Marshall Islands", "Aolepān Aorōkin M̧ajeļ"))
                .body("[2].'region'", containsString("Oceania"))
                .body("[2].'subregion'", containsString("Micronesia"))
                .body("[2].'population'", numberMatches(56086.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(9.0))
                .body("[2].'latlng'[1]", numberMatches(168.0))
                .body("[2].'demonym'", containsString("Marshallese"))
                .body("[2].'area'", numberMatches(181.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+12:00"))
                .body("[2].'borders'.size()", equalTo(0))
                .body("[2].'nativeName'", containsString("M̧ajeļ"))
                .body("[2].'numericCode'", containsString("584"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("USD"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'", hasItems("en", "mh"))
                .body("[2].'translations'.'de'", containsString("Marshallinseln"))
                .body("[2].'translations'.'es'", containsString("Islas Marshall"))
                .body("[2].'translations'.'fr'", containsString("Îles Marshall"))
                .body("[2].'translations'.'ja'", containsString("マーシャル諸島"))
                .body("[2].'translations'.'it'", containsString("Isole Marshall"))
                .body("[2].'relevance'", containsString("0.5"))
                ; // Skipping assertions on the remaining 4 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_169_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/260")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Zambia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".zm"))
                .body("[0].'alpha2Code'", containsString("ZM"))
                .body("[0].'alpha3Code'", containsString("ZMB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("260"))
                .body("[0].'capital'", containsString("Lusaka"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("ZM", "Republic of Zambia"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(1.5473905E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-15.0))
                .body("[0].'latlng'[1]", numberMatches(30.0))
                .body("[0].'demonym'", containsString("Zambian"))
                .body("[0].'area'", numberMatches(752612.0))
                .body("[0].'gini'", numberMatches(54.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(8))
                .body("[0].'borders'", hasItems("AGO", "BWA", "COD", "MWI", "MOZ", "NAM", "TZA", "ZWE"))
                .body("[0].'nativeName'", containsString("Zambia"))
                .body("[0].'numericCode'", containsString("894"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ZMW"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Sambia"))
                .body("[0].'translations'.'es'", containsString("Zambia"))
                .body("[0].'translations'.'fr'", containsString("Zambie"))
                .body("[0].'translations'.'ja'", containsString("ザンビア"))
                .body("[0].'translations'.'it'", containsString("Zambia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_170_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/kingston?fields=callingCodes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("672"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_171_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/PL?fields=_EM_2491_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_172_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/n'djamena?fields=subregion")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'subregion'", containsString("Middle Africa"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_173_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/western%20europe")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(9))
                .body("[0].'name'", containsString("Austria"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".at"))
                .body("[0].'alpha2Code'", containsString("AT"))
                .body("[0].'alpha3Code'", containsString("AUT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("43"))
                .body("[0].'capital'", containsString("Vienna"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AT", "Österreich", "Osterreich", "Oesterreich"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(8602112.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(47.33333333))
                .body("[0].'latlng'[1]", numberMatches(13.33333333))
                .body("[0].'demonym'", containsString("Austrian"))
                .body("[0].'area'", numberMatches(83871.0))
                .body("[0].'gini'", numberMatches(26.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(8))
                .body("[0].'borders'", hasItems("CZE", "DEU", "HUN", "ITA", "LIE", "SVK", "SVN", "CHE"))
                .body("[0].'nativeName'", containsString("Österreich"))
                .body("[0].'numericCode'", containsString("040"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("de"))
                .body("[0].'translations'.'de'", containsString("Österreich"))
                .body("[0].'translations'.'es'", containsString("Austria"))
                .body("[0].'translations'.'fr'", containsString("Autriche"))
                .body("[0].'translations'.'ja'", containsString("オーストリア"))
                .body("[0].'translations'.'it'", containsString("Austria"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Belgium"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".be"))
                .body("[1].'alpha2Code'", containsString("BE"))
                .body("[1].'alpha3Code'", containsString("BEL"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("32"))
                .body("[1].'capital'", containsString("Brussels"))
                .body("[1].'altSpellings'.size()", equalTo(9))
                .body("[1].'altSpellings'", hasItems("BE", "België", "Belgie", "Belgien", "Belgique", "Kingdom of Belgium", "Koninkrijk België", "Royaume de Belgique", "Königreich Belgien"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Western Europe"))
                .body("[1].'population'", numberMatches(1.124833E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(50.83333333))
                .body("[1].'latlng'[1]", numberMatches(4.0))
                .body("[1].'demonym'", containsString("Belgian"))
                .body("[1].'area'", numberMatches(30528.0))
                .body("[1].'gini'", numberMatches(33.0))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(4))
                .body("[1].'borders'", hasItems("FRA", "DEU", "LUX", "NLD"))
                .body("[1].'nativeName'", containsString("België"))
                .body("[1].'numericCode'", containsString("056"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EUR"))
                .body("[1].'languages'.size()", equalTo(3))
                .body("[1].'languages'", hasItems("nl", "fr", "de"))
                .body("[1].'translations'.'de'", containsString("Belgien"))
                .body("[1].'translations'.'es'", containsString("Bélgica"))
                .body("[1].'translations'.'fr'", containsString("Belgique"))
                .body("[1].'translations'.'ja'", containsString("ベルギー"))
                .body("[1].'translations'.'it'", containsString("Belgio"))
                .body("[1].'relevance'", containsString("1.5"))
                .body("[2].'name'", containsString("France"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".fr"))
                .body("[2].'alpha2Code'", containsString("FR"))
                .body("[2].'alpha3Code'", containsString("FRA"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("33"))
                .body("[2].'capital'", containsString("Paris"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("FR", "French Republic", "République française"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Western Europe"))
                .body("[2].'population'", numberMatches(6.6186E7))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(46.0))
                .body("[2].'latlng'[1]", numberMatches(2.0))
                .body("[2].'demonym'", containsString("French"))
                .body("[2].'area'", numberMatches(640679.0))
                .body("[2].'gini'", numberMatches(32.7))
                .body("[2].'timezones'.size()", equalTo(12))
                .body("[2].'timezones'", hasItems("UTC-10:00", "UTC-09:30", "UTC-09:00", "UTC-08:00", "UTC-04:00", "UTC-03:00", "UTC+01:00", "UTC+03:00", "UTC+04:00", "UTC+05:00", "UTC+11:00", "UTC+12:00"))
                .body("[2].'borders'.size()", equalTo(8))
                .body("[2].'borders'", hasItems("AND", "BEL", "DEU", "ITA", "LUX", "MCO", "ESP", "CHE"))
                .body("[2].'nativeName'", containsString("France"))
                .body("[2].'numericCode'", containsString("250"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("EUR"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("fr"))
                .body("[2].'translations'.'de'", containsString("Frankreich"))
                .body("[2].'translations'.'es'", containsString("Francia"))
                .body("[2].'translations'.'fr'", containsString("France"))
                .body("[2].'translations'.'ja'", containsString("フランス"))
                .body("[2].'translations'.'it'", containsString("Francia"))
                .body("[2].'relevance'", containsString("2.5"))
                ; // Skipping assertions on the remaining 6 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_174_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/223")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Mali"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ml"))
                .body("[0].'alpha2Code'", containsString("ML"))
                .body("[0].'alpha3Code'", containsString("MLI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("223"))
                .body("[0].'capital'", containsString("Bamako"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("ML", "Republic of Mali", "République du Mali"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(1.76E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(17.0))
                .body("[0].'latlng'[1]", numberMatches(-4.0))
                .body("[0].'demonym'", containsString("Malian"))
                .body("[0].'area'", numberMatches(1240192.0))
                .body("[0].'gini'", numberMatches(33.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("DZA", "BFA", "GIN", "CIV", "MRT", "NER", "SEN"))
                .body("[0].'nativeName'", containsString("Mali"))
                .body("[0].'numericCode'", containsString("466"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XOF"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Mali"))
                .body("[0].'translations'.'es'", containsString("Mali"))
                .body("[0].'translations'.'fr'", containsString("Mali"))
                .body("[0].'translations'.'ja'", containsString("マリ"))
                .body("[0].'translations'.'it'", containsString("Mali"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_175_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/am")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Ethiopia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".et"))
                .body("[0].'alpha2Code'", containsString("ET"))
                .body("[0].'alpha3Code'", containsString("ETH"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("251"))
                .body("[0].'capital'", containsString("Addis Ababa"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("ET", "ʾĪtyōṗṗyā", "Federal Democratic Republic of Ethiopia", "የኢትዮጵያ ፌዴራላዊ ዲሞክራሲያዊ ሪፐብሊክ"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(9.0076012E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(8.0))
                .body("[0].'latlng'[1]", numberMatches(38.0))
                .body("[0].'demonym'", containsString("Ethiopian"))
                .body("[0].'area'", numberMatches(1104300.0))
                .body("[0].'gini'", numberMatches(29.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("DJI", "ERI", "KEN", "SOM", "SSD", "SDN"))
                .body("[0].'nativeName'", containsString("ኢትዮጵያ"))
                .body("[0].'numericCode'", containsString("231"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ETB"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("am"))
                .body("[0].'translations'.'de'", containsString("Äthiopien"))
                .body("[0].'translations'.'es'", containsString("Etiopía"))
                .body("[0].'translations'.'fr'", containsString("Éthiopie"))
                .body("[0].'translations'.'ja'", containsString("エチオピア"))
                .body("[0].'translations'.'it'", containsString("Etiopia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_176_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/52?fields=_EM_2631_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_177_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/panamanian?fields=callingCodes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("507"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_178_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/sg")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Central African Republic"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cf"))
                .body("[0].'alpha2Code'", containsString("CF"))
                .body("[0].'alpha3Code'", containsString("CAF"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("236"))
                .body("[0].'capital'", containsString("Bangui"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("CF", "Central African Republic", "République centrafricaine"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(4900000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(7.0))
                .body("[0].'latlng'[1]", numberMatches(21.0))
                .body("[0].'demonym'", containsString("Central African"))
                .body("[0].'area'", numberMatches(622984.0))
                .body("[0].'gini'", numberMatches(56.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("CMR", "TCD", "COD", "COG", "SSD", "SDN"))
                .body("[0].'nativeName'", containsString("Ködörösêse tî Bêafrîka"))
                .body("[0].'numericCode'", containsString("140"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XAF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "sg"))
                .body("[0].'translations'.'de'", containsString("Zentralafrikanische Republik"))
                .body("[0].'translations'.'es'", containsString("República Centroafricana"))
                .body("[0].'translations'.'fr'", containsString("République centrafricaine"))
                .body("[0].'translations'.'ja'", containsString("中央アフリカ共和国"))
                .body("[0].'translations'.'it'", containsString("Repubblica Centrafricana"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_179_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/si")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Sri Lanka"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".lk"))
                .body("[0].'alpha2Code'", containsString("LK"))
                .body("[0].'alpha3Code'", containsString("LKA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("94"))
                .body("[0].'capital'", containsString("Colombo"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("LK", "ilaṅkai", "Democratic Socialist Republic of Sri Lanka"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.0675E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(7.0))
                .body("[0].'latlng'[1]", numberMatches(81.0))
                .body("[0].'demonym'", containsString("Sri Lankan"))
                .body("[0].'area'", numberMatches(65610.0))
                .body("[0].'gini'", numberMatches(40.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+05:30"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("IND"))
                .body("[0].'nativeName'", containsString("śrī laṃkāva"))
                .body("[0].'numericCode'", containsString("144"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("LKR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("si", "ta"))
                .body("[0].'translations'.'de'", containsString("Sri Lanka"))
                .body("[0].'translations'.'es'", containsString("Sri Lanka"))
                .body("[0].'translations'.'fr'", containsString("Sri Lanka"))
                .body("[0].'translations'.'ja'", containsString("スリランカ"))
                .body("[0].'translations'.'it'", containsString("Sri Lanka"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_180_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/dominican?fields=capital")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'capital'", containsString("Roseau"))
                .body("[1].'capital'", containsString("Santo Domingo"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_181_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/bn")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bangladesh"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bd"))
                .body("[0].'alpha2Code'", containsString("BD"))
                .body("[0].'alpha3Code'", containsString("BGD"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("880"))
                .body("[0].'capital'", containsString("Dhaka"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("BD", "People's Republic of Bangladesh", "Gônôprôjatôntri Bangladesh"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(1.58875E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(24.0))
                .body("[0].'latlng'[1]", numberMatches(90.0))
                .body("[0].'demonym'", containsString("Bangladeshi"))
                .body("[0].'area'", numberMatches(147570.0))
                .body("[0].'gini'", numberMatches(32.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+06:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("MMR", "IND"))
                .body("[0].'nativeName'", containsString("Bangladesh"))
                .body("[0].'numericCode'", containsString("050"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BDT"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("bn"))
                .body("[0].'translations'.'de'", containsString("Bangladesch"))
                .body("[0].'translations'.'es'", containsString("Bangladesh"))
                .body("[0].'translations'.'fr'", containsString("Bangladesh"))
                .body("[0].'translations'.'ja'", containsString("バングラデシュ"))
                .body("[0].'translations'.'it'", containsString("Bangladesh"))
                .body("[0].'relevance'", containsString("2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_182_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/xh")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("South Africa"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".za"))
                .body("[0].'alpha2Code'", containsString("ZA"))
                .body("[0].'alpha3Code'", containsString("ZAF"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("27"))
                .body("[0].'capital'", containsString("Pretoria"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("ZA", "RSA", "Suid-Afrika", "Republic of South Africa"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Southern Africa"))
                .body("[0].'population'", numberMatches(5.49569E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-29.0))
                .body("[0].'latlng'[1]", numberMatches(24.0))
                .body("[0].'demonym'", containsString("South African"))
                .body("[0].'area'", numberMatches(1221037.0))
                .body("[0].'gini'", numberMatches(63.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("BWA", "LSO", "MOZ", "NAM", "SWZ", "ZWE"))
                .body("[0].'nativeName'", containsString("South Africa"))
                .body("[0].'numericCode'", containsString("710"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ZAR"))
                .body("[0].'languages'.size()", equalTo(10))
                .body("[0].'languages'", hasItems("af", "en", "nr", "st", "ss", "tn", "ts", "ve", "xh", "zu"))
                .body("[0].'translations'.'de'", containsString("Republik Südafrika"))
                .body("[0].'translations'.'es'", containsString("República de Sudáfrica"))
                .body("[0].'translations'.'fr'", containsString("Afrique du Sud"))
                .body("[0].'translations'.'ja'", containsString("南アフリカ"))
                .body("[0].'translations'.'it'", containsString("Sud Africa"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_183_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/sk")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Czech Republic"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cz"))
                .body("[0].'alpha2Code'", containsString("CZ"))
                .body("[0].'alpha3Code'", containsString("CZE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("420"))
                .body("[0].'capital'", containsString("Prague"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("CZ", "Česká republika", "Česko"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(1.0537818E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(49.75))
                .body("[0].'latlng'[1]", numberMatches(15.5))
                .body("[0].'demonym'", containsString("Czech"))
                .body("[0].'area'", numberMatches(78865.0))
                .body("[0].'gini'", numberMatches(26.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("AUT", "DEU", "POL", "SVK"))
                .body("[0].'nativeName'", containsString("Česká republika"))
                .body("[0].'numericCode'", containsString("203"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("CZK"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("cs", "sk"))
                .body("[0].'translations'.'de'", containsString("Tschechische Republik"))
                .body("[0].'translations'.'es'", containsString("República Checa"))
                .body("[0].'translations'.'fr'", containsString("République tchèque"))
                .body("[0].'translations'.'ja'", containsString("チェコ"))
                .body("[0].'translations'.'it'", containsString("Repubblica Ceca"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Slovakia"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".sk"))
                .body("[1].'alpha2Code'", containsString("SK"))
                .body("[1].'alpha3Code'", containsString("SVK"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("421"))
                .body("[1].'capital'", containsString("Bratislava"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("SK", "Slovak Republic", "Slovenská republika"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Eastern Europe"))
                .body("[1].'population'", numberMatches(5421349.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(48.66666666))
                .body("[1].'latlng'[1]", numberMatches(19.5))
                .body("[1].'demonym'", containsString("Slovak"))
                .body("[1].'area'", numberMatches(49037.0))
                .body("[1].'gini'", numberMatches(26.0))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(5))
                .body("[1].'borders'", hasItems("AUT", "CZE", "HUN", "POL", "UKR"))
                .body("[1].'nativeName'", containsString("Slovensko"))
                .body("[1].'numericCode'", containsString("703"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EUR"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("sk"))
                .body("[1].'translations'.'de'", containsString("Slowakei"))
                .body("[1].'translations'.'es'", containsString("República Eslovaca"))
                .body("[1].'translations'.'fr'", containsString("Slovaquie"))
                .body("[1].'translations'.'ja'", containsString("スロバキア"))
                .body("[1].'translations'.'it'", containsString("Slovacchia"))
                .body("[1].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_184_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/sl")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Slovenia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".si"))
                .body("[0].'alpha2Code'", containsString("SI"))
                .body("[0].'alpha3Code'", containsString("SVN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("386"))
                .body("[0].'capital'", containsString("Ljubljana"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("SI", "Republic of Slovenia", "Republika Slovenija"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(2067683.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(46.11666666))
                .body("[0].'latlng'[1]", numberMatches(14.81666666))
                .body("[0].'demonym'", containsString("Slovene"))
                .body("[0].'area'", numberMatches(20273.0))
                .body("[0].'gini'", numberMatches(31.2))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("AUT", "HRV", "ITA", "HUN"))
                .body("[0].'nativeName'", containsString("Slovenija"))
                .body("[0].'numericCode'", containsString("705"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("sl"))
                .body("[0].'translations'.'de'", containsString("Slowenien"))
                .body("[0].'translations'.'es'", containsString("Eslovenia"))
                .body("[0].'translations'.'fr'", containsString("Slovénie"))
                .body("[0].'translations'.'ja'", containsString("スロベニア"))
                .body("[0].'translations'.'it'", containsString("Slovenia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_185_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/zu")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("South Africa"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".za"))
                .body("[0].'alpha2Code'", containsString("ZA"))
                .body("[0].'alpha3Code'", containsString("ZAF"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("27"))
                .body("[0].'capital'", containsString("Pretoria"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("ZA", "RSA", "Suid-Afrika", "Republic of South Africa"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Southern Africa"))
                .body("[0].'population'", numberMatches(5.49569E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-29.0))
                .body("[0].'latlng'[1]", numberMatches(24.0))
                .body("[0].'demonym'", containsString("South African"))
                .body("[0].'area'", numberMatches(1221037.0))
                .body("[0].'gini'", numberMatches(63.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("BWA", "LSO", "MOZ", "NAM", "SWZ", "ZWE"))
                .body("[0].'nativeName'", containsString("South Africa"))
                .body("[0].'numericCode'", containsString("710"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ZAR"))
                .body("[0].'languages'.size()", equalTo(10))
                .body("[0].'languages'", hasItems("af", "en", "nr", "st", "ss", "tn", "ts", "ve", "xh", "zu"))
                .body("[0].'translations'.'de'", containsString("Republik Südafrika"))
                .body("[0].'translations'.'es'", containsString("República de Sudáfrica"))
                .body("[0].'translations'.'fr'", containsString("Afrique du Sud"))
                .body("[0].'translations'.'ja'", containsString("南アフリカ"))
                .body("[0].'translations'.'it'", containsString("Sud Africa"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_186_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/ZMW?fields=_EM_2748_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_187_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/UZS?fields=_EM_1179_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_188_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/ghanaian?fields=region")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'region'", containsString("Africa"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_189_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/Australia%20and%20New%20Zealand?fields=_EM_2772_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_190_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/TC?fields=altSpellings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'altSpellings'.size()", equalTo(1))
                .body("'altSpellings'", hasItems("TC"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_191_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/SG?fields=_EM_2782_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_192_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/PL?fields=_EM_2794_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_193_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/EH?fields=translations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'translations'.'br'", containsString("Saara Ocidental"))
                .body("'translations'.'pt'", containsString("Saara Ocidental"))
                .body("'translations'.'nl'", containsString("Westelijke Sahara"))
                .body("'translations'.'hr'", containsString("Zapadna Sahara"))
                .body("'translations'.'fa'", containsString("جمهوری دموکراتیک عربی صحرا"))
                .body("'translations'.'de'", containsString("Westsahara"))
                .body("'translations'.'es'", containsString("Sahara Occidental"))
                .body("'translations'.'fr'", containsString("Sahara Occidental"))
                .body("'translations'.'ja'", containsString("西サハラ"))
                .body("'translations'.'it'", containsString("Sahara Occidentale"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_194_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/265")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Malawi"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mw"))
                .body("[0].'alpha2Code'", containsString("MW"))
                .body("[0].'alpha3Code'", containsString("MWI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("265"))
                .body("[0].'capital'", containsString("Lilongwe"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("MW", "Republic of Malawi"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(1.6310431E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-13.5))
                .body("[0].'latlng'[1]", numberMatches(34.0))
                .body("[0].'demonym'", containsString("Malawian"))
                .body("[0].'area'", numberMatches(118484.0))
                .body("[0].'gini'", numberMatches(39.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("MOZ", "TZA", "ZMB"))
                .body("[0].'nativeName'", containsString("Malawi"))
                .body("[0].'numericCode'", containsString("454"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MWK"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "ny"))
                .body("[0].'translations'.'de'", containsString("Malawi"))
                .body("[0].'translations'.'es'", containsString("Malawi"))
                .body("[0].'translations'.'fr'", containsString("Malawi"))
                .body("[0].'translations'.'ja'", containsString("マラウイ"))
                .body("[0].'translations'.'it'", containsString("Malawi"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_195_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/48?fields=subregion")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'subregion'", containsString("Eastern Europe"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_196_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/90?fields=_EM_2888_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_197_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/Europe?fields=_EM_2955_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(53))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 50 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_198_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/Northern%20Europe?fields=_EM_2978_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(16))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 13 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_199_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/XCD?fields=_EM_3018_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(8))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 5 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_200_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/ky?" + 
                    "fields=_EM_411_XYZ_&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_201_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/Nigerien?fields=_EM_3010_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_202_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/mt?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Malta"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mt"))
                .body("[0].'alpha2Code'", containsString("MT"))
                .body("[0].'alpha3Code'", containsString("MLT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("356"))
                .body("[0].'capital'", containsString("Valletta"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MT", "Republic of Malta", "Repubblika ta' Malta"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(445426.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(35.83333333))
                .body("[0].'latlng'[1]", numberMatches(14.58333333))
                .body("[0].'demonym'", containsString("Maltese"))
                .body("[0].'area'", numberMatches(316.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Malta"))
                .body("[0].'numericCode'", containsString("470"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("mt", "en"))
                .body("[0].'translations'.'de'", containsString("Malta"))
                .body("[0].'translations'.'es'", containsString("Malta"))
                .body("[0].'translations'.'fr'", containsString("Malte"))
                .body("[0].'translations'.'ja'", containsString("マルタ"))
                .body("[0].'translations'.'it'", containsString("Malta"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Western Sahara"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".eh"))
                .body("[1].'alpha2Code'", containsString("EH"))
                .body("[1].'alpha3Code'", containsString("ESH"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("212"))
                .body("[1].'capital'", containsString("El Aaiún"))
                .body("[1].'altSpellings'.size()", equalTo(2))
                .body("[1].'altSpellings'", hasItems("EH", "Taneẓroft Tutrimt"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Northern Africa"))
                .body("[1].'population'", numberMatches(510713.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(24.5))
                .body("[1].'latlng'[1]", numberMatches(-13.0))
                .body("[1].'demonym'", containsString("Sahrawi"))
                .body("[1].'area'", numberMatches(266000.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+00:00"))
                .body("[1].'borders'.size()", equalTo(3))
                .body("[1].'borders'", hasItems("DZA", "MRT", "MAR"))
                .body("[1].'nativeName'", containsString("الصحراء الغربية"))
                .body("[1].'numericCode'", containsString("732"))
                .body("[1].'currencies'.size()", equalTo(3))
                .body("[1].'currencies'", hasItems("MAD", "DZD", "MRO"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("es"))
                .body("[1].'translations'.'de'", containsString("Westsahara"))
                .body("[1].'translations'.'es'", containsString("Sahara Occidental"))
                .body("[1].'translations'.'fr'", containsString("Sahara Occidental"))
                .body("[1].'translations'.'ja'", containsString("西サハラ"))
                .body("[1].'translations'.'it'", containsString("Sahara Occidentale"))
                .body("[1].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_203_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/212?fields=K")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_204_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/bangui?fields=_EM_6621_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_205_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/Southern%20Asia?fields=_EM_2817_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(9))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 6 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_206_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/american%20samoan?fields=n3")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_207_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/ay")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bolivia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bo"))
                .body("[0].'alpha2Code'", containsString("BO"))
                .body("[0].'alpha3Code'", containsString("BOL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("591"))
                .body("[0].'capital'", containsString("Sucre"))
                .body("[0].'altSpellings'.size()", equalTo(8))
                .body("[0].'altSpellings'", hasItems("BO", "Buliwya", "Wuliwya", "Plurinational State of Bolivia", "Estado Plurinacional de Bolivia", "Buliwya Mamallaqta", "Wuliwya Suyu", "Tetã Volívia"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(1.1410651E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-17.0))
                .body("[0].'latlng'[1]", numberMatches(-65.0))
                .body("[0].'demonym'", containsString("Bolivian"))
                .body("[0].'area'", numberMatches(1098581.0))
                .body("[0].'gini'", numberMatches(56.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("ARG", "BRA", "CHL", "PRY", "PER"))
                .body("[0].'nativeName'", containsString("Bolivia"))
                .body("[0].'numericCode'", containsString("068"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("BOB", "BOV"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("es", "ay", "qu"))
                .body("[0].'translations'.'de'", containsString("Bolivien"))
                .body("[0].'translations'.'es'", containsString("Bolivia"))
                .body("[0].'translations'.'fr'", containsString("Bolivie"))
                .body("[0].'translations'.'ja'", containsString("ボリビア多民族国"))
                .body("[0].'translations'.'it'", containsString("Bolivia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_208_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/992?fields=_EM_3136_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_209_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/gs?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("South Georgia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gs"))
                .body("[0].'alpha2Code'", containsString("GS"))
                .body("[0].'alpha3Code'", containsString("SGS"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("500"))
                .body("[0].'capital'", containsString("King Edward Point"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("GS", "South Georgia and the South Sandwich Islands"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(30.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-54.5))
                .body("[0].'latlng'[1]", numberMatches(-37.0))
                .body("[0].'demonym'", containsString("South Georgia and the South Sandwich Islander"))
                .body("[0].'area'", nullValue())
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-02:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("South Georgia"))
                .body("[0].'numericCode'", containsString("239"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("GBP"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Südgeorgien und die Südlichen Sandwichinseln"))
                .body("[0].'translations'.'es'", containsString("Islas Georgias del Sur y Sandwich del Sur"))
                .body("[0].'translations'.'fr'", containsString("Géorgie du Sud-et-les Îles Sandwich du Sud"))
                .body("[0].'translations'.'ja'", containsString("サウスジョージア・サウスサンドウィッチ諸島"))
                .body("[0].'translations'.'it'", containsString("Georgia del Sud e Isole Sandwich Meridionali"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_210_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/238")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Cape Verde"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cv"))
                .body("[0].'alpha2Code'", containsString("CV"))
                .body("[0].'alpha3Code'", containsString("CPV"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("238"))
                .body("[0].'capital'", containsString("Praia"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("CV", "Republic of Cabo Verde", "República de Cabo Verde"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(524833.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(16.0))
                .body("[0].'latlng'[1]", numberMatches(-24.0))
                .body("[0].'demonym'", containsString("Cape Verdian"))
                .body("[0].'area'", numberMatches(4033.0))
                .body("[0].'gini'", numberMatches(50.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-01:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Cabo Verde"))
                .body("[0].'numericCode'", containsString("132"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("CVE"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("pt"))
                .body("[0].'translations'.'de'", containsString("Kap Verde"))
                .body("[0].'translations'.'es'", containsString("Cabo Verde"))
                .body("[0].'translations'.'fr'", containsString("Cap Vert"))
                .body("[0].'translations'.'ja'", containsString("カーボベルデ"))
                .body("[0].'translations'.'it'", containsString("Capo Verde"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_211_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/239")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("São Tomé and Príncipe"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".st"))
                .body("[0].'alpha2Code'", containsString("ST"))
                .body("[0].'alpha3Code'", containsString("STP"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("239"))
                .body("[0].'capital'", containsString("São Tomé"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("ST", "Democratic Republic of São Tomé and Príncipe", "República Democrática de São Tomé e Príncipe"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(187356.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(1.0))
                .body("[0].'latlng'[1]", numberMatches(7.0))
                .body("[0].'demonym'", containsString("Sao Tomean"))
                .body("[0].'area'", numberMatches(964.0))
                .body("[0].'gini'", numberMatches(50.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("São Tomé e Príncipe"))
                .body("[0].'numericCode'", containsString("678"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("STD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("pt"))
                .body("[0].'translations'.'de'", containsString("São Tomé und Príncipe"))
                .body("[0].'translations'.'es'", containsString("Santo Tomé y Príncipe"))
                .body("[0].'translations'.'fr'", containsString("Sao Tomé-et-Principe"))
                .body("[0].'translations'.'ja'", containsString("サントメ・プリンシペ"))
                .body("[0].'translations'.'it'", containsString("São Tomé e Príncipe"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_212_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/379?fields=_EM_7354_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_213_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/aruban?fields=_EM_6230_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_214_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/mv?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Maldives"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mv"))
                .body("[0].'alpha2Code'", containsString("MV"))
                .body("[0].'alpha3Code'", containsString("MDV"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("960"))
                .body("[0].'capital'", containsString("Malé"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("MV", "Maldive Islands", "Republic of the Maldives", "Dhivehi Raajjeyge Jumhooriyya"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(341256.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(3.25))
                .body("[0].'latlng'[1]", numberMatches(73.0))
                .body("[0].'demonym'", containsString("Maldivan"))
                .body("[0].'area'", numberMatches(300.0))
                .body("[0].'gini'", numberMatches(37.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+05:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Maldives"))
                .body("[0].'numericCode'", containsString("462"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MVR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("dv"))
                .body("[0].'translations'.'de'", containsString("Malediven"))
                .body("[0].'translations'.'es'", containsString("Maldivas"))
                .body("[0].'translations'.'fr'", containsString("Maldives"))
                .body("[0].'translations'.'ja'", containsString("モルディブ"))
                .body("[0].'translations'.'it'", containsString("Maldive"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_215_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/basseterre?fields=_EM_6621_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_216_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/962")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Jordan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".jo"))
                .body("[0].'alpha2Code'", containsString("JO"))
                .body("[0].'alpha3Code'", containsString("JOR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("962"))
                .body("[0].'capital'", containsString("Amman"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("JO", "Hashemite Kingdom of Jordan", "al-Mamlakah al-Urdunīyah al-Hāshimīyah"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(6767600.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(31.0))
                .body("[0].'latlng'[1]", numberMatches(36.0))
                .body("[0].'demonym'", containsString("Jordanian"))
                .body("[0].'area'", numberMatches(89342.0))
                .body("[0].'gini'", numberMatches(35.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("IRQ", "ISR", "SAU", "SYR"))
                .body("[0].'nativeName'", containsString("الأردن"))
                .body("[0].'numericCode'", containsString("400"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("JOD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Jordanien"))
                .body("[0].'translations'.'es'", containsString("Jordania"))
                .body("[0].'translations'.'fr'", containsString("Jordanie"))
                .body("[0].'translations'.'ja'", containsString("ヨルダン"))
                .body("[0].'translations'.'it'", containsString("Giordania"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_217_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/moroni")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Comoros"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".km"))
                .body("[0].'alpha2Code'", containsString("KM"))
                .body("[0].'alpha3Code'", containsString("COM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("269"))
                .body("[0].'capital'", containsString("Moroni"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("KM", "Union of the Comoros", "Union des Comores", "Udzima wa Komori", "al-Ittiḥād al-Qumurī"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(784745.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-12.16666666))
                .body("[0].'latlng'[1]", numberMatches(44.25))
                .body("[0].'demonym'", containsString("Comoran"))
                .body("[0].'area'", numberMatches(1862.0))
                .body("[0].'gini'", numberMatches(64.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Komori"))
                .body("[0].'numericCode'", containsString("174"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("KMF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("ar", "fr"))
                .body("[0].'translations'.'de'", containsString("Union der Komoren"))
                .body("[0].'translations'.'es'", containsString("Comoras"))
                .body("[0].'translations'.'fr'", containsString("Comores"))
                .body("[0].'translations'.'ja'", containsString("コモロ"))
                .body("[0].'translations'.'it'", containsString("Comore"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_218_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/moscow")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Russia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ru"))
                .body("[0].'alpha2Code'", containsString("RU"))
                .body("[0].'alpha3Code'", containsString("RUS"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("7"))
                .body("[0].'capital'", containsString("Moscow"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("RU", "Rossiya", "Russian Federation", "Российская Федерация", "Rossiyskaya Federatsiya"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(1.4655633E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(60.0))
                .body("[0].'latlng'[1]", numberMatches(100.0))
                .body("[0].'demonym'", containsString("Russian"))
                .body("[0].'area'", numberMatches(1.7124442E7))
                .body("[0].'gini'", numberMatches(40.1))
                .body("[0].'timezones'.size()", equalTo(9))
                .body("[0].'timezones'", hasItems("UTC+03:00", "UTC+04:00", "UTC+06:00", "UTC+07:00", "UTC+08:00", "UTC+09:00", "UTC+10:00", "UTC+11:00", "UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(14))
                .body("[0].'borders'", hasItems("AZE", "BLR", "CHN", "EST", "FIN", "GEO", "KAZ", "PRK", "LVA", "LTU", "MNG", "NOR", "POL", "UKR"))
                .body("[0].'nativeName'", containsString("Россия"))
                .body("[0].'numericCode'", containsString("643"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("RUB"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ru"))
                .body("[0].'translations'.'de'", containsString("Russland"))
                .body("[0].'translations'.'es'", containsString("Rusia"))
                .body("[0].'translations'.'fr'", containsString("Russie"))
                .body("[0].'translations'.'ja'", containsString("ロシア連邦"))
                .body("[0].'translations'.'it'", containsString("Russia"))
                .body("[0].'relevance'", containsString("2.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_219_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/Polar?fields=_EM_3292_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_220_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/500?fields=topLevelDomain")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".fk"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".gs"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_221_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/tH?fields=_EM_3533_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_222_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/MN?fields=_EM_3655_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_223_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/tH?fields=_EM_3668_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_224_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/KHM?fields=region")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'region'", containsString("Asia"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_225_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/mw?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Malawi"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mw"))
                .body("[0].'alpha2Code'", containsString("MW"))
                .body("[0].'alpha3Code'", containsString("MWI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("265"))
                .body("[0].'capital'", containsString("Lilongwe"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("MW", "Republic of Malawi"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(1.6310431E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-13.5))
                .body("[0].'latlng'[1]", numberMatches(34.0))
                .body("[0].'demonym'", containsString("Malawian"))
                .body("[0].'area'", numberMatches(118484.0))
                .body("[0].'gini'", numberMatches(39.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("MOZ", "TZA", "ZMB"))
                .body("[0].'nativeName'", containsString("Malawi"))
                .body("[0].'numericCode'", containsString("454"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MWK"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "ny"))
                .body("[0].'translations'.'de'", containsString("Malawi"))
                .body("[0].'translations'.'es'", containsString("Malawi"))
                .body("[0].'translations'.'fr'", containsString("Malawi"))
                .body("[0].'translations'.'ja'", containsString("マラウイ"))
                .body("[0].'translations'.'it'", containsString("Malawi"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_226_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/240")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Equatorial Guinea"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gq"))
                .body("[0].'alpha2Code'", containsString("GQ"))
                .body("[0].'alpha3Code'", containsString("GNQ"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("240"))
                .body("[0].'capital'", containsString("Malabo"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("GQ", "Republic of Equatorial Guinea", "República de Guinea Ecuatorial", "République de Guinée équatoriale", "República da Guiné Equatorial"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(1430000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(2.0))
                .body("[0].'latlng'[1]", numberMatches(10.0))
                .body("[0].'demonym'", containsString("Equatorial Guinean"))
                .body("[0].'area'", numberMatches(28051.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("CMR", "GAB"))
                .body("[0].'nativeName'", containsString("Guinea Ecuatorial"))
                .body("[0].'numericCode'", containsString("226"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XAF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("es", "fr"))
                .body("[0].'translations'.'de'", containsString("Äquatorial-Guinea"))
                .body("[0].'translations'.'es'", containsString("Guinea Ecuatorial"))
                .body("[0].'translations'.'fr'", containsString("Guinée-Équatoriale"))
                .body("[0].'translations'.'ja'", containsString("赤道ギニア"))
                .body("[0].'translations'.'it'", containsString("Guinea Equatoriale"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_227_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/241")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Gabon"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ga"))
                .body("[0].'alpha2Code'", containsString("GA"))
                .body("[0].'alpha3Code'", containsString("GAB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("241"))
                .body("[0].'capital'", containsString("Libreville"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("GA", "Gabonese Republic", "République Gabonaise"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(1725000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-1.0))
                .body("[0].'latlng'[1]", numberMatches(11.75))
                .body("[0].'demonym'", containsString("Gabonese"))
                .body("[0].'area'", numberMatches(267668.0))
                .body("[0].'gini'", numberMatches(41.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("CMR", "COG", "GNQ"))
                .body("[0].'nativeName'", containsString("Gabon"))
                .body("[0].'numericCode'", containsString("266"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XAF"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Gabun"))
                .body("[0].'translations'.'es'", containsString("Gabón"))
                .body("[0].'translations'.'fr'", containsString("Gabon"))
                .body("[0].'translations'.'ja'", containsString("ガボン"))
                .body("[0].'translations'.'it'", containsString("Gabon"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_228_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/castries")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Saint Lucia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".lc"))
                .body("[0].'alpha2Code'", containsString("LC"))
                .body("[0].'alpha3Code'", containsString("LCA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Castries"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("LC"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(185000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(13.88333333))
                .body("[0].'latlng'[1]", numberMatches(-60.96666666))
                .body("[0].'demonym'", containsString("Saint Lucian"))
                .body("[0].'area'", numberMatches(616.0))
                .body("[0].'gini'", numberMatches(42.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Saint Lucia"))
                .body("[0].'numericCode'", containsString("662"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XCD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Saint Lucia"))
                .body("[0].'translations'.'es'", containsString("Santa Lucía"))
                .body("[0].'translations'.'fr'", containsString("Saint-Lucie"))
                .body("[0].'translations'.'ja'", containsString("セントルシア"))
                .body("[0].'translations'.'it'", containsString("Santa Lucia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_229_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/cayenne")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("French Guiana"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gf"))
                .body("[0].'alpha2Code'", containsString("GF"))
                .body("[0].'alpha3Code'", containsString("GUF"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("594"))
                .body("[0].'capital'", containsString("Cayenne"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("GF", "Guiana", "Guyane"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(239648.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(4.0))
                .body("[0].'latlng'[1]", numberMatches(-53.0))
                .body("[0].'demonym'", containsString(""))
                .body("[0].'area'", nullValue())
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-03:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("BRA", "SUR"))
                .body("[0].'nativeName'", containsString("Guyane française"))
                .body("[0].'numericCode'", containsString("254"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Französisch Guyana"))
                .body("[0].'translations'.'es'", containsString("Guayana Francesa"))
                .body("[0].'translations'.'fr'", containsString("Guayane"))
                .body("[0].'translations'.'ja'", containsString("フランス領ギアナ"))
                .body("[0].'translations'.'it'", containsString("Guyana francese"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_230_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/northern%20america")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(6))
                .body("[0].'name'", containsString("Bermuda"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bm"))
                .body("[0].'alpha2Code'", containsString("BM"))
                .body("[0].'alpha3Code'", containsString("BMU"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Hamilton"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("BM", "The Islands of Bermuda", "The Bermudas", "Somers Isles"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Northern America"))
                .body("[0].'population'", numberMatches(64237.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(32.33333333))
                .body("[0].'latlng'[1]", numberMatches(-64.75))
                .body("[0].'demonym'", containsString("Bermudian"))
                .body("[0].'area'", numberMatches(54.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Bermuda"))
                .body("[0].'numericCode'", containsString("060"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BMD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Bermuda"))
                .body("[0].'translations'.'es'", containsString("Bermudas"))
                .body("[0].'translations'.'fr'", containsString("Bermudes"))
                .body("[0].'translations'.'ja'", containsString("バミューダ"))
                .body("[0].'translations'.'it'", containsString("Bermuda"))
                .body("[0].'relevance'", containsString("0.5"))
                .body("[1].'name'", containsString("United States Minor Outlying Islands"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".us"))
                .body("[1].'alpha2Code'", containsString("UM"))
                .body("[1].'alpha3Code'", containsString("UMI"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("1"))
                .body("[1].'capital'", containsString(""))
                .body("[1].'altSpellings'.size()", equalTo(1))
                .body("[1].'altSpellings'", hasItems("UM"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("Northern America"))
                .body("[1].'population'", numberMatches(300.0))
                .body("[1].'latlng'.size()", equalTo(0))
                .body("[1].'demonym'", containsString("American"))
                .body("[1].'area'", nullValue())
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(3))
                .body("[1].'timezones'", hasItems("UTC-11:00", "UTC-10:00", "UTC+12:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("United States Minor Outlying Islands"))
                .body("[1].'numericCode'", containsString("581"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("USD"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("en"))
                .body("[1].'translations'.'de'", containsString("Kleinere Inselbesitzungen der Vereinigten Staaten"))
                .body("[1].'translations'.'es'", containsString("Islas Ultramarinas Menores de Estados Unidos"))
                .body("[1].'translations'.'fr'", containsString("Îles mineures éloignées des États-Unis"))
                .body("[1].'translations'.'ja'", containsString("合衆国領有小離島"))
                .body("[1].'translations'.'it'", containsString("Isole minori esterne degli Stati Uniti d'America"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Canada"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".ca"))
                .body("[2].'alpha2Code'", containsString("CA"))
                .body("[2].'alpha3Code'", containsString("CAN"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("1"))
                .body("[2].'capital'", containsString("Ottawa"))
                .body("[2].'altSpellings'.size()", equalTo(1))
                .body("[2].'altSpellings'", hasItems("CA"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("Northern America"))
                .body("[2].'population'", numberMatches(3.57496E7))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(60.0))
                .body("[2].'latlng'[1]", numberMatches(-95.0))
                .body("[2].'demonym'", containsString("Canadian"))
                .body("[2].'area'", numberMatches(9984670.0))
                .body("[2].'gini'", numberMatches(32.6))
                .body("[2].'timezones'.size()", equalTo(6))
                .body("[2].'timezones'", hasItems("UTC-08:00", "UTC-07:00", "UTC-06:00", "UTC-05:00", "UTC-04:00", "UTC-03:30"))
                .body("[2].'borders'.size()", equalTo(1))
                .body("[2].'borders'", hasItems("USA"))
                .body("[2].'nativeName'", containsString("Canada"))
                .body("[2].'numericCode'", containsString("124"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("CAD"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'", hasItems("en", "fr"))
                .body("[2].'translations'.'de'", containsString("Kanada"))
                .body("[2].'translations'.'es'", containsString("Canadá"))
                .body("[2].'translations'.'fr'", containsString("Canada"))
                .body("[2].'translations'.'ja'", containsString("カナダ"))
                .body("[2].'translations'.'it'", containsString("Canada"))
                .body("[2].'relevance'", containsString("2"))
                ; // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_231_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/korsou?" + 
                    "fields=alpha2Code&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha2Code'", containsString("CW"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_232_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/kiribati?" + 
                    "fields=alpha2Code&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha2Code'", containsString("KI"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_233_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/slovak?fields=_EM_5479_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_234_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/managua?fields=_EM_5312_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_235_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/63?fields=topLevelDomain")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ph"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_236_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/luxembourger?fields=callingCodes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("352"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_237_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/northern%20europe")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(16))
                .body("[0].'name'", containsString("Åland Islands"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ax"))
                .body("[0].'alpha2Code'", containsString("AX"))
                .body("[0].'alpha3Code'", containsString("ALA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("358"))
                .body("[0].'capital'", containsString("Mariehamn"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AX", "Aaland", "Aland", "Ahvenanmaa"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(28875.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(60.116667))
                .body("[0].'latlng'[1]", numberMatches(19.9))
                .body("[0].'demonym'", containsString("Ålandish"))
                .body("[0].'area'", numberMatches(1580.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Åland"))
                .body("[0].'numericCode'", containsString("248"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("sv"))
                .body("[0].'translations'.'de'", containsString("Åland"))
                .body("[0].'translations'.'es'", containsString("Alandia"))
                .body("[0].'translations'.'fr'", containsString("Åland"))
                .body("[0].'translations'.'ja'", containsString("オーランド諸島"))
                .body("[0].'translations'.'it'", containsString("Isole Aland"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Denmark"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".dk"))
                .body("[1].'alpha2Code'", containsString("DK"))
                .body("[1].'alpha3Code'", containsString("DNK"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("45"))
                .body("[1].'capital'", containsString("Copenhagen"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("DK", "Danmark", "Kingdom of Denmark", "Kongeriget Danmark"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Northern Europe"))
                .body("[1].'population'", numberMatches(5678348.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(56.0))
                .body("[1].'latlng'[1]", numberMatches(10.0))
                .body("[1].'demonym'", containsString("Danish"))
                .body("[1].'area'", numberMatches(43094.0))
                .body("[1].'gini'", numberMatches(24.0))
                .body("[1].'timezones'.size()", equalTo(5))
                .body("[1].'timezones'", hasItems("UTC-04:00", "UTC-03:00", "UTC-01:00", "UTC", "UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(1))
                .body("[1].'borders'", hasItems("DEU"))
                .body("[1].'nativeName'", containsString("Danmark"))
                .body("[1].'numericCode'", containsString("208"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("DKK"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("da"))
                .body("[1].'translations'.'de'", containsString("Dänemark"))
                .body("[1].'translations'.'es'", containsString("Dinamarca"))
                .body("[1].'translations'.'fr'", containsString("Danemark"))
                .body("[1].'translations'.'ja'", containsString("デンマーク"))
                .body("[1].'translations'.'it'", containsString("Danimarca"))
                .body("[1].'relevance'", containsString("1.5"))
                .body("[2].'name'", containsString("Estonia"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".ee"))
                .body("[2].'alpha2Code'", containsString("EE"))
                .body("[2].'alpha3Code'", containsString("EST"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("372"))
                .body("[2].'capital'", containsString("Tallinn"))
                .body("[2].'altSpellings'.size()", equalTo(4))
                .body("[2].'altSpellings'", hasItems("EE", "Eesti", "Republic of Estonia", "Eesti Vabariik"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Northern Europe"))
                .body("[2].'population'", numberMatches(1313271.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(59.0))
                .body("[2].'latlng'[1]", numberMatches(26.0))
                .body("[2].'demonym'", containsString("Estonian"))
                .body("[2].'area'", numberMatches(45227.0))
                .body("[2].'gini'", numberMatches(36.0))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+02:00"))
                .body("[2].'borders'.size()", equalTo(2))
                .body("[2].'borders'", hasItems("LVA", "RUS"))
                .body("[2].'nativeName'", containsString("Eesti"))
                .body("[2].'numericCode'", containsString("233"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("EUR"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("et"))
                .body("[2].'translations'.'de'", containsString("Estland"))
                .body("[2].'translations'.'es'", containsString("Estonia"))
                .body("[2].'translations'.'fr'", containsString("Estonie"))
                .body("[2].'translations'.'ja'", containsString("エストニア"))
                .body("[2].'translations'.'it'", containsString("Estonia"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 13 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_238_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/92?fields=capital")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'capital'", containsString("Islamabad"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_239_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/roseau?fields=STjVb6kQ8vo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_240_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/675")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Papua New Guinea"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pg"))
                .body("[0].'alpha2Code'", containsString("PG"))
                .body("[0].'alpha3Code'", containsString("PNG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("675"))
                .body("[0].'capital'", containsString("Port Moresby"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("PG", "Independent State of Papua New Guinea", "Independen Stet bilong Papua Niugini"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Melanesia"))
                .body("[0].'population'", numberMatches(7398500.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-6.0))
                .body("[0].'latlng'[1]", numberMatches(147.0))
                .body("[0].'demonym'", containsString("Papua New Guinean"))
                .body("[0].'area'", numberMatches(462840.0))
                .body("[0].'gini'", numberMatches(50.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+10:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("IDN"))
                .body("[0].'nativeName'", containsString("Papua Niugini"))
                .body("[0].'numericCode'", containsString("598"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("PGK"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Papua-Neuguinea"))
                .body("[0].'translations'.'es'", containsString("Papúa Nueva Guinea"))
                .body("[0].'translations'.'fr'", containsString("Papouasie-Nouvelle-Guinée"))
                .body("[0].'translations'.'ja'", containsString("パプアニューギニア"))
                .body("[0].'translations'.'it'", containsString("Papua Nuova Guinea"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_241_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/republic%20of%20panama?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Panama"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pa"))
                .body("[0].'alpha2Code'", containsString("PA"))
                .body("[0].'alpha3Code'", containsString("PAN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("507"))
                .body("[0].'capital'", containsString("Panama City"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("PA", "Republic of Panama", "República de Panamá"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Central America"))
                .body("[0].'population'", numberMatches(3764166.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(9.0))
                .body("[0].'latlng'[1]", numberMatches(-80.0))
                .body("[0].'demonym'", containsString("Panamanian"))
                .body("[0].'area'", numberMatches(75417.0))
                .body("[0].'gini'", numberMatches(51.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-05:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("COL", "CRI"))
                .body("[0].'nativeName'", containsString("Panamá"))
                .body("[0].'numericCode'", containsString("591"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("PAB", "USD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("Panama"))
                .body("[0].'translations'.'es'", containsString("Panamá"))
                .body("[0].'translations'.'fr'", containsString("Panama"))
                .body("[0].'translations'.'ja'", containsString("パナマ"))
                .body("[0].'translations'.'it'", containsString("Panama"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_242_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/967")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Yemen"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ye"))
                .body("[0].'alpha2Code'", containsString("YE"))
                .body("[0].'alpha3Code'", containsString("YEM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("967"))
                .body("[0].'capital'", containsString("Sana'a"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("YE", "Yemeni Republic", "al-Jumhūriyyah al-Yamaniyyah"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(2.5956E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(15.0))
                .body("[0].'latlng'[1]", numberMatches(48.0))
                .body("[0].'demonym'", containsString("Yemeni"))
                .body("[0].'area'", numberMatches(527968.0))
                .body("[0].'gini'", numberMatches(37.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("OMN", "SAU"))
                .body("[0].'nativeName'", containsString("اليَمَن"))
                .body("[0].'numericCode'", containsString("887"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("YER"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Jemen"))
                .body("[0].'translations'.'es'", containsString("Yemen"))
                .body("[0].'translations'.'fr'", containsString("Yémen"))
                .body("[0].'translations'.'ja'", containsString("イエメン"))
                .body("[0].'translations'.'it'", containsString("Yemen"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_243_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/Northern%20Europe?fields=_EM_3944_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(16))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 13 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_244_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/224")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Guinea"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gn"))
                .body("[0].'alpha2Code'", containsString("GN"))
                .body("[0].'alpha3Code'", containsString("GIN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("224"))
                .body("[0].'capital'", containsString("Conakry"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("GN", "Republic of Guinea", "République de Guinée"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(1.0628972E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(11.0))
                .body("[0].'latlng'[1]", numberMatches(-10.0))
                .body("[0].'demonym'", containsString("Guinean"))
                .body("[0].'area'", numberMatches(245857.0))
                .body("[0].'gini'", numberMatches(39.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("CIV", "GNB", "LBR", "MLI", "SEN", "SLE"))
                .body("[0].'nativeName'", containsString("Guinée"))
                .body("[0].'numericCode'", containsString("324"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("GNF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "ff"))
                .body("[0].'translations'.'de'", containsString("Guinea"))
                .body("[0].'translations'.'es'", containsString("Guinea"))
                .body("[0].'translations'.'fr'", containsString("Guinée"))
                .body("[0].'translations'.'ja'", containsString("ギニア"))
                .body("[0].'translations'.'it'", containsString("Guinea"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_245_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/tuvalu?" + 
                    "fields=qd2qK2_AUkKcqOA&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_246_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/riyadh?fields=ejFD9fNx1zWkZb")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_247_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/middle%20africa")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(10))
                .body("[0].'name'", containsString("Angola"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ao"))
                .body("[0].'alpha2Code'", containsString("AO"))
                .body("[0].'alpha3Code'", containsString("AGO"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("244"))
                .body("[0].'capital'", containsString("Luanda"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("AO", "República de Angola", "ʁɛpublika de an'ɡɔla"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(2.4383301E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-12.5))
                .body("[0].'latlng'[1]", numberMatches(18.5))
                .body("[0].'demonym'", containsString("Angolan"))
                .body("[0].'area'", numberMatches(1246700.0))
                .body("[0].'gini'", numberMatches(58.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("COG", "COD", "ZMB", "NAM"))
                .body("[0].'nativeName'", containsString("Angola"))
                .body("[0].'numericCode'", containsString("024"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AOA"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("pt"))
                .body("[0].'translations'.'de'", containsString("Angola"))
                .body("[0].'translations'.'es'", containsString("Angola"))
                .body("[0].'translations'.'fr'", containsString("Angola"))
                .body("[0].'translations'.'ja'", containsString("アンゴラ"))
                .body("[0].'translations'.'it'", containsString("Angola"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Cameroon"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".cm"))
                .body("[1].'alpha2Code'", containsString("CM"))
                .body("[1].'alpha3Code'", containsString("CMR"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("237"))
                .body("[1].'capital'", containsString("Yaoundé"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("CM", "Republic of Cameroon", "République du Cameroun"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Middle Africa"))
                .body("[1].'population'", numberMatches(2.3344E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(6.0))
                .body("[1].'latlng'[1]", numberMatches(12.0))
                .body("[1].'demonym'", containsString("Cameroonian"))
                .body("[1].'area'", numberMatches(475442.0))
                .body("[1].'gini'", numberMatches(38.9))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(6))
                .body("[1].'borders'", hasItems("CAF", "TCD", "COG", "GNQ", "GAB", "NGA"))
                .body("[1].'nativeName'", containsString("Cameroon"))
                .body("[1].'numericCode'", containsString("120"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("XAF"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("en", "fr"))
                .body("[1].'translations'.'de'", containsString("Kamerun"))
                .body("[1].'translations'.'es'", containsString("Camerún"))
                .body("[1].'translations'.'fr'", containsString("Cameroun"))
                .body("[1].'translations'.'ja'", containsString("カメルーン"))
                .body("[1].'translations'.'it'", containsString("Camerun"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Central African Republic"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".cf"))
                .body("[2].'alpha2Code'", containsString("CF"))
                .body("[2].'alpha3Code'", containsString("CAF"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("236"))
                .body("[2].'capital'", containsString("Bangui"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("CF", "Central African Republic", "République centrafricaine"))
                .body("[2].'region'", containsString("Africa"))
                .body("[2].'subregion'", containsString("Middle Africa"))
                .body("[2].'population'", numberMatches(4900000.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(7.0))
                .body("[2].'latlng'[1]", numberMatches(21.0))
                .body("[2].'demonym'", containsString("Central African"))
                .body("[2].'area'", numberMatches(622984.0))
                .body("[2].'gini'", numberMatches(56.3))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(6))
                .body("[2].'borders'", hasItems("CMR", "TCD", "COD", "COG", "SSD", "SDN"))
                .body("[2].'nativeName'", containsString("Ködörösêse tî Bêafrîka"))
                .body("[2].'numericCode'", containsString("140"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("XAF"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'", hasItems("fr", "sg"))
                .body("[2].'translations'.'de'", containsString("Zentralafrikanische Republik"))
                .body("[2].'translations'.'es'", containsString("República Centroafricana"))
                .body("[2].'translations'.'fr'", containsString("République centrafricaine"))
                .body("[2].'translations'.'ja'", containsString("中央アフリカ共和国"))
                .body("[2].'translations'.'it'", containsString("Repubblica Centrafricana"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_248_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/porto-novo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Benin"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bj"))
                .body("[0].'alpha2Code'", containsString("BJ"))
                .body("[0].'alpha3Code'", containsString("BEN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("229"))
                .body("[0].'capital'", containsString("Porto-Novo"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("BJ", "Republic of Benin", "République du Bénin"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(1.0315244E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(9.5))
                .body("[0].'latlng'[1]", numberMatches(2.25))
                .body("[0].'demonym'", containsString("Beninese"))
                .body("[0].'area'", numberMatches(112622.0))
                .body("[0].'gini'", numberMatches(38.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("BFA", "NER", "NGA", "TGO"))
                .body("[0].'nativeName'", containsString("Bénin"))
                .body("[0].'numericCode'", containsString("204"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XOF"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Benin"))
                .body("[0].'translations'.'es'", containsString("Benín"))
                .body("[0].'translations'.'fr'", containsString("Bénin"))
                .body("[0].'translations'.'ja'", containsString("ベナン"))
                .body("[0].'translations'.'it'", containsString("Benin"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_249_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/prague")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Czech Republic"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cz"))
                .body("[0].'alpha2Code'", containsString("CZ"))
                .body("[0].'alpha3Code'", containsString("CZE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("420"))
                .body("[0].'capital'", containsString("Prague"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("CZ", "Česká republika", "Česko"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(1.0537818E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(49.75))
                .body("[0].'latlng'[1]", numberMatches(15.5))
                .body("[0].'demonym'", containsString("Czech"))
                .body("[0].'area'", numberMatches(78865.0))
                .body("[0].'gini'", numberMatches(26.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("AUT", "DEU", "POL", "SVK"))
                .body("[0].'nativeName'", containsString("Česká republika"))
                .body("[0].'numericCode'", containsString("203"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("CZK"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("cs", "sk"))
                .body("[0].'translations'.'de'", containsString("Tschechische Republik"))
                .body("[0].'translations'.'es'", containsString("República Checa"))
                .body("[0].'translations'.'fr'", containsString("République tchèque"))
                .body("[0].'translations'.'ja'", containsString("チェコ"))
                .body("[0].'translations'.'it'", containsString("Repubblica Ceca"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_250_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/mexico?" + 
                    "fields=A8PIA5SQ7TgpWh&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_251_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/eritrean?fields=capital")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'capital'", containsString("Asmara"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_252_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/mx?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Mexico"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mx"))
                .body("[0].'alpha2Code'", containsString("MX"))
                .body("[0].'alpha3Code'", containsString("MEX"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("52"))
                .body("[0].'capital'", containsString("Mexico City"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("MX", "Mexicanos", "United Mexican States", "Estados Unidos Mexicanos"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Central America"))
                .body("[0].'population'", numberMatches(1.2174E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(23.0))
                .body("[0].'latlng'[1]", numberMatches(-102.0))
                .body("[0].'demonym'", containsString("Mexican"))
                .body("[0].'area'", numberMatches(1964375.0))
                .body("[0].'gini'", numberMatches(47.0))
                .body("[0].'timezones'.size()", equalTo(3))
                .body("[0].'timezones'", hasItems("UTC-08:00", "UTC-07:00", "UTC-06:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("BLZ", "GTM", "USA"))
                .body("[0].'nativeName'", containsString("México"))
                .body("[0].'numericCode'", containsString("484"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MXN"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("Mexiko"))
                .body("[0].'translations'.'es'", containsString("México"))
                .body("[0].'translations'.'fr'", containsString("Mexique"))
                .body("[0].'translations'.'ja'", containsString("メキシコ"))
                .body("[0].'translations'.'it'", containsString("Messico"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_253_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/baku")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Azerbaijan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".az"))
                .body("[0].'alpha2Code'", containsString("AZ"))
                .body("[0].'alpha3Code'", containsString("AZE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("994"))
                .body("[0].'capital'", containsString("Baku"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("AZ", "Republic of Azerbaijan", "Azərbaycan Respublikası"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(9636300.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(40.5))
                .body("[0].'latlng'[1]", numberMatches(47.5))
                .body("[0].'demonym'", containsString("Azerbaijani"))
                .body("[0].'area'", numberMatches(86600.0))
                .body("[0].'gini'", numberMatches(33.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("ARM", "GEO", "IRN", "RUS", "TUR"))
                .body("[0].'nativeName'", containsString("Azərbaycan"))
                .body("[0].'numericCode'", containsString("031"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AZN"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("az"))
                .body("[0].'translations'.'de'", containsString("Aserbaidschan"))
                .body("[0].'translations'.'es'", containsString("Azerbaiyán"))
                .body("[0].'translations'.'fr'", containsString("Azerbaïdjan"))
                .body("[0].'translations'.'ja'", containsString("アゼルバイジャン"))
                .body("[0].'translations'.'it'", containsString("Azerbaijan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_254_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/ar")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(25))
                .body("[0].'name'", containsString("Algeria"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".dz"))
                .body("[0].'alpha2Code'", containsString("DZ"))
                .body("[0].'alpha3Code'", containsString("DZA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("213"))
                .body("[0].'capital'", containsString("Algiers"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("DZ", "Dzayer", "Algérie"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Northern Africa"))
                .body("[0].'population'", numberMatches(3.95E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(28.0))
                .body("[0].'latlng'[1]", numberMatches(3.0))
                .body("[0].'demonym'", containsString("Algerian"))
                .body("[0].'area'", numberMatches(2381741.0))
                .body("[0].'gini'", numberMatches(35.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("TUN", "LBY", "NER", "ESH", "MRT", "MLI", "MAR"))
                .body("[0].'nativeName'", containsString("الجزائر"))
                .body("[0].'numericCode'", containsString("012"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("DZD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Algerien"))
                .body("[0].'translations'.'es'", containsString("Argelia"))
                .body("[0].'translations'.'fr'", containsString("Algérie"))
                .body("[0].'translations'.'ja'", containsString("アルジェリア"))
                .body("[0].'translations'.'it'", containsString("Algeria"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Bahrain"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".bh"))
                .body("[1].'alpha2Code'", containsString("BH"))
                .body("[1].'alpha3Code'", containsString("BHR"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("973"))
                .body("[1].'capital'", containsString("Manama"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("BH", "Kingdom of Bahrain", "Mamlakat al-Baḥrayn"))
                .body("[1].'region'", containsString("Asia"))
                .body("[1].'subregion'", containsString("Western Asia"))
                .body("[1].'population'", numberMatches(1359800.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(26.0))
                .body("[1].'latlng'[1]", numberMatches(50.55))
                .body("[1].'demonym'", containsString("Bahraini"))
                .body("[1].'area'", numberMatches(765.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+03:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("‏البحرين"))
                .body("[1].'numericCode'", containsString("048"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("BHD"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("ar"))
                .body("[1].'translations'.'de'", containsString("Bahrain"))
                .body("[1].'translations'.'es'", containsString("Bahrein"))
                .body("[1].'translations'.'fr'", containsString("Bahreïn"))
                .body("[1].'translations'.'ja'", containsString("バーレーン"))
                .body("[1].'translations'.'it'", containsString("Bahrein"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Chad"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".td"))
                .body("[2].'alpha2Code'", containsString("TD"))
                .body("[2].'alpha3Code'", containsString("TCD"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("235"))
                .body("[2].'capital'", containsString("N'Djamena"))
                .body("[2].'altSpellings'.size()", equalTo(4))
                .body("[2].'altSpellings'", hasItems("TD", "Tchad", "Republic of Chad", "République du Tchad"))
                .body("[2].'region'", containsString("Africa"))
                .body("[2].'subregion'", containsString("Middle Africa"))
                .body("[2].'population'", numberMatches(1.4037E7))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(15.0))
                .body("[2].'latlng'[1]", numberMatches(19.0))
                .body("[2].'demonym'", containsString("Chadian"))
                .body("[2].'area'", numberMatches(1284000.0))
                .body("[2].'gini'", numberMatches(39.8))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(6))
                .body("[2].'borders'", hasItems("CMR", "CAF", "LBY", "NER", "NGA", "SSD"))
                .body("[2].'nativeName'", containsString("Tchad"))
                .body("[2].'numericCode'", containsString("148"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("XAF"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'", hasItems("fr", "ar"))
                .body("[2].'translations'.'de'", containsString("Tschad"))
                .body("[2].'translations'.'es'", containsString("Chad"))
                .body("[2].'translations'.'fr'", containsString("Tchad"))
                .body("[2].'translations'.'ja'", containsString("チャド"))
                .body("[2].'translations'.'it'", containsString("Ciad"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 22 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_255_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/Oceania?fields=_EM_4404_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(27))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 24 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_256_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/zm?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Zambia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".zm"))
                .body("[0].'alpha2Code'", containsString("ZM"))
                .body("[0].'alpha3Code'", containsString("ZMB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("260"))
                .body("[0].'capital'", containsString("Lusaka"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("ZM", "Republic of Zambia"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(1.5473905E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-15.0))
                .body("[0].'latlng'[1]", numberMatches(30.0))
                .body("[0].'demonym'", containsString("Zambian"))
                .body("[0].'area'", numberMatches(752612.0))
                .body("[0].'gini'", numberMatches(54.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(8))
                .body("[0].'borders'", hasItems("AGO", "BWA", "COD", "MWI", "MOZ", "NAM", "TZA", "ZWE"))
                .body("[0].'nativeName'", containsString("Zambia"))
                .body("[0].'numericCode'", containsString("894"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ZMW"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Sambia"))
                .body("[0].'translations'.'es'", containsString("Zambia"))
                .body("[0].'translations'.'fr'", containsString("Zambie"))
                .body("[0].'translations'.'ja'", containsString("ザンビア"))
                .body("[0].'translations'.'it'", containsString("Zambia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_257_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/zw?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Zimbabwe"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".zw"))
                .body("[0].'alpha2Code'", containsString("ZW"))
                .body("[0].'alpha3Code'", containsString("ZWE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("263"))
                .body("[0].'capital'", containsString("Harare"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("ZW", "Republic of Zimbabwe"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(1.3061239E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-20.0))
                .body("[0].'latlng'[1]", numberMatches(30.0))
                .body("[0].'demonym'", containsString("Zimbabwean"))
                .body("[0].'area'", numberMatches(390757.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("BWA", "MOZ", "ZAF", "ZMB"))
                .body("[0].'nativeName'", containsString("Zimbabwe"))
                .body("[0].'numericCode'", containsString("716"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("en", "sn", "nd"))
                .body("[0].'translations'.'de'", containsString("Simbabwe"))
                .body("[0].'translations'.'es'", containsString("Zimbabue"))
                .body("[0].'translations'.'fr'", containsString("Zimbabwe"))
                .body("[0].'translations'.'ja'", containsString("ジンバブエ"))
                .body("[0].'translations'.'it'", containsString("Zimbabwe"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_258_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/242")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Republic of the Congo"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cg"))
                .body("[0].'alpha2Code'", containsString("CG"))
                .body("[0].'alpha3Code'", containsString("COG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("242"))
                .body("[0].'capital'", containsString("Brazzaville"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("CG", "Congo-Brazzaville"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(4620000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-1.0))
                .body("[0].'latlng'[1]", numberMatches(15.0))
                .body("[0].'demonym'", containsString("Congolese"))
                .body("[0].'area'", numberMatches(342000.0))
                .body("[0].'gini'", numberMatches(47.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("AGO", "CMR", "CAF", "COD", "GAB"))
                .body("[0].'nativeName'", containsString("République du Congo"))
                .body("[0].'numericCode'", containsString("178"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XAF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "ln"))
                .body("[0].'translations'.'de'", containsString("Kongo"))
                .body("[0].'translations'.'es'", containsString("Congo"))
                .body("[0].'translations'.'fr'", containsString("Congo"))
                .body("[0].'translations'.'ja'", containsString("コンゴ共和国"))
                .body("[0].'translations'.'it'", containsString("Congo"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_259_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/243")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Democratic Republic of the Congo"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cd"))
                .body("[0].'alpha2Code'", containsString("CD"))
                .body("[0].'alpha3Code'", containsString("COD"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("243"))
                .body("[0].'capital'", containsString("Kinshasa"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("CD", "DR Congo", "Congo-Kinshasa", "DRC"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(7.7267E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(0.0))
                .body("[0].'latlng'[1]", numberMatches(25.0))
                .body("[0].'demonym'", containsString("Congolese"))
                .body("[0].'area'", numberMatches(2344858.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC+01:00", "UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(9))
                .body("[0].'borders'", hasItems("AGO", "BDI", "CAF", "COG", "RWA", "SSD", "TZA", "UGA", "ZMB"))
                .body("[0].'nativeName'", containsString("République démocratique du Congo"))
                .body("[0].'numericCode'", containsString("180"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("CDF"))
                .body("[0].'languages'.size()", equalTo(5))
                .body("[0].'languages'", hasItems("fr", "ln", "kg", "sw", "lu"))
                .body("[0].'translations'.'de'", containsString("Kongo (Dem. Rep.)"))
                .body("[0].'translations'.'es'", containsString("Congo (Rep. Dem.)"))
                .body("[0].'translations'.'fr'", containsString("Congo (Rép. dém.)"))
                .body("[0].'translations'.'ja'", containsString("コンゴ民主共和国"))
                .body("[0].'translations'.'it'", containsString("Congo (Rep. Dem.)"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_260_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/850?fields=qil")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_261_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/central%20asia")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'name'", containsString("Kazakhstan"))
                .body("[0].'topLevelDomain'.size()", equalTo(2))
                .body("[0].'topLevelDomain'", hasItems(".kz", ".қаз"))
                .body("[0].'alpha2Code'", containsString("KZ"))
                .body("[0].'alpha3Code'", containsString("KAZ"))
                .body("[0].'callingCodes'.size()", equalTo(2))
                .body("[0].'callingCodes'", hasItems("76", "77"))
                .body("[0].'capital'", containsString("Astana"))
                .body("[0].'altSpellings'.size()", equalTo(8))
                .body("[0].'altSpellings'", hasItems("KZ", "Qazaqstan", "Казахстан", "Republic of Kazakhstan", "Қазақстан Республикасы", "Qazaqstan Respublïkası", "Республика Казахстан", "Respublika Kazakhstan"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Central Asia"))
                .body("[0].'population'", numberMatches(1.75412E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(48.0))
                .body("[0].'latlng'[1]", numberMatches(68.0))
                .body("[0].'demonym'", containsString("Kazakhstani"))
                .body("[0].'area'", numberMatches(2724900.0))
                .body("[0].'gini'", numberMatches(29.0))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC+05:00", "UTC+06:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("CHN", "KGZ", "RUS", "TKM", "UZB"))
                .body("[0].'nativeName'", containsString("Қазақстан"))
                .body("[0].'numericCode'", containsString("398"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("KZT"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("kk", "ru"))
                .body("[0].'translations'.'de'", containsString("Kasachstan"))
                .body("[0].'translations'.'es'", containsString("Kazajistán"))
                .body("[0].'translations'.'fr'", containsString("Kazakhstan"))
                .body("[0].'translations'.'ja'", containsString("カザフスタン"))
                .body("[0].'translations'.'it'", containsString("Kazakistan"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Kyrgyzstan"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".kg"))
                .body("[1].'alpha2Code'", containsString("KG"))
                .body("[1].'alpha3Code'", containsString("KGZ"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("996"))
                .body("[1].'capital'", containsString("Bishkek"))
                .body("[1].'altSpellings'.size()", equalTo(5))
                .body("[1].'altSpellings'", hasItems("KG", "Киргизия", "Kyrgyz Republic", "Кыргыз Республикасы", "Kyrgyz Respublikasy"))
                .body("[1].'region'", containsString("Asia"))
                .body("[1].'subregion'", containsString("Central Asia"))
                .body("[1].'population'", numberMatches(5944400.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(41.0))
                .body("[1].'latlng'[1]", numberMatches(75.0))
                .body("[1].'demonym'", containsString("Kirghiz"))
                .body("[1].'area'", numberMatches(199951.0))
                .body("[1].'gini'", numberMatches(36.2))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+06:00"))
                .body("[1].'borders'.size()", equalTo(4))
                .body("[1].'borders'", hasItems("CHN", "KAZ", "TJK", "UZB"))
                .body("[1].'nativeName'", containsString("Кыргызстан"))
                .body("[1].'numericCode'", containsString("417"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("KGS"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("ky", "ru"))
                .body("[1].'translations'.'de'", containsString("Kirgisistan"))
                .body("[1].'translations'.'es'", containsString("Kirguizistán"))
                .body("[1].'translations'.'fr'", containsString("Kirghizistan"))
                .body("[1].'translations'.'ja'", containsString("キルギス"))
                .body("[1].'translations'.'it'", containsString("Kirghizistan"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Tajikistan"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".tj"))
                .body("[2].'alpha2Code'", containsString("TJ"))
                .body("[2].'alpha3Code'", containsString("TJK"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("992"))
                .body("[2].'capital'", containsString("Dushanbe"))
                .body("[2].'altSpellings'.size()", equalTo(5))
                .body("[2].'altSpellings'", hasItems("TJ", "Toçikiston", "Republic of Tajikistan", "Ҷумҳурии Тоҷикистон", "Çumhuriyi Toçikiston"))
                .body("[2].'region'", containsString("Asia"))
                .body("[2].'subregion'", containsString("Central Asia"))
                .body("[2].'population'", numberMatches(8354000.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(39.0))
                .body("[2].'latlng'[1]", numberMatches(71.0))
                .body("[2].'demonym'", containsString("Tadzhik"))
                .body("[2].'area'", numberMatches(143100.0))
                .body("[2].'gini'", numberMatches(30.8))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+05:00"))
                .body("[2].'borders'.size()", equalTo(4))
                .body("[2].'borders'", hasItems("AFG", "CHN", "KGZ", "UZB"))
                .body("[2].'nativeName'", containsString("Тоҷикистон"))
                .body("[2].'numericCode'", containsString("762"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("TJS"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'", hasItems("tg", "ru"))
                .body("[2].'translations'.'de'", containsString("Tadschikistan"))
                .body("[2].'translations'.'es'", containsString("Tayikistán"))
                .body("[2].'translations'.'fr'", containsString("Tadjikistan"))
                .body("[2].'translations'.'ja'", containsString("タジキスタン"))
                .body("[2].'translations'.'it'", containsString("Tagikistan"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_262_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/juba?fields=_EM_7766_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_263_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/fiji?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Fiji"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".fj"))
                .body("[0].'alpha2Code'", containsString("FJ"))
                .body("[0].'alpha3Code'", containsString("FJI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("679"))
                .body("[0].'capital'", containsString("Suva"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("FJ", "Viti", "Republic of Fiji", "Matanitu ko Viti", "Fijī Gaṇarājya"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Melanesia"))
                .body("[0].'population'", numberMatches(859178.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-18.0))
                .body("[0].'latlng'[1]", numberMatches(175.0))
                .body("[0].'demonym'", containsString("Fijian"))
                .body("[0].'area'", numberMatches(18272.0))
                .body("[0].'gini'", numberMatches(42.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Fiji"))
                .body("[0].'numericCode'", containsString("242"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("FJD"))
                .body("[0].'languages'.size()", equalTo(4))
                .body("[0].'languages'", hasItems("en", "fj", "hi", "ur"))
                .body("[0].'translations'.'de'", containsString("Fidschi"))
                .body("[0].'translations'.'es'", containsString("Fiyi"))
                .body("[0].'translations'.'fr'", containsString("Fidji"))
                .body("[0].'translations'.'ja'", containsString("フィジー"))
                .body("[0].'translations'.'it'", containsString("Figi"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_264_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/abuja?fields=Ud9")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_265_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/accra?fields=Ud9")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_266_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/albanian?fields=g3B")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_267_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/bs")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Bosnia and Herzegovina"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ba"))
                .body("[0].'alpha2Code'", containsString("BA"))
                .body("[0].'alpha3Code'", containsString("BIH"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("387"))
                .body("[0].'capital'", containsString("Sarajevo"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("BA", "Bosnia-Herzegovina", "Босна и Херцеговина"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(3791622.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(44.0))
                .body("[0].'latlng'[1]", numberMatches(18.0))
                .body("[0].'demonym'", containsString("Bosnian, Herzegovinian"))
                .body("[0].'area'", numberMatches(51209.0))
                .body("[0].'gini'", numberMatches(36.2))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("HRV", "MNE", "SRB"))
                .body("[0].'nativeName'", containsString("Bosna i Hercegovina"))
                .body("[0].'numericCode'", containsString("070"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BAM"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("bs", "hr", "sr"))
                .body("[0].'translations'.'de'", containsString("Bosnien und Herzegowina"))
                .body("[0].'translations'.'es'", containsString("Bosnia y Herzegovina"))
                .body("[0].'translations'.'fr'", containsString("Bosnie-Herzégovine"))
                .body("[0].'translations'.'ja'", containsString("ボスニア・ヘルツェゴビナ"))
                .body("[0].'translations'.'it'", containsString("Bosnia ed Erzegovina"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Montenegro"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".me"))
                .body("[1].'alpha2Code'", containsString("ME"))
                .body("[1].'alpha3Code'", containsString("MNE"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("382"))
                .body("[1].'capital'", containsString("Podgorica"))
                .body("[1].'altSpellings'.size()", equalTo(2))
                .body("[1].'altSpellings'", hasItems("ME", "Crna Gora"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Southern Europe"))
                .body("[1].'population'", numberMatches(621207.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(42.5))
                .body("[1].'latlng'[1]", numberMatches(19.3))
                .body("[1].'demonym'", containsString("Montenegrin"))
                .body("[1].'area'", numberMatches(13812.0))
                .body("[1].'gini'", numberMatches(30.0))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(5))
                .body("[1].'borders'", hasItems("ALB", "BIH", "HRV", "KOS", "SRB"))
                .body("[1].'nativeName'", containsString("Црна Гора"))
                .body("[1].'numericCode'", containsString("499"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EUR"))
                .body("[1].'languages'.size()", equalTo(4))
                .body("[1].'languages'", hasItems("sr", "bs", "sq", "hr"))
                .body("[1].'translations'.'de'", containsString("Montenegro"))
                .body("[1].'translations'.'es'", containsString("Montenegro"))
                .body("[1].'translations'.'fr'", containsString("Monténégro"))
                .body("[1].'translations'.'ja'", containsString("モンテネグロ"))
                .body("[1].'translations'.'it'", containsString("Montenegro"))
                .body("[1].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_268_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/ca")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Andorra"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ad"))
                .body("[0].'alpha2Code'", containsString("AD"))
                .body("[0].'alpha3Code'", containsString("AND"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("376"))
                .body("[0].'capital'", containsString("Andorra la Vella"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("AD", "Principality of Andorra", "Principat d'Andorra"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(76949.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(42.5))
                .body("[0].'latlng'[1]", numberMatches(1.5))
                .body("[0].'demonym'", containsString("Andorran"))
                .body("[0].'area'", numberMatches(468.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("FRA", "ESP"))
                .body("[0].'nativeName'", containsString("Andorra"))
                .body("[0].'numericCode'", containsString("020"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ca"))
                .body("[0].'translations'.'de'", containsString("Andorra"))
                .body("[0].'translations'.'es'", containsString("Andorra"))
                .body("[0].'translations'.'fr'", containsString("Andorre"))
                .body("[0].'translations'.'ja'", containsString("アンドラ"))
                .body("[0].'translations'.'it'", containsString("Andorra"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_269_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/ch")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Guam"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gu"))
                .body("[0].'alpha2Code'", containsString("GU"))
                .body("[0].'alpha3Code'", containsString("GUM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Hagåtña"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("GU", "Guåhån"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Micronesia"))
                .body("[0].'population'", numberMatches(159358.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(13.46666666))
                .body("[0].'latlng'[1]", numberMatches(144.78333333))
                .body("[0].'demonym'", containsString("Guamanian"))
                .body("[0].'area'", numberMatches(549.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+10:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Guam"))
                .body("[0].'numericCode'", containsString("316"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("en", "ch", "es"))
                .body("[0].'translations'.'de'", containsString("Guam"))
                .body("[0].'translations'.'es'", containsString("Guam"))
                .body("[0].'translations'.'fr'", containsString("Guam"))
                .body("[0].'translations'.'ja'", containsString("グアム"))
                .body("[0].'translations'.'it'", containsString("Guam"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Northern Mariana Islands"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".mp"))
                .body("[1].'alpha2Code'", containsString("MP"))
                .body("[1].'alpha3Code'", containsString("MNP"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("1"))
                .body("[1].'capital'", containsString("Saipan"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("MP", "Commonwealth of the Northern Mariana Islands", "Sankattan Siha Na Islas Mariånas"))
                .body("[1].'region'", containsString("Oceania"))
                .body("[1].'subregion'", containsString("Micronesia"))
                .body("[1].'population'", numberMatches(53883.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(15.2))
                .body("[1].'latlng'[1]", numberMatches(145.75))
                .body("[1].'demonym'", containsString("American"))
                .body("[1].'area'", numberMatches(464.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+10:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Northern Mariana Islands"))
                .body("[1].'numericCode'", containsString("580"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("USD"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("en", "ch"))
                .body("[1].'translations'.'de'", containsString("Nördliche Marianen"))
                .body("[1].'translations'.'es'", containsString("Islas Marianas del Norte"))
                .body("[1].'translations'.'fr'", containsString("Îles Mariannes du Nord"))
                .body("[1].'translations'.'ja'", containsString("北マリアナ諸島"))
                .body("[1].'translations'.'it'", containsString("Isole Marianne Settentrionali"))
                .body("[1].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_270_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/cs")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Czech Republic"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cz"))
                .body("[0].'alpha2Code'", containsString("CZ"))
                .body("[0].'alpha3Code'", containsString("CZE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("420"))
                .body("[0].'capital'", containsString("Prague"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("CZ", "Česká republika", "Česko"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(1.0537818E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(49.75))
                .body("[0].'latlng'[1]", numberMatches(15.5))
                .body("[0].'demonym'", containsString("Czech"))
                .body("[0].'area'", numberMatches(78865.0))
                .body("[0].'gini'", numberMatches(26.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("AUT", "DEU", "POL", "SVK"))
                .body("[0].'nativeName'", containsString("Česká republika"))
                .body("[0].'numericCode'", containsString("203"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("CZK"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("cs", "sk"))
                .body("[0].'translations'.'de'", containsString("Tschechische Republik"))
                .body("[0].'translations'.'es'", containsString("República Checa"))
                .body("[0].'translations'.'fr'", containsString("République tchèque"))
                .body("[0].'translations'.'ja'", containsString("チェコ"))
                .body("[0].'translations'.'it'", containsString("Repubblica Ceca"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_271_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/fi")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Finland"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".fi"))
                .body("[0].'alpha2Code'", containsString("FI"))
                .body("[0].'alpha3Code'", containsString("FIN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("358"))
                .body("[0].'capital'", containsString("Helsinki"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("FI", "Suomi", "Republic of Finland", "Suomen tasavalta", "Republiken Finland"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(5485215.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(64.0))
                .body("[0].'latlng'[1]", numberMatches(26.0))
                .body("[0].'demonym'", containsString("Finnish"))
                .body("[0].'area'", numberMatches(338424.0))
                .body("[0].'gini'", numberMatches(26.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("NOR", "SWE", "RUS"))
                .body("[0].'nativeName'", containsString("Suomi"))
                .body("[0].'numericCode'", containsString("246"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fi", "sv"))
                .body("[0].'translations'.'de'", containsString("Finnland"))
                .body("[0].'translations'.'es'", containsString("Finlandia"))
                .body("[0].'translations'.'fr'", containsString("Finlande"))
                .body("[0].'translations'.'ja'", containsString("フィンランド"))
                .body("[0].'translations'.'it'", containsString("Finlandia"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_272_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/republic%20of%20kazakhstan?" + 
                    "fields=QcaQJhUBQicoY&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_273_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/moscow?fields=region")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'region'", containsString("Europe"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_274_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/253")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Djibouti"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".dj"))
                .body("[0].'alpha2Code'", containsString("DJ"))
                .body("[0].'alpha3Code'", containsString("DJI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("253"))
                .body("[0].'capital'", containsString("Djibouti"))
                .body("[0].'altSpellings'.size()", equalTo(7))
                .body("[0].'altSpellings'", hasItems("DJ", "Jabuuti", "Gabuuti", "Republic of Djibouti", "République de Djibouti", "Gabuutih Ummuuno", "Jamhuuriyadda Jabuuti"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(888000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(11.5))
                .body("[0].'latlng'[1]", numberMatches(43.0))
                .body("[0].'demonym'", containsString("Djibouti"))
                .body("[0].'area'", numberMatches(23200.0))
                .body("[0].'gini'", numberMatches(40.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("ERI", "ETH", "SOM"))
                .body("[0].'nativeName'", containsString("Djibouti"))
                .body("[0].'numericCode'", containsString("262"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("DJF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "ar"))
                .body("[0].'translations'.'de'", containsString("Dschibuti"))
                .body("[0].'translations'.'es'", containsString("Yibuti"))
                .body("[0].'translations'.'fr'", containsString("Djibouti"))
                .body("[0].'translations'.'ja'", containsString("ジブチ"))
                .body("[0].'translations'.'it'", containsString("Gibuti"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_275_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/30?fields=zYueV4w3g2")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_276_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/Americas?fields=_EM_4851_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(57))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 54 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_277_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/MN?fields=_EM_4858_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_278_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/gambian?fields=H")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_279_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/Tunisia?fields=_EM_4901_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_280_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/rome")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Holy See"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".va"))
                .body("[0].'alpha2Code'", containsString("VA"))
                .body("[0].'alpha3Code'", containsString("VAT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("379"))
                .body("[0].'capital'", containsString("Rome"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("Sancta Sedes", "Vatican", "The Vatican"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(451.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(41.9))
                .body("[0].'latlng'[1]", numberMatches(12.45))
                .body("[0].'demonym'", containsString(""))
                .body("[0].'area'", numberMatches(0.44))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("ITA"))
                .body("[0].'nativeName'", containsString("Sancta Sedes"))
                .body("[0].'numericCode'", nullValue())
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(4))
                .body("[0].'languages'", hasItems("la", "it", "fr", "de"))
                .body("[0].'translations'.'de'", containsString("Heiliger Stuhl"))
                .body("[0].'translations'.'es'", containsString("Santa Sede"))
                .body("[0].'translations'.'fr'", containsString("voir Saint"))
                .body("[0].'translations'.'ja'", containsString("聖座"))
                .body("[0].'translations'.'it'", containsString("Santa Sede"))
                .body("[0].'relevance'", nullValue())
                .body("[1].'name'", containsString("Italy"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".it"))
                .body("[1].'alpha2Code'", containsString("IT"))
                .body("[1].'alpha3Code'", containsString("ITA"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("39"))
                .body("[1].'capital'", containsString("Rome"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("IT", "Italian Republic", "Repubblica italiana"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Southern Europe"))
                .body("[1].'population'", numberMatches(6.0753794E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(42.83333333))
                .body("[1].'latlng'[1]", numberMatches(12.83333333))
                .body("[1].'demonym'", containsString("Italian"))
                .body("[1].'area'", numberMatches(301336.0))
                .body("[1].'gini'", numberMatches(36.0))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(6))
                .body("[1].'borders'", hasItems("AUT", "FRA", "SMR", "SVN", "CHE", "VAT"))
                .body("[1].'nativeName'", containsString("Italia"))
                .body("[1].'numericCode'", containsString("380"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EUR"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("it"))
                .body("[1].'translations'.'de'", containsString("Italien"))
                .body("[1].'translations'.'es'", containsString("Italia"))
                .body("[1].'translations'.'fr'", containsString("Italie"))
                .body("[1].'translations'.'ja'", containsString("イタリア"))
                .body("[1].'translations'.'it'", containsString("Italia"))
                .body("[1].'relevance'", containsString("2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_281_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/32?fields=_EM_5540_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_282_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/33?fields=zQueV4w3g2")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_283_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/muscat?fields=subregion")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'subregion'", containsString("Western Asia"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_284_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/kralendijk?fields=callingCodes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("599"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_285_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/Northern%20Europe?fields=_EM_3661_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(16))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 13 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_286_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/malagasy?fields=Epv")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_287_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/356?fields=YWD")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_288_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/76")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Kazakhstan"))
                .body("[0].'topLevelDomain'.size()", equalTo(2))
                .body("[0].'topLevelDomain'", hasItems(".kz", ".қаз"))
                .body("[0].'alpha2Code'", containsString("KZ"))
                .body("[0].'alpha3Code'", containsString("KAZ"))
                .body("[0].'callingCodes'.size()", equalTo(2))
                .body("[0].'callingCodes'", hasItems("76", "77"))
                .body("[0].'capital'", containsString("Astana"))
                .body("[0].'altSpellings'.size()", equalTo(8))
                .body("[0].'altSpellings'", hasItems("KZ", "Qazaqstan", "Казахстан", "Republic of Kazakhstan", "Қазақстан Республикасы", "Qazaqstan Respublïkası", "Республика Казахстан", "Respublika Kazakhstan"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Central Asia"))
                .body("[0].'population'", numberMatches(1.75412E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(48.0))
                .body("[0].'latlng'[1]", numberMatches(68.0))
                .body("[0].'demonym'", containsString("Kazakhstani"))
                .body("[0].'area'", numberMatches(2724900.0))
                .body("[0].'gini'", numberMatches(29.0))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC+05:00", "UTC+06:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("CHN", "KGZ", "RUS", "TKM", "UZB"))
                .body("[0].'nativeName'", containsString("Қазақстан"))
                .body("[0].'numericCode'", containsString("398"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("KZT"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("kk", "ru"))
                .body("[0].'translations'.'de'", containsString("Kasachstan"))
                .body("[0].'translations'.'es'", containsString("Kazajistán"))
                .body("[0].'translations'.'fr'", containsString("Kazakhstan"))
                .body("[0].'translations'.'ja'", containsString("カザフスタン"))
                .body("[0].'translations'.'it'", containsString("Kazakistan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_289_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/77")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Kazakhstan"))
                .body("[0].'topLevelDomain'.size()", equalTo(2))
                .body("[0].'topLevelDomain'", hasItems(".kz", ".қаз"))
                .body("[0].'alpha2Code'", containsString("KZ"))
                .body("[0].'alpha3Code'", containsString("KAZ"))
                .body("[0].'callingCodes'.size()", equalTo(2))
                .body("[0].'callingCodes'", hasItems("76", "77"))
                .body("[0].'capital'", containsString("Astana"))
                .body("[0].'altSpellings'.size()", equalTo(8))
                .body("[0].'altSpellings'", hasItems("KZ", "Qazaqstan", "Казахстан", "Republic of Kazakhstan", "Қазақстан Республикасы", "Qazaqstan Respublïkası", "Республика Казахстан", "Respublika Kazakhstan"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Central Asia"))
                .body("[0].'population'", numberMatches(1.75412E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(48.0))
                .body("[0].'latlng'[1]", numberMatches(68.0))
                .body("[0].'demonym'", containsString("Kazakhstani"))
                .body("[0].'area'", numberMatches(2724900.0))
                .body("[0].'gini'", numberMatches(29.0))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC+05:00", "UTC+06:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("CHN", "KGZ", "RUS", "TKM", "UZB"))
                .body("[0].'nativeName'", containsString("Қазақстан"))
                .body("[0].'numericCode'", containsString("398"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("KZT"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("kk", "ru"))
                .body("[0].'translations'.'de'", containsString("Kasachstan"))
                .body("[0].'translations'.'es'", containsString("Kazajistán"))
                .body("[0].'translations'.'fr'", containsString("Kazakhstan"))
                .body("[0].'translations'.'ja'", containsString("カザフスタン"))
                .body("[0].'translations'.'it'", containsString("Kazakistan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_290_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/berlin?fields=capital")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'capital'", containsString("Berlin"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_291_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/Northern%20Europe?fields=_EM_3944_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(16))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 13 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_292_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/algerian?fields=g3")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_293_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/american?fields=g3")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_294_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/qatar")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Qatar"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".qa"))
                .body("[0].'alpha2Code'", containsString("QA"))
                .body("[0].'alpha3Code'", containsString("QAT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("974"))
                .body("[0].'capital'", containsString("Doha"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("QA", "State of Qatar", "Dawlat Qaṭar"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(2120129.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(25.5))
                .body("[0].'latlng'[1]", numberMatches(51.25))
                .body("[0].'demonym'", containsString("Qatari"))
                .body("[0].'area'", numberMatches(11586.0))
                .body("[0].'gini'", numberMatches(41.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("SAU"))
                .body("[0].'nativeName'", containsString("قطر"))
                .body("[0].'numericCode'", containsString("634"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("QAR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Katar"))
                .body("[0].'translations'.'es'", containsString("Catar"))
                .body("[0].'translations'.'fr'", containsString("Qatar"))
                .body("[0].'translations'.'ja'", containsString("カタール"))
                .body("[0].'translations'.'it'", containsString("Qatar"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_295_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/673")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Brunei"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bn"))
                .body("[0].'alpha2Code'", containsString("BN"))
                .body("[0].'alpha3Code'", containsString("BRN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("673"))
                .body("[0].'capital'", containsString("Bandar Seri Begawan"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("BN", "Nation of Brunei", " the Abode of Peace"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(393372.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(4.5))
                .body("[0].'latlng'[1]", numberMatches(114.66666666))
                .body("[0].'demonym'", containsString("Bruneian"))
                .body("[0].'area'", numberMatches(5765.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("MYS"))
                .body("[0].'nativeName'", containsString("Negara Brunei Darussalam"))
                .body("[0].'numericCode'", containsString("096"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BND"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ms"))
                .body("[0].'translations'.'de'", containsString("Brunei"))
                .body("[0].'translations'.'es'", containsString("Brunei"))
                .body("[0].'translations'.'fr'", containsString("Brunei"))
                .body("[0].'translations'.'ja'", containsString("ブルネイ・ダルサラーム"))
                .body("[0].'translations'.'it'", containsString("Brunei"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_296_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/674")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Nauru"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".nr"))
                .body("[0].'alpha2Code'", containsString("NR"))
                .body("[0].'alpha3Code'", containsString("NRU"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("674"))
                .body("[0].'capital'", containsString("Yaren"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("NR", "Naoero", "Pleasant Island", "Republic of Nauru", "Ripublik Naoero"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Micronesia"))
                .body("[0].'population'", numberMatches(10084.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-0.53333333))
                .body("[0].'latlng'[1]", numberMatches(166.91666666))
                .body("[0].'demonym'", containsString("Nauruan"))
                .body("[0].'area'", numberMatches(21.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Nauru"))
                .body("[0].'numericCode'", containsString("520"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AUD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "na"))
                .body("[0].'translations'.'de'", containsString("Nauru"))
                .body("[0].'translations'.'es'", containsString("Nauru"))
                .body("[0].'translations'.'fr'", containsString("Nauru"))
                .body("[0].'translations'.'ja'", containsString("ナウル"))
                .body("[0].'translations'.'it'", containsString("Nauru"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_297_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/saint-denis")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Réunion"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".re"))
                .body("[0].'alpha2Code'", containsString("RE"))
                .body("[0].'alpha3Code'", containsString("REU"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("262"))
                .body("[0].'capital'", containsString("Saint-Denis"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("RE", "Reunion"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(840974.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-21.15))
                .body("[0].'latlng'[1]", numberMatches(55.5))
                .body("[0].'demonym'", containsString("French"))
                .body("[0].'area'", nullValue())
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("La Réunion"))
                .body("[0].'numericCode'", containsString("638"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Réunion"))
                .body("[0].'translations'.'es'", containsString("Reunión"))
                .body("[0].'translations'.'fr'", containsString("Réunion"))
                .body("[0].'translations'.'ja'", containsString("レユニオン"))
                .body("[0].'translations'.'it'", containsString("Riunione"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_298_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/502?fields=zYueV4y3g%3A")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_299_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/503?fields=zYueV4y2g%3A")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_300_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/manama?fields=_EM_5253_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_301_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/dublin")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Republic of Ireland"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ie"))
                .body("[0].'alpha2Code'", containsString("IE"))
                .body("[0].'alpha3Code'", containsString("IRL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("353"))
                .body("[0].'capital'", containsString("Dublin"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("IE", "Éire", "Republic of Ireland", "Poblacht na hÉireann"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(6378000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(53.0))
                .body("[0].'latlng'[1]", numberMatches(-8.0))
                .body("[0].'demonym'", containsString("Irish"))
                .body("[0].'area'", numberMatches(70273.0))
                .body("[0].'gini'", numberMatches(34.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("GBR"))
                .body("[0].'nativeName'", containsString("Éire"))
                .body("[0].'numericCode'", containsString("372"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("ga", "en"))
                .body("[0].'translations'.'de'", containsString("Irland"))
                .body("[0].'translations'.'es'", containsString("Irlanda"))
                .body("[0].'translations'.'fr'", containsString("Irlande"))
                .body("[0].'translations'.'ja'", containsString("アイルランド"))
                .body("[0].'translations'.'it'", containsString("Irlanda"))
                .body("[0].'relevance'", containsString("1.2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_302_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/dushanbe")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Tajikistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tj"))
                .body("[0].'alpha2Code'", containsString("TJ"))
                .body("[0].'alpha3Code'", containsString("TJK"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("992"))
                .body("[0].'capital'", containsString("Dushanbe"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("TJ", "Toçikiston", "Republic of Tajikistan", "Ҷумҳурии Тоҷикистон", "Çumhuriyi Toçikiston"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Central Asia"))
                .body("[0].'population'", numberMatches(8354000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(39.0))
                .body("[0].'latlng'[1]", numberMatches(71.0))
                .body("[0].'demonym'", containsString("Tadzhik"))
                .body("[0].'area'", numberMatches(143100.0))
                .body("[0].'gini'", numberMatches(30.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+05:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("AFG", "CHN", "KGZ", "UZB"))
                .body("[0].'nativeName'", containsString("Тоҷикистон"))
                .body("[0].'numericCode'", containsString("762"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("TJS"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("tg", "ru"))
                .body("[0].'translations'.'de'", containsString("Tadschikistan"))
                .body("[0].'translations'.'es'", containsString("Tayikistán"))
                .body("[0].'translations'.'fr'", containsString("Tadjikistan"))
                .body("[0].'translations'.'ja'", containsString("タジキスタン"))
                .body("[0].'translations'.'it'", containsString("Tagikistan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_303_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/cambodian?fields=wAht0E5")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_304_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/269")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Comoros"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".km"))
                .body("[0].'alpha2Code'", containsString("KM"))
                .body("[0].'alpha3Code'", containsString("COM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("269"))
                .body("[0].'capital'", containsString("Moroni"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("KM", "Union of the Comoros", "Union des Comores", "Udzima wa Komori", "al-Ittiḥād al-Qumurī"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(784745.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-12.16666666))
                .body("[0].'latlng'[1]", numberMatches(44.25))
                .body("[0].'demonym'", containsString("Comoran"))
                .body("[0].'area'", numberMatches(1862.0))
                .body("[0].'gini'", numberMatches(64.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Komori"))
                .body("[0].'numericCode'", containsString("174"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("KMF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("ar", "fr"))
                .body("[0].'translations'.'de'", containsString("Union der Komoren"))
                .body("[0].'translations'.'es'", containsString("Comoras"))
                .body("[0].'translations'.'fr'", containsString("Comores"))
                .body("[0].'translations'.'ja'", containsString("コモロ"))
                .body("[0].'translations'.'it'", containsString("Comore"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_305_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/IRR?fields=_EM_5362_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_306_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/sarnam?" + 
                    "fields=qd2qK2_AUkKcqOA&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_307_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/350?fields=_EM_6028_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_308_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/amsterdam?fields=_EM_4796_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_309_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/qazaqstan")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Kazakhstan"))
                .body("[0].'topLevelDomain'.size()", equalTo(2))
                .body("[0].'topLevelDomain'", hasItems(".kz", ".қаз"))
                .body("[0].'alpha2Code'", containsString("KZ"))
                .body("[0].'alpha3Code'", containsString("KAZ"))
                .body("[0].'callingCodes'.size()", equalTo(2))
                .body("[0].'callingCodes'", hasItems("76", "77"))
                .body("[0].'capital'", containsString("Astana"))
                .body("[0].'altSpellings'.size()", equalTo(8))
                .body("[0].'altSpellings'", hasItems("KZ", "Qazaqstan", "Казахстан", "Republic of Kazakhstan", "Қазақстан Республикасы", "Qazaqstan Respublïkası", "Республика Казахстан", "Respublika Kazakhstan"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Central Asia"))
                .body("[0].'population'", numberMatches(1.75412E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(48.0))
                .body("[0].'latlng'[1]", numberMatches(68.0))
                .body("[0].'demonym'", containsString("Kazakhstani"))
                .body("[0].'area'", numberMatches(2724900.0))
                .body("[0].'gini'", numberMatches(29.0))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC+05:00", "UTC+06:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("CHN", "KGZ", "RUS", "TKM", "UZB"))
                .body("[0].'nativeName'", containsString("Қазақстан"))
                .body("[0].'numericCode'", containsString("398"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("KZT"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("kk", "ru"))
                .body("[0].'translations'.'de'", containsString("Kasachstan"))
                .body("[0].'translations'.'es'", containsString("Kazajistán"))
                .body("[0].'translations'.'fr'", containsString("Kazakhstan"))
                .body("[0].'translations'.'ja'", containsString("カザフスタン"))
                .body("[0].'translations'.'it'", containsString("Kazakistan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_310_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/kuki%20'airani?" + 
                    "fields=alpha3Code&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha3Code'", containsString("COK"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_311_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/east%20timorese?fields=DTI7dnuEmJ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_312_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/ecuadorean?fields=DTI7dnuEmJ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_313_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/UNASUR?fields=capital")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(15))
                .body("[0].'capital'", containsString("Buenos Aires"))
                .body("[1].'capital'", containsString("Sucre"))
                .body("[2].'capital'", containsString("Brasília"))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_314_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/UNASUR?fields=name")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(15))
                .body("[0].'name'", containsString("Argentina"))
                .body("[1].'name'", containsString("Bolivia (Plurinational State of)"))
                .body("[2].'name'", containsString("Brazil"))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_315_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/port%20louis")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Mauritius"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mu"))
                .body("[0].'alpha2Code'", containsString("MU"))
                .body("[0].'alpha3Code'", containsString("MUS"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("230"))
                .body("[0].'capital'", containsString("Port Louis"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MU", "Republic of Mauritius", "République de Maurice"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(1261208.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-20.28333333))
                .body("[0].'latlng'[1]", numberMatches(57.55))
                .body("[0].'demonym'", containsString("Mauritian"))
                .body("[0].'area'", numberMatches(2040.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Maurice"))
                .body("[0].'numericCode'", containsString("480"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Mauritius"))
                .body("[0].'translations'.'es'", containsString("Mauricio"))
                .body("[0].'translations'.'fr'", containsString("Île Maurice"))
                .body("[0].'translations'.'ja'", containsString("モーリシャス"))
                .body("[0].'translations'.'it'", containsString("Mauritius"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_316_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/suva")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Fiji"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".fj"))
                .body("[0].'alpha2Code'", containsString("FJ"))
                .body("[0].'alpha3Code'", containsString("FJI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("679"))
                .body("[0].'capital'", containsString("Suva"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("FJ", "Viti", "Republic of Fiji", "Matanitu ko Viti", "Fijī Gaṇarājya"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Melanesia"))
                .body("[0].'population'", numberMatches(867000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-18.0))
                .body("[0].'latlng'[1]", numberMatches(175.0))
                .body("[0].'demonym'", containsString("Fijian"))
                .body("[0].'area'", numberMatches(18272.0))
                .body("[0].'gini'", numberMatches(42.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Fiji"))
                .body("[0].'numericCode'", containsString("242"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("FJD"))
                .body("[0].'currencies'[0].'name'", containsString("Fijian dollar"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(4))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'languages'[1].'iso639_1'", containsString("fj"))
                .body("[0].'languages'[1].'iso639_2'", containsString("fij"))
                .body("[0].'languages'[1].'name'", containsString("Fijian"))
                .body("[0].'languages'[1].'nativeName'", containsString("vosa Vakaviti"))
                .body("[0].'languages'[2].'iso639_1'", containsString("hi"))
                .body("[0].'languages'[2].'iso639_2'", containsString("hin"))
                .body("[0].'languages'[2].'name'", containsString("Hindi"))
                .body("[0].'languages'[2].'nativeName'", containsString("हिन्दी"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("[0].'translations'.'de'", containsString("Fidschi"))
                .body("[0].'translations'.'es'", containsString("Fiyi"))
                .body("[0].'translations'.'fr'", containsString("Fidji"))
                .body("[0].'translations'.'ja'", containsString("フィジー"))
                .body("[0].'translations'.'it'", containsString("Figi"))
                .body("[0].'translations'.'br'", containsString("Fiji"))
                .body("[0].'translations'.'pt'", containsString("Fiji"))
                .body("[0].'translations'.'nl'", containsString("Fiji"))
                .body("[0].'translations'.'hr'", containsString("Fiđi"))
                .body("[0].'translations'.'fa'", containsString("فیجی"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/fji.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("FIJ"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_317_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/taipei?fields=tG9HX_lSgAG")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_318_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/philippines?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Philippines"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ph"))
                .body("[0].'alpha2Code'", containsString("PH"))
                .body("[0].'alpha3Code'", containsString("PHL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("63"))
                .body("[0].'capital'", containsString("Manila"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("PH", "Republic of the Philippines", "Repúblika ng Pilipinas"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(1.0192E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(13.0))
                .body("[0].'latlng'[1]", numberMatches(122.0))
                .body("[0].'demonym'", containsString("Filipino"))
                .body("[0].'area'", numberMatches(342353.0))
                .body("[0].'gini'", numberMatches(43.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Pilipinas"))
                .body("[0].'numericCode'", containsString("608"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("PHP"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Philippinen"))
                .body("[0].'translations'.'es'", containsString("Filipinas"))
                .body("[0].'translations'.'fr'", containsString("Philippines"))
                .body("[0].'translations'.'ja'", containsString("フィリピン"))
                .body("[0].'translations'.'it'", containsString("Filippine"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_319_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/ulan%20bator")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Mongolia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mn"))
                .body("[0].'alpha2Code'", containsString("MN"))
                .body("[0].'alpha3Code'", containsString("MNG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("976"))
                .body("[0].'capital'", containsString("Ulan Bator"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("MN"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(3031099.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(46.0))
                .body("[0].'latlng'[1]", numberMatches(105.0))
                .body("[0].'demonym'", containsString("Mongolian"))
                .body("[0].'area'", numberMatches(1564110.0))
                .body("[0].'gini'", numberMatches(36.5))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC+07:00", "UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("CHN", "RUS"))
                .body("[0].'nativeName'", containsString("Монгол улс"))
                .body("[0].'numericCode'", containsString("496"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MNT"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("mn"))
                .body("[0].'translations'.'de'", containsString("Mongolei"))
                .body("[0].'translations'.'es'", containsString("Mongolia"))
                .body("[0].'translations'.'fr'", containsString("Mongolie"))
                .body("[0].'translations'.'ja'", containsString("モンゴル"))
                .body("[0].'translations'.'it'", containsString("Mongolia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_320_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/belgrade?fields=alpha3Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha3Code'", containsString("SRB"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_321_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/liechtensteiner?fields=altSpellings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("LI", "Principality of Liechtenstein", "Fürstentum Liechtenstein"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_322_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/tashkent?fields=tG9HX_jSgAG")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_323_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/tbilisi?fields=tG9HX_jSgAG")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_324_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/repubblica%20di%20san%20marino?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("San Marino"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sm"))
                .body("[0].'alpha2Code'", containsString("SM"))
                .body("[0].'alpha3Code'", containsString("SMR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("378"))
                .body("[0].'capital'", containsString("City of San Marino"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("SM", "Republic of San Marino", "Repubblica di San Marino"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(32831.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(43.76666666))
                .body("[0].'latlng'[1]", numberMatches(12.41666666))
                .body("[0].'demonym'", containsString("Sammarinese"))
                .body("[0].'area'", numberMatches(61.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("ITA"))
                .body("[0].'nativeName'", containsString("San Marino"))
                .body("[0].'numericCode'", containsString("674"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("it"))
                .body("[0].'translations'.'de'", containsString("San Marino"))
                .body("[0].'translations'.'es'", containsString("San Marino"))
                .body("[0].'translations'.'fr'", containsString("Saint-Marin"))
                .body("[0].'translations'.'ja'", containsString("サンマリノ"))
                .body("[0].'translations'.'it'", containsString("San Marino"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_325_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/vaduz")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Liechtenstein"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".li"))
                .body("[0].'alpha2Code'", containsString("LI"))
                .body("[0].'alpha3Code'", containsString("LIE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("423"))
                .body("[0].'capital'", containsString("Vaduz"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("LI", "Principality of Liechtenstein", "Fürstentum Liechtenstein"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(37370.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(47.26666666))
                .body("[0].'latlng'[1]", numberMatches(9.53333333))
                .body("[0].'demonym'", containsString("Liechtensteiner"))
                .body("[0].'area'", numberMatches(160.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("AUT", "CHE"))
                .body("[0].'nativeName'", containsString("Liechtenstein"))
                .body("[0].'numericCode'", containsString("438"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("CHF"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("de"))
                .body("[0].'translations'.'de'", containsString("Liechtenstein"))
                .body("[0].'translations'.'es'", containsString("Liechtenstein"))
                .body("[0].'translations'.'fr'", containsString("Liechtenstein"))
                .body("[0].'translations'.'ja'", containsString("リヒテンシュタイン"))
                .body("[0].'translations'.'it'", containsString("Liechtenstein"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_326_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/valletta")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Malta"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mt"))
                .body("[0].'alpha2Code'", containsString("MT"))
                .body("[0].'alpha3Code'", containsString("MLT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("356"))
                .body("[0].'capital'", containsString("Valletta"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MT", "Republic of Malta", "Repubblika ta' Malta"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(445426.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(35.83333333))
                .body("[0].'latlng'[1]", numberMatches(14.58333333))
                .body("[0].'demonym'", containsString("Maltese"))
                .body("[0].'area'", numberMatches(316.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Malta"))
                .body("[0].'numericCode'", containsString("470"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("mt", "en"))
                .body("[0].'translations'.'de'", containsString("Malta"))
                .body("[0].'translations'.'es'", containsString("Malta"))
                .body("[0].'translations'.'fr'", containsString("Malte"))
                .body("[0].'translations'.'ja'", containsString("マルタ"))
                .body("[0].'translations'.'it'", containsString("Malta"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_327_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/victoria")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Hong Kong"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".hk"))
                .body("[0].'alpha2Code'", containsString("HK"))
                .body("[0].'alpha3Code'", containsString("HKG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("852"))
                .body("[0].'capital'", containsString("City of Victoria"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("HK", "香港"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(7298600.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(22.25))
                .body("[0].'latlng'[1]", numberMatches(114.16666666))
                .body("[0].'demonym'", containsString("Chinese"))
                .body("[0].'area'", numberMatches(1104.0))
                .body("[0].'gini'", numberMatches(53.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("CHN"))
                .body("[0].'nativeName'", containsString("香港"))
                .body("[0].'numericCode'", containsString("344"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("HKD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "zh"))
                .body("[0].'translations'.'de'", containsString("Hong Kong"))
                .body("[0].'translations'.'es'", containsString("Hong Kong"))
                .body("[0].'translations'.'fr'", containsString("Hong Kong"))
                .body("[0].'translations'.'ja'", containsString("香港"))
                .body("[0].'translations'.'it'", containsString("Hong Kong"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Seychelles"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".sc"))
                .body("[1].'alpha2Code'", containsString("SC"))
                .body("[1].'alpha3Code'", containsString("SYC"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("248"))
                .body("[1].'capital'", containsString("Victoria"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("SC", "Republic of Seychelles", "Repiblik Sesel", "République des Seychelles"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Eastern Africa"))
                .body("[1].'population'", numberMatches(89949.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-4.58333333))
                .body("[1].'latlng'[1]", numberMatches(55.66666666))
                .body("[1].'demonym'", containsString("Seychellois"))
                .body("[1].'area'", numberMatches(452.0))
                .body("[1].'gini'", numberMatches(65.8))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+04:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Seychelles"))
                .body("[1].'numericCode'", containsString("690"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("SCR"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("fr", "en"))
                .body("[1].'translations'.'de'", containsString("Seychellen"))
                .body("[1].'translations'.'es'", containsString("Seychelles"))
                .body("[1].'translations'.'fr'", containsString("Seychelles"))
                .body("[1].'translations'.'ja'", containsString("セーシェル"))
                .body("[1].'translations'.'it'", containsString("Seychelles"))
                .body("[1].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_328_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/vienna")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Austria"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".at"))
                .body("[0].'alpha2Code'", containsString("AT"))
                .body("[0].'alpha3Code'", containsString("AUT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("43"))
                .body("[0].'capital'", containsString("Vienna"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AT", "Österreich", "Osterreich", "Oesterreich"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(8602112.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(47.33333333))
                .body("[0].'latlng'[1]", numberMatches(13.33333333))
                .body("[0].'demonym'", containsString("Austrian"))
                .body("[0].'area'", numberMatches(83871.0))
                .body("[0].'gini'", numberMatches(26.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(8))
                .body("[0].'borders'", hasItems("CZE", "DEU", "HUN", "ITA", "LIE", "SVK", "SVN", "CHE"))
                .body("[0].'nativeName'", containsString("Österreich"))
                .body("[0].'numericCode'", containsString("040"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("de"))
                .body("[0].'translations'.'de'", containsString("Österreich"))
                .body("[0].'translations'.'es'", containsString("Austria"))
                .body("[0].'translations'.'fr'", containsString("Autriche"))
                .body("[0].'translations'.'ja'", containsString("オーストリア"))
                .body("[0].'translations'.'it'", containsString("Austria"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_329_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/44?fields=subregion")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[1].'subregion'", containsString("Northern Europe"))
                .body("[2].'subregion'", containsString("Northern Europe"))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_330_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/91?fields=capital")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'capital'", containsString("New Delhi"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_331_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/tegucigalpa?fields=tG9HX_jSgAG")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_332_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/spanish?fields=zD%5DJ15PQenjFBp")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_333_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/cesko?fields=JlPU")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_334_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/ki?" + 
                    "fields=topLevelDomain&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ki"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_335_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/vietnamese?fields=zDeJ15PQenjFBp")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_336_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/virgin%20islander?fields=zDeJ15PQenjFBp")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_337_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/wallis%20and%20futuna%20islander?fields=zDeJ05PQenjFBp")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_338_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/cesko?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Czech Republic"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cz"))
                .body("[0].'alpha2Code'", containsString("CZ"))
                .body("[0].'alpha3Code'", containsString("CZE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("420"))
                .body("[0].'capital'", containsString("Prague"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("CZ", "Česká republika", "Česko"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(1.0537818E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(49.75))
                .body("[0].'latlng'[1]", numberMatches(15.5))
                .body("[0].'demonym'", containsString("Czech"))
                .body("[0].'area'", numberMatches(78865.0))
                .body("[0].'gini'", numberMatches(26.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("AUT", "DEU", "POL", "SVK"))
                .body("[0].'nativeName'", containsString("Česká republika"))
                .body("[0].'numericCode'", containsString("203"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("CZK"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("cs", "sk"))
                .body("[0].'translations'.'de'", containsString("Tschechische Republik"))
                .body("[0].'translations'.'es'", containsString("República Checa"))
                .body("[0].'translations'.'fr'", containsString("République tchèque"))
                .body("[0].'translations'.'ja'", containsString("チェコ"))
                .body("[0].'translations'.'it'", containsString("Repubblica Ceca"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_339_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/cf?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Central African Republic"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cf"))
                .body("[0].'alpha2Code'", containsString("CF"))
                .body("[0].'alpha3Code'", containsString("CAF"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("236"))
                .body("[0].'capital'", containsString("Bangui"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("CF", "Central African Republic", "République centrafricaine"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(4900000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(7.0))
                .body("[0].'latlng'[1]", numberMatches(21.0))
                .body("[0].'demonym'", containsString("Central African"))
                .body("[0].'area'", numberMatches(622984.0))
                .body("[0].'gini'", numberMatches(56.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("CMR", "TCD", "COD", "COG", "SSD", "SDN"))
                .body("[0].'nativeName'", containsString("Ködörösêse tî Bêafrîka"))
                .body("[0].'numericCode'", containsString("140"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XAF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "sg"))
                .body("[0].'translations'.'de'", containsString("Zentralafrikanische Republik"))
                .body("[0].'translations'.'es'", containsString("República Centroafricana"))
                .body("[0].'translations'.'fr'", containsString("République centrafricaine"))
                .body("[0].'translations'.'ja'", containsString("中央アフリカ共和国"))
                .body("[0].'translations'.'it'", containsString("Repubblica Centrafricana"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_340_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/cg?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Republic of the Congo"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cg"))
                .body("[0].'alpha2Code'", containsString("CG"))
                .body("[0].'alpha3Code'", containsString("COG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("242"))
                .body("[0].'capital'", containsString("Brazzaville"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("CG", "Congo-Brazzaville"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(4620000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-1.0))
                .body("[0].'latlng'[1]", numberMatches(15.0))
                .body("[0].'demonym'", containsString("Congolese"))
                .body("[0].'area'", numberMatches(342000.0))
                .body("[0].'gini'", numberMatches(47.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("AGO", "CMR", "CAF", "COD", "GAB"))
                .body("[0].'nativeName'", containsString("République du Congo"))
                .body("[0].'numericCode'", containsString("178"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XAF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "ln"))
                .body("[0].'translations'.'de'", containsString("Kongo"))
                .body("[0].'translations'.'es'", containsString("Congo"))
                .body("[0].'translations'.'fr'", containsString("Congo"))
                .body("[0].'translations'.'ja'", containsString("コンゴ共和国"))
                .body("[0].'translations'.'it'", containsString("Congo"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_341_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/1")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(27))
                .body("[0].'name'", containsString("American Samoa"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".as"))
                .body("[0].'alpha2Code'", containsString("AS"))
                .body("[0].'alpha3Code'", containsString("ASM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Pago Pago"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AS", "Amerika Sāmoa", "Amelika Sāmoa", "Sāmoa Amelika"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Polynesia"))
                .body("[0].'population'", numberMatches(55519.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-14.33333333))
                .body("[0].'latlng'[1]", numberMatches(-170.0))
                .body("[0].'demonym'", containsString("American Samoan"))
                .body("[0].'area'", numberMatches(199.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-11:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("American Samoa"))
                .body("[0].'numericCode'", containsString("016"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "sm"))
                .body("[0].'translations'.'de'", containsString("Amerikanisch-Samoa"))
                .body("[0].'translations'.'es'", containsString("Samoa Americana"))
                .body("[0].'translations'.'fr'", containsString("Samoa américaines"))
                .body("[0].'translations'.'ja'", containsString("アメリカ領サモア"))
                .body("[0].'translations'.'it'", containsString("Samoa Americane"))
                .body("[0].'relevance'", containsString("0.5"))
                .body("[1].'name'", containsString("Anguilla"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ai"))
                .body("[1].'alpha2Code'", containsString("AI"))
                .body("[1].'alpha3Code'", containsString("AIA"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("1"))
                .body("[1].'capital'", containsString("The Valley"))
                .body("[1].'altSpellings'.size()", equalTo(1))
                .body("[1].'altSpellings'", hasItems("AI"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("Caribbean"))
                .body("[1].'population'", numberMatches(13452.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(18.25))
                .body("[1].'latlng'[1]", numberMatches(-63.16666666))
                .body("[1].'demonym'", containsString("Anguillian"))
                .body("[1].'area'", numberMatches(91.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-04:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Anguilla"))
                .body("[1].'numericCode'", containsString("660"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("XCD"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("en"))
                .body("[1].'translations'.'de'", containsString("Anguilla"))
                .body("[1].'translations'.'es'", containsString("Anguilla"))
                .body("[1].'translations'.'fr'", containsString("Anguilla"))
                .body("[1].'translations'.'ja'", containsString("アンギラ"))
                .body("[1].'translations'.'it'", containsString("Anguilla"))
                .body("[1].'relevance'", containsString("0.5"))
                .body("[2].'name'", containsString("Antigua and Barbuda"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".ag"))
                .body("[2].'alpha2Code'", containsString("AG"))
                .body("[2].'alpha3Code'", containsString("ATG"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("1"))
                .body("[2].'capital'", containsString("Saint John's"))
                .body("[2].'altSpellings'.size()", equalTo(1))
                .body("[2].'altSpellings'", hasItems("AG"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("Caribbean"))
                .body("[2].'population'", numberMatches(86295.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(17.05))
                .body("[2].'latlng'[1]", numberMatches(-61.8))
                .body("[2].'demonym'", containsString("Antiguan, Barbudan"))
                .body("[2].'area'", numberMatches(442.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC-04:00"))
                .body("[2].'borders'.size()", equalTo(0))
                .body("[2].'nativeName'", containsString("Antigua and Barbuda"))
                .body("[2].'numericCode'", containsString("028"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("XCD"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("en"))
                .body("[2].'translations'.'de'", containsString("Antigua und Barbuda"))
                .body("[2].'translations'.'es'", containsString("Antigua y Barbuda"))
                .body("[2].'translations'.'fr'", containsString("Antigua-et-Barbuda"))
                .body("[2].'translations'.'ja'", containsString("アンティグア・バーブーダ"))
                .body("[2].'translations'.'it'", containsString("Antigua e Barbuda"))
                .body("[2].'relevance'", containsString("0.5"))
                ; // Skipping assertions on the remaining 24 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_342_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/20")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Egypt"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".eg"))
                .body("[0].'alpha2Code'", containsString("EG"))
                .body("[0].'alpha3Code'", containsString("EGY"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("20"))
                .body("[0].'capital'", containsString("Cairo"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("EG", "Arab Republic of Egypt"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Northern Africa"))
                .body("[0].'population'", numberMatches(8.93356E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(27.0))
                .body("[0].'latlng'[1]", numberMatches(30.0))
                .body("[0].'demonym'", containsString("Egyptian"))
                .body("[0].'area'", numberMatches(1002450.0))
                .body("[0].'gini'", numberMatches(30.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("ISR", "LBY", "SDN"))
                .body("[0].'nativeName'", containsString("مصر‎"))
                .body("[0].'numericCode'", containsString("818"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EGP"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Ägypten"))
                .body("[0].'translations'.'es'", containsString("Egipto"))
                .body("[0].'translations'.'fr'", containsString("Égypte"))
                .body("[0].'translations'.'ja'", containsString("エジプト"))
                .body("[0].'translations'.'it'", containsString("Egitto"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_343_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/de")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(7))
                .body("[0].'name'", containsString("Austria"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".at"))
                .body("[0].'alpha2Code'", containsString("AT"))
                .body("[0].'alpha3Code'", containsString("AUT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("43"))
                .body("[0].'capital'", containsString("Vienna"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AT", "Österreich", "Osterreich", "Oesterreich"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(8602112.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(47.33333333))
                .body("[0].'latlng'[1]", numberMatches(13.33333333))
                .body("[0].'demonym'", containsString("Austrian"))
                .body("[0].'area'", numberMatches(83871.0))
                .body("[0].'gini'", numberMatches(26.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(8))
                .body("[0].'borders'", hasItems("CZE", "DEU", "HUN", "ITA", "LIE", "SVK", "SVN", "CHE"))
                .body("[0].'nativeName'", containsString("Österreich"))
                .body("[0].'numericCode'", containsString("040"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("de"))
                .body("[0].'translations'.'de'", containsString("Österreich"))
                .body("[0].'translations'.'es'", containsString("Austria"))
                .body("[0].'translations'.'fr'", containsString("Autriche"))
                .body("[0].'translations'.'ja'", containsString("オーストリア"))
                .body("[0].'translations'.'it'", containsString("Austria"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Belgium"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".be"))
                .body("[1].'alpha2Code'", containsString("BE"))
                .body("[1].'alpha3Code'", containsString("BEL"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("32"))
                .body("[1].'capital'", containsString("Brussels"))
                .body("[1].'altSpellings'.size()", equalTo(9))
                .body("[1].'altSpellings'", hasItems("BE", "België", "Belgie", "Belgien", "Belgique", "Kingdom of Belgium", "Koninkrijk België", "Royaume de Belgique", "Königreich Belgien"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Western Europe"))
                .body("[1].'population'", numberMatches(1.124833E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(50.83333333))
                .body("[1].'latlng'[1]", numberMatches(4.0))
                .body("[1].'demonym'", containsString("Belgian"))
                .body("[1].'area'", numberMatches(30528.0))
                .body("[1].'gini'", numberMatches(33.0))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(4))
                .body("[1].'borders'", hasItems("FRA", "DEU", "LUX", "NLD"))
                .body("[1].'nativeName'", containsString("België"))
                .body("[1].'numericCode'", containsString("056"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EUR"))
                .body("[1].'languages'.size()", equalTo(3))
                .body("[1].'languages'", hasItems("nl", "fr", "de"))
                .body("[1].'translations'.'de'", containsString("Belgien"))
                .body("[1].'translations'.'es'", containsString("Bélgica"))
                .body("[1].'translations'.'fr'", containsString("Belgique"))
                .body("[1].'translations'.'ja'", containsString("ベルギー"))
                .body("[1].'translations'.'it'", containsString("Belgio"))
                .body("[1].'relevance'", containsString("1.5"))
                .body("[2].'name'", containsString("Germany"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".de"))
                .body("[2].'alpha2Code'", containsString("DE"))
                .body("[2].'alpha3Code'", containsString("DEU"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("49"))
                .body("[2].'capital'", containsString("Berlin"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("DE", "Federal Republic of Germany", "Bundesrepublik Deutschland"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Western Europe"))
                .body("[2].'population'", numberMatches(8.10836E7))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(51.0))
                .body("[2].'latlng'[1]", numberMatches(9.0))
                .body("[2].'demonym'", containsString("German"))
                .body("[2].'area'", numberMatches(357114.0))
                .body("[2].'gini'", numberMatches(28.3))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(9))
                .body("[2].'borders'", hasItems("AUT", "BEL", "CZE", "DNK", "FRA", "LUX", "NLD", "POL", "CHE"))
                .body("[2].'nativeName'", containsString("Deutschland"))
                .body("[2].'numericCode'", containsString("276"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("EUR"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("de"))
                .body("[2].'translations'.'de'", containsString("Deutschland"))
                .body("[2].'translations'.'es'", containsString("Alemania"))
                .body("[2].'translations'.'fr'", containsString("Allemagne"))
                .body("[2].'translations'.'ja'", containsString("ドイツ"))
                .body("[2].'translations'.'it'", containsString("Germania"))
                .body("[2].'relevance'", containsString("3"))
                ; // Skipping assertions on the remaining 4 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_344_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/dz")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bhutan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bt"))
                .body("[0].'alpha2Code'", containsString("BT"))
                .body("[0].'alpha3Code'", containsString("BTN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("975"))
                .body("[0].'capital'", containsString("Thimphu"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("BT", "Kingdom of Bhutan"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(763920.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(27.5))
                .body("[0].'latlng'[1]", numberMatches(90.5))
                .body("[0].'demonym'", containsString("Bhutanese"))
                .body("[0].'area'", numberMatches(38394.0))
                .body("[0].'gini'", numberMatches(38.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+06:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("CHN", "IND"))
                .body("[0].'nativeName'", containsString("ʼbrug-yul"))
                .body("[0].'numericCode'", containsString("064"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("BTN", "INR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("dz"))
                .body("[0].'translations'.'de'", containsString("Bhutan"))
                .body("[0].'translations'.'es'", containsString("Bután"))
                .body("[0].'translations'.'fr'", containsString("Bhoutan"))
                .body("[0].'translations'.'ja'", containsString("ブータン"))
                .body("[0].'translations'.'it'", containsString("Bhutan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_345_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/dodoma")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Tanzania, United Republic of"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tz"))
                .body("[0].'alpha2Code'", containsString("TZ"))
                .body("[0].'alpha3Code'", containsString("TZA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("255"))
                .body("[0].'capital'", containsString("Dodoma"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("TZ", "United Republic of Tanzania", "Jamhuri ya Muungano wa Tanzania"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(5.5155E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-6.0))
                .body("[0].'latlng'[1]", numberMatches(35.0))
                .body("[0].'demonym'", containsString("Tanzanian"))
                .body("[0].'area'", numberMatches(945087.0))
                .body("[0].'gini'", numberMatches(37.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(8))
                .body("[0].'borders'", hasItems("BDI", "COD", "KEN", "MWI", "MOZ", "RWA", "UGA", "ZMB"))
                .body("[0].'nativeName'", containsString("Tanzania"))
                .body("[0].'numericCode'", containsString("834"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("TZS"))
                .body("[0].'currencies'[0].'name'", containsString("Tanzanian shilling"))
                .body("[0].'currencies'[0].'symbol'", containsString("Sh"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("sw"))
                .body("[0].'languages'[0].'iso639_2'", containsString("swa"))
                .body("[0].'languages'[0].'name'", containsString("Swahili"))
                .body("[0].'languages'[0].'nativeName'", containsString("Kiswahili"))
                .body("[0].'languages'[1].'iso639_1'", containsString("en"))
                .body("[0].'languages'[1].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[1].'name'", containsString("English"))
                .body("[0].'languages'[1].'nativeName'", containsString("English"))
                .body("[0].'translations'.'de'", containsString("Tansania"))
                .body("[0].'translations'.'es'", containsString("Tanzania"))
                .body("[0].'translations'.'fr'", containsString("Tanzanie"))
                .body("[0].'translations'.'ja'", containsString("タンザニア"))
                .body("[0].'translations'.'it'", containsString("Tanzania"))
                .body("[0].'translations'.'br'", containsString("Tanzânia"))
                .body("[0].'translations'.'pt'", containsString("Tanzânia"))
                .body("[0].'translations'.'nl'", containsString("Tanzania"))
                .body("[0].'translations'.'hr'", containsString("Tanzanija"))
                .body("[0].'translations'.'fa'", containsString("تانزانیا"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/tza.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[0].'cioc'", containsString("TAN"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_346_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/doha?fields=ejFD9fNx1zWkZb")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_347_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/tH?fields=_EM_5873_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_348_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/san%20jose")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Costa Rica"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cr"))
                .body("[0].'alpha2Code'", containsString("CR"))
                .body("[0].'alpha3Code'", containsString("CRI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("506"))
                .body("[0].'capital'", containsString("San José"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("CR", "Republic of Costa Rica", "República de Costa Rica"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Central America"))
                .body("[0].'population'", numberMatches(4773130.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(10.0))
                .body("[0].'latlng'[1]", numberMatches(-84.0))
                .body("[0].'demonym'", containsString("Costa Rican"))
                .body("[0].'area'", numberMatches(51100.0))
                .body("[0].'gini'", numberMatches(50.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-06:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("NIC", "PAN"))
                .body("[0].'nativeName'", containsString("Costa Rica"))
                .body("[0].'numericCode'", containsString("188"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("CRC"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("Costa Rica"))
                .body("[0].'translations'.'es'", containsString("Costa Rica"))
                .body("[0].'translations'.'fr'", containsString("Costa Rica"))
                .body("[0].'translations'.'ja'", containsString("コスタリカ"))
                .body("[0].'translations'.'it'", containsString("Costa Rica"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_349_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/san%20juan")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Puerto Rico"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pr"))
                .body("[0].'alpha2Code'", containsString("PR"))
                .body("[0].'alpha3Code'", containsString("PRI"))
                .body("[0].'callingCodes'.size()", equalTo(2))
                .body("[0].'callingCodes'", hasItems("1", "1"))
                .body("[0].'capital'", containsString("San Juan"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("PR", "Commonwealth of Puerto Rico", "Estado Libre Asociado de Puerto Rico"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(3548397.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(18.25))
                .body("[0].'latlng'[1]", numberMatches(-66.5))
                .body("[0].'demonym'", containsString("Puerto Rican"))
                .body("[0].'area'", numberMatches(8870.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Puerto Rico"))
                .body("[0].'numericCode'", containsString("630"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("es", "en"))
                .body("[0].'translations'.'de'", containsString("Puerto Rico"))
                .body("[0].'translations'.'es'", containsString("Puerto Rico"))
                .body("[0].'translations'.'fr'", containsString("Porto Rico"))
                .body("[0].'translations'.'ja'", containsString("プエルトリコ"))
                .body("[0].'translations'.'it'", containsString("Porto Rico"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_350_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/san%20salvador")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("El Salvador"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sv"))
                .body("[0].'alpha2Code'", containsString("SV"))
                .body("[0].'alpha3Code'", containsString("SLV"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("503"))
                .body("[0].'capital'", containsString("San Salvador"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("SV", "Republic of El Salvador", "República de El Salvador"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Central America"))
                .body("[0].'population'", numberMatches(6401240.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(13.83333333))
                .body("[0].'latlng'[1]", numberMatches(-88.91666666))
                .body("[0].'demonym'", containsString("Salvadoran"))
                .body("[0].'area'", numberMatches(21041.0))
                .body("[0].'gini'", numberMatches(48.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-06:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("GTM", "HND"))
                .body("[0].'nativeName'", containsString("El Salvador"))
                .body("[0].'numericCode'", containsString("222"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("SVC", "USD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("El Salvador"))
                .body("[0].'translations'.'es'", containsString("El Salvador"))
                .body("[0].'translations'.'fr'", containsString("Salvador"))
                .body("[0].'translations'.'ja'", containsString("エルサルバドル"))
                .body("[0].'translations'.'it'", containsString("El Salvador"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_351_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/sana'a")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Yemen"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ye"))
                .body("[0].'alpha2Code'", containsString("YE"))
                .body("[0].'alpha3Code'", containsString("YEM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("967"))
                .body("[0].'capital'", containsString("Sana'a"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("YE", "Yemeni Republic", "al-Jumhūriyyah al-Yamaniyyah"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(2.5956E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(15.0))
                .body("[0].'latlng'[1]", numberMatches(48.0))
                .body("[0].'demonym'", containsString("Yemeni"))
                .body("[0].'area'", numberMatches(527968.0))
                .body("[0].'gini'", numberMatches(37.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("OMN", "SAU"))
                .body("[0].'nativeName'", containsString("اليَمَن"))
                .body("[0].'numericCode'", containsString("887"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("YER"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Jemen"))
                .body("[0].'translations'.'es'", containsString("Yemen"))
                .body("[0].'translations'.'fr'", containsString("Yémen"))
                .body("[0].'translations'.'ja'", containsString("イエメン"))
                .body("[0].'translations'.'it'", containsString("Yemen"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_352_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/micronesian?fields=L1D")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_353_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/mexico%20city")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Mexico"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mx"))
                .body("[0].'alpha2Code'", containsString("MX"))
                .body("[0].'alpha3Code'", containsString("MEX"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("52"))
                .body("[0].'capital'", containsString("Mexico City"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("MX", "Mexicanos", "United Mexican States", "Estados Unidos Mexicanos"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Central America"))
                .body("[0].'population'", numberMatches(1.2174E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(23.0))
                .body("[0].'latlng'[1]", numberMatches(-102.0))
                .body("[0].'demonym'", containsString("Mexican"))
                .body("[0].'area'", numberMatches(1964375.0))
                .body("[0].'gini'", numberMatches(47.0))
                .body("[0].'timezones'.size()", equalTo(3))
                .body("[0].'timezones'", hasItems("UTC-08:00", "UTC-07:00", "UTC-06:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("BLZ", "GTM", "USA"))
                .body("[0].'nativeName'", containsString("México"))
                .body("[0].'numericCode'", containsString("484"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MXN"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("Mexiko"))
                .body("[0].'translations'.'es'", containsString("México"))
                .body("[0].'translations'.'fr'", containsString("Mexique"))
                .body("[0].'translations'.'ja'", containsString("メキシコ"))
                .body("[0].'translations'.'it'", containsString("Messico"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_354_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/minsk")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Belarus"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".by"))
                .body("[0].'alpha2Code'", containsString("BY"))
                .body("[0].'alpha3Code'", containsString("BLR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("375"))
                .body("[0].'capital'", containsString("Minsk"))
                .body("[0].'altSpellings'.size()", equalTo(7))
                .body("[0].'altSpellings'", hasItems("BY", "Bielaruś", "Republic of Belarus", "Белоруссия", "Республика Беларусь", "Belorussiya", "Respublika Belarus’"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(9485300.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(53.0))
                .body("[0].'latlng'[1]", numberMatches(28.0))
                .body("[0].'demonym'", containsString("Belarusian"))
                .body("[0].'area'", numberMatches(207600.0))
                .body("[0].'gini'", numberMatches(26.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("LVA", "LTU", "POL", "RUS", "UKR"))
                .body("[0].'nativeName'", containsString("Белару́сь"))
                .body("[0].'numericCode'", containsString("112"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BYR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("be", "ru"))
                .body("[0].'translations'.'de'", containsString("Weißrussland"))
                .body("[0].'translations'.'es'", containsString("Bielorrusia"))
                .body("[0].'translations'.'fr'", containsString("Biélorussie"))
                .body("[0].'translations'.'ja'", containsString("ベラルーシ"))
                .body("[0].'translations'.'it'", containsString("Bielorussia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_355_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/noumea?fields=_UM_5%3FU2_XYZU")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_356_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/dodoma")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Tanzania"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tz"))
                .body("[0].'alpha2Code'", containsString("TZ"))
                .body("[0].'alpha3Code'", containsString("TZA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("255"))
                .body("[0].'capital'", containsString("Dodoma"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("TZ", "United Republic of Tanzania", "Jamhuri ya Muungano wa Tanzania"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(5.347E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-6.0))
                .body("[0].'latlng'[1]", numberMatches(35.0))
                .body("[0].'demonym'", containsString("Tanzanian"))
                .body("[0].'area'", numberMatches(945087.0))
                .body("[0].'gini'", numberMatches(37.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(8))
                .body("[0].'borders'", hasItems("BDI", "COD", "KEN", "MWI", "MOZ", "RWA", "UGA", "ZMB"))
                .body("[0].'nativeName'", containsString("Tanzania"))
                .body("[0].'numericCode'", containsString("834"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("TZS"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("sw", "en"))
                .body("[0].'translations'.'de'", containsString("Tansania"))
                .body("[0].'translations'.'es'", containsString("Tanzania"))
                .body("[0].'translations'.'fr'", containsString("Tanzanie"))
                .body("[0].'translations'.'ja'", containsString("タンザニア"))
                .body("[0].'translations'.'it'", containsString("Tanzania"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_357_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/adamstown")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Pitcairn Islands"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pn"))
                .body("[0].'alpha2Code'", containsString("PN"))
                .body("[0].'alpha3Code'", containsString("PCN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("64"))
                .body("[0].'capital'", containsString("Adamstown"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("PN", "Pitcairn Henderson Ducie and Oeno Islands"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Polynesia"))
                .body("[0].'population'", numberMatches(56.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-25.06666666))
                .body("[0].'latlng'[1]", numberMatches(-130.1))
                .body("[0].'demonym'", containsString("Pitcairn Islander"))
                .body("[0].'area'", numberMatches(47.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-08:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Pitcairn Islands"))
                .body("[0].'numericCode'", containsString("612"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("NZD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Pitcairn"))
                .body("[0].'translations'.'es'", containsString("Islas Pitcairn"))
                .body("[0].'translations'.'fr'", containsString("Îles Pitcairn"))
                .body("[0].'translations'.'ja'", containsString("ピトケアン"))
                .body("[0].'translations'.'it'", containsString("Isole Pitcairn"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_358_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/addis%20ababa")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Ethiopia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".et"))
                .body("[0].'alpha2Code'", containsString("ET"))
                .body("[0].'alpha3Code'", containsString("ETH"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("251"))
                .body("[0].'capital'", containsString("Addis Ababa"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("ET", "ʾĪtyōṗṗyā", "Federal Democratic Republic of Ethiopia", "የኢትዮጵያ ፌዴራላዊ ዲሞክራሲያዊ ሪፐብሊክ"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(9.0076012E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(8.0))
                .body("[0].'latlng'[1]", numberMatches(38.0))
                .body("[0].'demonym'", containsString("Ethiopian"))
                .body("[0].'area'", numberMatches(1104300.0))
                .body("[0].'gini'", numberMatches(29.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("DJI", "ERI", "KEN", "SOM", "SSD", "SDN"))
                .body("[0].'nativeName'", containsString("ኢትዮጵያ"))
                .body("[0].'numericCode'", containsString("231"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ETB"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("am"))
                .body("[0].'translations'.'de'", containsString("Äthiopien"))
                .body("[0].'translations'.'es'", containsString("Etiopía"))
                .body("[0].'translations'.'fr'", containsString("Éthiopie"))
                .body("[0].'translations'.'ja'", containsString("エチオピア"))
                .body("[0].'translations'.'it'", containsString("Etiopia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_359_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/el")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Cyprus"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cy"))
                .body("[0].'alpha2Code'", containsString("CY"))
                .body("[0].'alpha3Code'", containsString("CYP"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("357"))
                .body("[0].'capital'", containsString("Nicosia"))
                .body("[0].'altSpellings'.size()", equalTo(6))
                .body("[0].'altSpellings'", hasItems("CY", "Kýpros", "Kıbrıs", "Republic of Cyprus", "Κυπριακή Δημοκρατία", "Kıbrıs Cumhuriyeti"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(858000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(35.0))
                .body("[0].'latlng'[1]", numberMatches(33.0))
                .body("[0].'demonym'", containsString("Cypriot"))
                .body("[0].'area'", numberMatches(9251.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("GBR"))
                .body("[0].'nativeName'", containsString("Κύπρος"))
                .body("[0].'numericCode'", containsString("196"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("el", "tr", "hy"))
                .body("[0].'translations'.'de'", containsString("Zypern"))
                .body("[0].'translations'.'es'", containsString("Chipre"))
                .body("[0].'translations'.'fr'", containsString("Chypre"))
                .body("[0].'translations'.'ja'", containsString("キプロス"))
                .body("[0].'translations'.'it'", containsString("Cipro"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Greece"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".gr"))
                .body("[1].'alpha2Code'", containsString("GR"))
                .body("[1].'alpha3Code'", containsString("GRC"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("30"))
                .body("[1].'capital'", containsString("Athens"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("GR", "Elláda", "Hellenic Republic", "Ελληνική Δημοκρατία"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Southern Europe"))
                .body("[1].'population'", numberMatches(1.0846979E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(39.0))
                .body("[1].'latlng'[1]", numberMatches(22.0))
                .body("[1].'demonym'", containsString("Greek"))
                .body("[1].'area'", numberMatches(131990.0))
                .body("[1].'gini'", numberMatches(34.3))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(4))
                .body("[1].'borders'", hasItems("ALB", "BGR", "TUR", "MKD"))
                .body("[1].'nativeName'", containsString("Ελλάδα"))
                .body("[1].'numericCode'", containsString("300"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EUR"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("el"))
                .body("[1].'translations'.'de'", containsString("Griechenland"))
                .body("[1].'translations'.'es'", containsString("Grecia"))
                .body("[1].'translations'.'fr'", containsString("Grèce"))
                .body("[1].'translations'.'ja'", containsString("ギリシャ"))
                .body("[1].'translations'.'it'", containsString("Grecia"))
                .body("[1].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_360_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/en")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(91))
                .body("[0].'name'", containsString("American Samoa"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".as"))
                .body("[0].'alpha2Code'", containsString("AS"))
                .body("[0].'alpha3Code'", containsString("ASM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Pago Pago"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AS", "Amerika Sāmoa", "Amelika Sāmoa", "Sāmoa Amelika"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Polynesia"))
                .body("[0].'population'", numberMatches(55519.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-14.33333333))
                .body("[0].'latlng'[1]", numberMatches(-170.0))
                .body("[0].'demonym'", containsString("American Samoan"))
                .body("[0].'area'", numberMatches(199.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-11:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("American Samoa"))
                .body("[0].'numericCode'", containsString("016"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "sm"))
                .body("[0].'translations'.'de'", containsString("Amerikanisch-Samoa"))
                .body("[0].'translations'.'es'", containsString("Samoa Americana"))
                .body("[0].'translations'.'fr'", containsString("Samoa américaines"))
                .body("[0].'translations'.'ja'", containsString("アメリカ領サモア"))
                .body("[0].'translations'.'it'", containsString("Samoa Americane"))
                .body("[0].'relevance'", containsString("0.5"))
                .body("[1].'name'", containsString("Anguilla"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ai"))
                .body("[1].'alpha2Code'", containsString("AI"))
                .body("[1].'alpha3Code'", containsString("AIA"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("1"))
                .body("[1].'capital'", containsString("The Valley"))
                .body("[1].'altSpellings'.size()", equalTo(1))
                .body("[1].'altSpellings'", hasItems("AI"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("Caribbean"))
                .body("[1].'population'", numberMatches(13452.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(18.25))
                .body("[1].'latlng'[1]", numberMatches(-63.16666666))
                .body("[1].'demonym'", containsString("Anguillian"))
                .body("[1].'area'", numberMatches(91.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-04:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Anguilla"))
                .body("[1].'numericCode'", containsString("660"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("XCD"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("en"))
                .body("[1].'translations'.'de'", containsString("Anguilla"))
                .body("[1].'translations'.'es'", containsString("Anguilla"))
                .body("[1].'translations'.'fr'", containsString("Anguilla"))
                .body("[1].'translations'.'ja'", containsString("アンギラ"))
                .body("[1].'translations'.'it'", containsString("Anguilla"))
                .body("[1].'relevance'", containsString("0.5"))
                .body("[2].'name'", containsString("Antarctica"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".aq"))
                .body("[2].'alpha2Code'", containsString("AQ"))
                .body("[2].'alpha3Code'", containsString("ATA"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("672"))
                .body("[2].'capital'", containsString(""))
                .body("[2].'altSpellings'.size()", equalTo(0))
                .body("[2].'region'", containsString("Polar"))
                .body("[2].'subregion'", containsString(""))
                .body("[2].'population'", numberMatches(1000.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-74.65))
                .body("[2].'latlng'[1]", numberMatches(4.48))
                .body("[2].'demonym'", containsString(""))
                .body("[2].'area'", numberMatches(1.4E7))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(8))
                .body("[2].'timezones'", hasItems("UTC-03:00", "UTC+03:00", "UTC+05:00", "UTC+06:00", "UTC+07:00", "UTC+08:00", "UTC+10:00", "UTC+12:00"))
                .body("[2].'borders'.size()", equalTo(0))
                .body("[2].'nativeName'", containsString("Antarctica"))
                .body("[2].'numericCode'", containsString("010"))
                .body("[2].'currencies'.size()", equalTo(2))
                .body("[2].'currencies'", hasItems("AUD", "GBP"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("en"))
                .body("[2].'translations'.'de'", containsString("Antarktika"))
                .body("[2].'translations'.'es'", containsString("Antártida"))
                .body("[2].'translations'.'fr'", containsString("Antarctique"))
                .body("[2].'translations'.'ja'", containsString("南極大陸"))
                .body("[2].'translations'.'it'", containsString("Antartide"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 88 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_361_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/es")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(24))
                .body("[0].'name'", containsString("Argentina"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ar"))
                .body("[0].'alpha2Code'", containsString("AR"))
                .body("[0].'alpha3Code'", containsString("ARG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("54"))
                .body("[0].'capital'", containsString("Buenos Aires"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("AR", "Argentine Republic", "República Argentina"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(4.3131966E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-34.0))
                .body("[0].'latlng'[1]", numberMatches(-64.0))
                .body("[0].'demonym'", containsString("Argentinean"))
                .body("[0].'area'", numberMatches(2780400.0))
                .body("[0].'gini'", numberMatches(44.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-03:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("BOL", "BRA", "CHL", "PRY", "URY"))
                .body("[0].'nativeName'", containsString("Argentina"))
                .body("[0].'numericCode'", containsString("032"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ARS"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("es", "gn"))
                .body("[0].'translations'.'de'", containsString("Argentinien"))
                .body("[0].'translations'.'es'", containsString("Argentina"))
                .body("[0].'translations'.'fr'", containsString("Argentine"))
                .body("[0].'translations'.'ja'", containsString("アルゼンチン"))
                .body("[0].'translations'.'it'", containsString("Argentina"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Belize"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".bz"))
                .body("[1].'alpha2Code'", containsString("BZ"))
                .body("[1].'alpha3Code'", containsString("BLZ"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("501"))
                .body("[1].'capital'", containsString("Belmopan"))
                .body("[1].'altSpellings'.size()", equalTo(1))
                .body("[1].'altSpellings'", hasItems("BZ"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("Central America"))
                .body("[1].'population'", numberMatches(368310.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(17.25))
                .body("[1].'latlng'[1]", numberMatches(-88.75))
                .body("[1].'demonym'", containsString("Belizean"))
                .body("[1].'area'", numberMatches(22966.0))
                .body("[1].'gini'", numberMatches(53.1))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-06:00"))
                .body("[1].'borders'.size()", equalTo(2))
                .body("[1].'borders'", hasItems("GTM", "MEX"))
                .body("[1].'nativeName'", containsString("Belize"))
                .body("[1].'numericCode'", containsString("084"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("BZD"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("en", "es"))
                .body("[1].'translations'.'de'", containsString("Belize"))
                .body("[1].'translations'.'es'", containsString("Belice"))
                .body("[1].'translations'.'fr'", containsString("Belize"))
                .body("[1].'translations'.'ja'", containsString("ベリーズ"))
                .body("[1].'translations'.'it'", containsString("Belize"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Bolivia"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".bo"))
                .body("[2].'alpha2Code'", containsString("BO"))
                .body("[2].'alpha3Code'", containsString("BOL"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("591"))
                .body("[2].'capital'", containsString("Sucre"))
                .body("[2].'altSpellings'.size()", equalTo(8))
                .body("[2].'altSpellings'", hasItems("BO", "Buliwya", "Wuliwya", "Plurinational State of Bolivia", "Estado Plurinacional de Bolivia", "Buliwya Mamallaqta", "Wuliwya Suyu", "Tetã Volívia"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("South America"))
                .body("[2].'population'", numberMatches(1.1410651E7))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-17.0))
                .body("[2].'latlng'[1]", numberMatches(-65.0))
                .body("[2].'demonym'", containsString("Bolivian"))
                .body("[2].'area'", numberMatches(1098581.0))
                .body("[2].'gini'", numberMatches(56.3))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC-04:00"))
                .body("[2].'borders'.size()", equalTo(5))
                .body("[2].'borders'", hasItems("ARG", "BRA", "CHL", "PRY", "PER"))
                .body("[2].'nativeName'", containsString("Bolivia"))
                .body("[2].'numericCode'", containsString("068"))
                .body("[2].'currencies'.size()", equalTo(2))
                .body("[2].'currencies'", hasItems("BOB", "BOV"))
                .body("[2].'languages'.size()", equalTo(3))
                .body("[2].'languages'", hasItems("es", "ay", "qu"))
                .body("[2].'translations'.'de'", containsString("Bolivien"))
                .body("[2].'translations'.'es'", containsString("Bolivia"))
                .body("[2].'translations'.'fr'", containsString("Bolivie"))
                .body("[2].'translations'.'ja'", containsString("ボリビア多民族国"))
                .body("[2].'translations'.'it'", containsString("Bolivia"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 21 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_362_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/et")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Estonia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ee"))
                .body("[0].'alpha2Code'", containsString("EE"))
                .body("[0].'alpha3Code'", containsString("EST"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("372"))
                .body("[0].'capital'", containsString("Tallinn"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("EE", "Eesti", "Republic of Estonia", "Eesti Vabariik"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(1313271.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(59.0))
                .body("[0].'latlng'[1]", numberMatches(26.0))
                .body("[0].'demonym'", containsString("Estonian"))
                .body("[0].'area'", numberMatches(45227.0))
                .body("[0].'gini'", numberMatches(36.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("LVA", "RUS"))
                .body("[0].'nativeName'", containsString("Eesti"))
                .body("[0].'numericCode'", containsString("233"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("et"))
                .body("[0].'translations'.'de'", containsString("Estland"))
                .body("[0].'translations'.'es'", containsString("Estonia"))
                .body("[0].'translations'.'fr'", containsString("Estonie"))
                .body("[0].'translations'.'ja'", containsString("エストニア"))
                .body("[0].'translations'.'it'", containsString("Estonia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_363_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/351?fields=_EM_6028_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_364_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/354?fields=h")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_365_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/355?fields=_EM_6089_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_366_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/jerusalem?fields=_EM_7766_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_367_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/lithuanian?fields=altSpellings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("LT", "Republic of Lithuania", "Lietuvos Respublika"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_368_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/213")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Algeria"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".dz"))
                .body("[0].'alpha2Code'", containsString("DZ"))
                .body("[0].'alpha3Code'", containsString("DZA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("213"))
                .body("[0].'capital'", containsString("Algiers"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("DZ", "Dzayer", "Algérie"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Northern Africa"))
                .body("[0].'population'", numberMatches(3.95E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(28.0))
                .body("[0].'latlng'[1]", numberMatches(3.0))
                .body("[0].'demonym'", containsString("Algerian"))
                .body("[0].'area'", numberMatches(2381741.0))
                .body("[0].'gini'", numberMatches(35.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("TUN", "LBY", "NER", "ESH", "MRT", "MLI", "MAR"))
                .body("[0].'nativeName'", containsString("الجزائر"))
                .body("[0].'numericCode'", containsString("012"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("DZD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Algerien"))
                .body("[0].'translations'.'es'", containsString("Argelia"))
                .body("[0].'translations'.'fr'", containsString("Algérie"))
                .body("[0].'translations'.'ja'", containsString("アルジェリア"))
                .body("[0].'translations'.'it'", containsString("Algeria"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_369_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/216")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Tunisia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tn"))
                .body("[0].'alpha2Code'", containsString("TN"))
                .body("[0].'alpha3Code'", containsString("TUN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("216"))
                .body("[0].'capital'", containsString("Tunis"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("TN", "Republic of Tunisia", "al-Jumhūriyyah at-Tūnisiyyah"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Northern Africa"))
                .body("[0].'population'", numberMatches(1.0982754E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(34.0))
                .body("[0].'latlng'[1]", numberMatches(9.0))
                .body("[0].'demonym'", containsString("Tunisian"))
                .body("[0].'area'", numberMatches(163610.0))
                .body("[0].'gini'", numberMatches(41.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("DZA", "LBY"))
                .body("[0].'nativeName'", containsString("تونس"))
                .body("[0].'numericCode'", containsString("788"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("TND"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Tunesien"))
                .body("[0].'translations'.'es'", containsString("Túnez"))
                .body("[0].'translations'.'fr'", containsString("Tunisie"))
                .body("[0].'translations'.'ja'", containsString("チュニジア"))
                .body("[0].'translations'.'it'", containsString("Tunisia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_370_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/218")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Libya"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ly"))
                .body("[0].'alpha2Code'", containsString("LY"))
                .body("[0].'alpha3Code'", containsString("LBY"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("218"))
                .body("[0].'capital'", containsString("Tripoli"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("LY", "State of Libya", "Dawlat Libya"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Northern Africa"))
                .body("[0].'population'", numberMatches(6278000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(25.0))
                .body("[0].'latlng'[1]", numberMatches(17.0))
                .body("[0].'demonym'", containsString("Libyan"))
                .body("[0].'area'", numberMatches(1759540.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("DZA", "TCD", "EGY", "NER", "SDN", "TUN"))
                .body("[0].'nativeName'", containsString("‏ليبيا"))
                .body("[0].'numericCode'", containsString("434"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("LYD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Libyen"))
                .body("[0].'translations'.'es'", containsString("Libia"))
                .body("[0].'translations'.'fr'", containsString("Libye"))
                .body("[0].'translations'.'ja'", containsString("リビア"))
                .body("[0].'translations'.'it'", containsString("Libia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_371_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/220")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("The Gambia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gm"))
                .body("[0].'alpha2Code'", containsString("GM"))
                .body("[0].'alpha3Code'", containsString("GMB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("220"))
                .body("[0].'capital'", containsString("Banjul"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("GM", "Republic of the Gambia"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(1882450.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(13.46666666))
                .body("[0].'latlng'[1]", numberMatches(-16.56666666))
                .body("[0].'demonym'", containsString("Gambian"))
                .body("[0].'area'", numberMatches(11295.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+00:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("SEN"))
                .body("[0].'nativeName'", containsString("Gambia"))
                .body("[0].'numericCode'", containsString("270"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("GMD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Gambia"))
                .body("[0].'translations'.'es'", containsString("Gambia"))
                .body("[0].'translations'.'fr'", containsString("Gambie"))
                .body("[0].'translations'.'ja'", containsString("ガンビア"))
                .body("[0].'translations'.'it'", containsString("Gambia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_372_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/357?fields=YWD")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_373_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/359?fields=YWD8")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_374_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/brazzaville")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Congo"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cg"))
                .body("[0].'alpha2Code'", containsString("CG"))
                .body("[0].'alpha3Code'", containsString("COG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("242"))
                .body("[0].'capital'", containsString("Brazzaville"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("CG", "Congo-Brazzaville"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(4741000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-1.0))
                .body("[0].'latlng'[1]", numberMatches(15.0))
                .body("[0].'demonym'", containsString("Congolese"))
                .body("[0].'area'", numberMatches(342000.0))
                .body("[0].'gini'", numberMatches(47.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("AGO", "CMR", "CAF", "COD", "GAB"))
                .body("[0].'nativeName'", containsString("République du Congo"))
                .body("[0].'numericCode'", containsString("178"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("XAF"))
                .body("[0].'currencies'[0].'name'", containsString("Central African CFA franc"))
                .body("[0].'currencies'[0].'symbol'", containsString("Fr"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("fr"))
                .body("[0].'languages'[0].'iso639_2'", containsString("fra"))
                .body("[0].'languages'[0].'name'", containsString("French"))
                .body("[0].'languages'[0].'nativeName'", containsString("français"))
                .body("[0].'languages'[1].'iso639_1'", containsString("ln"))
                .body("[0].'languages'[1].'iso639_2'", containsString("lin"))
                .body("[0].'languages'[1].'name'", containsString("Lingala"))
                .body("[0].'languages'[1].'nativeName'", containsString("Lingála"))
                .body("[0].'translations'.'de'", containsString("Kongo"))
                .body("[0].'translations'.'es'", containsString("Congo"))
                .body("[0].'translations'.'fr'", containsString("Congo"))
                .body("[0].'translations'.'ja'", containsString("コンゴ共和国"))
                .body("[0].'translations'.'it'", containsString("Congo"))
                .body("[0].'translations'.'br'", containsString("Congo"))
                .body("[0].'translations'.'pt'", containsString("Congo"))
                .body("[0].'translations'.'nl'", containsString("Congo [Republiek]"))
                .body("[0].'translations'.'hr'", containsString("Kongo"))
                .body("[0].'translations'.'fa'", containsString("کنگو"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/cog.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[0].'cioc'", containsString("CGO"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_375_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/macedonian?fields=Epv")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_376_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/malawian?fields=Epn")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_377_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/malaysian?fields=Epnk")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_378_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/221")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Senegal"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sn"))
                .body("[0].'alpha2Code'", containsString("SN"))
                .body("[0].'alpha3Code'", containsString("SEN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("221"))
                .body("[0].'capital'", containsString("Dakar"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("SN", "Republic of Senegal", "République du Sénégal"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(1.3508715E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(14.0))
                .body("[0].'latlng'[1]", numberMatches(-14.0))
                .body("[0].'demonym'", containsString("Senegalese"))
                .body("[0].'area'", numberMatches(196722.0))
                .body("[0].'gini'", numberMatches(39.2))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("GMB", "GIN", "GNB", "MLI", "MRT"))
                .body("[0].'nativeName'", containsString("Sénégal"))
                .body("[0].'numericCode'", containsString("686"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XOF"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Senegal"))
                .body("[0].'translations'.'es'", containsString("Senegal"))
                .body("[0].'translations'.'fr'", containsString("Sénégal"))
                .body("[0].'translations'.'ja'", containsString("セネガル"))
                .body("[0].'translations'.'it'", containsString("Senegal"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_379_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/222")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Mauritania"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mr"))
                .body("[0].'alpha2Code'", containsString("MR"))
                .body("[0].'alpha3Code'", containsString("MRT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("222"))
                .body("[0].'capital'", containsString("Nouakchott"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MR", "Islamic Republic of Mauritania", "al-Jumhūriyyah al-ʾIslāmiyyah al-Mūrītāniyyah"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(3631775.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(20.0))
                .body("[0].'latlng'[1]", numberMatches(-12.0))
                .body("[0].'demonym'", containsString("Mauritanian"))
                .body("[0].'area'", numberMatches(1030700.0))
                .body("[0].'gini'", numberMatches(40.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("DZA", "MLI", "SEN", "ESH"))
                .body("[0].'nativeName'", containsString("موريتانيا"))
                .body("[0].'numericCode'", containsString("478"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MRO"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Mauretanien"))
                .body("[0].'translations'.'es'", containsString("Mauritania"))
                .body("[0].'translations'.'fr'", containsString("Mauritanie"))
                .body("[0].'translations'.'ja'", containsString("モーリタニア"))
                .body("[0].'translations'.'it'", containsString("Mauritania"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_380_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/el%20aaiun")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Western Sahara"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".eh"))
                .body("[0].'alpha2Code'", containsString("EH"))
                .body("[0].'alpha3Code'", containsString("ESH"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("212"))
                .body("[0].'capital'", containsString("El Aaiún"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("EH", "Taneẓroft Tutrimt"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Northern Africa"))
                .body("[0].'population'", numberMatches(510713.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(24.5))
                .body("[0].'latlng'[1]", numberMatches(-13.0))
                .body("[0].'demonym'", containsString("Sahrawi"))
                .body("[0].'area'", numberMatches(266000.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+00:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("DZA", "MRT", "MAR"))
                .body("[0].'nativeName'", containsString("الصحراء الغربية"))
                .body("[0].'numericCode'", containsString("732"))
                .body("[0].'currencies'.size()", equalTo(3))
                .body("[0].'currencies'", hasItems("MAD", "DZD", "MRO"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("Westsahara"))
                .body("[0].'translations'.'es'", containsString("Sahara Occidental"))
                .body("[0].'translations'.'fr'", containsString("Sahara Occidental"))
                .body("[0].'translations'.'ja'", containsString("西サハラ"))
                .body("[0].'translations'.'it'", containsString("Sahara Occidentale"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_381_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/fakaofo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Tokelau"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tk"))
                .body("[0].'alpha2Code'", containsString("TK"))
                .body("[0].'alpha3Code'", containsString("TKL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("690"))
                .body("[0].'capital'", containsString("Fakaofo"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("TK"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Polynesia"))
                .body("[0].'population'", numberMatches(1411.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-9.0))
                .body("[0].'latlng'[1]", numberMatches(-172.0))
                .body("[0].'demonym'", containsString("Tokelauan"))
                .body("[0].'area'", numberMatches(12.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+13:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Tokelau"))
                .body("[0].'numericCode'", containsString("772"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("NZD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Tokelau"))
                .body("[0].'translations'.'es'", containsString("Islas Tokelau"))
                .body("[0].'translations'.'fr'", containsString("Tokelau"))
                .body("[0].'translations'.'ja'", containsString("トケラウ"))
                .body("[0].'translations'.'it'", containsString("Isole Tokelau"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_382_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/freetown")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Sierra Leone"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sl"))
                .body("[0].'alpha2Code'", containsString("SL"))
                .body("[0].'alpha3Code'", containsString("SLE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("232"))
                .body("[0].'capital'", containsString("Freetown"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("SL", "Republic of Sierra Leone"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(6453000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(8.5))
                .body("[0].'latlng'[1]", numberMatches(-11.5))
                .body("[0].'demonym'", containsString("Sierra Leonean"))
                .body("[0].'area'", numberMatches(71740.0))
                .body("[0].'gini'", numberMatches(42.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("GIN", "LBR"))
                .body("[0].'nativeName'", containsString("Sierra Leone"))
                .body("[0].'numericCode'", containsString("694"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("SLL"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Sierra Leone"))
                .body("[0].'translations'.'es'", containsString("Sierra Leone"))
                .body("[0].'translations'.'fr'", containsString("Sierra Leone"))
                .body("[0].'translations'.'ja'", containsString("シエラレオネ"))
                .body("[0].'translations'.'it'", containsString("Sierra Leone"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_383_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/pristina")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Republic of Kosovo"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(""))
                .body("[0].'alpha2Code'", containsString("XK"))
                .body("[0].'alpha3Code'", containsString("KOS"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("383"))
                .body("[0].'capital'", containsString("Pristina"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("XK", "Република Косово"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(1733842.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(42.666667))
                .body("[0].'latlng'[1]", numberMatches(21.166667))
                .body("[0].'demonym'", containsString("Kosovar"))
                .body("[0].'area'", numberMatches(10908.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("ALB", "MKD", "MNE", "SRB"))
                .body("[0].'nativeName'", containsString("Republika e Kosovës"))
                .body("[0].'numericCode'", containsString("780"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("sq", "sr"))
                .body("[0].'translations'.'de'", nullValue())
                .body("[0].'translations'.'es'", containsString("Kosovo"))
                .body("[0].'translations'.'fr'", nullValue())
                .body("[0].'translations'.'ja'", nullValue())
                .body("[0].'translations'.'it'", nullValue())
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_384_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/pyongyang")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("North Korea"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".kp"))
                .body("[0].'alpha2Code'", containsString("KP"))
                .body("[0].'alpha3Code'", containsString("PRK"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("850"))
                .body("[0].'capital'", containsString("Pyongyang"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("KP", "Democratic People's Republic of Korea", "조선민주주의인민공화국", "Chosŏn Minjujuŭi Inmin Konghwaguk"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(2.5155E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(40.0))
                .body("[0].'latlng'[1]", numberMatches(127.0))
                .body("[0].'demonym'", containsString("North Korean"))
                .body("[0].'area'", numberMatches(120538.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+09:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("CHN", "KOR", "RUS"))
                .body("[0].'nativeName'", containsString("북한"))
                .body("[0].'numericCode'", containsString("408"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("KPW"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ko"))
                .body("[0].'translations'.'de'", containsString("Nordkorea"))
                .body("[0].'translations'.'es'", containsString("Corea del Norte"))
                .body("[0].'translations'.'fr'", containsString("Corée du Nord"))
                .body("[0].'translations'.'ja'", containsString("朝鮮民主主義人民共和国"))
                .body("[0].'translations'.'it'", containsString("Corea del Nord"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_385_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/rabat")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Morocco"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ma"))
                .body("[0].'alpha2Code'", containsString("MA"))
                .body("[0].'alpha3Code'", containsString("MAR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("212"))
                .body("[0].'capital'", containsString("Rabat"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MA", "Kingdom of Morocco", "Al-Mamlakah al-Maġribiyah"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Northern Africa"))
                .body("[0].'population'", numberMatches(3.3337529E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(32.0))
                .body("[0].'latlng'[1]", numberMatches(-5.0))
                .body("[0].'demonym'", containsString("Moroccan"))
                .body("[0].'area'", numberMatches(446550.0))
                .body("[0].'gini'", numberMatches(40.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("DZA", "ESH", "ESP"))
                .body("[0].'nativeName'", containsString("المغرب"))
                .body("[0].'numericCode'", containsString("504"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MAD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Marokko"))
                .body("[0].'translations'.'es'", containsString("Marruecos"))
                .body("[0].'translations'.'fr'", containsString("Maroc"))
                .body("[0].'translations'.'ja'", containsString("モロッコ"))
                .body("[0].'translations'.'it'", containsString("Marocco"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_386_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/36?fields=altSpellings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("HU"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_387_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/370?fields=altSpellings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("LT", "Republic of Lithuania", "Lietuvos Respublika"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_388_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/papua%20new%20guinean?fields=G_RkIi2aC97HudJ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_389_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/reykjavik")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Iceland"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".is"))
                .body("[0].'alpha2Code'", containsString("IS"))
                .body("[0].'alpha3Code'", containsString("ISL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("354"))
                .body("[0].'capital'", containsString("Reykjavík"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("IS", "Island", "Republic of Iceland", "Lýðveldið Ísland"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(330610.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(65.0))
                .body("[0].'latlng'[1]", numberMatches(-18.0))
                .body("[0].'demonym'", containsString("Icelander"))
                .body("[0].'area'", numberMatches(103000.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Ísland"))
                .body("[0].'numericCode'", containsString("352"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ISK"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("is"))
                .body("[0].'translations'.'de'", containsString("Island"))
                .body("[0].'translations'.'es'", containsString("Islandia"))
                .body("[0].'translations'.'fr'", containsString("Islande"))
                .body("[0].'translations'.'ja'", containsString("アイスランド"))
                .body("[0].'translations'.'it'", containsString("Islanda"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_390_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/riga")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Latvia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".lv"))
                .body("[0].'alpha2Code'", containsString("LV"))
                .body("[0].'alpha3Code'", containsString("LVA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("371"))
                .body("[0].'capital'", containsString("Riga"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("LV", "Republic of Latvia", "Latvijas Republika"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(1980700.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(57.0))
                .body("[0].'latlng'[1]", numberMatches(25.0))
                .body("[0].'demonym'", containsString("Latvian"))
                .body("[0].'area'", numberMatches(64559.0))
                .body("[0].'gini'", numberMatches(36.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("BLR", "EST", "LTU", "RUS"))
                .body("[0].'nativeName'", containsString("Latvija"))
                .body("[0].'numericCode'", containsString("428"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("lv"))
                .body("[0].'translations'.'de'", containsString("Lettland"))
                .body("[0].'translations'.'es'", containsString("Letonia"))
                .body("[0].'translations'.'fr'", containsString("Lettonie"))
                .body("[0].'translations'.'ja'", containsString("ラトビア"))
                .body("[0].'translations'.'it'", containsString("Lettonia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_391_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/road%20town")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Virgin Islands (British)"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".vg"))
                .body("[0].'alpha2Code'", containsString("VG"))
                .body("[0].'alpha3Code'", containsString("VGB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Road Town"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("VG"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(28054.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(18.431383))
                .body("[0].'latlng'[1]", numberMatches(-64.62305))
                .body("[0].'demonym'", containsString("Virgin Islander"))
                .body("[0].'area'", numberMatches(151.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("British Virgin Islands"))
                .body("[0].'numericCode'", containsString("092"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Britische Jungferninseln"))
                .body("[0].'translations'.'es'", containsString("Islas Vírgenes del Reino Unido"))
                .body("[0].'translations'.'fr'", containsString("Îles Vierges britanniques"))
                .body("[0].'translations'.'ja'", containsString("イギリス領ヴァージン諸島"))
                .body("[0].'translations'.'it'", containsString("Isole Vergini Britanniche"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_392_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/nicosia?fields=callingCodes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("357"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_393_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/bangladeshi?fields=bTeIn_G4Zeq")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_394_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/djibouti")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Djibouti"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".dj"))
                .body("[0].'alpha2Code'", containsString("DJ"))
                .body("[0].'alpha3Code'", containsString("DJI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("253"))
                .body("[0].'capital'", containsString("Djibouti"))
                .body("[0].'altSpellings'.size()", equalTo(7))
                .body("[0].'altSpellings'", hasItems("DJ", "Jabuuti", "Gabuuti", "Republic of Djibouti", "République de Djibouti", "Gabuutih Ummuuno", "Jamhuuriyadda Jabuuti"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(888000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(11.5))
                .body("[0].'latlng'[1]", numberMatches(43.0))
                .body("[0].'demonym'", containsString("Djibouti"))
                .body("[0].'area'", numberMatches(23200.0))
                .body("[0].'gini'", numberMatches(40.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("ERI", "ETH", "SOM"))
                .body("[0].'nativeName'", containsString("Djibouti"))
                .body("[0].'numericCode'", containsString("262"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("DJF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "ar"))
                .body("[0].'translations'.'de'", containsString("Dschibuti"))
                .body("[0].'translations'.'es'", containsString("Yibuti"))
                .body("[0].'translations'.'fr'", containsString("Djibouti"))
                .body("[0].'translations'.'ja'", containsString("ジブチ"))
                .body("[0].'translations'.'it'", containsString("Gibuti"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_395_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/doha")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Qatar"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".qa"))
                .body("[0].'alpha2Code'", containsString("QA"))
                .body("[0].'alpha3Code'", containsString("QAT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("974"))
                .body("[0].'capital'", containsString("Doha"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("QA", "State of Qatar", "Dawlat Qaṭar"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(2120129.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(25.5))
                .body("[0].'latlng'[1]", numberMatches(51.25))
                .body("[0].'demonym'", containsString("Qatari"))
                .body("[0].'area'", numberMatches(11586.0))
                .body("[0].'gini'", numberMatches(41.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("SAU"))
                .body("[0].'nativeName'", containsString("قطر"))
                .body("[0].'numericCode'", containsString("634"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("QAR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Katar"))
                .body("[0].'translations'.'es'", containsString("Catar"))
                .body("[0].'translations'.'fr'", containsString("Qatar"))
                .body("[0].'translations'.'ja'", containsString("カタール"))
                .body("[0].'translations'.'it'", containsString("Qatar"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_396_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/kn?" + 
                    "fields=translations&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'translations'.'br'", containsString("São Cristóvão e Neves"))
                .body("[0].'translations'.'pt'", containsString("São Cristóvão e Neves"))
                .body("[0].'translations'.'nl'", containsString("Saint Kitts en Nevis"))
                .body("[0].'translations'.'hr'", containsString("Sveti Kristof i Nevis"))
                .body("[0].'translations'.'fa'", containsString("سنت کیتس و نویس"))
                .body("[0].'translations'.'de'", containsString("St. Kitts und Nevis"))
                .body("[0].'translations'.'es'", containsString("San Cristóbal y Nieves"))
                .body("[0].'translations'.'fr'", containsString("Saint-Christophe-et-Niévès"))
                .body("[0].'translations'.'ja'", containsString("セントクリストファー・ネイビス"))
                .body("[0].'translations'.'it'", containsString("Saint Kitts e Nevis"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_397_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/bratislava")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Slovakia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sk"))
                .body("[0].'alpha2Code'", containsString("SK"))
                .body("[0].'alpha3Code'", containsString("SVK"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("421"))
                .body("[0].'capital'", containsString("Bratislava"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("SK", "Slovak Republic", "Slovenská republika"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(5426252.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(48.66666666))
                .body("[0].'latlng'[1]", numberMatches(19.5))
                .body("[0].'demonym'", containsString("Slovak"))
                .body("[0].'area'", numberMatches(49037.0))
                .body("[0].'gini'", numberMatches(26.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("AUT", "CZE", "HUN", "POL", "UKR"))
                .body("[0].'nativeName'", containsString("Slovensko"))
                .body("[0].'numericCode'", containsString("703"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("EUR"))
                .body("[0].'currencies'[0].'name'", containsString("Euro"))
                .body("[0].'currencies'[0].'symbol'", containsString("€"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("sk"))
                .body("[0].'languages'[0].'iso639_2'", containsString("slk"))
                .body("[0].'languages'[0].'name'", containsString("Slovak"))
                .body("[0].'languages'[0].'nativeName'", containsString("slovenčina"))
                .body("[0].'translations'.'de'", containsString("Slowakei"))
                .body("[0].'translations'.'es'", containsString("República Eslovaca"))
                .body("[0].'translations'.'fr'", containsString("Slovaquie"))
                .body("[0].'translations'.'ja'", containsString("スロバキア"))
                .body("[0].'translations'.'it'", containsString("Slovacchia"))
                .body("[0].'translations'.'br'", containsString("Eslováquia"))
                .body("[0].'translations'.'pt'", containsString("Eslováquia"))
                .body("[0].'translations'.'nl'", containsString("Slowakije"))
                .body("[0].'translations'.'hr'", containsString("Slovačka"))
                .body("[0].'translations'.'fa'", containsString("اسلواکی"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/svk.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("EU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("European Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("SVK"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_398_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/guatemalan?fields=altSpellings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("GT"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_399_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/guinea-bissauan?fields=altSpellings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("GW", "Republic of Guinea-Bissau", "República da Guiné-Bissau"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_400_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/353")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Republic of Ireland"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ie"))
                .body("[0].'alpha2Code'", containsString("IE"))
                .body("[0].'alpha3Code'", containsString("IRL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("353"))
                .body("[0].'capital'", containsString("Dublin"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("IE", "Éire", "Republic of Ireland", "Poblacht na hÉireann"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(6378000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(53.0))
                .body("[0].'latlng'[1]", numberMatches(-8.0))
                .body("[0].'demonym'", containsString("Irish"))
                .body("[0].'area'", numberMatches(70273.0))
                .body("[0].'gini'", numberMatches(34.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("GBR"))
                .body("[0].'nativeName'", containsString("Éire"))
                .body("[0].'numericCode'", containsString("372"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("ga", "en"))
                .body("[0].'translations'.'de'", containsString("Irland"))
                .body("[0].'translations'.'es'", containsString("Irlanda"))
                .body("[0].'translations'.'fr'", containsString("Irlande"))
                .body("[0].'translations'.'ja'", containsString("アイルランド"))
                .body("[0].'translations'.'it'", containsString("Irlanda"))
                .body("[0].'relevance'", containsString("1.2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_401_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/ff")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Burkina Faso"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bf"))
                .body("[0].'alpha2Code'", containsString("BF"))
                .body("[0].'alpha3Code'", containsString("BFA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("226"))
                .body("[0].'capital'", containsString("Ouagadougou"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("BF"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(1.8450494E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(13.0))
                .body("[0].'latlng'[1]", numberMatches(-2.0))
                .body("[0].'demonym'", containsString("Burkinabe"))
                .body("[0].'area'", numberMatches(272967.0))
                .body("[0].'gini'", numberMatches(39.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("BEN", "CIV", "GHA", "MLI", "NER", "TGO"))
                .body("[0].'nativeName'", containsString("Burkina Faso"))
                .body("[0].'numericCode'", containsString("854"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XOF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "ff"))
                .body("[0].'translations'.'de'", containsString("Burkina Faso"))
                .body("[0].'translations'.'es'", containsString("Burkina Faso"))
                .body("[0].'translations'.'fr'", containsString("Burkina Faso"))
                .body("[0].'translations'.'ja'", containsString("ブルキナファソ"))
                .body("[0].'translations'.'it'", containsString("Burkina Faso"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Guinea"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".gn"))
                .body("[1].'alpha2Code'", containsString("GN"))
                .body("[1].'alpha3Code'", containsString("GIN"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("224"))
                .body("[1].'capital'", containsString("Conakry"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("GN", "Republic of Guinea", "République de Guinée"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Western Africa"))
                .body("[1].'population'", numberMatches(1.0628972E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(11.0))
                .body("[1].'latlng'[1]", numberMatches(-10.0))
                .body("[1].'demonym'", containsString("Guinean"))
                .body("[1].'area'", numberMatches(245857.0))
                .body("[1].'gini'", numberMatches(39.4))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC"))
                .body("[1].'borders'.size()", equalTo(6))
                .body("[1].'borders'", hasItems("CIV", "GNB", "LBR", "MLI", "SEN", "SLE"))
                .body("[1].'nativeName'", containsString("Guinée"))
                .body("[1].'numericCode'", containsString("324"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("GNF"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("fr", "ff"))
                .body("[1].'translations'.'de'", containsString("Guinea"))
                .body("[1].'translations'.'es'", containsString("Guinea"))
                .body("[1].'translations'.'fr'", containsString("Guinée"))
                .body("[1].'translations'.'ja'", containsString("ギニア"))
                .body("[1].'translations'.'it'", containsString("Guinea"))
                .body("[1].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_402_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/fj")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Fiji"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".fj"))
                .body("[0].'alpha2Code'", containsString("FJ"))
                .body("[0].'alpha3Code'", containsString("FJI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("679"))
                .body("[0].'capital'", containsString("Suva"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("FJ", "Viti", "Republic of Fiji", "Matanitu ko Viti", "Fijī Gaṇarājya"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Melanesia"))
                .body("[0].'population'", numberMatches(859178.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-18.0))
                .body("[0].'latlng'[1]", numberMatches(175.0))
                .body("[0].'demonym'", containsString("Fijian"))
                .body("[0].'area'", numberMatches(18272.0))
                .body("[0].'gini'", numberMatches(42.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Fiji"))
                .body("[0].'numericCode'", containsString("242"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("FJD"))
                .body("[0].'languages'.size()", equalTo(4))
                .body("[0].'languages'", hasItems("en", "fj", "hi", "ur"))
                .body("[0].'translations'.'de'", containsString("Fidschi"))
                .body("[0].'translations'.'es'", containsString("Fiyi"))
                .body("[0].'translations'.'fr'", containsString("Fidji"))
                .body("[0].'translations'.'ja'", containsString("フィジー"))
                .body("[0].'translations'.'it'", containsString("Figi"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_403_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/fr")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(45))
                .body("[0].'name'", containsString("Belgium"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".be"))
                .body("[0].'alpha2Code'", containsString("BE"))
                .body("[0].'alpha3Code'", containsString("BEL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("32"))
                .body("[0].'capital'", containsString("Brussels"))
                .body("[0].'altSpellings'.size()", equalTo(9))
                .body("[0].'altSpellings'", hasItems("BE", "België", "Belgie", "Belgien", "Belgique", "Kingdom of Belgium", "Koninkrijk België", "Royaume de Belgique", "Königreich Belgien"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(1.124833E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(50.83333333))
                .body("[0].'latlng'[1]", numberMatches(4.0))
                .body("[0].'demonym'", containsString("Belgian"))
                .body("[0].'area'", numberMatches(30528.0))
                .body("[0].'gini'", numberMatches(33.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("FRA", "DEU", "LUX", "NLD"))
                .body("[0].'nativeName'", containsString("België"))
                .body("[0].'numericCode'", containsString("056"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("nl", "fr", "de"))
                .body("[0].'translations'.'de'", containsString("Belgien"))
                .body("[0].'translations'.'es'", containsString("Bélgica"))
                .body("[0].'translations'.'fr'", containsString("Belgique"))
                .body("[0].'translations'.'ja'", containsString("ベルギー"))
                .body("[0].'translations'.'it'", containsString("Belgio"))
                .body("[0].'relevance'", containsString("1.5"))
                .body("[1].'name'", containsString("Benin"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".bj"))
                .body("[1].'alpha2Code'", containsString("BJ"))
                .body("[1].'alpha3Code'", containsString("BEN"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("229"))
                .body("[1].'capital'", containsString("Porto-Novo"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("BJ", "Republic of Benin", "République du Bénin"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Western Africa"))
                .body("[1].'population'", numberMatches(1.0315244E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(9.5))
                .body("[1].'latlng'[1]", numberMatches(2.25))
                .body("[1].'demonym'", containsString("Beninese"))
                .body("[1].'area'", numberMatches(112622.0))
                .body("[1].'gini'", numberMatches(38.6))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(4))
                .body("[1].'borders'", hasItems("BFA", "NER", "NGA", "TGO"))
                .body("[1].'nativeName'", containsString("Bénin"))
                .body("[1].'numericCode'", containsString("204"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("XOF"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("fr"))
                .body("[1].'translations'.'de'", containsString("Benin"))
                .body("[1].'translations'.'es'", containsString("Benín"))
                .body("[1].'translations'.'fr'", containsString("Bénin"))
                .body("[1].'translations'.'ja'", containsString("ベナン"))
                .body("[1].'translations'.'it'", containsString("Benin"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Burkina Faso"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".bf"))
                .body("[2].'alpha2Code'", containsString("BF"))
                .body("[2].'alpha3Code'", containsString("BFA"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("226"))
                .body("[2].'capital'", containsString("Ouagadougou"))
                .body("[2].'altSpellings'.size()", equalTo(1))
                .body("[2].'altSpellings'", hasItems("BF"))
                .body("[2].'region'", containsString("Africa"))
                .body("[2].'subregion'", containsString("Western Africa"))
                .body("[2].'population'", numberMatches(1.8450494E7))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(13.0))
                .body("[2].'latlng'[1]", numberMatches(-2.0))
                .body("[2].'demonym'", containsString("Burkinabe"))
                .body("[2].'area'", numberMatches(272967.0))
                .body("[2].'gini'", numberMatches(39.8))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC"))
                .body("[2].'borders'.size()", equalTo(6))
                .body("[2].'borders'", hasItems("BEN", "CIV", "GHA", "MLI", "NER", "TGO"))
                .body("[2].'nativeName'", containsString("Burkina Faso"))
                .body("[2].'numericCode'", containsString("854"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("XOF"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'", hasItems("fr", "ff"))
                .body("[2].'translations'.'de'", containsString("Burkina Faso"))
                .body("[2].'translations'.'es'", containsString("Burkina Faso"))
                .body("[2].'translations'.'fr'", containsString("Burkina Faso"))
                .body("[2].'translations'.'ja'", containsString("ブルキナファソ"))
                .body("[2].'translations'.'it'", containsString("Burkina Faso"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 42 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_404_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/kp?" + 
                    "fields=alpha3Code&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha3Code'", containsString("PRK"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_405_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/380?fields=_EM_6476_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_406_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/mogadishu?fields=NvK8_3Wnq3cZoBQ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_407_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/ashgabat")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Turkmenistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tm"))
                .body("[0].'alpha2Code'", containsString("TM"))
                .body("[0].'alpha3Code'", containsString("TKM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("993"))
                .body("[0].'capital'", containsString("Ashgabat"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("TM"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Central Asia"))
                .body("[0].'population'", numberMatches(4751120.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(40.0))
                .body("[0].'latlng'[1]", numberMatches(60.0))
                .body("[0].'demonym'", containsString("Turkmen"))
                .body("[0].'area'", numberMatches(488100.0))
                .body("[0].'gini'", numberMatches(40.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+05:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("AFG", "IRN", "KAZ", "UZB"))
                .body("[0].'nativeName'", containsString("Türkmenistan"))
                .body("[0].'numericCode'", containsString("795"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("TMT"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("tk", "ru"))
                .body("[0].'translations'.'de'", containsString("Turkmenistan"))
                .body("[0].'translations'.'es'", containsString("Turkmenistán"))
                .body("[0].'translations'.'fr'", containsString("Turkménistan"))
                .body("[0].'translations'.'ja'", containsString("トルクメニスタン"))
                .body("[0].'translations'.'it'", containsString("Turkmenistan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_408_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/asmara")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Eritrea"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".er"))
                .body("[0].'alpha2Code'", containsString("ER"))
                .body("[0].'alpha3Code'", containsString("ERI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("291"))
                .body("[0].'capital'", containsString("Asmara"))
                .body("[0].'altSpellings'.size()", equalTo(7))
                .body("[0].'altSpellings'", hasItems("ER", "State of Eritrea", "ሃገረ ኤርትራ", "Dawlat Iritriyá", "ʾErtrā", "Iritriyā", ""))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(5228000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(15.0))
                .body("[0].'latlng'[1]", numberMatches(39.0))
                .body("[0].'demonym'", containsString("Eritrean"))
                .body("[0].'area'", numberMatches(117600.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("DJI", "ETH", "SDN"))
                .body("[0].'nativeName'", containsString("ኤርትራ"))
                .body("[0].'numericCode'", containsString("232"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ERN"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("ti", "ar", "en"))
                .body("[0].'translations'.'de'", containsString("Eritrea"))
                .body("[0].'translations'.'es'", containsString("Eritrea"))
                .body("[0].'translations'.'fr'", containsString("Érythrée"))
                .body("[0].'translations'.'ja'", containsString("エリトリア"))
                .body("[0].'translations'.'it'", containsString("Eritrea"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_409_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/jo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Jordan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".jo"))
                .body("[0].'alpha2Code'", containsString("JO"))
                .body("[0].'alpha3Code'", containsString("JOR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("962"))
                .body("[0].'capital'", containsString("Amman"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("JO", "Hashemite Kingdom of Jordan", "al-Mamlakah al-Urdunīyah al-Hāshimīyah"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(6767600.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(31.0))
                .body("[0].'latlng'[1]", numberMatches(36.0))
                .body("[0].'demonym'", containsString("Jordanian"))
                .body("[0].'area'", numberMatches(89342.0))
                .body("[0].'gini'", numberMatches(35.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("IRQ", "ISR", "SAU", "SYR"))
                .body("[0].'nativeName'", containsString("الأردن"))
                .body("[0].'numericCode'", containsString("400"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("JOD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Jordanien"))
                .body("[0].'translations'.'es'", containsString("Jordania"))
                .body("[0].'translations'.'fr'", containsString("Jordanie"))
                .body("[0].'translations'.'ja'", containsString("ヨルダン"))
                .body("[0].'translations'.'it'", containsString("Giordania"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Iran"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ir"))
                .body("[1].'alpha2Code'", containsString("IR"))
                .body("[1].'alpha3Code'", containsString("IRN"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("98"))
                .body("[1].'capital'", containsString("Tehran"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("IR", "Islamic Republic of Iran", "Jomhuri-ye Eslāmi-ye Irān"))
                .body("[1].'region'", containsString("Asia"))
                .body("[1].'subregion'", containsString("Southern Asia"))
                .body("[1].'population'", numberMatches(7.85725E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(32.0))
                .body("[1].'latlng'[1]", numberMatches(53.0))
                .body("[1].'demonym'", containsString("Iranian"))
                .body("[1].'area'", numberMatches(1648195.0))
                .body("[1].'gini'", numberMatches(38.3))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+03:30"))
                .body("[1].'borders'.size()", equalTo(7))
                .body("[1].'borders'", hasItems("AFG", "ARM", "AZE", "IRQ", "PAK", "TUR", "TKM"))
                .body("[1].'nativeName'", containsString("ایران"))
                .body("[1].'numericCode'", containsString("364"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("IRR"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("fa"))
                .body("[1].'translations'.'de'", containsString("Iran"))
                .body("[1].'translations'.'es'", containsString("Iran"))
                .body("[1].'translations'.'fr'", containsString("Iran"))
                .body("[1].'translations'.'ja'", containsString("イラン・イスラム共和国"))
                .body("[1].'translations'.'it'", nullValue())
                .body("[1].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_410_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/jordan?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Jordan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".jo"))
                .body("[0].'alpha2Code'", containsString("JO"))
                .body("[0].'alpha3Code'", containsString("JOR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("962"))
                .body("[0].'capital'", containsString("Amman"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("JO", "Hashemite Kingdom of Jordan", "al-Mamlakah al-Urdunīyah al-Hāshimīyah"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(6767600.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(31.0))
                .body("[0].'latlng'[1]", numberMatches(36.0))
                .body("[0].'demonym'", containsString("Jordanian"))
                .body("[0].'area'", numberMatches(89342.0))
                .body("[0].'gini'", numberMatches(35.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("IRQ", "ISR", "SAU", "SYR"))
                .body("[0].'nativeName'", containsString("الأردن"))
                .body("[0].'numericCode'", containsString("400"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("JOD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Jordanien"))
                .body("[0].'translations'.'es'", containsString("Jordania"))
                .body("[0].'translations'.'fr'", containsString("Jordanie"))
                .body("[0].'translations'.'ja'", containsString("ヨルダン"))
                .body("[0].'translations'.'it'", containsString("Giordania"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_411_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/zagreb")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Croatia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".hr"))
                .body("[0].'alpha2Code'", containsString("HR"))
                .body("[0].'alpha3Code'", containsString("HRV"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("385"))
                .body("[0].'capital'", containsString("Zagreb"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("HR", "Hrvatska", "Republic of Croatia", "Republika Hrvatska"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(4246800.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(45.16666666))
                .body("[0].'latlng'[1]", numberMatches(15.5))
                .body("[0].'demonym'", containsString("Croatian"))
                .body("[0].'area'", numberMatches(56594.0))
                .body("[0].'gini'", numberMatches(33.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("BIH", "HUN", "MNE", "SRB", "SVN"))
                .body("[0].'nativeName'", containsString("Hrvatska"))
                .body("[0].'numericCode'", containsString("191"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("HRK"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("hr"))
                .body("[0].'translations'.'de'", containsString("Kroatien"))
                .body("[0].'translations'.'es'", containsString("Croacia"))
                .body("[0].'translations'.'fr'", containsString("Croatie"))
                .body("[0].'translations'.'ja'", containsString("クロアチア"))
                .body("[0].'translations'.'it'", containsString("Croazia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_412_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/abu%20dhabi")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("United Arab Emirates"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ae"))
                .body("[0].'alpha2Code'", containsString("AE"))
                .body("[0].'alpha3Code'", containsString("ARE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("971"))
                .body("[0].'capital'", containsString("Abu Dhabi"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AE", "UAE"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(9157000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(24.0))
                .body("[0].'latlng'[1]", numberMatches(54.0))
                .body("[0].'demonym'", containsString("Emirati"))
                .body("[0].'area'", numberMatches(83600.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("OMN", "SAU"))
                .body("[0].'nativeName'", containsString("دولة الإمارات العربية المتحدة"))
                .body("[0].'numericCode'", containsString("784"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AED"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Vereinigte Arabische Emirate"))
                .body("[0].'translations'.'es'", containsString("Emiratos Árabes Unidos"))
                .body("[0].'translations'.'fr'", containsString("Émirats arabes unis"))
                .body("[0].'translations'.'ja'", containsString("アラブ首長国連邦"))
                .body("[0].'translations'.'it'", containsString("Emirati Arabi Uniti"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_413_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/banjul?fields=_EM_6621_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_414_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/beijing?fields=_EM_6621_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_415_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/bonaire?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bonaire"))
                .body("[0].'topLevelDomain'.size()", equalTo(2))
                .body("[0].'topLevelDomain'", hasItems(".an", ".nl"))
                .body("[0].'alpha2Code'", containsString("BQ"))
                .body("[0].'alpha3Code'", containsString("BES"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("599"))
                .body("[0].'capital'", containsString("Kralendijk"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("BQ", "Boneiru"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(17408.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(12.15))
                .body("[0].'latlng'[1]", numberMatches(-68.266667))
                .body("[0].'demonym'", containsString("Dutch"))
                .body("[0].'area'", numberMatches(294.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Bonaire"))
                .body("[0].'numericCode'", containsString("535"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("nl"))
                .body("[0].'translations'.'de'", nullValue())
                .body("[0].'translations'.'es'", nullValue())
                .body("[0].'translations'.'fr'", nullValue())
                .body("[0].'translations'.'ja'", nullValue())
                .body("[0].'translations'.'it'", nullValue())
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_416_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/VUV?fields=_EM_6714_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_417_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/beirut?fields=_EM_6621_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_418_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/belmopan?fields=altSpellings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("BZ"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_419_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/czech?fields=altSpellings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("CZ", "Česká republika", "Česko"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_420_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/road%20town?fields=tG9HX_lSgAG")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_421_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/bissau")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Guinea-Bissau"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gw"))
                .body("[0].'alpha2Code'", containsString("GW"))
                .body("[0].'alpha3Code'", containsString("GNB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("245"))
                .body("[0].'capital'", containsString("Bissau"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("GW", "Republic of Guinea-Bissau", "República da Guiné-Bissau"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(1844000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(12.0))
                .body("[0].'latlng'[1]", numberMatches(-15.0))
                .body("[0].'demonym'", containsString("Guinea-Bissauan"))
                .body("[0].'area'", numberMatches(36125.0))
                .body("[0].'gini'", numberMatches(35.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("GIN", "SEN"))
                .body("[0].'nativeName'", containsString("Guiné-Bissau"))
                .body("[0].'numericCode'", containsString("624"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XOF"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("pt"))
                .body("[0].'translations'.'de'", containsString("Guinea-Bissau"))
                .body("[0].'translations'.'es'", containsString("Guinea-Bisáu"))
                .body("[0].'translations'.'fr'", containsString("Guinée-Bissau"))
                .body("[0].'translations'.'ja'", containsString("ギニアビサウ"))
                .body("[0].'translations'.'it'", containsString("Guinea-Bissau"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_422_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/madrid?fields=NvI8_3Wnq3cZsBQ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_423_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/majuro?fields=NvI8_3Wnq3cZsBQ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_424_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/298")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Faroe Islands"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".fo"))
                .body("[0].'alpha2Code'", containsString("FO"))
                .body("[0].'alpha3Code'", containsString("FRO"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("298"))
                .body("[0].'capital'", containsString("Tórshavn"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("FO", "Føroyar", "Færøerne"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(48846.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(62.0))
                .body("[0].'latlng'[1]", numberMatches(-7.0))
                .body("[0].'demonym'", containsString("Faroese"))
                .body("[0].'area'", numberMatches(1393.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+00:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Føroyar"))
                .body("[0].'numericCode'", containsString("234"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("DKK"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fo"))
                .body("[0].'translations'.'de'", containsString("Färöer-Inseln"))
                .body("[0].'translations'.'es'", containsString("Islas Faroe"))
                .body("[0].'translations'.'fr'", containsString("Îles Féroé"))
                .body("[0].'translations'.'ja'", containsString("フェロー諸島"))
                .body("[0].'translations'.'it'", containsString("Isole Far Oer"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_425_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/299")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Greenland"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gl"))
                .body("[0].'alpha2Code'", containsString("GL"))
                .body("[0].'alpha3Code'", containsString("GRL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("299"))
                .body("[0].'capital'", containsString("Nuuk"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("GL", "Grønland"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Northern America"))
                .body("[0].'population'", numberMatches(56114.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(72.0))
                .body("[0].'latlng'[1]", numberMatches(-40.0))
                .body("[0].'demonym'", containsString("Greenlandic"))
                .body("[0].'area'", numberMatches(2166086.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(4))
                .body("[0].'timezones'", hasItems("UTC-04:00", "UTC-03:00", "UTC-01:00", "UTC+00:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Kalaallit Nunaat"))
                .body("[0].'numericCode'", containsString("304"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("DKK"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("kl"))
                .body("[0].'translations'.'de'", containsString("Grönland"))
                .body("[0].'translations'.'es'", containsString("Groenlandia"))
                .body("[0].'translations'.'fr'", containsString("Groenland"))
                .body("[0].'translations'.'ja'", containsString("グリーンランド"))
                .body("[0].'translations'.'it'", containsString("Groenlandia"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_426_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/31")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Netherlands"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".nl"))
                .body("[0].'alpha2Code'", containsString("NL"))
                .body("[0].'alpha3Code'", containsString("NLD"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("31"))
                .body("[0].'capital'", containsString("Amsterdam"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("NL", "Holland", "Nederland"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(1.6916E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(52.5))
                .body("[0].'latlng'[1]", numberMatches(5.75))
                .body("[0].'demonym'", containsString("Dutch"))
                .body("[0].'area'", numberMatches(41850.0))
                .body("[0].'gini'", numberMatches(30.9))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC-04:00", "UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("BEL", "DEU"))
                .body("[0].'nativeName'", containsString("Nederland"))
                .body("[0].'numericCode'", containsString("528"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("nl"))
                .body("[0].'translations'.'de'", containsString("Niederlande"))
                .body("[0].'translations'.'es'", containsString("Países Bajos"))
                .body("[0].'translations'.'fr'", containsString("Pays-Bas"))
                .body("[0].'translations'.'ja'", containsString("オランダ"))
                .body("[0].'translations'.'it'", containsString("Paesi Bassi"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_427_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/32")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Belgium"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".be"))
                .body("[0].'alpha2Code'", containsString("BE"))
                .body("[0].'alpha3Code'", containsString("BEL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("32"))
                .body("[0].'capital'", containsString("Brussels"))
                .body("[0].'altSpellings'.size()", equalTo(9))
                .body("[0].'altSpellings'", hasItems("BE", "België", "Belgie", "Belgien", "Belgique", "Kingdom of Belgium", "Koninkrijk België", "Royaume de Belgique", "Königreich Belgien"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(1.124833E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(50.83333333))
                .body("[0].'latlng'[1]", numberMatches(4.0))
                .body("[0].'demonym'", containsString("Belgian"))
                .body("[0].'area'", numberMatches(30528.0))
                .body("[0].'gini'", numberMatches(33.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("FRA", "DEU", "LUX", "NLD"))
                .body("[0].'nativeName'", containsString("België"))
                .body("[0].'numericCode'", containsString("056"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("nl", "fr", "de"))
                .body("[0].'translations'.'de'", containsString("Belgien"))
                .body("[0].'translations'.'es'", containsString("Bélgica"))
                .body("[0].'translations'.'fr'", containsString("Belgique"))
                .body("[0].'translations'.'ja'", containsString("ベルギー"))
                .body("[0].'translations'.'it'", containsString("Belgio"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_428_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/33")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("France"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".fr"))
                .body("[0].'alpha2Code'", containsString("FR"))
                .body("[0].'alpha3Code'", containsString("FRA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("33"))
                .body("[0].'capital'", containsString("Paris"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("FR", "French Republic", "République française"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(6.6186E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(46.0))
                .body("[0].'latlng'[1]", numberMatches(2.0))
                .body("[0].'demonym'", containsString("French"))
                .body("[0].'area'", numberMatches(640679.0))
                .body("[0].'gini'", numberMatches(32.7))
                .body("[0].'timezones'.size()", equalTo(12))
                .body("[0].'timezones'", hasItems("UTC-10:00", "UTC-09:30", "UTC-09:00", "UTC-08:00", "UTC-04:00", "UTC-03:00", "UTC+01:00", "UTC+03:00", "UTC+04:00", "UTC+05:00", "UTC+11:00", "UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(8))
                .body("[0].'borders'", hasItems("AND", "BEL", "DEU", "ITA", "LUX", "MCO", "ESP", "CHE"))
                .body("[0].'nativeName'", containsString("France"))
                .body("[0].'numericCode'", containsString("250"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Frankreich"))
                .body("[0].'translations'.'es'", containsString("Francia"))
                .body("[0].'translations'.'fr'", containsString("France"))
                .body("[0].'translations'.'ja'", containsString("フランス"))
                .body("[0].'translations'.'it'", containsString("Francia"))
                .body("[0].'relevance'", containsString("2.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_429_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/republika%20y'uburundi?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Burundi"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bi"))
                .body("[0].'alpha2Code'", containsString("BI"))
                .body("[0].'alpha3Code'", containsString("BDI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("257"))
                .body("[0].'capital'", containsString("Bujumbura"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("BI", "Republic of Burundi", "Republika y'Uburundi", "République du Burundi"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(9823827.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-3.5))
                .body("[0].'latlng'[1]", numberMatches(30.0))
                .body("[0].'demonym'", containsString("Burundian"))
                .body("[0].'area'", numberMatches(27834.0))
                .body("[0].'gini'", numberMatches(33.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("COD", "RWA", "TZA"))
                .body("[0].'nativeName'", containsString("Burundi"))
                .body("[0].'numericCode'", containsString("108"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BIF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "rn"))
                .body("[0].'translations'.'de'", containsString("Burundi"))
                .body("[0].'translations'.'es'", containsString("Burundi"))
                .body("[0].'translations'.'fr'", containsString("Burundi"))
                .body("[0].'translations'.'ja'", containsString("ブルンジ"))
                .body("[0].'translations'.'it'", containsString("Burundi"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_430_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/republiken%20finland?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Finland"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".fi"))
                .body("[0].'alpha2Code'", containsString("FI"))
                .body("[0].'alpha3Code'", containsString("FIN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("358"))
                .body("[0].'capital'", containsString("Helsinki"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("FI", "Suomi", "Republic of Finland", "Suomen tasavalta", "Republiken Finland"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(5485215.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(64.0))
                .body("[0].'latlng'[1]", numberMatches(26.0))
                .body("[0].'demonym'", containsString("Finnish"))
                .body("[0].'area'", numberMatches(338424.0))
                .body("[0].'gini'", numberMatches(26.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("NOR", "SWE", "RUS"))
                .body("[0].'nativeName'", containsString("Suomi"))
                .body("[0].'numericCode'", containsString("246"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fi", "sv"))
                .body("[0].'translations'.'de'", containsString("Finnland"))
                .body("[0].'translations'.'es'", containsString("Finlandia"))
                .body("[0].'translations'.'fr'", containsString("Finlande"))
                .body("[0].'translations'.'ja'", containsString("フィンランド"))
                .body("[0].'translations'.'it'", containsString("Finlandia"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_431_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/abuja")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Nigeria"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ng"))
                .body("[0].'alpha2Code'", containsString("NG"))
                .body("[0].'alpha3Code'", containsString("NGA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("234"))
                .body("[0].'capital'", containsString("Abuja"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("NG", "Nijeriya", "Naíjíríà", "Federal Republic of Nigeria"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(1.82202E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(10.0))
                .body("[0].'latlng'[1]", numberMatches(8.0))
                .body("[0].'demonym'", containsString("Nigerian"))
                .body("[0].'area'", numberMatches(923768.0))
                .body("[0].'gini'", numberMatches(48.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("BEN", "CMR", "TCD", "NER"))
                .body("[0].'nativeName'", containsString("Nigeria"))
                .body("[0].'numericCode'", containsString("566"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("NGN"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Nigeria"))
                .body("[0].'translations'.'es'", containsString("Nigeria"))
                .body("[0].'translations'.'fr'", containsString("Nigéria"))
                .body("[0].'translations'.'ja'", containsString("ナイジェリア"))
                .body("[0].'translations'.'it'", containsString("Nigeria"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_432_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/luxembourg?fields=_EM_3958_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_433_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/minsk?fields=NvK8_3Wnq3cZoBQ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_434_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/armenian?fields=_EM_6230_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_435_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/people's%20republic%20of%20bangladesh?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bangladesh"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bd"))
                .body("[0].'alpha2Code'", containsString("BD"))
                .body("[0].'alpha3Code'", containsString("BGD"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("880"))
                .body("[0].'capital'", containsString("Dhaka"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("BD", "People's Republic of Bangladesh", "Gônôprôjatôntri Bangladesh"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(1.58875E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(24.0))
                .body("[0].'latlng'[1]", numberMatches(90.0))
                .body("[0].'demonym'", containsString("Bangladeshi"))
                .body("[0].'area'", numberMatches(147570.0))
                .body("[0].'gini'", numberMatches(32.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+06:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("MMR", "IND"))
                .body("[0].'nativeName'", containsString("Bangladesh"))
                .body("[0].'numericCode'", containsString("050"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BDT"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("bn"))
                .body("[0].'translations'.'de'", containsString("Bangladesch"))
                .body("[0].'translations'.'es'", containsString("Bangladesh"))
                .body("[0].'translations'.'fr'", containsString("Bangladesh"))
                .body("[0].'translations'.'ja'", containsString("バングラデシュ"))
                .body("[0].'translations'.'it'", containsString("Bangladesh"))
                .body("[0].'relevance'", containsString("2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_436_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/people's%20republic%20of%20china?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("China"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cn"))
                .body("[0].'alpha2Code'", containsString("CN"))
                .body("[0].'alpha3Code'", containsString("CHN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("86"))
                .body("[0].'capital'", containsString("Beijing"))
                .body("[0].'altSpellings'.size()", equalTo(7))
                .body("[0].'altSpellings'", hasItems("CN", "Zhōngguó", "Zhongguo", "Zhonghua", "People's Republic of China", "中华人民共和国", "Zhōnghuá Rénmín Gònghéguó"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(1.37159E9))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(35.0))
                .body("[0].'latlng'[1]", numberMatches(105.0))
                .body("[0].'demonym'", containsString("Chinese"))
                .body("[0].'area'", numberMatches(9640011.0))
                .body("[0].'gini'", numberMatches(47.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(15))
                .body("[0].'borders'", hasItems("AFG", "BTN", "MMR", "HKG", "IND", "KAZ", "PRK", "KGZ", "LAO", "MAC", "MNG", "PAK", "RUS", "TJK", "VNM"))
                .body("[0].'nativeName'", containsString("中国"))
                .body("[0].'numericCode'", containsString("156"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("CNY"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("zh"))
                .body("[0].'translations'.'de'", containsString("China"))
                .body("[0].'translations'.'es'", containsString("China"))
                .body("[0].'translations'.'fr'", containsString("Chine"))
                .body("[0].'translations'.'ja'", containsString("中国"))
                .body("[0].'translations'.'it'", containsString("Cina"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_437_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/monaco?fields=NvK8_3Wnq3cZoBQ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_438_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/monrovia?fields=_EM_7038_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_439_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/montevideo?fields=name")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Uruguay"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_440_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/351")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Portugal"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pt"))
                .body("[0].'alpha2Code'", containsString("PT"))
                .body("[0].'alpha3Code'", containsString("PRT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("351"))
                .body("[0].'capital'", containsString("Lisbon"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("PT", "Portuguesa", "Portuguese Republic", "República Portuguesa"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(1.0374822E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(39.5))
                .body("[0].'latlng'[1]", numberMatches(-8.0))
                .body("[0].'demonym'", containsString("Portuguese"))
                .body("[0].'area'", numberMatches(92090.0))
                .body("[0].'gini'", numberMatches(38.5))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC-01:00", "UTC"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("ESP"))
                .body("[0].'nativeName'", containsString("Portugal"))
                .body("[0].'numericCode'", containsString("620"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("pt"))
                .body("[0].'translations'.'de'", containsString("Portugal"))
                .body("[0].'translations'.'es'", containsString("Portugal"))
                .body("[0].'translations'.'fr'", containsString("Portugal"))
                .body("[0].'translations'.'ja'", containsString("ポルトガル"))
                .body("[0].'translations'.'it'", containsString("Portogallo"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_441_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/354")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Iceland"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".is"))
                .body("[0].'alpha2Code'", containsString("IS"))
                .body("[0].'alpha3Code'", containsString("ISL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("354"))
                .body("[0].'capital'", containsString("Reykjavík"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("IS", "Island", "Republic of Iceland", "Lýðveldið Ísland"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(330610.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(65.0))
                .body("[0].'latlng'[1]", numberMatches(-18.0))
                .body("[0].'demonym'", containsString("Icelander"))
                .body("[0].'area'", numberMatches(103000.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Ísland"))
                .body("[0].'numericCode'", containsString("352"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ISK"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("is"))
                .body("[0].'translations'.'de'", containsString("Island"))
                .body("[0].'translations'.'es'", containsString("Islandia"))
                .body("[0].'translations'.'fr'", containsString("Islande"))
                .body("[0].'translations'.'ja'", containsString("アイスランド"))
                .body("[0].'translations'.'it'", containsString("Islanda"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_442_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/355")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Albania"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".al"))
                .body("[0].'alpha2Code'", containsString("AL"))
                .body("[0].'alpha3Code'", containsString("ALB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("355"))
                .body("[0].'capital'", containsString("Tirana"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AL", "Shqipëri", "Shqipëria", "Shqipnia"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(2893005.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(41.0))
                .body("[0].'latlng'[1]", numberMatches(20.0))
                .body("[0].'demonym'", containsString("Albanian"))
                .body("[0].'area'", numberMatches(28748.0))
                .body("[0].'gini'", numberMatches(34.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("MNE", "GRC", "MKD", "KOS"))
                .body("[0].'nativeName'", containsString("Shqipëria"))
                .body("[0].'numericCode'", containsString("008"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ALL"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("sq"))
                .body("[0].'translations'.'de'", containsString("Albanien"))
                .body("[0].'translations'.'es'", containsString("Albania"))
                .body("[0].'translations'.'fr'", containsString("Albanie"))
                .body("[0].'translations'.'ja'", containsString("アルバニア"))
                .body("[0].'translations'.'it'", containsString("Albania"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_443_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/kypros?" + 
                    "fields=_EM_7069_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_444_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/moroni?fields=name")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Comoros"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_445_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/colombo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Sri Lanka"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".lk"))
                .body("[0].'alpha2Code'", containsString("LK"))
                .body("[0].'alpha3Code'", containsString("LKA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("94"))
                .body("[0].'capital'", containsString("Colombo"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("LK", "ilaṅkai", "Democratic Socialist Republic of Sri Lanka"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.0675E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(7.0))
                .body("[0].'latlng'[1]", numberMatches(81.0))
                .body("[0].'demonym'", containsString("Sri Lankan"))
                .body("[0].'area'", numberMatches(65610.0))
                .body("[0].'gini'", numberMatches(40.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+05:30"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("IND"))
                .body("[0].'nativeName'", containsString("śrī laṃkāva"))
                .body("[0].'numericCode'", containsString("144"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("LKR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("si", "ta"))
                .body("[0].'translations'.'de'", containsString("Sri Lanka"))
                .body("[0].'translations'.'es'", containsString("Sri Lanka"))
                .body("[0].'translations'.'fr'", containsString("Sri Lanka"))
                .body("[0].'translations'.'ja'", containsString("スリランカ"))
                .body("[0].'translations'.'it'", containsString("Sri Lanka"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_446_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/conakry")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Guinea"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gn"))
                .body("[0].'alpha2Code'", containsString("GN"))
                .body("[0].'alpha3Code'", containsString("GIN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("224"))
                .body("[0].'capital'", containsString("Conakry"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("GN", "Republic of Guinea", "République de Guinée"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(1.0628972E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(11.0))
                .body("[0].'latlng'[1]", numberMatches(-10.0))
                .body("[0].'demonym'", containsString("Guinean"))
                .body("[0].'area'", numberMatches(245857.0))
                .body("[0].'gini'", numberMatches(39.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("CIV", "GNB", "LBR", "MLI", "SEN", "SLE"))
                .body("[0].'nativeName'", containsString("Guinée"))
                .body("[0].'numericCode'", containsString("324"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("GNF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "ff"))
                .body("[0].'translations'.'de'", containsString("Guinea"))
                .body("[0].'translations'.'es'", containsString("Guinea"))
                .body("[0].'translations'.'fr'", containsString("Guinée"))
                .body("[0].'translations'.'ja'", containsString("ギニア"))
                .body("[0].'translations'.'it'", containsString("Guinea"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_447_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/yaounde?fields=NvK8_3Wnq4cZsBQ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_448_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/colombo?fields=_EM_7193_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_449_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/Polar?fields=_EM_7226_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_450_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/tl?" + 
                    "fields=_EM_411_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_451_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/376?fields=fdKAS6ZfIRKf7iKa")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_452_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/377?fields=_EM_7309_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_453_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/373")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Moldova"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".md"))
                .body("[0].'alpha2Code'", containsString("MD"))
                .body("[0].'alpha3Code'", containsString("MDA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("373"))
                .body("[0].'capital'", containsString("Chișinău"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MD", "Republic of Moldova", "Republica Moldova"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(3555200.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(47.0))
                .body("[0].'latlng'[1]", numberMatches(29.0))
                .body("[0].'demonym'", containsString("Moldovan"))
                .body("[0].'area'", numberMatches(33846.0))
                .body("[0].'gini'", numberMatches(33.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("ROU", "UKR"))
                .body("[0].'nativeName'", containsString("Moldova"))
                .body("[0].'numericCode'", containsString("498"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MDL"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ro"))
                .body("[0].'translations'.'de'", containsString("Moldawie"))
                .body("[0].'translations'.'es'", containsString("Moldavia"))
                .body("[0].'translations'.'fr'", containsString("Moldavie"))
                .body("[0].'translations'.'ja'", containsString("モルドバ共和国"))
                .body("[0].'translations'.'it'", containsString("Moldavia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_454_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/375")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Belarus"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".by"))
                .body("[0].'alpha2Code'", containsString("BY"))
                .body("[0].'alpha3Code'", containsString("BLR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("375"))
                .body("[0].'capital'", containsString("Minsk"))
                .body("[0].'altSpellings'.size()", equalTo(7))
                .body("[0].'altSpellings'", hasItems("BY", "Bielaruś", "Republic of Belarus", "Белоруссия", "Республика Беларусь", "Belorussiya", "Respublika Belarus’"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(9485300.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(53.0))
                .body("[0].'latlng'[1]", numberMatches(28.0))
                .body("[0].'demonym'", containsString("Belarusian"))
                .body("[0].'area'", numberMatches(207600.0))
                .body("[0].'gini'", numberMatches(26.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("LVA", "LTU", "POL", "RUS", "UKR"))
                .body("[0].'nativeName'", containsString("Белару́сь"))
                .body("[0].'numericCode'", containsString("112"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BYR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("be", "ru"))
                .body("[0].'translations'.'de'", containsString("Weißrussland"))
                .body("[0].'translations'.'es'", containsString("Bielorrusia"))
                .body("[0].'translations'.'fr'", containsString("Biélorussie"))
                .body("[0].'translations'.'ja'", containsString("ベラルーシ"))
                .body("[0].'translations'.'it'", containsString("Bielorussia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_455_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/376")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Andorra"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ad"))
                .body("[0].'alpha2Code'", containsString("AD"))
                .body("[0].'alpha3Code'", containsString("AND"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("376"))
                .body("[0].'capital'", containsString("Andorra la Vella"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("AD", "Principality of Andorra", "Principat d'Andorra"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(76949.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(42.5))
                .body("[0].'latlng'[1]", numberMatches(1.5))
                .body("[0].'demonym'", containsString("Andorran"))
                .body("[0].'area'", numberMatches(468.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("FRA", "ESP"))
                .body("[0].'nativeName'", containsString("Andorra"))
                .body("[0].'numericCode'", containsString("020"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ca"))
                .body("[0].'translations'.'de'", containsString("Andorra"))
                .body("[0].'translations'.'es'", containsString("Andorra"))
                .body("[0].'translations'.'fr'", containsString("Andorre"))
                .body("[0].'translations'.'ja'", containsString("アンドラ"))
                .body("[0].'translations'.'it'", containsString("Andorra"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_456_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/377")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Monaco"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mc"))
                .body("[0].'alpha2Code'", containsString("MC"))
                .body("[0].'alpha3Code'", containsString("MCO"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("377"))
                .body("[0].'capital'", containsString("Monaco"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MC", "Principality of Monaco", "Principauté de Monaco"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(37800.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(43.73333333))
                .body("[0].'latlng'[1]", numberMatches(7.4))
                .body("[0].'demonym'", containsString("Monegasque"))
                .body("[0].'area'", numberMatches(2.02))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("FRA"))
                .body("[0].'nativeName'", containsString("Monaco"))
                .body("[0].'numericCode'", containsString("492"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Monaco"))
                .body("[0].'translations'.'es'", containsString("Mónaco"))
                .body("[0].'translations'.'fr'", containsString("Monaco"))
                .body("[0].'translations'.'ja'", containsString("モナコ"))
                .body("[0].'translations'.'it'", containsString("Principato di Monaco"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_457_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/tn?" + 
                    "fields=_EM_411_XYZ_&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_458_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/to?" + 
                    "fields=subregion&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'subregion'", containsString("Polynesia"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_459_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/vilnius")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Lithuania"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".lt"))
                .body("[0].'alpha2Code'", containsString("LT"))
                .body("[0].'alpha3Code'", containsString("LTU"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("370"))
                .body("[0].'capital'", containsString("Vilnius"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("LT", "Republic of Lithuania", "Lietuvos Respublika"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(2872294.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(56.0))
                .body("[0].'latlng'[1]", numberMatches(24.0))
                .body("[0].'demonym'", containsString("Lithuanian"))
                .body("[0].'area'", numberMatches(65300.0))
                .body("[0].'gini'", numberMatches(37.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("BLR", "LVA", "POL", "RUS"))
                .body("[0].'nativeName'", containsString("Lietuva"))
                .body("[0].'numericCode'", containsString("440"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("EUR"))
                .body("[0].'currencies'[0].'name'", containsString("Euro"))
                .body("[0].'currencies'[0].'symbol'", containsString("€"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("lt"))
                .body("[0].'languages'[0].'iso639_2'", containsString("lit"))
                .body("[0].'languages'[0].'name'", containsString("Lithuanian"))
                .body("[0].'languages'[0].'nativeName'", containsString("lietuvių kalba"))
                .body("[0].'translations'.'de'", containsString("Litauen"))
                .body("[0].'translations'.'es'", containsString("Lituania"))
                .body("[0].'translations'.'fr'", containsString("Lituanie"))
                .body("[0].'translations'.'ja'", containsString("リトアニア"))
                .body("[0].'translations'.'it'", containsString("Lituania"))
                .body("[0].'translations'.'br'", containsString("Lituânia"))
                .body("[0].'translations'.'pt'", containsString("Lituânia"))
                .body("[0].'translations'.'nl'", containsString("Litouwen"))
                .body("[0].'translations'.'hr'", containsString("Litva"))
                .body("[0].'translations'.'fa'", containsString("لیتوانی"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/ltu.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("EU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("European Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("LTU"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_460_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/tH?fields=_EM_7438_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_461_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/ye?" + 
                    "fields=5biKBeFHoYvU&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(6))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_462_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/yemen?" + 
                    "fields=5biKBeFHoYvU&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_463_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/yt?" + 
                    "fields=5biKBeFHoYvU&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_464_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/za?" + 
                    "fields=5biKBeFHoYvU&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_465_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/zambia?" + 
                    "fields=3biKBeFHoYvU&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_466_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/255")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Tanzania"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tz"))
                .body("[0].'alpha2Code'", containsString("TZ"))
                .body("[0].'alpha3Code'", containsString("TZA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("255"))
                .body("[0].'capital'", containsString("Dodoma"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("TZ", "United Republic of Tanzania", "Jamhuri ya Muungano wa Tanzania"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(5.347E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-6.0))
                .body("[0].'latlng'[1]", numberMatches(35.0))
                .body("[0].'demonym'", containsString("Tanzanian"))
                .body("[0].'area'", numberMatches(945087.0))
                .body("[0].'gini'", numberMatches(37.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(8))
                .body("[0].'borders'", hasItems("BDI", "COD", "KEN", "MWI", "MOZ", "RWA", "UGA", "ZMB"))
                .body("[0].'nativeName'", containsString("Tanzania"))
                .body("[0].'numericCode'", containsString("834"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("TZS"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("sw", "en"))
                .body("[0].'translations'.'de'", containsString("Tansania"))
                .body("[0].'translations'.'es'", containsString("Tanzania"))
                .body("[0].'translations'.'fr'", containsString("Tanzanie"))
                .body("[0].'translations'.'ja'", containsString("タンザニア"))
                .body("[0].'translations'.'it'", containsString("Tanzania"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_467_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/warsaw")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Poland"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pl"))
                .body("[0].'alpha2Code'", containsString("PL"))
                .body("[0].'alpha3Code'", containsString("POL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("48"))
                .body("[0].'capital'", containsString("Warsaw"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("PL", "Republic of Poland", "Rzeczpospolita Polska"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(3.8437239E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(52.0))
                .body("[0].'latlng'[1]", numberMatches(20.0))
                .body("[0].'demonym'", containsString("Polish"))
                .body("[0].'area'", numberMatches(312679.0))
                .body("[0].'gini'", numberMatches(34.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("BLR", "CZE", "DEU", "LTU", "RUS", "SVK", "UKR"))
                .body("[0].'nativeName'", containsString("Polska"))
                .body("[0].'numericCode'", containsString("616"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("PLN"))
                .body("[0].'currencies'[0].'name'", containsString("Polish złoty"))
                .body("[0].'currencies'[0].'symbol'", containsString("zł"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("pl"))
                .body("[0].'languages'[0].'iso639_2'", containsString("pol"))
                .body("[0].'languages'[0].'name'", containsString("Polish"))
                .body("[0].'languages'[0].'nativeName'", containsString("język polski"))
                .body("[0].'translations'.'de'", containsString("Polen"))
                .body("[0].'translations'.'es'", containsString("Polonia"))
                .body("[0].'translations'.'fr'", containsString("Pologne"))
                .body("[0].'translations'.'ja'", containsString("ポーランド"))
                .body("[0].'translations'.'it'", containsString("Polonia"))
                .body("[0].'translations'.'br'", containsString("Polônia"))
                .body("[0].'translations'.'pt'", containsString("Polónia"))
                .body("[0].'translations'.'nl'", containsString("Polen"))
                .body("[0].'translations'.'hr'", containsString("Poljska"))
                .body("[0].'translations'.'fa'", containsString("لهستان"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/pol.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("EU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("European Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("POL"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_468_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/wellington")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("New Zealand"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".nz"))
                .body("[0].'alpha2Code'", containsString("NZ"))
                .body("[0].'alpha3Code'", containsString("NZL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("64"))
                .body("[0].'capital'", containsString("Wellington"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("NZ", "Aotearoa"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Australia and New Zealand"))
                .body("[0].'population'", numberMatches(4697854.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-41.0))
                .body("[0].'latlng'[1]", numberMatches(174.0))
                .body("[0].'demonym'", containsString("New Zealander"))
                .body("[0].'area'", numberMatches(270467.0))
                .body("[0].'gini'", numberMatches(36.2))
                .body("[0].'timezones'.size()", equalTo(5))
                .body("[0].'timezones'", hasItems("UTC-11:00", "UTC-10:00", "UTC+12:00", "UTC+12:45", "UTC+13:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("New Zealand"))
                .body("[0].'numericCode'", containsString("554"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("NZD"))
                .body("[0].'currencies'[0].'name'", containsString("New Zealand dollar"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'languages'[1].'iso639_1'", containsString("mi"))
                .body("[0].'languages'[1].'iso639_2'", containsString("mri"))
                .body("[0].'languages'[1].'name'", containsString("Māori"))
                .body("[0].'languages'[1].'nativeName'", containsString("te reo Māori"))
                .body("[0].'translations'.'de'", containsString("Neuseeland"))
                .body("[0].'translations'.'es'", containsString("Nueva Zelanda"))
                .body("[0].'translations'.'fr'", containsString("Nouvelle-Zélande"))
                .body("[0].'translations'.'ja'", containsString("ニュージーランド"))
                .body("[0].'translations'.'it'", containsString("Nuova Zelanda"))
                .body("[0].'translations'.'br'", containsString("Nova Zelândia"))
                .body("[0].'translations'.'pt'", containsString("Nova Zelândia"))
                .body("[0].'translations'.'nl'", containsString("Nieuw-Zeeland"))
                .body("[0].'translations'.'hr'", containsString("Novi Zeland"))
                .body("[0].'translations'.'fa'", containsString("نیوزیلند"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/nzl.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("NZL"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_469_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/west%20island?fields=tG9HX_lSgAG")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_470_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/willemstad?fields=_EM_7557_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_471_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/256")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Uganda"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ug"))
                .body("[0].'alpha2Code'", containsString("UG"))
                .body("[0].'alpha3Code'", containsString("UGA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("256"))
                .body("[0].'capital'", containsString("Kampala"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("UG", "Republic of Uganda", "Jamhuri ya Uganda"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(3.4856813E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(1.0))
                .body("[0].'latlng'[1]", numberMatches(32.0))
                .body("[0].'demonym'", containsString("Ugandan"))
                .body("[0].'area'", numberMatches(241550.0))
                .body("[0].'gini'", numberMatches(44.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("COD", "KEN", "RWA", "SSD", "TZA"))
                .body("[0].'nativeName'", containsString("Uganda"))
                .body("[0].'numericCode'", containsString("800"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("UGX"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "sw"))
                .body("[0].'translations'.'de'", containsString("Uganda"))
                .body("[0].'translations'.'es'", containsString("Uganda"))
                .body("[0].'translations'.'fr'", containsString("Uganda"))
                .body("[0].'translations'.'ja'", containsString("ウガンダ"))
                .body("[0].'translations'.'it'", containsString("Uganda"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_472_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/257")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Burundi"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bi"))
                .body("[0].'alpha2Code'", containsString("BI"))
                .body("[0].'alpha3Code'", containsString("BDI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("257"))
                .body("[0].'capital'", containsString("Bujumbura"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("BI", "Republic of Burundi", "Republika y'Uburundi", "République du Burundi"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(9823827.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-3.5))
                .body("[0].'latlng'[1]", numberMatches(30.0))
                .body("[0].'demonym'", containsString("Burundian"))
                .body("[0].'area'", numberMatches(27834.0))
                .body("[0].'gini'", numberMatches(33.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("COD", "RWA", "TZA"))
                .body("[0].'nativeName'", containsString("Burundi"))
                .body("[0].'numericCode'", containsString("108"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BIF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "rn"))
                .body("[0].'translations'.'de'", containsString("Burundi"))
                .body("[0].'translations'.'es'", containsString("Burundi"))
                .body("[0].'translations'.'fr'", containsString("Burundi"))
                .body("[0].'translations'.'ja'", containsString("ブルンジ"))
                .body("[0].'translations'.'it'", containsString("Burundi"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_473_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/258")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Mozambique"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mz"))
                .body("[0].'alpha2Code'", containsString("MZ"))
                .body("[0].'alpha3Code'", containsString("MOZ"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("258"))
                .body("[0].'capital'", containsString("Maputo"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MZ", "Republic of Mozambique", "República de Moçambique"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(2.5727911E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-18.25))
                .body("[0].'latlng'[1]", numberMatches(35.0))
                .body("[0].'demonym'", containsString("Mozambican"))
                .body("[0].'area'", numberMatches(801590.0))
                .body("[0].'gini'", numberMatches(45.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("MWI", "ZAF", "SWZ", "TZA", "ZMB", "ZWE"))
                .body("[0].'nativeName'", containsString("Moçambique"))
                .body("[0].'numericCode'", containsString("508"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MZN"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("pt"))
                .body("[0].'translations'.'de'", containsString("Mosambik"))
                .body("[0].'translations'.'es'", containsString("Mozambique"))
                .body("[0].'translations'.'fr'", containsString("Mozambique"))
                .body("[0].'translations'.'ja'", containsString("モザンビーク"))
                .body("[0].'translations'.'it'", containsString("Mozambico"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_474_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/261")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Madagascar"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mg"))
                .body("[0].'alpha2Code'", containsString("MG"))
                .body("[0].'alpha3Code'", containsString("MDG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("261"))
                .body("[0].'capital'", containsString("Antananarivo"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("MG", "Republic of Madagascar", "Repoblikan'i Madagasikara", "République de Madagascar"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(2.2434363E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-20.0))
                .body("[0].'latlng'[1]", numberMatches(47.0))
                .body("[0].'demonym'", containsString("Malagasy"))
                .body("[0].'area'", numberMatches(587041.0))
                .body("[0].'gini'", numberMatches(44.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Madagasikara"))
                .body("[0].'numericCode'", containsString("450"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MGA"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "mg"))
                .body("[0].'translations'.'de'", containsString("Madagaskar"))
                .body("[0].'translations'.'es'", containsString("Madagascar"))
                .body("[0].'translations'.'fr'", containsString("Madagascar"))
                .body("[0].'translations'.'ja'", containsString("マダガスカル"))
                .body("[0].'translations'.'it'", containsString("Madagascar"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_475_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/262")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'name'", containsString("French Southern and Antarctic Lands"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tf"))
                .body("[0].'alpha2Code'", containsString("TF"))
                .body("[0].'alpha3Code'", containsString("ATF"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("262"))
                .body("[0].'capital'", containsString("Port-aux-Français"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("TF"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Southern Africa"))
                .body("[0].'population'", numberMatches(140.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-49.25))
                .body("[0].'latlng'[1]", numberMatches(69.167))
                .body("[0].'demonym'", containsString("French"))
                .body("[0].'area'", numberMatches(7747.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+05:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Territoire des Terres australes et antarctiques françaises"))
                .body("[0].'numericCode'", containsString("260"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Französische Süd- und Antarktisgebiete"))
                .body("[0].'translations'.'es'", containsString("Tierras Australes y Antárticas Francesas"))
                .body("[0].'translations'.'fr'", containsString("Terres australes et antarctiques françaises"))
                .body("[0].'translations'.'ja'", containsString("フランス領南方・南極地域"))
                .body("[0].'translations'.'it'", containsString("Territori Francesi del Sud"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Mayotte"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".yt"))
                .body("[1].'alpha2Code'", containsString("YT"))
                .body("[1].'alpha3Code'", containsString("MYT"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("262"))
                .body("[1].'capital'", containsString("Mamoudzou"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("YT", "Department of Mayotte", "Département de Mayotte"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Eastern Africa"))
                .body("[1].'population'", numberMatches(212645.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-12.83333333))
                .body("[1].'latlng'[1]", numberMatches(45.16666666))
                .body("[1].'demonym'", containsString("French"))
                .body("[1].'area'", nullValue())
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+03:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Mayotte"))
                .body("[1].'numericCode'", containsString("175"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EUR"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("fr"))
                .body("[1].'translations'.'de'", containsString("Mayotte"))
                .body("[1].'translations'.'es'", containsString("Mayotte"))
                .body("[1].'translations'.'fr'", containsString("Mayotte"))
                .body("[1].'translations'.'ja'", containsString("マヨット"))
                .body("[1].'translations'.'it'", containsString("Mayotte"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Réunion"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".re"))
                .body("[2].'alpha2Code'", containsString("RE"))
                .body("[2].'alpha3Code'", containsString("REU"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("262"))
                .body("[2].'capital'", containsString("Saint-Denis"))
                .body("[2].'altSpellings'.size()", equalTo(2))
                .body("[2].'altSpellings'", hasItems("RE", "Reunion"))
                .body("[2].'region'", containsString("Africa"))
                .body("[2].'subregion'", containsString("Eastern Africa"))
                .body("[2].'population'", numberMatches(840974.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-21.15))
                .body("[2].'latlng'[1]", numberMatches(55.5))
                .body("[2].'demonym'", containsString("French"))
                .body("[2].'area'", nullValue())
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+04:00"))
                .body("[2].'borders'.size()", equalTo(0))
                .body("[2].'nativeName'", containsString("La Réunion"))
                .body("[2].'numericCode'", containsString("638"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("EUR"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("fr"))
                .body("[2].'translations'.'de'", containsString("Réunion"))
                .body("[2].'translations'.'es'", containsString("Reunión"))
                .body("[2].'translations'.'fr'", containsString("Réunion"))
                .body("[2].'translations'.'ja'", containsString("レユニオン"))
                .body("[2].'translations'.'it'", containsString("Riunione"))
                .body("[2].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_476_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/263")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Zimbabwe"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".zw"))
                .body("[0].'alpha2Code'", containsString("ZW"))
                .body("[0].'alpha3Code'", containsString("ZWE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("263"))
                .body("[0].'capital'", containsString("Harare"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("ZW", "Republic of Zimbabwe"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(1.3061239E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-20.0))
                .body("[0].'latlng'[1]", numberMatches(30.0))
                .body("[0].'demonym'", containsString("Zimbabwean"))
                .body("[0].'area'", numberMatches(390757.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("BWA", "MOZ", "ZAF", "ZMB"))
                .body("[0].'nativeName'", containsString("Zimbabwe"))
                .body("[0].'numericCode'", containsString("716"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("en", "sn", "nd"))
                .body("[0].'translations'.'de'", containsString("Simbabwe"))
                .body("[0].'translations'.'es'", containsString("Zimbabue"))
                .body("[0].'translations'.'fr'", containsString("Zimbabwe"))
                .body("[0].'translations'.'ja'", containsString("ジンバブエ"))
                .body("[0].'translations'.'it'", containsString("Zimbabwe"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_477_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/cook%20islander?fields=_EM_6230_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_478_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/264")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Namibia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".na"))
                .body("[0].'alpha2Code'", containsString("NA"))
                .body("[0].'alpha3Code'", containsString("NAM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("264"))
                .body("[0].'capital'", containsString("Windhoek"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("NA", "Namibië", "Republic of Namibia"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Southern Africa"))
                .body("[0].'population'", numberMatches(2280700.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-22.0))
                .body("[0].'latlng'[1]", numberMatches(17.0))
                .body("[0].'demonym'", containsString("Namibian"))
                .body("[0].'area'", numberMatches(825615.0))
                .body("[0].'gini'", numberMatches(63.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("AGO", "BWA", "ZAF", "ZMB"))
                .body("[0].'nativeName'", containsString("Namibia"))
                .body("[0].'numericCode'", containsString("516"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("NAD", "ZAR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "af"))
                .body("[0].'translations'.'de'", containsString("Namibia"))
                .body("[0].'translations'.'es'", containsString("Namibia"))
                .body("[0].'translations'.'fr'", containsString("Namibie"))
                .body("[0].'translations'.'ja'", containsString("ナミビア"))
                .body("[0].'translations'.'it'", containsString("Namibia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_479_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/266")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Lesotho"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ls"))
                .body("[0].'alpha2Code'", containsString("LS"))
                .body("[0].'alpha3Code'", containsString("LSO"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("266"))
                .body("[0].'capital'", containsString("Maseru"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("LS", "Kingdom of Lesotho", "Muso oa Lesotho"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Southern Africa"))
                .body("[0].'population'", numberMatches(2135000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-29.5))
                .body("[0].'latlng'[1]", numberMatches(28.5))
                .body("[0].'demonym'", containsString("Mosotho"))
                .body("[0].'area'", numberMatches(30355.0))
                .body("[0].'gini'", numberMatches(52.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("ZAF"))
                .body("[0].'nativeName'", containsString("Lesotho"))
                .body("[0].'numericCode'", containsString("426"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("LSL", "ZAR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "st"))
                .body("[0].'translations'.'de'", containsString("Lesotho"))
                .body("[0].'translations'.'es'", containsString("Lesotho"))
                .body("[0].'translations'.'fr'", containsString("Lesotho"))
                .body("[0].'translations'.'ja'", containsString("レソト"))
                .body("[0].'translations'.'it'", containsString("Lesotho"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_480_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/267")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Botswana"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bw"))
                .body("[0].'alpha2Code'", containsString("BW"))
                .body("[0].'alpha3Code'", containsString("BWA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("267"))
                .body("[0].'capital'", containsString("Gaborone"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("BW", "Republic of Botswana", "Lefatshe la Botswana"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Southern Africa"))
                .body("[0].'population'", numberMatches(2070984.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-22.0))
                .body("[0].'latlng'[1]", numberMatches(24.0))
                .body("[0].'demonym'", containsString("Motswana"))
                .body("[0].'area'", numberMatches(582000.0))
                .body("[0].'gini'", numberMatches(61.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("NAM", "ZAF", "ZMB", "ZWE"))
                .body("[0].'nativeName'", containsString("Botswana"))
                .body("[0].'numericCode'", containsString("072"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BWP"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "tn"))
                .body("[0].'translations'.'de'", containsString("Botswana"))
                .body("[0].'translations'.'es'", containsString("Botswana"))
                .body("[0].'translations'.'fr'", containsString("Botswana"))
                .body("[0].'translations'.'ja'", containsString("ボツワナ"))
                .body("[0].'translations'.'it'", containsString("Botswana"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_481_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/268")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Swaziland"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sz"))
                .body("[0].'alpha2Code'", containsString("SZ"))
                .body("[0].'alpha3Code'", containsString("SWZ"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("268"))
                .body("[0].'capital'", containsString("Lobamba"))
                .body("[0].'altSpellings'.size()", equalTo(6))
                .body("[0].'altSpellings'", hasItems("SZ", "weSwatini", "Swatini", "Ngwane", "Kingdom of Swaziland", "Umbuso waseSwatini"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Southern Africa"))
                .body("[0].'population'", numberMatches(1119375.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-26.5))
                .body("[0].'latlng'[1]", numberMatches(31.5))
                .body("[0].'demonym'", containsString("Swazi"))
                .body("[0].'area'", numberMatches(17364.0))
                .body("[0].'gini'", numberMatches(51.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("MOZ", "ZAF"))
                .body("[0].'nativeName'", containsString("Swaziland"))
                .body("[0].'numericCode'", containsString("748"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("SZL"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "ss"))
                .body("[0].'translations'.'de'", containsString("Swasiland"))
                .body("[0].'translations'.'es'", containsString("Suazilandia"))
                .body("[0].'translations'.'fr'", containsString("Swaziland"))
                .body("[0].'translations'.'ja'", containsString("スワジランド"))
                .body("[0].'translations'.'it'", containsString("Swaziland"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_482_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/27")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("South Africa"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".za"))
                .body("[0].'alpha2Code'", containsString("ZA"))
                .body("[0].'alpha3Code'", containsString("ZAF"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("27"))
                .body("[0].'capital'", containsString("Pretoria"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("ZA", "RSA", "Suid-Afrika", "Republic of South Africa"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Southern Africa"))
                .body("[0].'population'", numberMatches(5.49569E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-29.0))
                .body("[0].'latlng'[1]", numberMatches(24.0))
                .body("[0].'demonym'", containsString("South African"))
                .body("[0].'area'", numberMatches(1221037.0))
                .body("[0].'gini'", numberMatches(63.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("BWA", "LSO", "MOZ", "NAM", "SWZ", "ZWE"))
                .body("[0].'nativeName'", containsString("South Africa"))
                .body("[0].'numericCode'", containsString("710"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ZAR"))
                .body("[0].'languages'.size()", equalTo(10))
                .body("[0].'languages'", hasItems("af", "en", "nr", "st", "ss", "tn", "ts", "ve", "xh", "zu"))
                .body("[0].'translations'.'de'", containsString("Republik Südafrika"))
                .body("[0].'translations'.'es'", containsString("República de Sudáfrica"))
                .body("[0].'translations'.'fr'", containsString("Afrique du Sud"))
                .body("[0].'translations'.'ja'", containsString("南アフリカ"))
                .body("[0].'translations'.'it'", containsString("Sud Africa"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_483_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/501?fields=name")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Belize"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_484_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/djibouti?fields=_EM_6230_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_485_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/jamestown?fields=NvM8_3Wnq3eZbUQ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_486_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/kabul?fields=translations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'translations'.'br'", containsString("Afeganistão"))
                .body("[0].'translations'.'pt'", containsString("Afeganistão"))
                .body("[0].'translations'.'nl'", containsString("Afghanistan"))
                .body("[0].'translations'.'hr'", containsString("Afganistan"))
                .body("[0].'translations'.'fa'", containsString("افغانستان"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_487_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/kathmandu?fields=alpha2Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha2Code'", containsString("NP"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_488_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/964")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Iraq"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".iq"))
                .body("[0].'alpha2Code'", containsString("IQ"))
                .body("[0].'alpha3Code'", containsString("IRQ"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("964"))
                .body("[0].'capital'", containsString("Baghdad"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("IQ", "Republic of Iraq", "Jumhūriyyat al-‘Irāq"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(3.6004552E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(44.0))
                .body("[0].'demonym'", containsString("Iraqi"))
                .body("[0].'area'", numberMatches(438317.0))
                .body("[0].'gini'", numberMatches(30.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "JOR", "KWT", "SAU", "SYR", "TUR"))
                .body("[0].'nativeName'", containsString("العراق"))
                .body("[0].'numericCode'", containsString("368"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("IQD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("ar", "ku"))
                .body("[0].'translations'.'de'", containsString("Irak"))
                .body("[0].'translations'.'es'", containsString("Irak"))
                .body("[0].'translations'.'fr'", containsString("Irak"))
                .body("[0].'translations'.'ja'", containsString("イラク"))
                .body("[0].'translations'.'it'", containsString("Iraq"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_489_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/965")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Kuwait"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".kw"))
                .body("[0].'alpha2Code'", containsString("KW"))
                .body("[0].'alpha3Code'", containsString("KWT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("965"))
                .body("[0].'capital'", containsString("Kuwait City"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("KW", "State of Kuwait", "Dawlat al-Kuwait"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(3268431.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(29.5))
                .body("[0].'latlng'[1]", numberMatches(45.75))
                .body("[0].'demonym'", containsString("Kuwaiti"))
                .body("[0].'area'", numberMatches(17818.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("IRN", "SAU"))
                .body("[0].'nativeName'", containsString("الكويت"))
                .body("[0].'numericCode'", containsString("414"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("KWD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Kuwait"))
                .body("[0].'translations'.'es'", containsString("Kuwait"))
                .body("[0].'translations'.'fr'", containsString("Koweït"))
                .body("[0].'translations'.'ja'", containsString("クウェート"))
                .body("[0].'translations'.'it'", containsString("Kuwait"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_490_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/966")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Saudi Arabia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sa"))
                .body("[0].'alpha2Code'", containsString("SA"))
                .body("[0].'alpha3Code'", containsString("SAU"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("966"))
                .body("[0].'capital'", containsString("Riyadh"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("SA", "Kingdom of Saudi Arabia", "Al-Mamlakah al-‘Arabiyyah as-Su‘ūdiyyah"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(3.1521418E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(25.0))
                .body("[0].'latlng'[1]", numberMatches(45.0))
                .body("[0].'demonym'", containsString("Saudi Arabian"))
                .body("[0].'area'", numberMatches(2149690.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("IRQ", "JOR", "KWT", "OMN", "QAT", "ARE", "YEM"))
                .body("[0].'nativeName'", containsString("العربية السعودية"))
                .body("[0].'numericCode'", containsString("682"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("SAR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Saudi-Arabien"))
                .body("[0].'translations'.'es'", containsString("Arabia Saudí"))
                .body("[0].'translations'.'fr'", containsString("Arabie Saoudite"))
                .body("[0].'translations'.'ja'", containsString("サウジアラビア"))
                .body("[0].'translations'.'it'", containsString("Arabia Saudita"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_491_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/968")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Oman"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".om"))
                .body("[0].'alpha2Code'", containsString("OM"))
                .body("[0].'alpha3Code'", containsString("OMN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("968"))
                .body("[0].'capital'", containsString("Muscat"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("OM", "Sultanate of Oman", "Salṭanat ʻUmān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(4185440.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(21.0))
                .body("[0].'latlng'[1]", numberMatches(57.0))
                .body("[0].'demonym'", containsString("Omani"))
                .body("[0].'area'", numberMatches(309500.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("SAU", "ARE", "YEM"))
                .body("[0].'nativeName'", containsString("عمان"))
                .body("[0].'numericCode'", containsString("512"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("OMR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Oman"))
                .body("[0].'translations'.'es'", containsString("Omán"))
                .body("[0].'translations'.'fr'", containsString("Oman"))
                .body("[0].'translations'.'ja'", containsString("オマーン"))
                .body("[0].'translations'.'it'", containsString("oman"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_492_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/970")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Palestine"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ps"))
                .body("[0].'alpha2Code'", containsString("PS"))
                .body("[0].'alpha3Code'", containsString("PSE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("970"))
                .body("[0].'capital'", containsString("Ramallah"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("PS", "State of Palestine", "Dawlat Filasṭin"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(4682467.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(31.9))
                .body("[0].'latlng'[1]", numberMatches(35.2))
                .body("[0].'demonym'", containsString("Palestinian"))
                .body("[0].'area'", nullValue())
                .body("[0].'gini'", numberMatches(35.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("ISR", "EGY", "JOR"))
                .body("[0].'nativeName'", containsString("فلسطين"))
                .body("[0].'numericCode'", containsString("275"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ILS"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Palästina"))
                .body("[0].'translations'.'es'", containsString("Palestina"))
                .body("[0].'translations'.'fr'", containsString("Palestine"))
                .body("[0].'translations'.'ja'", containsString("パレスチナ"))
                .body("[0].'translations'.'it'", containsString("Palestina"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_493_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/kiev?fields=altSpellings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("UA", "Ukrayina"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_494_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/kingstown?fields=_EM_7766_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_495_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/kinshasa?fields=callingCodes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("243"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_496_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/saint%20martin%20islander?fields=_EM_6230_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_497_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/saint%20vincentian?fields=_EM_7839_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_498_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/salvadoran?fields=region")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'region'", containsString("Americas"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_499_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/251")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Ethiopia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".et"))
                .body("[0].'alpha2Code'", containsString("ET"))
                .body("[0].'alpha3Code'", containsString("ETH"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("251"))
                .body("[0].'capital'", containsString("Addis Ababa"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("ET", "ʾĪtyōṗṗyā", "Federal Democratic Republic of Ethiopia", "የኢትዮጵያ ፌዴራላዊ ዲሞክራሲያዊ ሪፐብሊክ"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(9.0076012E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(8.0))
                .body("[0].'latlng'[1]", numberMatches(38.0))
                .body("[0].'demonym'", containsString("Ethiopian"))
                .body("[0].'area'", numberMatches(1104300.0))
                .body("[0].'gini'", numberMatches(29.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("DJI", "ERI", "KEN", "SOM", "SSD", "SDN"))
                .body("[0].'nativeName'", containsString("ኢትዮጵያ"))
                .body("[0].'numericCode'", containsString("231"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ETB"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("am"))
                .body("[0].'translations'.'de'", containsString("Äthiopien"))
                .body("[0].'translations'.'es'", containsString("Etiopía"))
                .body("[0].'translations'.'fr'", containsString("Éthiopie"))
                .body("[0].'translations'.'ja'", containsString("エチオピア"))
                .body("[0].'translations'.'it'", containsString("Etiopia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_500_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/252")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Somalia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".so"))
                .body("[0].'alpha2Code'", containsString("SO"))
                .body("[0].'alpha3Code'", containsString("SOM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("252"))
                .body("[0].'capital'", containsString("Mogadishu"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("SO", "aṣ-Ṣūmāl", "Federal Republic of Somalia", "Jamhuuriyadda Federaalka Soomaaliya", "Jumhūriyyat aṣ-Ṣūmāl al-Fiderāliyya"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(1.0787E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(10.0))
                .body("[0].'latlng'[1]", numberMatches(49.0))
                .body("[0].'demonym'", containsString("Somali"))
                .body("[0].'area'", numberMatches(637657.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("DJI", "ETH", "KEN"))
                .body("[0].'nativeName'", containsString("Soomaaliya"))
                .body("[0].'numericCode'", containsString("706"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("SOS"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("so", "ar"))
                .body("[0].'translations'.'de'", containsString("Somalia"))
                .body("[0].'translations'.'es'", containsString("Somalia"))
                .body("[0].'translations'.'fr'", containsString("Somalie"))
                .body("[0].'translations'.'ja'", containsString("ソマリア"))
                .body("[0].'translations'.'it'", containsString("Somalia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_501_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/254")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Kenya"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ke"))
                .body("[0].'alpha2Code'", containsString("KE"))
                .body("[0].'alpha3Code'", containsString("KEN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("254"))
                .body("[0].'capital'", containsString("Nairobi"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("KE", "Republic of Kenya", "Jamhuri ya Kenya"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(4.605E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(1.0))
                .body("[0].'latlng'[1]", numberMatches(38.0))
                .body("[0].'demonym'", containsString("Kenyan"))
                .body("[0].'area'", numberMatches(580367.0))
                .body("[0].'gini'", numberMatches(47.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("ETH", "SOM", "SSD", "TZA", "UGA"))
                .body("[0].'nativeName'", containsString("Kenya"))
                .body("[0].'numericCode'", containsString("404"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("KES"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "sw"))
                .body("[0].'translations'.'de'", containsString("Kenia"))
                .body("[0].'translations'.'es'", containsString("Kenia"))
                .body("[0].'translations'.'fr'", containsString("Kenya"))
                .body("[0].'translations'.'ja'", containsString("ケニア"))
                .body("[0].'translations'.'it'", containsString("Kenya"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_502_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/32?fields=_EM_7856_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_503_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/luanda?fields=kDF7S8")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_504_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/kingdom%20of%20cambodia?" + 
                    "fields=alpha3Code&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha3Code'", containsString("KHM"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_505_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/kingdom%20of%20lesotho?" + 
                    "fields=alpha3Code&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha3Code'", containsString("LSO"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_506_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/kingdom%20of%20morocco?" + 
                    "fields=alpha3Code&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha3Code'", containsString("MAR"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_507_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/kingdom%20of%20norway?" + 
                    "fields=_EM_411_XYZ_&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_508_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/kingdom%20of%20saudi%20arabia?" + 
                    "fields=e&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_509_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/420?fields=_EM_3272_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_510_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/421?fields=_EM_3272_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_511_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/423?fields=name")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Liechtenstein"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_512_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/43?fields=region")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'region'", containsString("Europe"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_513_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/45?fields=subregion")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'subregion'", containsString("Northern Europe"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_514_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/46?fields=subregion")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'subregion'", containsString("Northern Europe"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_515_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/49?fields=topLevelDomain")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".de"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_516_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/niamey?fields=_EM_8099_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_517_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/sudanese")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Sudan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sd"))
                .body("[0].'alpha2Code'", containsString("SD"))
                .body("[0].'alpha3Code'", containsString("SDN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("249"))
                .body("[0].'capital'", containsString("Khartoum"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("SD", "Republic of the Sudan", "Jumhūrīyat as-Sūdān"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Northern Africa"))
                .body("[0].'population'", numberMatches(3.95987E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(15.0))
                .body("[0].'latlng'[1]", numberMatches(30.0))
                .body("[0].'demonym'", containsString("Sudanese"))
                .body("[0].'area'", numberMatches(1886068.0))
                .body("[0].'gini'", numberMatches(35.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("CAF", "TCD", "EGY", "ERI", "ETH", "LBY", "SSD"))
                .body("[0].'nativeName'", containsString("السودان"))
                .body("[0].'numericCode'", containsString("729"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("SDG"))
                .body("[0].'currencies'[0].'name'", containsString("Sudanese pound"))
                .body("[0].'currencies'[0].'symbol'", containsString("ج.س."))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("ar"))
                .body("[0].'languages'[0].'iso639_2'", containsString("ara"))
                .body("[0].'languages'[0].'name'", containsString("Arabic"))
                .body("[0].'languages'[0].'nativeName'", containsString("العربية"))
                .body("[0].'languages'[1].'iso639_1'", containsString("en"))
                .body("[0].'languages'[1].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[1].'name'", containsString("English"))
                .body("[0].'languages'[1].'nativeName'", containsString("English"))
                .body("[0].'translations'.'de'", containsString("Sudan"))
                .body("[0].'translations'.'es'", containsString("Sudán"))
                .body("[0].'translations'.'fr'", containsString("Soudan"))
                .body("[0].'translations'.'ja'", containsString("スーダン"))
                .body("[0].'translations'.'it'", containsString("Sudan"))
                .body("[0].'translations'.'br'", containsString("Sudão"))
                .body("[0].'translations'.'pt'", containsString("Sudão"))
                .body("[0].'translations'.'nl'", containsString("Soedan"))
                .body("[0].'translations'.'hr'", containsString("Sudan"))
                .body("[0].'translations'.'fa'", containsString("سودان"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/sdn.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(2))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[0].'regionalBlocs'[1].'acronym'", containsString("AL"))
                .body("[0].'regionalBlocs'[1].'name'", containsString("Arab League"))
                .body("[0].'regionalBlocs'[1].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[1].'otherNames'.size()", equalTo(3))
                .body("[0].'regionalBlocs'[1].'otherNames'", hasItems("جامعة الدول العربية", "Jāmiʻat ad-Duwal al-ʻArabīyah", "League of Arab States"))
                .body("[0].'cioc'", containsString("SUD"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_518_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/omani?fields=altSpellings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("OM", "Sultanate of Oman", "Salṭanat ʻUmān"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_519_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/pakistani?fields=altSpellings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("PK", "Pākistān", "Islamic Republic of Pakistan", "Islāmī Jumhūriya'eh Pākistān"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_520_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/palauan?fields=altSpellings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("PW", "Republic of Palau", "Beluu er a Belau"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_521_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/palestinian?fields=callingCodes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("970"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_522_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/tH?fields=_EM_8340_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_523_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/republic%20of%20fiji?" + 
                    "fields=translations&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'translations'.'br'", containsString("Fiji"))
                .body("[0].'translations'.'pt'", containsString("Fiji"))
                .body("[0].'translations'.'nl'", containsString("Fiji"))
                .body("[0].'translations'.'hr'", containsString("Fiđi"))
                .body("[0].'translations'.'fa'", containsString("فیجی"))
                .body("[0].'translations'.'de'", containsString("Fidschi"))
                .body("[0].'translations'.'es'", containsString("Fiyi"))
                .body("[0].'translations'.'fr'", containsString("Fidji"))
                .body("[0].'translations'.'ja'", containsString("フィジー"))
                .body("[0].'translations'.'it'", containsString("Figi"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_524_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/republic%20of%20finland?" + 
                    "fields=translations&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'translations'.'br'", containsString("Finlândia"))
                .body("[0].'translations'.'pt'", containsString("Finlândia"))
                .body("[0].'translations'.'nl'", containsString("Finland"))
                .body("[0].'translations'.'hr'", containsString("Finska"))
                .body("[0].'translations'.'fa'", containsString("فنلاند"))
                .body("[0].'translations'.'de'", containsString("Finnland"))
                .body("[0].'translations'.'es'", containsString("Finlandia"))
                .body("[0].'translations'.'fr'", containsString("Finlande"))
                .body("[0].'translations'.'ja'", containsString("フィンランド"))
                .body("[0].'translations'.'it'", containsString("Finlandia"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_525_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/republic%20of%20guinea?" + 
                    "fields=translations&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'translations'.'br'", containsString("Guiné"))
                .body("[0].'translations'.'pt'", containsString("Guiné"))
                .body("[0].'translations'.'nl'", containsString("Guinee"))
                .body("[0].'translations'.'hr'", containsString("Gvineja"))
                .body("[0].'translations'.'fa'", containsString("گینه"))
                .body("[0].'translations'.'de'", containsString("Guinea"))
                .body("[0].'translations'.'es'", containsString("Guinea"))
                .body("[0].'translations'.'fr'", containsString("Guinée"))
                .body("[0].'translations'.'ja'", containsString("ギニア"))
                .body("[0].'translations'.'it'", containsString("Guinea"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_526_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/republic%20of%20guinea-bissau?" + 
                    "fields=alpha2Code&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha2Code'", containsString("GW"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_527_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/republic%20of%20haiti?" + 
                    "fields=alpha2Code&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha2Code'", containsString("HT"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_528_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/republic%20of%20honduras?" + 
                    "fields=alpha3Code&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha3Code'", containsString("HND"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_529_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/republic%20of%20iceland?" + 
                    "fields=alpha3Code&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha3Code'", containsString("ISL"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_530_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/republic%20of%20india?" + 
                    "fields=alpha3Code&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha3Code'", containsString("IND"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_531_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/republic%20of%20indonesia?" + 
                    "fields=_EM_411_XYZ_&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_532_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/republic%20of%20iraq?" + 
                    "fields=alpha3Code&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha3Code'", containsString("IRQ"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_533_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/republic%20of%20ireland?" + 
                    "fields=alpha3Code&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha3Code'", containsString("IRL"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_534_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/alpha/oh7FJcNXfPo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_535_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/alpha/L?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_536_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/alpha/_EM_60_XYZ_?EMextraParam123=_EM_61_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_537_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/2?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_538_getOnV1CurrencWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/currency/OI0zB5?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_539_getOnV2CurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/N2Qaknpl")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_540_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/subregion/Australia%20and%20New%20Zealan%5C?fields=6c7tAce4KVEmWpYw")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_541_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/%5CC?fields=_EM_2865_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_542_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/%5Ce?fields=alpha3Code")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_543_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/%5CJS?fields=89XrNK")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_544_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/region/A%5C%5Ba")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_545_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/PZ%5C%60r?fields=_EM_671_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_546_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/currency/U%5CS")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_547_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/MWXronesi%5C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_548_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/A%5ChgLba?fields=NvK8_3Wnq3cZsBQ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_549_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/alpha/g%5C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_550_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/East%20TimoJef%5C?fields=_EM_5632_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_551_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_4810_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_552_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_34_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_553_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_217_XYZ_?EMextraParam123=_EM_218_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_554_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_170_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_169_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_555_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_84_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/region/_EM_83_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_556_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/_EM_11_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_557_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Burundi")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_12_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_558_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/IGS?fields=dIhu1sm")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_559_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_5975_XYZ_?" + 
                    "fields=alpha3Code&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_560_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_18_XYZ_?" + 
                    "fullText=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_561_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_3119_XYZ_?fields=name")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_562_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_2270_XYZ_?" + 
                    "fields=_EM_1825_XYZ_&" + 
                    "EMextraParam123=_EM_1826_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_563_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/_EM_68_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_564_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Syrien")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_2105_XYZ_?fields=_EM_953_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_565_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_725_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/lang/EIj?EMextraParam123=_EM_724_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_566_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_5876_XYZ_?fields=_EM_5632_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_567_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Saudi-Arabien")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_29_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_568_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/jC?fields=_EM_30_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_569_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_38_XYZ_?EMextraParam123=_EM_39_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_570_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_50_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_571_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/alpha/P_B")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_572_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_71_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_573_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_75_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_574_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_104_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/region/_EM_103_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_575_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/lang/_EM_106_XYZ_?fields=2q29C")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_576_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_108_XYZ_?" + 
                    "fields=tCH688rciWi&" + 
                    "fullText=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_577_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_110_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_578_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_121_XYZ_?" + 
                    "fields=QHUVOHVBAluavE&" + 
                    "EMextraParam123=_EM_122_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_579_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/_EM_131_XYZ_?fields=9WyAYnDr")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_580_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_142_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_581_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/region/_EM_155_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_582_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_161_XYZ_?" + 
                    "fullText=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_583_getOnV2CallingcodWithQueryParamsEmptyFields() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_166_XYZ_?" + 
                    "fields=&" + 
                    "EMextraParam123=_EM_167_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_584_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_172_XYZ_?" + 
                    "fullText=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_585_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/region/_EM_176_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_586_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_179_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_587_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_182_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_180_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_588_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_209_XYZ_?" + 
                    "fields=5fFprk3Yt6Z&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_589_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/_EM_220_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_590_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_224_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/region/_EM_223_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_591_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/currency/UA@")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_592_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_228_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_593_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_249_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_594_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Tonga")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_253_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_595_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_275_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_273_XYZ_?fields=m")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_596_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_277_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_597_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_287_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_598_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_298_XYZ_?EMextraParam123=_EM_299_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_599_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_319_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_600_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_344_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_342_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_601_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_350_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_602_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_353_XYZ_?fields=5GQ8mQk5kOzow")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_603_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_358_XYZ_?" + 
                    "fullText=true&" + 
                    "EMextraParam123=_EM_359_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_604_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_370_XYZ_?fields=_EM_369_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_605_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/alpha/JL?fields=_EM_379_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_606_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Marokko")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_387_XYZ_?" + 
                    "fullText=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_607_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_391_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_608_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_403_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_609_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_427_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_610_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_471_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_611_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_475_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_612_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_489_XYZ_?EMextraParam123=_EM_490_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_613_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Algerien")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_491_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_614_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/_EM_510_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_615_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_526_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_616_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_536_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_617_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_37_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_540_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_618_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_552_XYZ_?" + 
                    "fields=k3h86e_dN9Q&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_619_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_572_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_620_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_583_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_621_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/_EM_604_XYZ_?EMextraParam123=_EM_605_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_622_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_611_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_623_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_615_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_624_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_633_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_631_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_625_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_634_XYZ_?EMextraParam123=_EM_36_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_626_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Tonga")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_652_XYZ_?" + 
                    "fields=Nd8YWgmG&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_627_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_666_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_628_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_685_XYZ_?" + 
                    "fullText=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_629_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_692_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_630_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_697_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_631_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_37_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_708_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_632_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_712_XYZ_?EMextraParam123=_EM_713_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_633_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_529_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_714_XYZ_?EMextraParam123=_EM_528_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_634_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_719_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_635_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_728_XYZ_?" + 
                    "fullText=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_636_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_736_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_637_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_750_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_638_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_772_XYZ_?" + 
                    "fields=QdEIzFxCRY&" + 
                    "EMextraParam123=_EM_773_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_639_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_775_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_640_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_780_XYZ_?" + 
                    "fullText=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_641_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_792_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_790_XYZ_?fields=HIB5")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_642_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_793_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_643_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_813_XYZ_?EMextraParam123=_EM_814_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_644_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_818_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_645_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_824_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_822_XYZ_?EMextraParam123=_EM_823_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_646_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_856_XYZ_?" + 
                    "fields=_EM_855_XYZ_&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_647_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_858_XYZ_?" + 
                    "fullText=true&" + 
                    "EMextraParam123=_EM_859_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_648_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_861_XYZ_?" + 
                    "fields=bakz9X0X__XtHtlS&" + 
                    "EMextraParam123=_EM_862_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_649_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_867_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_650_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_878_XYZ_?EMextraParam123=_EM_879_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_651_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_892_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_890_XYZ_?fields=d")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_652_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/_EM_906_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_653_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_926_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_924_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_654_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_942_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_655_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_950_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_656_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_963_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_962_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_657_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Israel")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_971_XYZ_?fields=")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_658_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_977_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_659_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_988_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_660_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1022_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_1020_XYZ_?fields=_EM_1019_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_661_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_1024_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_662_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_1026_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_663_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Republik Südafrika")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_1032_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_664_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_1040_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_665_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1056_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_1055_XYZ_?fields=_EM_1054_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_666_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_1067_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_667_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_1071_XYZ_?" + 
                    "fields=_EM_1070_XYZ_&" + 
                    "fullText=false&" + 
                    "EMextraParam123=_EM_1072_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_668_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Timor-Leste")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_1075_XYZ_?EMextraParam123=_EM_1076_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_669_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_1088_XYZ_?fields=BM2o")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_670_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_1097_XYZ_?" + 
                    "fields=CTYDu2be&" + 
                    "fullText=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_671_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_929_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_1128_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_672_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_961_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_1135_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_673_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_1153_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_674_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_1154_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_675_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_1160_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_676_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_1162_XYZ_?" + 
                    "fields=_EM_1161_XYZ_&" + 
                    "EMextraParam123=_EM_1163_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_677_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_1194_XYZ_?EMextraParam123=_EM_1195_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_678_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_1196_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_679_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_1200_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_680_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1212_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_1211_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_681_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_1219_XYZ_?fields=rOvvjVYjhsEbcB")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_682_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Guyana")
                .get(baseUrlOfSut + "/rest/v2/region/_EM_1232_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_683_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_1238_XYZ_?" + 
                    "fullText=false&" + 
                    "EMextraParam123=_EM_1239_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_684_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_1242_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_685_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Ukraine")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_1255_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_686_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_1276_XYZ_?fields=zKcVDrNzN1FvJ0j4")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_687_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_1297_XYZ_?EMextraParam123=_EM_1298_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_688_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_1304_XYZ_?" + 
                    "fields=OpvYsk&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_689_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/name/j?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_690_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_1327_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_691_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_1333_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_692_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_1335_XYZ_?EMextraParam123=_EM_1336_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_693_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1199_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_1340_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_694_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_1341_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_695_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_1345_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_696_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_25_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_1372_XYZ_?" + 
                    "fields=cxy1qY&" + 
                    "EMextraParam123=_EM_24_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_697_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_1383_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_698_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_1413_XYZ_?EMextraParam123=_EM_1414_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_699_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_1425_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_700_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_1429_XYZ_?" + 
                    "fields=_EM_1428_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_701_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_1450_XYZ_?EMextraParam123=_EM_1451_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_702_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_1452_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_703_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_1461_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_704_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_1480_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_705_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_1504_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_706_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_1511_XYZ_?EMextraParam123=_EM_1512_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_707_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_638_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_1526_XYZ_?fields=fQtYBwsvGn")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_708_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_1567_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_709_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Niederlande")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_1586_XYZ_?" + 
                    "fields=_EM_1585_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_710_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_1591_XYZ_?EMextraParam123=_EM_1592_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_711_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_1608_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_712_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1631_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_1629_XYZ_?fields=_EM_1628_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_713_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Portugal")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_1653_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_714_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_1668_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_715_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_1679_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_716_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_1685_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_717_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_1694_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_718_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_1697_XYZ_?fields=_EM_1696_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_719_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_1717_XYZ_?EMextraParam123=_EM_1718_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_720_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_1729_XYZ_?fields=ExewD0AXp")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_721_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Saint-Barthélemy")
                .get(baseUrlOfSut + "/rest/v1/subregion/_EM_1758_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_722_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_1759_XYZ_?EMextraParam123=_EM_1760_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_723_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_1775_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_724_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1781_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_1780_XYZ_?" + 
                    "fields=j&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_725_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_1802_XYZ_?" + 
                    "fields=u&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_726_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_1817_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_727_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1824_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_1822_XYZ_?EMextraParam123=_EM_1823_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_728_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_1888_XYZ_?" + 
                    "fields=_EM_135_XYZ_&" + 
                    "EMextraParam123=_EM_136_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_729_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_1901_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_730_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Sankt Helena")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_1902_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_731_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_1907_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_732_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Sint Maarten (niederl. Teil)")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_1917_XYZ_?" + 
                    "fields=_EM_1916_XYZ_&" + 
                    "EMextraParam123=_EM_1918_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_733_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1936_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_1934_XYZ_?" + 
                    "fields=_EM_1933_XYZ_&" + 
                    "EMextraParam123=_EM_1935_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_734_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_1958_XYZ_?EMextraParam123=_EM_1959_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_735_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_1975_XYZ_?EMextraParam123=_EM_1976_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_736_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_1984_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_737_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_1987_XYZ_?" + 
                    "fields=_EM_1986_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_738_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_1996_XYZ_?fields=_EM_1995_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_739_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2021_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_2020_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_740_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_2024_XYZ_?" + 
                    "fields=_EM_2023_XYZ_&" + 
                    "fullText=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_741_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_2040_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_742_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2074_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_2072_XYZ_?EMextraParam123=_EM_2073_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_743_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_2076_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_744_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_2083_XYZ_?EMextraParam123=_EM_2084_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_745_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_2095_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_746_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_2103_XYZ_?" + 
                    "fields=d&" + 
                    "EMextraParam123=_EM_462_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_747_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_2118_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_748_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2124_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_2123_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_749_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_2126_XYZ_?EMextraParam123=_EM_2127_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_750_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_2131_XYZ_?fields=_EM_2108_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_751_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2152_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_2151_XYZ_?" + 
                    "fullText=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_752_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_2159_XYZ_?" + 
                    "fields=_EM_2158_XYZ_&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_753_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_2169_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_754_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_2174_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_755_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_2194_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_756_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_2202_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_757_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Palau")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_2207_XYZ_?fields=KbmKiV2NiaPoyxE")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_758_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_2210_XYZ_?EMextraParam123=_EM_2211_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_759_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_2218_XYZ_?EMextraParam123=_EM_2219_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_760_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_2234_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_761_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_2236_XYZ_?EMextraParam123=_EM_2237_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_762_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_2248_XYZ_?fields=_EM_2247_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_763_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Saint Lucia")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_2263_XYZ_?" + 
                    "fields=_EM_943_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_764_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2277_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_2275_XYZ_?EMextraParam123=_EM_2276_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_765_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_2299_XYZ_?fields=eEcqhhTE10slhr58")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_766_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_2301_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_767_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_2314_XYZ_?" + 
                    "fields=2V45D7EoWR&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_768_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_2357_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_769_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_2366_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_770_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_2383_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_771_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_2385_XYZ_?fields=uf")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_772_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_2387_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_773_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_2395_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_774_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_2415_XYZ_?fields=_EM_2414_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_775_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_2475_XYZ_?" + 
                    "fields=y3A2_NuH0t3y%3Dog6&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_776_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_2476_XYZ_?fields=ZvwnL3HRMMcgnAw")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_777_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_2485_XYZ_?fields=_EM_2484_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_778_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_2515_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_779_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_2552_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_780_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_2554_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_781_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_2555_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_782_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_2602_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_783_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_2606_XYZ_?fields=_EM_2605_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_784_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_2610_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_785_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_2625_XYZ_?fields=c")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_786_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_2627_XYZ_?fields=_EM_2626_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_787_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_2643_XYZ_?fields=_EM_2469_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_788_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_2646_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_789_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_2647_XYZ_?fields=OfUlu")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_790_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_2663_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_791_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_2705_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_792_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_2714_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_793_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_2729_XYZ_?" + 
                    "fields=40Gm7iO737&" + 
                    "fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_794_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_2737_XYZ_?fields=_EM_2736_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_795_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_2742_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_796_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_2754_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_797_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_2760_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_798_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_2767_XYZ_?fields=8BxptcvT")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_799_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_2822_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_800_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_2825_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_801_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_2837_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_802_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_2857_XYZ_?fields=sMfYq8_oaJ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_803_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_2892_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_804_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_2903_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_805_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/_EM_2925_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_806_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_2941_XYZ_?fields=_EM_2940_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_807_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_2950_XYZ_?fields=_EM_2949_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_808_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_2951_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_809_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_2959_XYZ_?fields=_EM_2958_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_810_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_2984_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_811_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_3004_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_812_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_3019_XYZ_?" + 
                    "fields=1rDI1bJL8byYox&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_813_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_3020_XYZ_?fields=VvUvt0zG")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_814_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_3024_XYZ_?fields=_EM_953_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_815_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_3026_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_816_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_3033_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_817_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_3053_XYZ_?fields=PZmjMzvuRfeKhf")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_818_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_3085_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_819_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_3088_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_820_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_3097_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_821_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_3110_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_822_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_3137_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_823_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_3146_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_824_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_3175_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_825_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_3176_XYZ_?fields=Gp0Dblys")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_826_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_3197_XYZ_?" + 
                    "fields=_EM_3196_XYZ_&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_827_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_3203_XYZ_?fields=alpha2Code")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_828_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_3204_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_829_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_3208_XYZ_?fields=_EM_2817_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_830_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_3212_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_831_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_3275_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_832_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_3302_XYZ_?fields=Wnh2cGxAtV")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_833_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_3327_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_834_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_3353_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_835_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_3355_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_836_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_3381_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_837_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_3385_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_838_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_3396_XYZ_?fields=_EM_3395_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_839_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_3423_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_840_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_3446_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_841_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_3462_XYZ_?fields=_EM_3461_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_842_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_3463_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_843_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_3472_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_844_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_3475_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_845_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_3537_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_846_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_3549_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_847_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_3564_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_848_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_3587_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_849_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_3594_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_850_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_3604_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_851_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_3618_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_852_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_3647_XYZ_?fields=_EM_3646_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_853_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_3678_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_854_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_3693_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_855_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_3701_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_856_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_3707_XYZ_?fields=g3B")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_857_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_3710_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_858_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_3771_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_859_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_3801_XYZ_?" + 
                    "fields=_EM_3800_XYZ_&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_860_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_3857_XYZ_?fields=zYueV4w3g")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_861_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_3864_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_862_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_3876_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_863_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_3908_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_864_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_3912_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_865_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_3913_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_866_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_3934_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_867_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_3945_XYZ_?fields=Zimv")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_868_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_3946_XYZ_?" + 
                    "fields=PzF&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_869_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_3969_XYZ_?fields=_EM_3968_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_870_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_3996_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_871_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_4005_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_872_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_4006_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_873_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_4020_XYZ_?fields=_EM_3958_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_874_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_4037_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_875_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_4046_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_876_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_4053_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_877_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_4059_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_878_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_4065_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_879_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_4068_XYZ_?fields=z")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_880_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_4071_XYZ_?fields=x3d3")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_881_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_4077_XYZ_?fields=g3B")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_882_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_4084_XYZ_?fields=_EM_4083_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_883_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_4126_XYZ_?fields=_EM_3272_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_884_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_4261_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_885_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_4274_XYZ_?fields=_EM_4273_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_886_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_4283_XYZ_?fields=_EM_4282_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_887_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_4388_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_888_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_4416_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_889_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_4424_XYZ_?fields=fBY8")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_890_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_4427_XYZ_?fields=_EM_2888_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_891_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_4431_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_892_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_4446_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_893_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_4465_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_894_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_4469_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_895_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_4475_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_896_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_4486_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_897_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_4488_XYZ_?fields=sFp")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_898_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_4510_XYZ_?" + 
                    "fields=_EM_4125_XYZ_&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_899_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_4522_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_900_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_4523_XYZ_?fields=zDeJ15PQenjFBp")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_901_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_4542_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_902_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_4543_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_903_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_4561_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_904_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_4575_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_905_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_7658_XYZ_?" + 
                    "fields=in8iUUW3&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_906_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_4581_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_907_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_4584_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_908_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_4585_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_909_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_4591_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_910_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_4595_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_911_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_4600_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_912_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_4627_XYZ_?fields=")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_913_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_4647_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_914_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_4649_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_915_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_4662_XYZ_?fields=cc")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_916_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_4664_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_917_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_4713_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_918_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_4716_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_919_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_4726_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_920_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_4739_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_921_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_4747_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_922_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_4767_XYZ_?fields=DTI7dnsEm")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_923_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_4775_XYZ_?fields=lwLY83Hy")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_924_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_4791_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_925_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_4827_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_926_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_4843_XYZ_?fields=ejFD9fNx1zWkZb")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_927_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_4847_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_928_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_4856_XYZ_?fields=_EM_4855_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_929_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_4863_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_930_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_4865_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_931_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_4894_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_932_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_4908_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_933_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_4921_XYZ_?fields=cd")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_934_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_4940_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_935_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_4945_XYZ_?fields=_EM_4944_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_936_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_4987_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_937_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_5014_XYZ_?fields=_EM_5013_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_938_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_5018_XYZ_?fields=capital")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_939_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_5027_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_940_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_5082_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_941_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_5182_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_942_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_5242_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_943_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_5259_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_944_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_5298_XYZ_?fields=9UG_19c7AzK")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_945_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_5304_XYZ_?" + 
                    "fields=_EM_4125_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_946_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_5308_XYZ_?fields=_EM_5307_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_947_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_5389_XYZ_?" + 
                    "fields=8wY6fNs_&" + 
                    "fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_948_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_5400_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_949_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_5422_XYZ_?fields=z")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_950_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_5423_XYZ_?fields=_EM_3958_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_951_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_5433_XYZ_?fields=DTI7dnsEmJ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_952_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_5454_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_953_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_5470_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_954_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_5471_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_955_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_5516_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_956_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_5600_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_957_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_5661_XYZ_?fields=capital")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_958_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_5662_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_959_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_5691_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_960_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_5709_XYZ_?fields=z")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_961_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_5783_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_962_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_5795_XYZ_?fields=l6ckjh34US8a")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_963_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_5797_XYZ_?fields=_EM_4796_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_964_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_5843_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_965_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_5919_XYZ_?fields=_EM_3089_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_966_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_5941_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_967_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_5944_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_968_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_5959_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_969_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_6027_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_970_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_6040_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_971_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_6088_XYZ_?fields=_EM_4901_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_972_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_6098_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_973_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_6143_XYZ_?fields=region")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_974_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_6186_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_975_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_6192_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_976_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_6243_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_977_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_6283_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_978_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_6302_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_979_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_6305_XYZ_?fields=tG9HX_lSgAG")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_980_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_6380_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_981_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_6415_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_982_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_6440_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_983_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_6445_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_984_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_6467_XYZ_?fields=NTOqC3D8AyU7r")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_985_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_6534_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_986_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_6546_XYZ_?fields=_EM_5632_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_987_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_6568_XYZ_?fields=mob7")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_988_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_6587_XYZ_?fields=uZ6oHIt6Jrn")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_989_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_6591_XYZ_?fields=_EM_3010_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_990_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_6604_XYZ_?fields=_EM_6603_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_991_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_6618_XYZ_?fields=name")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_992_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_6627_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_993_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_6628_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_994_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_6643_XYZ_?fields=ISxUI1BE7")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_995_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_6655_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_996_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_6716_XYZ_?fields=_79BxhqRN1iUIS3g")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_997_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_6732_XYZ_?fields=yy")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_998_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_6809_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_999_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_6844_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1000_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_6884_XYZ_?fields=cHC")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1001_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_6894_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1002_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_6916_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1003_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_6924_XYZ_?" + 
                    "fields=5biK%40eFJoYvU&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1004_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_6926_XYZ_?fields=NvK8_3Wnq3cZsBQ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1005_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_6929_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1006_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_6953_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/alpha/{alphacode}
    */
    @Test @Timeout(60)
    public void test_1007_getOnAlphaReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/;H?fields=GDK0YhG0s")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    */
    @Test @Timeout(60)
    public void test_1008_getOnCallingcodReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/;74")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1009_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_7034_XYZ_?fields=capital")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1010_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_7059_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1011_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_7071_XYZ_?fields=0IQs2xLXB")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1012_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_7073_XYZ_?fields=name")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1013_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_7105_XYZ_?" + 
                    "fields=5biKBeFHoYvU&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1014_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_7139_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1015_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_7182_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1016_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_7199_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1017_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_7275_XYZ_?fields=AWDYVl9_UF")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1018_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_7276_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1019_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_7314_XYZ_?fields=Jg")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1020_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_7415_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1021_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_7440_XYZ_?fields=altSpellings")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1022_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_7461_XYZ_?fields=_EM_5632_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1023_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_7566_XYZ_?fields=_EM_5632_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1024_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_7645_XYZ_?fields=_EM_5632_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1025_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_7950_XYZ_?fields=m_9mVuqHne")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1026_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_7986_XYZ_?fields=NvK8_3Wnq3cZsBQ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1027_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_7992_XYZ_?fields=_EM_5632_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1028_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_8070_XYZ_?fields=altSpellings")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1029_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_8162_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1030_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_8184_XYZ_?fields=_EM_5632_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1031_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_8306_XYZ_?fields=altSpellings")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }


}
