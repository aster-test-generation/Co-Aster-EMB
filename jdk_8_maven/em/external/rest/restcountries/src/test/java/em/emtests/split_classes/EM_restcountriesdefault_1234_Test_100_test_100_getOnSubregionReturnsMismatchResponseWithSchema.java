package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T15:08:59.479-04:00[America/New_York]
 * <br>
*  The generated test suite contains 1032 tests
 * <br>
*  Covered targets: 3148
 * <br>
*  Used time: 1h 3m 23s
 * <br>
*  Needed budget for current results: 97%
 * <br>
*  
*/

public class EM_restcountriesdefault_1234_Test_100_test_100_getOnSubregionReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.eu.fayder.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/restcountries-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (200) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_100_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/melanesia")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'name'", containsString("Fiji"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".fj"))
                .body("[0].'alpha2Code'", containsString("FJ"))
                .body("[0].'alpha3Code'", containsString("FJI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("679"))
                .body("[0].'capital'", containsString("Suva"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("FJ", "Viti", "Republic of Fiji", "Matanitu ko Viti", "Fijī Gaṇarājya"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Melanesia"))
                .body("[0].'population'", numberMatches(859178.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-18.0))
                .body("[0].'latlng'[1]", numberMatches(175.0))
                .body("[0].'demonym'", containsString("Fijian"))
                .body("[0].'area'", numberMatches(18272.0))
                .body("[0].'gini'", numberMatches(42.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Fiji"))
                .body("[0].'numericCode'", containsString("242"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("FJD"))
                .body("[0].'languages'.size()", equalTo(4))
                .body("[0].'languages'", hasItems("en", "fj", "hi", "ur"))
                .body("[0].'translations'.'de'", containsString("Fidschi"))
                .body("[0].'translations'.'es'", containsString("Fiyi"))
                .body("[0].'translations'.'fr'", containsString("Fidji"))
                .body("[0].'translations'.'ja'", containsString("フィジー"))
                .body("[0].'translations'.'it'", containsString("Figi"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("New Caledonia"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".nc"))
                .body("[1].'alpha2Code'", containsString("NC"))
                .body("[1].'alpha3Code'", containsString("NCL"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("687"))
                .body("[1].'capital'", containsString("Nouméa"))
                .body("[1].'altSpellings'.size()", equalTo(1))
                .body("[1].'altSpellings'", hasItems("NC"))
                .body("[1].'region'", containsString("Oceania"))
                .body("[1].'subregion'", containsString("Melanesia"))
                .body("[1].'population'", numberMatches(268767.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-21.5))
                .body("[1].'latlng'[1]", numberMatches(165.5))
                .body("[1].'demonym'", containsString("New Caledonian"))
                .body("[1].'area'", numberMatches(18575.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+11:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Nouvelle-Calédonie"))
                .body("[1].'numericCode'", containsString("540"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("XPF"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("fr"))
                .body("[1].'translations'.'de'", containsString("Neukaledonien"))
                .body("[1].'translations'.'es'", containsString("Nueva Caledonia"))
                .body("[1].'translations'.'fr'", containsString("Nouvelle-Calédonie"))
                .body("[1].'translations'.'ja'", containsString("ニューカレドニア"))
                .body("[1].'translations'.'it'", containsString("Nuova Caledonia"))
                .body("[1].'relevance'", containsString("0.5"))
                .body("[2].'name'", containsString("Papua New Guinea"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".pg"))
                .body("[2].'alpha2Code'", containsString("PG"))
                .body("[2].'alpha3Code'", containsString("PNG"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("675"))
                .body("[2].'capital'", containsString("Port Moresby"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("PG", "Independent State of Papua New Guinea", "Independen Stet bilong Papua Niugini"))
                .body("[2].'region'", containsString("Oceania"))
                .body("[2].'subregion'", containsString("Melanesia"))
                .body("[2].'population'", numberMatches(7398500.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-6.0))
                .body("[2].'latlng'[1]", numberMatches(147.0))
                .body("[2].'demonym'", containsString("Papua New Guinean"))
                .body("[2].'area'", numberMatches(462840.0))
                .body("[2].'gini'", numberMatches(50.9))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+10:00"))
                .body("[2].'borders'.size()", equalTo(1))
                .body("[2].'borders'", hasItems("IDN"))
                .body("[2].'nativeName'", containsString("Papua Niugini"))
                .body("[2].'numericCode'", containsString("598"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("PGK"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("en"))
                .body("[2].'translations'.'de'", containsString("Papua-Neuguinea"))
                .body("[2].'translations'.'es'", containsString("Papúa Nueva Guinea"))
                .body("[2].'translations'.'fr'", containsString("Papouasie-Nouvelle-Guinée"))
                .body("[2].'translations'.'ja'", containsString("パプアニューギニア"))
                .body("[2].'translations'.'it'", containsString("Papua Nuova Guinea"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
    }
}
