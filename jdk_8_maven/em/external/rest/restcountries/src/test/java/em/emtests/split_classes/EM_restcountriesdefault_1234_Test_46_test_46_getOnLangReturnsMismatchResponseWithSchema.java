package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T15:08:59.479-04:00[America/New_York]
 * <br>
*  The generated test suite contains 1032 tests
 * <br>
*  Covered targets: 3148
 * <br>
*  Used time: 1h 3m 23s
 * <br>
*  Needed budget for current results: 97%
 * <br>
*  
*/

public class EM_restcountriesdefault_1234_Test_46_test_46_getOnLangReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.eu.fayder.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/restcountries-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_46_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/ro?EMextraParam123=_EM_33_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Moldova"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".md"))
                .body("[0].'alpha2Code'", containsString("MD"))
                .body("[0].'alpha3Code'", containsString("MDA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("373"))
                .body("[0].'capital'", containsString("Chișinău"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MD", "Republic of Moldova", "Republica Moldova"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(3555200.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(47.0))
                .body("[0].'latlng'[1]", numberMatches(29.0))
                .body("[0].'demonym'", containsString("Moldovan"))
                .body("[0].'area'", numberMatches(33846.0))
                .body("[0].'gini'", numberMatches(33.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("ROU", "UKR"))
                .body("[0].'nativeName'", containsString("Moldova"))
                .body("[0].'numericCode'", containsString("498"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MDL"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ro"))
                .body("[0].'translations'.'de'", containsString("Moldawie"))
                .body("[0].'translations'.'es'", containsString("Moldavia"))
                .body("[0].'translations'.'fr'", containsString("Moldavie"))
                .body("[0].'translations'.'ja'", containsString("モルドバ共和国"))
                .body("[0].'translations'.'it'", containsString("Moldavia"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Romania"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ro"))
                .body("[1].'alpha2Code'", containsString("RO"))
                .body("[1].'alpha3Code'", containsString("ROU"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("40"))
                .body("[1].'capital'", containsString("Bucharest"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("RO", "Rumania", "Roumania", "România"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Eastern Europe"))
                .body("[1].'population'", numberMatches(1.9942642E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(46.0))
                .body("[1].'latlng'[1]", numberMatches(25.0))
                .body("[1].'demonym'", containsString("Romanian"))
                .body("[1].'area'", numberMatches(238391.0))
                .body("[1].'gini'", numberMatches(30.0))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(5))
                .body("[1].'borders'", hasItems("BGR", "HUN", "MDA", "SRB", "UKR"))
                .body("[1].'nativeName'", containsString("România"))
                .body("[1].'numericCode'", containsString("642"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("RON"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("ro"))
                .body("[1].'translations'.'de'", containsString("Rumänien"))
                .body("[1].'translations'.'es'", containsString("Rumania"))
                .body("[1].'translations'.'fr'", containsString("Roumanie"))
                .body("[1].'translations'.'ja'", containsString("ルーマニア"))
                .body("[1].'translations'.'it'", containsString("Romania"))
                .body("[1].'relevance'", containsString("0"));
    }
}
