package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T15:08:59.479-04:00[America/New_York]
 * <br>
*  The generated test suite contains 1032 tests
 * <br>
*  Covered targets: 3148
 * <br>
*  Used time: 1h 3m 23s
 * <br>
*  Needed budget for current results: 97%
 * <br>
*  
*/

public class EM_restcountriesdefault_1234_Test_118_test_118_getOnRegionalblocReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.eu.fayder.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/restcountries-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_118_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/EEU?fields=translations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'translations'.'br'", containsString("Armênia"))
                .body("[0].'translations'.'pt'", containsString("Arménia"))
                .body("[0].'translations'.'nl'", containsString("Armenië"))
                .body("[0].'translations'.'hr'", containsString("Armenija"))
                .body("[0].'translations'.'fa'", containsString("ارمنستان"))
                .body("[0].'translations'.'de'", containsString("Armenien"))
                .body("[0].'translations'.'es'", containsString("Armenia"))
                .body("[0].'translations'.'fr'", containsString("Arménie"))
                .body("[0].'translations'.'ja'", containsString("アルメニア"))
                .body("[0].'translations'.'it'", containsString("Armenia"))
                .body("[1].'translations'.'br'", containsString("Bielorrússia"))
                .body("[1].'translations'.'pt'", containsString("Bielorrússia"))
                .body("[1].'translations'.'nl'", containsString("Wit-Rusland"))
                .body("[1].'translations'.'hr'", containsString("Bjelorusija"))
                .body("[1].'translations'.'fa'", containsString("بلاروس"))
                .body("[1].'translations'.'de'", containsString("Weißrussland"))
                .body("[1].'translations'.'es'", containsString("Bielorrusia"))
                .body("[1].'translations'.'fr'", containsString("Biélorussie"))
                .body("[1].'translations'.'ja'", containsString("ベラルーシ"))
                .body("[1].'translations'.'it'", containsString("Bielorussia"))
                .body("[2].'translations'.'br'", containsString("Cazaquistão"))
                .body("[2].'translations'.'pt'", containsString("Cazaquistão"))
                .body("[2].'translations'.'nl'", containsString("Kazachstan"))
                .body("[2].'translations'.'hr'", containsString("Kazahstan"))
                .body("[2].'translations'.'fa'", containsString("قزاقستان"))
                .body("[2].'translations'.'de'", containsString("Kasachstan"))
                .body("[2].'translations'.'es'", containsString("Kazajistán"))
                .body("[2].'translations'.'fr'", containsString("Kazakhstan"))
                .body("[2].'translations'.'ja'", containsString("カザフスタン"))
                .body("[2].'translations'.'it'", containsString("Kazakistan"))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
    }
}
