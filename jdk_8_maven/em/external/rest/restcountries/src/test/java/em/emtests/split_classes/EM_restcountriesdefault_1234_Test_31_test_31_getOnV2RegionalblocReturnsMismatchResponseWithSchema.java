package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T15:08:59.479-04:00[America/New_York]
 * <br>
*  The generated test suite contains 1032 tests
 * <br>
*  Covered targets: 3148
 * <br>
*  Used time: 1h 3m 23s
 * <br>
*  Needed budget for current results: 97%
 * <br>
*  
*/

public class EM_restcountriesdefault_1234_Test_31_test_31_getOnV2RegionalblocReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.eu.fayder.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/restcountries-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_31_getOnV2RegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/SAARC")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(8))
                .body("[0].'name'", containsString("Afghanistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".af"))
                .body("[0].'alpha2Code'", containsString("AF"))
                .body("[0].'alpha3Code'", containsString("AFG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("93"))
                .body("[0].'capital'", containsString("Kabul"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AF", "Afġānistān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.7657145E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(65.0))
                .body("[0].'demonym'", containsString("Afghan"))
                .body("[0].'area'", numberMatches(652230.0))
                .body("[0].'gini'", numberMatches(27.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:30"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "PAK", "TKM", "UZB", "TJK", "CHN"))
                .body("[0].'nativeName'", containsString("افغانستان"))
                .body("[0].'numericCode'", containsString("004"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("AFN"))
                .body("[0].'currencies'[0].'name'", containsString("Afghan afghani"))
                .body("[0].'currencies'[0].'symbol'", containsString("؋"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'[0].'iso639_1'", containsString("ps"))
                .body("[0].'languages'[0].'iso639_2'", containsString("pus"))
                .body("[0].'languages'[0].'name'", containsString("Pashto"))
                .body("[0].'languages'[0].'nativeName'", containsString("پښتو"))
                .body("[0].'languages'[1].'iso639_1'", containsString("uz"))
                .body("[0].'languages'[1].'iso639_2'", containsString("uzb"))
                .body("[0].'languages'[1].'name'", containsString("Uzbek"))
                .body("[0].'languages'[1].'nativeName'", containsString("Oʻzbek"))
                .body("[0].'languages'[2].'iso639_1'", containsString("tk"))
                .body("[0].'languages'[2].'iso639_2'", containsString("tuk"))
                .body("[0].'languages'[2].'name'", containsString("Turkmen"))
                .body("[0].'languages'[2].'nativeName'", containsString("Türkmen"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[0].'translations'.'br'", containsString("Afeganistão"))
                .body("[0].'translations'.'pt'", containsString("Afeganistão"))
                .body("[0].'translations'.'nl'", containsString("Afghanistan"))
                .body("[0].'translations'.'hr'", containsString("Afganistan"))
                .body("[0].'translations'.'fa'", containsString("افغانستان"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/afg.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("SAARC"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("South Asian Association for Regional Cooperation"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("AFG"))
                .body("[1].'name'", containsString("Bangladesh"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".bd"))
                .body("[1].'alpha2Code'", containsString("BD"))
                .body("[1].'alpha3Code'", containsString("BGD"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("880"))
                .body("[1].'capital'", containsString("Dhaka"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("BD", "People's Republic of Bangladesh", "Gônôprôjatôntri Bangladesh"))
                .body("[1].'region'", containsString("Asia"))
                .body("[1].'subregion'", containsString("Southern Asia"))
                .body("[1].'population'", numberMatches(1.6100679E8))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(24.0))
                .body("[1].'latlng'[1]", numberMatches(90.0))
                .body("[1].'demonym'", containsString("Bangladeshi"))
                .body("[1].'area'", numberMatches(147570.0))
                .body("[1].'gini'", numberMatches(32.1))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+06:00"))
                .body("[1].'borders'.size()", equalTo(2))
                .body("[1].'borders'", hasItems("MMR", "IND"))
                .body("[1].'nativeName'", containsString("Bangladesh"))
                .body("[1].'numericCode'", containsString("050"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("BDT"))
                .body("[1].'currencies'[0].'name'", containsString("Bangladeshi taka"))
                .body("[1].'currencies'[0].'symbol'", containsString("৳"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'[0].'iso639_1'", containsString("bn"))
                .body("[1].'languages'[0].'iso639_2'", containsString("ben"))
                .body("[1].'languages'[0].'name'", containsString("Bengali"))
                .body("[1].'languages'[0].'nativeName'", containsString("বাংলা"))
                .body("[1].'translations'.'de'", containsString("Bangladesch"))
                .body("[1].'translations'.'es'", containsString("Bangladesh"))
                .body("[1].'translations'.'fr'", containsString("Bangladesh"))
                .body("[1].'translations'.'ja'", containsString("バングラデシュ"))
                .body("[1].'translations'.'it'", containsString("Bangladesh"))
                .body("[1].'translations'.'br'", containsString("Bangladesh"))
                .body("[1].'translations'.'pt'", containsString("Bangladeche"))
                .body("[1].'translations'.'nl'", containsString("Bangladesh"))
                .body("[1].'translations'.'hr'", containsString("Bangladeš"))
                .body("[1].'translations'.'fa'", containsString("بنگلادش"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/bgd.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("SAARC"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("South Asian Association for Regional Cooperation"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[1].'cioc'", containsString("BAN"))
                .body("[2].'name'", containsString("Bhutan"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".bt"))
                .body("[2].'alpha2Code'", containsString("BT"))
                .body("[2].'alpha3Code'", containsString("BTN"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("975"))
                .body("[2].'capital'", containsString("Thimphu"))
                .body("[2].'altSpellings'.size()", equalTo(2))
                .body("[2].'altSpellings'", hasItems("BT", "Kingdom of Bhutan"))
                .body("[2].'region'", containsString("Asia"))
                .body("[2].'subregion'", containsString("Southern Asia"))
                .body("[2].'population'", numberMatches(775620.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(27.5))
                .body("[2].'latlng'[1]", numberMatches(90.5))
                .body("[2].'demonym'", containsString("Bhutanese"))
                .body("[2].'area'", numberMatches(38394.0))
                .body("[2].'gini'", numberMatches(38.1))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+06:00"))
                .body("[2].'borders'.size()", equalTo(2))
                .body("[2].'borders'", hasItems("CHN", "IND"))
                .body("[2].'nativeName'", containsString("ʼbrug-yul"))
                .body("[2].'numericCode'", containsString("064"))
                .body("[2].'currencies'.size()", equalTo(2))
                .body("[2].'currencies'[0].'code'", containsString("BTN"))
                .body("[2].'currencies'[0].'name'", containsString("Bhutanese ngultrum"))
                .body("[2].'currencies'[0].'symbol'", containsString("Nu."))
                .body("[2].'currencies'[1].'code'", containsString("INR"))
                .body("[2].'currencies'[1].'name'", containsString("Indian rupee"))
                .body("[2].'currencies'[1].'symbol'", containsString("₹"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'[0].'iso639_1'", containsString("dz"))
                .body("[2].'languages'[0].'iso639_2'", containsString("dzo"))
                .body("[2].'languages'[0].'name'", containsString("Dzongkha"))
                .body("[2].'languages'[0].'nativeName'", containsString("རྫོང་ཁ"))
                .body("[2].'translations'.'de'", containsString("Bhutan"))
                .body("[2].'translations'.'es'", containsString("Bután"))
                .body("[2].'translations'.'fr'", containsString("Bhoutan"))
                .body("[2].'translations'.'ja'", containsString("ブータン"))
                .body("[2].'translations'.'it'", containsString("Bhutan"))
                .body("[2].'translations'.'br'", containsString("Butão"))
                .body("[2].'translations'.'pt'", containsString("Butão"))
                .body("[2].'translations'.'nl'", containsString("Bhutan"))
                .body("[2].'translations'.'hr'", containsString("Butan"))
                .body("[2].'translations'.'fa'", containsString("بوتان"))
                .body("[2].'flag'", containsString("https://restcountries.eu/data/btn.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[0].'acronym'", containsString("SAARC"))
                .body("[2].'regionalBlocs'[0].'name'", containsString("South Asian Association for Regional Cooperation"))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[2].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[2].'cioc'", containsString("BHU"))
                ; // Skipping assertions on the remaining 5 elements. This limit of 3 elements can be increased in the configurations
    }
}
