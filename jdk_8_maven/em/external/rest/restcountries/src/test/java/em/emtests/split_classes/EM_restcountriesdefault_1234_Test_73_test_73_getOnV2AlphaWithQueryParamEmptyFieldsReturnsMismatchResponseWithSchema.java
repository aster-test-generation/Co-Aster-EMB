package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T15:08:59.479-04:00[America/New_York]
 * <br>
*  The generated test suite contains 1032 tests
 * <br>
*  Covered targets: 3148
 * <br>
*  Used time: 1h 3m 23s
 * <br>
*  Needed budget for current results: 97%
 * <br>
*  
*/

public class EM_restcountriesdefault_1234_Test_73_test_73_getOnV2AlphaWithQueryParamEmptyFieldsReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.eu.fayder.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/restcountries-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_73_getOnV2AlphaWithQueryParamEmptyFieldsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/TC?fields=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("Turks and Caicos Islands"))
                .body("'topLevelDomain'.size()", equalTo(1))
                .body("'topLevelDomain'", hasItems(".tc"))
                .body("'alpha2Code'", containsString("TC"))
                .body("'alpha3Code'", containsString("TCA"))
                .body("'callingCodes'.size()", equalTo(1))
                .body("'callingCodes'", hasItems("1"))
                .body("'capital'", containsString("Cockburn Town"))
                .body("'altSpellings'.size()", equalTo(1))
                .body("'altSpellings'", hasItems("TC"))
                .body("'region'", containsString("Americas"))
                .body("'subregion'", containsString("Caribbean"))
                .body("'population'", numberMatches(31458.0))
                .body("'latlng'.size()", equalTo(2))
                .body("'latlng'[0]", numberMatches(21.75))
                .body("'latlng'[1]", numberMatches(-71.58333333))
                .body("'demonym'", containsString("Turks and Caicos Islander"))
                .body("'area'", numberMatches(948.0))
                .body("'gini'", nullValue())
                .body("'timezones'.size()", equalTo(1))
                .body("'timezones'", hasItems("UTC-04:00"))
                .body("'borders'.size()", equalTo(0))
                .body("'nativeName'", containsString("Turks and Caicos Islands"))
                .body("'numericCode'", containsString("796"))
                .body("'currencies'.size()", equalTo(1))
                .body("'currencies'[0].'code'", containsString("USD"))
                .body("'currencies'[0].'name'", containsString("United States dollar"))
                .body("'currencies'[0].'symbol'", containsString("$"))
                .body("'languages'.size()", equalTo(1))
                .body("'languages'[0].'iso639_1'", containsString("en"))
                .body("'languages'[0].'iso639_2'", containsString("eng"))
                .body("'languages'[0].'name'", containsString("English"))
                .body("'languages'[0].'nativeName'", containsString("English"))
                .body("'translations'.'de'", containsString("Turks- und Caicosinseln"))
                .body("'translations'.'es'", containsString("Islas Turks y Caicos"))
                .body("'translations'.'fr'", containsString("Îles Turques-et-Caïques"))
                .body("'translations'.'ja'", containsString("タークス・カイコス諸島"))
                .body("'translations'.'it'", containsString("Isole Turks e Caicos"))
                .body("'translations'.'br'", containsString("Ilhas Turcas e Caicos"))
                .body("'translations'.'pt'", containsString("Ilhas Turcas e Caicos"))
                .body("'translations'.'nl'", containsString("Turks- en Caicoseilanden"))
                .body("'translations'.'hr'", containsString("Otoci Turks i Caicos"))
                .body("'translations'.'fa'", containsString("جزایر تورکس و کایکوس"))
                .body("'flag'", containsString("https://restcountries.eu/data/tca.svg"))
                .body("'regionalBlocs'.size()", equalTo(0))
                .body("'cioc'", containsString(""));
    }
}
