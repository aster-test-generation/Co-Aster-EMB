package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_1501_test_1501_getOnReleasesShowsFaults_100_101 {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (200) POST:/api/ocds/location/all
    * 2 - (200) GET:/api/ocds/location/all
    * 3 - (500) POST:/api/ocds/location/search
    * 4 - (200) GET:/api/ocds/location/search
    * 5 - (500) POST:/api/percentTendersAwardedWithTwoOrMoreTenderers
    * 6 - (400) GET:/api/percentTendersAwardedWithTwoOrMoreTenderers
    * 7 - (500) POST:/api/percentOfEligibleProjectsFlaggedByYear
    * 8 - (200) GET:/api/percentOfEligibleProjectsFlaggedByYear
    * 9 - (400) POST:/api/flags/i004/releases
    * 10 - (200) GET:/api/flags/i004/releases
    * Found 8 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_1501_getOnReleasesShowsFaults_100_101() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/location/all?" + 
                    "password=aOYM&" + 
                    "username=rpVVukbnewEPciF")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/location/all?" + 
                    "password=9lgz8xE_t5UJ&" + 
                    "username=G22q2FE3f")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/rest/controller/selector/LocationSearchController_55_locationsSearch.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/ocds/location/search'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageNumber=646&" + 
                    "text=mW_qrAQlZdv&" + 
                    "textSearchRequest=Cexr8qAp")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/rest/controller/selector/LocationSearchController_55_locationsSearch
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.data.mongodb.UncategorizedMongoDbException"))
                .body("'path'", containsString("/api/ocds/location/search"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "password=9lgz8xE_t5UJ&" + 
                    "skip=iQPuwf3&" + 
                    "class=GZFhia&" + 
                    "textSearchRequest=_EM_29014_XYZ_&" + 
                    "username=G22q2FE3f")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/rest/controller/TenderPercentagesController_191_percentTendersAwarded.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/percentTendersAwardedWithTwoOrMoreTenderers'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/percentTendersAwardedWithTwoOrMoreTenderers?" + 
                    "procuringEntityId=NhQqDn&procuringEntityId=R9f1n11d0LoHr&procuringEntityId=wik20P2&procuringEntityId=6DxsDB88G63&procuringEntityId=Dlentl&" + 
                    "notProcuringEntityId=kwWp&notProcuringEntityId=&notProcuringEntityId=hSz4t8&notProcuringEntityId=bOJxmViZjElfNM&" + 
                    "bidSelectionMethod=OMF&" + 
                    "tenderLoc=L3vLw&" + 
                    "procuringEntityCityId=xU5ZfBam2xUHOL&procuringEntityCityId=nKUVy04avhY8&procuringEntityCityId=C8OjZ9Af2K&procuringEntityCityId=Ddprgd1seklLQ&procuringEntityCityId=JbPcDi1Chzd&" + 
                    "procuringEntityDepartmentId=513&" + 
                    "procuringEntityGroupId=&" + 
                    "year=&" + 
                    "pageSize=869&" + 
                    "minTenderValue=0.8926102849050064&" + 
                    "flagged=true&" + 
                    "monthly=true")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/rest/controller/TenderPercentagesController_191_percentTendersAwarded
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.InvalidDataAccessApiUsageException"))
                .body("'path'", containsString("/api/percentTendersAwardedWithTwoOrMoreTenderers"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/percentTendersAwardedWithTwoOrMoreTenderers'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/percentTendersAwardedWithTwoOrMoreTenderers?" + 
                    "bidTypeId=cus7iKYOaOnn3Uk&bidTypeId=M&bidTypeId=B8UL_Z14qAN&" + 
                    "supplierId=HMElNt25AekO_&supplierId=AE7nspUOojk&supplierId=CiedBSMRSUXaS&supplierId=rU&supplierId=0DW_S1LI6YC&" + 
                    "contrMethod=X5u1Jq5SIG&contrMethod=CzHNygKDe&contrMethod=S2abgJv&contrMethod=&" + 
                    "planningLoc=yEoLY4gE55&planningLoc=tu&planningLoc=RG51FDWFSB9AU&planningLoc=SB&planningLoc=W9T&" + 
                    "tenderLoc=L3vLw&" + 
                    "procurementMethod=W0gkGq3KA1pA7D7e&procurementMethod=Dyc9&procurementMethod=iXAwIIe&procurementMethod=DADwkRi6uBnqqL&" + 
                    "procuringEntityCityId=xU5ZfBam2xUHOL&procuringEntityCityId=nKUVy04avhY8&procuringEntityCityId=C8OjZ9Af2K&procuringEntityCityId=Ddprgd1seklLQ&procuringEntityCityId=JbPcDi1Chzd&" + 
                    "procuringEntityGroupId=&" + 
                    "year=&" + 
                    "month=987&month=431&month=522&month=811&" + 
                    "pageNumber=635&" + 
                    "pageSize=869&" + 
                    "maxTenderValue=0.27699874018052895&" + 
                    "electronicSubmission=false&" + 
                    "EMextraParam123=_EM_10010_XYZ_&" + 
                    "password=Gx&" + 
                    "yearFilterPagingRequest=s1LiRRjvjQf5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[0]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[0]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[0]", "bidTypeId[0]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("bidTypeId[0]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("bidTypeId[0]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("bidTypeId[0]"))
                .body("'errors'[0].'rejectedValue'", containsString("B8UL_Z14qAN"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[1].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("month"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(4))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(431.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(522.0))
                .body("'errors'[1].'rejectedValue'[2]", numberMatches(811.0))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/percentTendersAwardedWithTwoOrMoreTenderers"));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/rest/controller/GenericOCDSController_353_lambda$getContrMethodFilterCriteria$1.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/percentOfEligibleProjectsFlaggedByYear'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/percentOfEligibleProjectsFlaggedByYear?" + 
                    "bidTypeId=Lf6&bidTypeId=_EM_29015_XYZ_&bidTypeId=TmrU7gz&" + 
                    "notBidTypeId=&" + 
                    "supplierId=_EM_29019_XYZ_&supplierId=_EM_29020_XYZ_&supplierId=_EM_29021_XYZ_&" + 
                    "notBidSelectionMethod=jVD&notBidSelectionMethod=YtSW4ko_882hESV&notBidSelectionMethod=lFIY&notBidSelectionMethod=0OKY2k1nKPkkZw&" + 
                    "contrMethod=YvmxbFv&contrMethod=GsKQ4QF36_&contrMethod=_EM_29024_XYZ_&contrMethod=_EM_29025_XYZ_&" + 
                    "tenderLoc=ddIrAV6GJQsK1nWD&" + 
                    "procuringEntityDepartmentId=473&procuringEntityDepartmentId=717&procuringEntityDepartmentId=843&procuringEntityDepartmentId=641&procuringEntityDepartmentId=442&" + 
                    "procuringEntityGroupId=&" + 
                    "pageNumber=646&" + 
                    "pageSize=579&" + 
                    "minAwardValue=0.9220212790951018&" + 
                    "yearFilterPagingRequest=Tfr7zKc0U")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/rest/controller/GenericOCDSController_353_lambda$getContrMethodFilterCriteria$1
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("invalid hexadecimal representation of an ObjectId: [GsKQ4QF36_]"))
                .body("'path'", containsString("/api/percentOfEligibleProjectsFlaggedByYear"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/percentOfEligibleProjectsFlaggedByYear?" + 
                    "bidTypeId=Lf6&bidTypeId=FRAUD&bidTypeId=_EM_29031_XYZ_&" + 
                    "supplierId=_EM_29034_XYZ_&supplierId=Lni5w4rAPyjtHQp&supplierId=_EM_29035_XYZ_&" + 
                    "notBidSelectionMethod=jVD&notBidSelectionMethod=_EM_29037_XYZ_&notBidSelectionMethod=_EM_29038_XYZ_&notBidSelectionMethod=0OKY2k1nKPkkZw&" + 
                    "planningLoc=24EM&planningLoc=_EM_29043_XYZ_&" + 
                    "tenderLoc=ddIrAV6GJQsK1nWD&" + 
                    "procuringEntityCityId=lodUMZQfwzuI1&" + 
                    "procuringEntityDepartmentId=473&procuringEntityDepartmentId=717&procuringEntityDepartmentId=843&procuringEntityDepartmentId=641&procuringEntityDepartmentId=442&" + 
                    "procuringEntityGroupId=&" + 
                    "year=755&" + 
                    "month=414&month=452&month=338&" + 
                    "pageNumber=646&" + 
                    "minTenderValue=0.35318853114281457&" + 
                    "maxTenderValue=0.39269702967830855&" + 
                    "minAwardValue=0.9220212790951018&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "skip=iQPuwf3&" + 
                    "password=9lgz8xE_t5UJ&" + 
                    "class=GZFhia&" + 
                    "yearFilterPagingRequest=_lmB1EAFM5RNSxU&" + 
                    "username=G22q2FE3f")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/flags/i004/releases'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i004/releases?" + 
                    "bidTypeId=FRAUD&bidTypeId=_EM_29044_XYZ_&bidTypeId=TmrU7gz&" + 
                    "notBidTypeId=&" + 
                    "procuringEntityId=6&procuringEntityId=mA6OtG6pmqJDR&procuringEntityId=8YlgRVDp7RP62_6V&procuringEntityId=HVXgIU1cbiqpE1&" + 
                    "supplierId=oIHgIvGbb5hY&supplierId=Lni5w4rAPyjtHQp&supplierId=6MOXaTi1&" + 
                    "bidSelectionMethod=_EM_29045_XYZ_&bidSelectionMethod=Xd6wQ8IfVAZch7Ym&bidSelectionMethod=_EM_29046_XYZ_&bidSelectionMethod=_EM_29047_XYZ_&bidSelectionMethod=_EM_29048_XYZ_&" + 
                    "contrMethod=YvmxbFv&contrMethod=_EM_29050_XYZ_&contrMethod=_EM_29051_XYZ_&contrMethod=iBAz&" + 
                    "planningLoc=24EM&planningLoc=_EM_29052_XYZ_&" + 
                    "tenderLoc=ddIrAV6GJQsK1nWD&" + 
                    "procuringEntityCityId=lodUMZQfwzuI1&" + 
                    "procuringEntityDepartmentId=473&procuringEntityDepartmentId=717&procuringEntityDepartmentId=843&procuringEntityDepartmentId=641&procuringEntityDepartmentId=442&" + 
                    "procuringEntityGroupId=&" + 
                    "pageSize=579&" + 
                    "minTenderValue=0.35318853114281457&" + 
                    "minAwardValue=0.9220212790951018&" + 
                    "electronicSubmission=false&" + 
                    "monthly=false&" + 
                    "yearFilterPagingRequest=tsjdNouWETywMh")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(3))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.contrMethod[1]", "EachPattern.yearFilterPagingRequest.contrMethod", "EachPattern.contrMethod[1]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.contrMethod[1]", "contrMethod[1]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("contrMethod[1]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("contrMethod[1]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("contrMethod[1]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_29050_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[1]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[1]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[1]", "procuringEntityId[1]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[1]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("procuringEntityId[1]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("procuringEntityId[1]"))
                .body("'errors'[1].'rejectedValue'", containsString("8YlgRVDp7RP62_6V"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[2]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[2]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[2]", "bidTypeId[2]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("bidTypeId[2]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("bidTypeId[2]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("bidTypeId[2]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_29044_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 3"))
                .body("'path'", containsString("/api/flags/i004/releases"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i004/releases?" + 
                    "notProcuringEntityId=R&" + 
                    "notBidSelectionMethod=jVD&notBidSelectionMethod=_EM_29060_XYZ_&notBidSelectionMethod=lFIY&notBidSelectionMethod=0OKY2k1nKPkkZw&" + 
                    "planningLoc=24EM&planningLoc=uyK_JPac6&" + 
                    "tenderLoc=ddIrAV6GJQsK1nWD&" + 
                    "procuringEntityCityId=lodUMZQfwzuI1&" + 
                    "procuringEntityDepartmentId=473&procuringEntityDepartmentId=717&procuringEntityDepartmentId=843&procuringEntityDepartmentId=641&procuringEntityDepartmentId=442&" + 
                    "procuringEntityGroupId=&" + 
                    "pageNumber=646&" + 
                    "pageSize=579&" + 
                    "maxTenderValue=0.39269702967830855&" + 
                    "minAwardValue=0.9220212790951018&" + 
                    "maxAwardValue=0.7502666431337214&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "skip=iQPuwf3&" + 
                    "password=9lgz8xE_t5UJ&" + 
                    "class=GZFhia&" + 
                    "yearFilterPagingRequest=_lmB1EAFM5RNSxU&" + 
                    "username=G22q2FE3f")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
}
