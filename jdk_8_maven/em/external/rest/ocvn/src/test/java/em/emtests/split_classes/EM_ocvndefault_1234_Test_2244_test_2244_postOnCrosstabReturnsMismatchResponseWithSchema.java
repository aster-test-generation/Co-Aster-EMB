package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_2244_test_2244_postOnCrosstabReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (400) POST:/api/costEffectivenessTenderAwardAmount
    * 2 - (400) POST:/api/costEffectivenessTenderAwardAmount
    * 3 - (400) POST:/api/flags/i171/crosstab
    * 4 - (400) POST:/api/flags/i171/crosstab
    * Found 4 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_2244_postOnCrosstabReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/costEffectivenessTenderAwardAmount'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/costEffectivenessTenderAwardAmount?" + 
                    "bidTypeId=COLLUSION&bidTypeId=_EM_34624_XYZ_&bidTypeId=_EM_34625_XYZ_&" + 
                    "notBidTypeId=gGPW4xJyL&notBidTypeId=hCcSjlt7HAI9hXa4&notBidTypeId=FRAUD&notBidTypeId=BGGVfjt3I5aQcI&" + 
                    "supplierId=_EM_34628_XYZ_&supplierId=_C8aS&supplierId=_EM_34629_XYZ_&" + 
                    "planningLoc=sly0Jx&" + 
                    "procurementMethod=ML2nTS&procurementMethod=AfL&procurementMethod=w&procurementMethod=3B0Th&procurementMethod=&" + 
                    "procuringEntityCityId=zbo8v&procuringEntityCityId=_EM_34635_XYZ_&procuringEntityCityId=_EM_34636_XYZ_&procuringEntityCityId=_EM_34637_XYZ_&procuringEntityCityId=_EM_34638_XYZ_&" + 
                    "procuringEntityDepartmentId=374&procuringEntityDepartmentId=607&" + 
                    "procuringEntityGroupId=544&" + 
                    "minTenderValue=0.6233634441109664&" + 
                    "maxAwardValue=0.5023779391556287&" + 
                    "electronicSubmission=false")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.groupingFilterPagingRequest.bidTypeId[1]", "EachPattern.groupingFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[1]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("groupingFilterPagingRequest.bidTypeId[1]", "bidTypeId[1]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("bidTypeId[1]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("bidTypeId[1]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("groupingFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("bidTypeId[1]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_34624_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='groupingFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/costEffectivenessTenderAwardAmount"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/costEffectivenessTenderAwardAmount'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/costEffectivenessTenderAwardAmount?" + 
                    "bidTypeId=FRAUD&bidTypeId=SWe38&bidTypeId=COLLUSION&" + 
                    "notBidTypeId=gGPW4xJyL&notBidTypeId=COLLUSION&notBidTypeId=czus50Uv&notBidTypeId=BGGVfjt3I5aQcI&" + 
                    "notProcuringEntityId=Z&notProcuringEntityId=_EM_34642_XYZ_&notProcuringEntityId=gOgfo2jz9AfM3O&notProcuringEntityId=4fan&" + 
                    "bidSelectionMethod=&" + 
                    "notBidSelectionMethod=_EM_34643_XYZ_&notBidSelectionMethod=ZLjMOeOq&notBidSelectionMethod=_EM_34644_XYZ_&notBidSelectionMethod=&" + 
                    "contrMethod=23&" + 
                    "tenderLoc=_EM_34646_XYZ_&tenderLoc=n5Iho&tenderLoc=5jwfeGi8Aa_&tenderLoc=5QD6XhEx7bhNS4&" + 
                    "pageSize=139&" + 
                    "minTenderValue=0.6233634441109664&" + 
                    "maxTenderValue=0.7978722120126964&" + 
                    "maxAwardValue=0.5023779391556287&" + 
                    "electronicSubmission=false&" + 
                    "monthly=false&" + 
                    "groupByCategory=WgaO5Z79&" + 
                    "groupingFilterPagingRequest=NWumc0Up5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.groupingFilterPagingRequest.notProcuringEntityId[2]", "EachPattern.groupingFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[2]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("groupingFilterPagingRequest.notProcuringEntityId[2]", "notProcuringEntityId[2]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("groupingFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_34642_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='groupingFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/costEffectivenessTenderAwardAmount"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/flags/i171/crosstab'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i171/crosstab?" + 
                    "procuringEntityId=_EM_34653_XYZ_&procuringEntityId=7&" + 
                    "planningLoc=_EM_34667_XYZ_&planningLoc=LTap&" + 
                    "procurementMethod=moDgiHL&procurementMethod=_EM_34669_XYZ_&procurementMethod=_EM_34670_XYZ_&procurementMethod=_EM_34671_XYZ_&procurementMethod=Z46Kw&" + 
                    "procuringEntityCityId=3KllB7&procuringEntityCityId=_EM_34672_XYZ_&procuringEntityCityId=KvFQ6iBV14v&procuringEntityCityId=_EM_34673_XYZ_&procuringEntityCityId=_EM_34674_XYZ_&" + 
                    "procuringEntityDepartmentId=&" + 
                    "procuringEntityGroupId=126&procuringEntityGroupId=347&" + 
                    "month=115&month=833&month=490&" + 
                    "minTenderValue=0.467131321508204&" + 
                    "maxTenderValue=0.0391841299555038&" + 
                    "minAwardValue=0.07233887934468441&" + 
                    "maxAwardValue=0.19051738899157078&" + 
                    "electronicSubmission=true&" + 
                    "monthly=true")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[1]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[1]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[1]", "procuringEntityId[1]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[1]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("procuringEntityId[1]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("procuringEntityId[1]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_34653_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[1].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("month"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(3))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(115.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(490.0))
                .body("'errors'[1].'rejectedValue'[2]", numberMatches(833.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/flags/i171/crosstab"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/flags/i171/crosstab'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i171/crosstab?" + 
                    "bidTypeId=iIFtW&bidTypeId=yadEd&" + 
                    "bidSelectionMethod=weR7BR0k6bc1&bidSelectionMethod=YVAi_nwHH1vjA&bidSelectionMethod=e78W&bidSelectionMethod=_EM_34681_XYZ_&bidSelectionMethod=_EM_34682_XYZ_&" + 
                    "planningLoc=PFfLfkrdf&planningLoc=_EM_34685_XYZ_&" + 
                    "procuringEntityCityId=3KllB7&procuringEntityCityId=2PxvvMuREix&procuringEntityCityId=_EM_34693_XYZ_&procuringEntityCityId=nidAjhM_&procuringEntityCityId=_EM_34694_XYZ_&" + 
                    "procuringEntityDepartmentId=&" + 
                    "month=115&month=833&month=490&" + 
                    "pageSize=358&" + 
                    "minTenderValue=0.467131321508204&" + 
                    "maxTenderValue=0.0391841299555038&" + 
                    "minAwardValue=0.07233887934468441&" + 
                    "maxAwardValue=0.19051738899157078&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "skip=_EM_34695_XYZ_&" + 
                    "class=_EM_34697_XYZ_&" + 
                    "yearFilterPagingRequest=_EM_34698_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(3))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(115.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(490.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(833.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/flags/i171/crosstab"));
    }
}
