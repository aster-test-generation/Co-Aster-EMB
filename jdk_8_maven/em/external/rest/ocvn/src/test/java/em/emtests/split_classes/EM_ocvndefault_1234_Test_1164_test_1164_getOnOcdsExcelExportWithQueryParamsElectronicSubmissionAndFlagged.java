package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_1164_test_1164_getOnOcdsExcelExportWithQueryParamsElectronicSubmissionAndFlagged {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (400) POST:/api/ocds/bidTimelineExcelChart
    * 2 - (400) GET:/api/ocds/bidTimelineExcelChart
    * 3 - (200) GET:/api/ocds/excelExport
    * Found 3 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_1164_getOnOcdsExcelExportWithQueryParamsElectronicSubmissionAndFlagged() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/bidTimelineExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/ocds/bidTimelineExcelChart?" + 
                    "supplierId=18ZIYgJb&supplierId=LA&" + 
                    "bidSelectionMethod=oYYT6D97&bidSelectionMethod=BwCNiUEx&bidSelectionMethod=7&bidSelectionMethod=XccQJwGt6ry3OJ&bidSelectionMethod=diADG58wQwCEIO&" + 
                    "contrMethod=TXh&contrMethod=M_p_&contrMethod=GiXuCkHpAAKY&contrMethod=8NaROIP6i2vZtCFf&" + 
                    "tenderLoc=JTN&" + 
                    "procurementMethod=v2_D&procurementMethod=oFpntHd9cQb&procurementMethod=gc8RAGATg&procurementMethod=KbUXTo&procurementMethod=_2Y&" + 
                    "procuringEntityCityId=UiExrOuyHTnEf&procuringEntityCityId=YkvfppVs8&procuringEntityCityId=YU25e&procuringEntityCityId=WrEI070ZOS3H&" + 
                    "procuringEntityDepartmentId=321&procuringEntityDepartmentId=281&procuringEntityDepartmentId=851&" + 
                    "procuringEntityGroupId=148&" + 
                    "minTenderValue=0.5364530700354027&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "language=ZBArg1lu1IQAxAI7")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.contrMethod[2]", "EachPattern.langYearFilterPagingRequest.contrMethod", "EachPattern.contrMethod[2]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.contrMethod[2]", "contrMethod[2]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("contrMethod[2]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("contrMethod[2]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("contrMethod[2]"))
                .body("'errors'[0].'rejectedValue'", containsString("M_p_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/ocds/bidTimelineExcelChart"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/bidTimelineExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ocds/bidTimelineExcelChart?" + 
                    "procuringEntityId=WDxfnP5eRHABMGPI&procuringEntityId=tesn14xyx7KGOA&procuringEntityId=8R7zch5nmZttmS&procuringEntityId=i8HP&" + 
                    "supplierId=18ZIYgJb&supplierId=LA&" + 
                    "notBidSelectionMethod=6Ak&notBidSelectionMethod=jYDWLJolV&" + 
                    "tenderLoc=JTN&" + 
                    "procurementMethod=v2_D&procurementMethod=oFpntHd9cQb&procurementMethod=gc8RAGATg&procurementMethod=KbUXTo&procurementMethod=_2Y&" + 
                    "procuringEntityCityId=UiExrOuyHTnEf&procuringEntityCityId=YkvfppVs8&procuringEntityCityId=YU25e&procuringEntityCityId=WrEI070ZOS3H&" + 
                    "procuringEntityDepartmentId=321&procuringEntityDepartmentId=281&procuringEntityDepartmentId=851&" + 
                    "year=501&year=356&year=704&year=567&" + 
                    "maxAwardValue=0.2558876372219998&" + 
                    "monthly=true&" + 
                    "class=&" + 
                    "username=h08yIjLv")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.langYearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(4))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(356.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(501.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(567.0))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/ocds/bidTimelineExcelChart"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ocds/excelExport?" + 
                    "procuringEntityId=6hBh70LqRsLgyR&procuringEntityId=valmYtLJrS2LOZ&procuringEntityId=9YNYn&procuringEntityId=KRiiGSD&" + 
                    "notProcuringEntityId=2BKPsJf48F&notProcuringEntityId=pQUjM&notProcuringEntityId=nv&notProcuringEntityId=VaUhg0C0ElW7I9&" + 
                    "bidSelectionMethod=dESvvkYJXH&bidSelectionMethod=1e&bidSelectionMethod=iu&" + 
                    "procurementMethod=vJyd&procurementMethod=X8B4&procurementMethod=2197pd62EMZXJ&procurementMethod=MUh6or6dnD&procurementMethod=6c0H68kr7T&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=256&procuringEntityDepartmentId=798&procuringEntityDepartmentId=21&procuringEntityDepartmentId=221&procuringEntityDepartmentId=618&" + 
                    "procuringEntityGroupId=865&procuringEntityGroupId=725&procuringEntityGroupId=997&" + 
                    "pageNumber=574&" + 
                    "minTenderValue=0.3818632400807067&" + 
                    "maxTenderValue=0.3647630604901374&" + 
                    "minAwardValue=0.47061924674346434&" + 
                    "maxAwardValue=0.6256095438788609&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "skip=HUWzl&" + 
                    "password=x6o_8MhlDXKs_buW&" + 
                    "class=TqcbL&" + 
                    "yearFilterPagingRequest=vY43plf&" + 
                    "username=tvFH3vMhJhk")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
    }
}
