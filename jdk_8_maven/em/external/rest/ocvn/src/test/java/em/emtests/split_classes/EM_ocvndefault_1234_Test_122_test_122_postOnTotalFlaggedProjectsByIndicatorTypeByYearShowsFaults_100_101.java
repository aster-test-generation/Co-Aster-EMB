package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_122_test_122_postOnTotalFlaggedProjectsByIndicatorTypeByYearShowsFaults_100_101 {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (200) POST:/api/ocds/location/search
    * 2 - (200) POST:/api/ocds/location/all
    * 3 - (200) GET:/api/ocds/location/all
    * 4 - (400) POST:/api/activeAwardsCount
    * 5 - (400) POST:/api/activeAwardsCount
    * 6 - (500) POST:/api/ocds/package/planningBidNo/{bidNo}
    * 7 - (500) POST:/api/ocds/package/planningBidNo/{bidNo}
    * 8 - (400) POST:/api/totalFlaggedProjectsByIndicatorTypeByYear
    * 9 - (400) POST:/api/totalFlaggedProjectsByIndicatorTypeByYear
    * Found 8 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_122_postOnTotalFlaggedProjectsByIndicatorTypeByYearShowsFaults_100_101() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageNumber=722&" + 
                    "pageSize=463")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/location/all?username=YwcDsppGB")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/activeAwardsCount'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/activeAwardsCount?" + 
                    "notBidTypeId=&" + 
                    "notProcuringEntityId=_EM_35416_XYZ_&" + 
                    "notBidSelectionMethod=rPZ25k&notBidSelectionMethod=GTEwsEKyC0&" + 
                    "planningLoc=_EM_35420_XYZ_&planningLoc=_EM_35421_XYZ_&" + 
                    "tenderLoc=eKTXW5S&" + 
                    "procuringEntityCityId=&procuringEntityCityId=_EM_35422_XYZ_&procuringEntityCityId=_EM_35423_XYZ_&" + 
                    "year=124&year=815&year=50&year=152&year=832&" + 
                    "pageNumber=722&" + 
                    "pageSize=463&" + 
                    "minTenderValue=0.10439349661010111&" + 
                    "minAwardValue=0.7229867742576763&" + 
                    "flagged=false")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(5))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(50.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(124.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(152.0))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[0]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[0]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[0]", "notProcuringEntityId[0]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_35416_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/activeAwardsCount"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/activeAwardsCount'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/activeAwardsCount?" + 
                    "bidTypeId=RIGGING&bidTypeId=cn2D3Q5PPo_SD&" + 
                    "notBidTypeId=&" + 
                    "notProcuringEntityId=kFUiV6&" + 
                    "contrMethod=anCnhomQE&contrMethod=_EM_35425_XYZ_&contrMethod=S&contrMethod=mmMPQ0ZyLslvLKW&contrMethod=2TWzTuL&" + 
                    "tenderLoc=eKTXW5S&" + 
                    "month=731&month=326&month=930&" + 
                    "minTenderValue=0.10439349661010111&" + 
                    "maxTenderValue=0.3472513511792612&" + 
                    "minAwardValue=0.7229867742576763&" + 
                    "maxAwardValue=0.5348547673904024&" + 
                    "flagged=false&" + 
                    "class=bH1OK&" + 
                    "yearFilterPagingRequest=edM66XG&" + 
                    "username=YwcDsppGB")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(3))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(3))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(326.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(731.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(930.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[1]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[1]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[1]", "bidTypeId[1]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("bidTypeId[1]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("bidTypeId[1]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("bidTypeId[1]"))
                .body("'errors'[1].'rejectedValue'", containsString("cn2D3Q5PPo_SD"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.contrMethod[2]", "EachPattern.yearFilterPagingRequest.contrMethod", "EachPattern.contrMethod[2]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.contrMethod[2]", "contrMethod[2]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("contrMethod[2]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("contrMethod[2]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("contrMethod[2]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_35425_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 3"))
                .body("'path'", containsString("/api/activeAwardsCount"));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/rest/controller/OcdsController_111_createReleasePackage.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/ocds/package/planningBidNo/{bidNo}'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/package/planningBidNo/1XwdvbHiCpoa0WBI")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/rest/controller/OcdsController_111_createReleasePackage
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/ocds/package/planningBidNo/1XwdvbHiCpoa0WBI"));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/rest/controller/OcdsController_111_createReleasePackage.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/ocds/package/planningBidNo/{bidNo}'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/package/planningBidNo/1XwdvbHiCpoa0WBI?password=_BM")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/rest/controller/OcdsController_111_createReleasePackage
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/ocds/package/planningBidNo/1XwdvbHiCpoa0WBI"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/totalFlaggedProjectsByIndicatorTypeByYear'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/totalFlaggedProjectsByIndicatorTypeByYear?" + 
                    "bidTypeId=_EM_35431_XYZ_&bidTypeId=cn2D3Q5PPo_SD&" + 
                    "procuringEntityId=_EM_35432_XYZ_&procuringEntityId=XaL&procuringEntityId=_EM_35433_XYZ_&" + 
                    "supplierId=_EM_35434_XYZ_&" + 
                    "bidSelectionMethod=M5aJk&bidSelectionMethod=_i9PxLmZi&bidSelectionMethod=Osu8_Eu43W&" + 
                    "notBidSelectionMethod=_EM_35435_XYZ_&notBidSelectionMethod=_EM_35436_XYZ_&" + 
                    "planningLoc=0n9Egg1jQ&planningLoc=_EM_35439_XYZ_&" + 
                    "procuringEntityDepartmentId=92&procuringEntityDepartmentId=335&" + 
                    "pageNumber=722&" + 
                    "minAwardValue=0.7229867742576763&" + 
                    "monthly=true")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[1]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[1]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[1]", "procuringEntityId[1]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[1]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("procuringEntityId[1]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("procuringEntityId[1]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_35432_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[0]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[0]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[0]", "bidTypeId[0]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("bidTypeId[0]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("bidTypeId[0]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("bidTypeId[0]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_35431_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/totalFlaggedProjectsByIndicatorTypeByYear"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/totalFlaggedProjectsByIndicatorTypeByYear'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/totalFlaggedProjectsByIndicatorTypeByYear?" + 
                    "bidTypeId=_EM_35440_XYZ_&bidTypeId=cn2D3Q5PPo_SD&" + 
                    "notBidTypeId=&" + 
                    "bidSelectionMethod=_EM_35442_XYZ_&bidSelectionMethod=_i9PxLmZi&bidSelectionMethod=Osu8_Eu43W&" + 
                    "procuringEntityCityId=&procuringEntityCityId=jJrc5hS5T2S5&procuringEntityCityId=tCc&" + 
                    "procuringEntityGroupId=110&procuringEntityGroupId=685&procuringEntityGroupId=189&" + 
                    "year=124&year=815&year=50&year=152&year=832&" + 
                    "pageNumber=722&" + 
                    "minTenderValue=0.10439349661010111&" + 
                    "minAwardValue=0.7229867742576763&" + 
                    "password=_BM&" + 
                    "class=bH1OK&" + 
                    "yearFilterPagingRequest=edM66XG")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[0]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[0]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[0]", "bidTypeId[0]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("bidTypeId[0]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("bidTypeId[0]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("bidTypeId[0]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_35440_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[1].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("year"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(5))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(50.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(124.0))
                .body("'errors'[1].'rejectedValue'[2]", numberMatches(152.0))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/totalFlaggedProjectsByIndicatorTypeByYear"));
    }
}
