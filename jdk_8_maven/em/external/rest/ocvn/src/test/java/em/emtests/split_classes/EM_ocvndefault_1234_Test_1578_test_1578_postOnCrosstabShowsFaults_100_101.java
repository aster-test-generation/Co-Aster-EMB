package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_1578_test_1578_postOnCrosstabShowsFaults_100_101 {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (200) GET:/api/qualityPlannedFundingByLocation
    * 2 - (400) POST:/api/fundingByTenderDeliveryLocation
    * 3 - (400) POST:/api/tendersByLocation
    * 4 - (400) GET:/api/tendersByLocation
    * 5 - (500) POST:/api/translations/{language}
    * 6 - (500) POST:/api/translations/{language}
    * 7 - (500) POST:/api/totalProjectsByYear
    * 8 - (200) POST:/api/totalProjectsByYear
    * 9 - (400) POST:/api/flags/i085/stats
    * 10 - (400) POST:/api/ocds/excelExport
    * 11 - (400) POST:/api/flags/i003/crosstab
    * Found 12 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_1578_postOnCrosstabShowsFaults_100_101() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/qualityPlannedFundingByLocation?" + 
                    "bidTypeId=Uk&bidTypeId=RIGGING&bidTypeId=2FgYvmGW&bidTypeId=COLLUSION&" + 
                    "notBidTypeId=7xa1&" + 
                    "procuringEntityId=&" + 
                    "notProcuringEntityId=&" + 
                    "planningLoc=_EM_36402_XYZ_&" + 
                    "tenderLoc=LLLZ6DjsP5Zfw&tenderLoc=LXjrER4Kqn5&tenderLoc=_EM_36403_XYZ_&" + 
                    "procurementMethod=NEj&procurementMethod=fmdIj&procurementMethod=_EM_36404_XYZ_&procurementMethod=_EM_36405_XYZ_&" + 
                    "procuringEntityDepartmentId=765&procuringEntityDepartmentId=992&" + 
                    "procuringEntityGroupId=471&procuringEntityGroupId=793&procuringEntityGroupId=977&" + 
                    "pageNumber=945&" + 
                    "pageSize=366&" + 
                    "minTenderValue=0.7551267160737&" + 
                    "maxTenderValue=0.6570007256994407&" + 
                    "maxAwardValue=0.9367320405925171&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "defaultFilterPagingRequest=dBOeCpnWv&" + 
                    "skip=8as&" + 
                    "class=Kb0JHe7a8sNU5&" + 
                    "password=_EM_36408_XYZ_&" + 
                    "username=3iUi3_cWY7F")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/fundingByTenderDeliveryLocation'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/fundingByTenderDeliveryLocation?" + 
                    "bidTypeId=_EM_36421_XYZ_&bidTypeId=y_Bft0oX&bidTypeId=4&" + 
                    "notBidTypeId=&" + 
                    "procuringEntityId=n1xeGuc&" + 
                    "notProcuringEntityId=&" + 
                    "supplierId=_EM_36422_XYZ_&" + 
                    "notBidSelectionMethod=_EM_36424_XYZ_&notBidSelectionMethod=_EM_36425_XYZ_&notBidSelectionMethod=_EM_36426_XYZ_&" + 
                    "procurementMethod=Ugr&procurementMethod=m2EtyxmHu9Loj&procurementMethod=_EM_36429_XYZ_&procurementMethod=&procurementMethod=_EM_36430_XYZ_&" + 
                    "procuringEntityCityId=&" + 
                    "year=106&year=571&year=874&" + 
                    "maxTenderValue=0.4904041059205553&" + 
                    "minAwardValue=0.25151709314416126&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "skip=_EM_36431_XYZ_&" + 
                    "password=leT&" + 
                    "class=VU6BfV&" + 
                    "yearFilterPagingRequest=Hx8cJqnt&" + 
                    "username=_EM_36432_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(3))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(106.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(571.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(874.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[1]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[1]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[1]", "bidTypeId[1]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("bidTypeId[1]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("bidTypeId[1]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("bidTypeId[1]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_36421_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/fundingByTenderDeliveryLocation"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/tendersByLocation'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/tendersByLocation?" + 
                    "bidTypeId=n5oWgUIcXbLvz&bidTypeId=Ed0uCqZMRLIUQp&bidTypeId=&bidTypeId=&bidTypeId=sgJOa&" + 
                    "notBidTypeId=Sd8kYb9Wf6r&notBidTypeId=&notBidTypeId=Q&notBidTypeId=5rpxEVLxZ3xHF&notBidTypeId=9rOc8avjF9nv&" + 
                    "procuringEntityId=xb_h61&procuringEntityId=7bMSFZIOr&procuringEntityId=QtPmVixa41hs&" + 
                    "notProcuringEntityId=rK_x&" + 
                    "supplierId=2wlVJy2EHO_2BCtz&supplierId=0&supplierId=ArO4EmQa8&supplierId=JhdbGfJ7f&supplierId=jh&" + 
                    "contrMethod=&" + 
                    "tenderLoc=PpV8AuW1LWs&tenderLoc=bKZQVZ4o&" + 
                    "procurementMethod=d9rcL4BehTS&procurementMethod=OqAr2FYXhvMy79&" + 
                    "procuringEntityCityId=&" + 
                    "month=705&" + 
                    "pageSize=330&" + 
                    "minTenderValue=0.5490293581545499&" + 
                    "maxTenderValue=0.8648876326024174&" + 
                    "minAwardValue=0.45613933390177885&" + 
                    "maxAwardValue=0.19738772295055074&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "skip=Kd2ozpr7xx3jvbs&" + 
                    "class=rzfm7hG&" + 
                    "yearFilterPagingRequest=VNuGP1U")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(3))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(705.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[2]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[2]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[2]", "procuringEntityId[2]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[2]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("procuringEntityId[2]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("procuringEntityId[2]"))
                .body("'errors'[1].'rejectedValue'", containsString("xb_h61"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[0]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[0]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[0]", "notProcuringEntityId[0]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[2].'rejectedValue'", containsString("rK_x"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 3"))
                .body("'path'", containsString("/api/tendersByLocation"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/tendersByLocation'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/tendersByLocation?" + 
                    "bidTypeId=n5oWgUIcXbLvz&bidTypeId=Ed0uCqZMRLIUQp&bidTypeId=&bidTypeId=&bidTypeId=sgJOa&" + 
                    "procuringEntityId=xb_h61&procuringEntityId=7bMSFZIOr&procuringEntityId=QtPmVixa41hs&" + 
                    "notProcuringEntityId=rK_x&" + 
                    "supplierId=2wlVJy2EHO_2BCtz&supplierId=0&supplierId=ArO4EmQa8&supplierId=JhdbGfJ7f&supplierId=jh&" + 
                    "planningLoc=KnNmNSUH3d&planningLoc=BpaJ0rLHQGCKb&planningLoc=xUg006IU11y&" + 
                    "procuringEntityCityId=&" + 
                    "year=989&year=103&" + 
                    "month=705&" + 
                    "pageSize=330&" + 
                    "maxTenderValue=0.8648876326024174&" + 
                    "minAwardValue=0.45613933390177885&" + 
                    "flagged=true&" + 
                    "password=gql38Jrlue1swMX&" + 
                    "yearFilterPagingRequest=e9H7&" + 
                    "username=M_jglJhd")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(2))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(103.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(989.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[1].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("month"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(705.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[2]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[2]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[2]", "procuringEntityId[2]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[2]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("procuringEntityId[2]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("procuringEntityId[2]"))
                .body("'errors'[2].'rejectedValue'", containsString("xb_h61"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 4"))
                .body("'path'", containsString("/api/tendersByLocation"));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/spring/TranslationService_41_ensureLanguageLoaded.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/translations/{language}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/translations/ja@Lhy347nV9v")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/spring/TranslationService_41_ensureLanguageLoaded
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("Language string must comply with RFC5646 standard!"))
                .body("'path'", containsString("/api/translations/ja@Lhy347nV9v"));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/spring/TranslationService_41_ensureLanguageLoaded.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/translations/{language}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/translations/ja@Lhy347nV9v?username=_EM_36409_XYZ_")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/spring/TranslationService_41_ensureLanguageLoaded
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("Language string must comply with RFC5646 standard!"))
                .body("'path'", containsString("/api/translations/ja@Lhy347nV9v"));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/rest/controller/GenericOCDSController_353_lambda$getContrMethodFilterCriteria$1.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/totalProjectsByYear'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/totalProjectsByYear?" + 
                    "bidTypeId=R5M7&bidTypeId=p&bidTypeId=&bidTypeId=JYTA2Jlu&bidTypeId=M7ziHq5FN4K_rKtf&" + 
                    "notBidTypeId=JjkhVXH7k1&notBidTypeId=uo7&" + 
                    "procuringEntityId=&" + 
                    "notProcuringEntityId=GIVA_u&notProcuringEntityId=Hc_yjvwW4Plq4&notProcuringEntityId=69hxJo1tnV1&notProcuringEntityId=0nuReUdj1zEC&notProcuringEntityId=2c1pE5P&" + 
                    "supplierId=tN1Jd&supplierId=u3OPR1341&supplierId=6xLF4ddpMvO05&supplierId=s0Dv1yzeRc2G&supplierId=&" + 
                    "contrMethod=TCtqPJjJiWwAd&contrMethod=HX&contrMethod=DsHb_2SzFa7&contrMethod=eTBGGlUKzYWI&" + 
                    "planningLoc=85&planningLoc=ALnUx&planningLoc=N&" + 
                    "procurementMethod=jN07eUd&procurementMethod=eWzv8oP9ZVhcZRdk&procurementMethod=UwX&procurementMethod=MLe1xH&procurementMethod=KOfSxLg&" + 
                    "procuringEntityCityId=aug7fHPRff&procuringEntityCityId=Goa2nsTTeMUk&procuringEntityCityId=4xTjZY3Bany&procuringEntityCityId=NDpGNrU0M3xD&procuringEntityCityId=OXS&" + 
                    "procuringEntityGroupId=174&procuringEntityGroupId=262&procuringEntityGroupId=133&procuringEntityGroupId=33&procuringEntityGroupId=808&" + 
                    "year=686&year=856&year=307&year=850&year=284&" + 
                    "pageNumber=684&" + 
                    "pageSize=700&" + 
                    "minTenderValue=0.6611012149428734&" + 
                    "maxTenderValue=0.7759391057681343&" + 
                    "minAwardValue=0.15326176230560828&" + 
                    "maxAwardValue=0.4140632772854943&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "yearFilterPagingRequest=wsngwS5zjihZcLd")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/rest/controller/GenericOCDSController_353_lambda$getContrMethodFilterCriteria$1
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("invalid hexadecimal representation of an ObjectId: [DsHb_2SzFa7]"))
                .body("'path'", containsString("/api/totalProjectsByYear"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/totalProjectsByYear?" + 
                    "bidTypeId=R5M7&bidTypeId=p&bidTypeId=&bidTypeId=JYTA2Jlu&bidTypeId=M7ziHq5FN4K_rKtf&" + 
                    "notBidTypeId=JjkhVXH7k1&notBidTypeId=uo7&" + 
                    "procuringEntityId=&" + 
                    "notProcuringEntityId=GIVA_u&notProcuringEntityId=Hc_yjvwW4Plq4&notProcuringEntityId=69hxJo1tnV1&notProcuringEntityId=0nuReUdj1zEC&notProcuringEntityId=2c1pE5P&" + 
                    "supplierId=tN1Jd&supplierId=u3OPR1341&supplierId=6xLF4ddpMvO05&supplierId=s0Dv1yzeRc2G&supplierId=&" + 
                    "bidSelectionMethod=7FHWF4zWUc&bidSelectionMethod=_gNx75AcUK&bidSelectionMethod=sX3SSo3Eb&" + 
                    "planningLoc=85&planningLoc=ALnUx&planningLoc=N&" + 
                    "tenderLoc=JD&tenderLoc=vDFy02y&tenderLoc=YOdfmNePL2LsZgu&tenderLoc=7KwBY2&tenderLoc=T0sSbianCwhxJoE&" + 
                    "procurementMethod=jN07eUd&procurementMethod=eWzv8oP9ZVhcZRdk&procurementMethod=UwX&procurementMethod=MLe1xH&procurementMethod=KOfSxLg&" + 
                    "procuringEntityDepartmentId=285&procuringEntityDepartmentId=-2050510800&procuringEntityDepartmentId=875&procuringEntityDepartmentId=120&" + 
                    "procuringEntityGroupId=174&procuringEntityGroupId=262&procuringEntityGroupId=133&procuringEntityGroupId=33&procuringEntityGroupId=808&" + 
                    "pageNumber=684&" + 
                    "pageSize=700&" + 
                    "minTenderValue=0.6611012149428734&" + 
                    "maxTenderValue=0.7759391057681343&" + 
                    "maxAwardValue=0.4140632772854943&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "skip=1WbVYHl&" + 
                    "password=gWOceDZH&" + 
                    "class=dJZqnZIwPLcgCt85&" + 
                    "yearFilterPagingRequest=OZKsSFokp7Z05m&" + 
                    "username=WNR")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/flags/i085/stats'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i085/stats?" + 
                    "procuringEntityId=&" + 
                    "notProcuringEntityId=_EM_36435_XYZ_&notProcuringEntityId=niDZgk2KRn&" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=&" + 
                    "contrMethod=&contrMethod=wYhBjAcBH&" + 
                    "planningLoc=_EM_36436_XYZ_&planningLoc=h&planningLoc=_EM_36437_XYZ_&planningLoc=vW842P8lwq&planningLoc=OIeOfS&" + 
                    "procurementMethod=nLMl9OKpQBvGLx&procurementMethod=_EM_36440_XYZ_&" + 
                    "pageNumber=248&" + 
                    "pageSize=862&" + 
                    "minTenderValue=0.5041745715153434&" + 
                    "maxTenderValue=0.44924923800121697&" + 
                    "minAwardValue=0.784695858889655&" + 
                    "maxAwardValue=0.19170198813315364&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "skip=t5cuUp&" + 
                    "password=_EM_36441_XYZ_&" + 
                    "class=_EM_36442_XYZ_&" + 
                    "yearFilterPagingRequest=IR4RiU&" + 
                    "username=_EM_36443_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[0]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[0]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[0]", "notProcuringEntityId[0]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_36435_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/flags/i085/stats"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/excelExport'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/excelExport?" + 
                    "bidTypeId=N24ROyEBw96aZ&bidTypeId=LdYAAYTB5gKsl&" + 
                    "notBidTypeId=COLLUSION&notBidTypeId=b19SQqb3thndPeS&" + 
                    "procuringEntityId=_EM_36444_XYZ_&procuringEntityId=&procuringEntityId=3D0Gzy7f1lssZAZ&procuringEntityId=rvIT&" + 
                    "contrMethod=&" + 
                    "planningLoc=_EM_42834_XYZ_&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=657&procuringEntityDepartmentId=473&procuringEntityDepartmentId=306&procuringEntityDepartmentId=188&procuringEntityDepartmentId=61&" + 
                    "year=664&" + 
                    "pageNumber=46&" + 
                    "pageSize=360&" + 
                    "minTenderValue=0.8372624720757322&" + 
                    "maxTenderValue=0.18306600609813928&" + 
                    "maxAwardValue=0.0305369705634555&" + 
                    "monthly=true")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[2]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[2]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[2]", "procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_36444_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[1].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("year"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(664.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/ocds/excelExport"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/flags/i003/crosstab'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i003/crosstab?" + 
                    "procuringEntityId=ZZTz1&" + 
                    "notProcuringEntityId=_EM_36455_XYZ_&notProcuringEntityId=_EM_36456_XYZ_&notProcuringEntityId=_EM_36457_XYZ_&notProcuringEntityId=&notProcuringEntityId=_EM_36458_XYZ_&" + 
                    "notBidSelectionMethod=kyWNbPfkc_s&notBidSelectionMethod=_EM_36461_XYZ_&notBidSelectionMethod=9MsIpq8w&" + 
                    "contrMethod=&" + 
                    "planningLoc=&" + 
                    "tenderLoc=Sb&tenderLoc=qF13JcoV&tenderLoc=_EM_36462_XYZ_&tenderLoc=_EM_36463_XYZ_&tenderLoc=lXL9yNsgJ&" + 
                    "procurementMethod=&" + 
                    "procuringEntityGroupId=542&procuringEntityGroupId=809&procuringEntityGroupId=368&procuringEntityGroupId=753&" + 
                    "year=399&year=704&" + 
                    "month=649&" + 
                    "pageNumber=464&" + 
                    "pageSize=327&" + 
                    "minTenderValue=0.09098433881660528&" + 
                    "minAwardValue=0.9629023821488542&" + 
                    "maxAwardValue=0.7803786087489974&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "yearFilterPagingRequest=Da4pQU2eBjmlIsRY")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(3))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(649.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[1].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("year"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(2))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(399.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(704.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[1]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[1]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[1]", "notProcuringEntityId[1]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_36455_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 3"))
                .body("'path'", containsString("/api/flags/i003/crosstab"));
    }
}
