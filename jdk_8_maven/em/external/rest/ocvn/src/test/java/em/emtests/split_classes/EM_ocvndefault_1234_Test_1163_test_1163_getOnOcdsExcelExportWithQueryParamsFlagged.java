package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_1163_test_1163_getOnOcdsExcelExportWithQueryParamsFlagged {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (200) GET:/api/ocds/excelExport
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1163_getOnOcdsExcelExportWithQueryParamsFlagged() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/excelExport?" + 
                    "bidSelectionMethod=_EM_25222_XYZ_&bidSelectionMethod=YJ7KVFieIg6v&bidSelectionMethod=9vlyVy3rFMK9&bidSelectionMethod=h1gQZfuB98dG3&" + 
                    "tenderLoc=&tenderLoc=3AQx3KuXsZjW7th&tenderLoc=_EM_25226_XYZ_&tenderLoc=HXM&" + 
                    "procurementMethod=7wr&procurementMethod=_EM_25227_XYZ_&procurementMethod=_EM_25228_XYZ_&procurementMethod=_EM_25229_XYZ_&" + 
                    "procuringEntityCityId=x&procuringEntityCityId=_EM_25230_XYZ_&procuringEntityCityId=WkEBKWoAzhj&procuringEntityCityId=HIjoV0Q4mPjej&" + 
                    "procuringEntityDepartmentId=612&procuringEntityDepartmentId=384&" + 
                    "procuringEntityGroupId=351&procuringEntityGroupId=215&procuringEntityGroupId=679&procuringEntityGroupId=832&" + 
                    "pageSize=883&" + 
                    "maxTenderValue=0.8403836385792655&" + 
                    "maxAwardValue=0.7705318933255091&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "skip=_EM_25231_XYZ_&" + 
                    "password=_EM_25232_XYZ_&" + 
                    "yearFilterPagingRequest=1idLnht9DP")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
    }
}
