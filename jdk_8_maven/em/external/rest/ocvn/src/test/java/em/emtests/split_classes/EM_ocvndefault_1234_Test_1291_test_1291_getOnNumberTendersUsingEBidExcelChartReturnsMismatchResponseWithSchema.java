package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_1291_test_1291_getOnNumberTendersUsingEBidExcelChartReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (400) GET:/api/ocds/numberTendersUsingEBidExcelChart
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1291_getOnNumberTendersUsingEBidExcelChartReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/numberTendersUsingEBidExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/numberTendersUsingEBidExcelChart?" + 
                    "bidTypeId=RIGGING&bidTypeId=7Nk5zY0z3gfty&bidTypeId=LbL6moNjytcb&bidTypeId=_EM_26218_XYZ_&" + 
                    "notBidTypeId=k0P5M8v&" + 
                    "procuringEntityId=&" + 
                    "supplierId=JOxU&supplierId=9xPnrFIl&supplierId=_EM_26221_XYZ_&supplierId=_EM_26222_XYZ_&" + 
                    "bidSelectionMethod=T_HWMmRn&bidSelectionMethod=_EM_34379_XYZ_&bidSelectionMethod=_EM_26223_XYZ_&bidSelectionMethod=MFzdY&" + 
                    "notBidSelectionMethod=i&notBidSelectionMethod=0OrF&notBidSelectionMethod=2&notBidSelectionMethod=PgAxHaa&" + 
                    "contrMethod=&" + 
                    "planningLoc=Cz&planningLoc=eJeR0yvK4r2wNZ&planningLoc=CFlA06lt1X&planningLoc=5DGed6th7kazkx7C&" + 
                    "tenderLoc=_EM_34380_XYZ_&tenderLoc=bi65OzwKSKr&tenderLoc=bFcaQzZo7&tenderLoc=1JyOrzfggVvlgVv&" + 
                    "procurementMethod=_EM_26225_XYZ_&procurementMethod=Q_V2g5za5ULT&procurementMethod=6&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=974&procuringEntityDepartmentId=-141&procuringEntityDepartmentId=203&" + 
                    "procuringEntityGroupId=589&" + 
                    "pageNumber=950&" + 
                    "pageSize=492&" + 
                    "minTenderValue=-125.56968768632781&" + 
                    "minAwardValue=0.9855166960103902&" + 
                    "maxAwardValue=0.11364223597312084&" + 
                    "electronicSubmission=true&" + 
                    "monthly=true&" + 
                    "language=M2W8KfsX1i8rcyp&" + 
                    "skip=&" + 
                    "password=_EM_34381_XYZ_&" + 
                    "class=_EM_34382_XYZ_&" + 
                    "langYearFilterPagingRequest=_EM_34383_XYZ_&" + 
                    "username=3%60xkk1omMxR")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.bidTypeId[3]", "EachPattern.langYearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[3]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.bidTypeId[3]", "bidTypeId[3]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("bidTypeId[3]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("bidTypeId[3]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("bidTypeId[3]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_26218_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/ocds/numberTendersUsingEBidExcelChart"));
    }
}
