package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_2019_test_2019_getOnPackageAllWithQueryParamsNegativeMaxTenderValue {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (400) GET:/api/ocds/package/all
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_2019_getOnPackageAllWithQueryParamsNegativeMaxTenderValue() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/package/all'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ocds/package/all?" + 
                    "bidTypeId=_EM_484_XYZ_&bidTypeId=1gt4XGBSUQrh0PSh&bidTypeId=bidTypeId%5B2%5D&bidTypeId=_EM_487_XYZ_&bidTypeId=_EM_26789_XYZ_&" + 
                    "notBidTypeId=_EM_488_XYZ_&notBidTypeId=_EM_489_XYZ_&notBidTypeId=grD_OIAWP_nuLT&" + 
                    "notProcuringEntityId=_EM_26795_XYZ_&notProcuringEntityId=GP&notProcuringEntityId=_EM_26796_XYZ_&notProcuringEntityId=SG59tl&notProcuringEntityId=_EM_26797_XYZ_&" + 
                    "supplierId=&supplierId=xQb&supplierId=Z53NTP6K1Ub2W&" + 
                    "bidSelectionMethod=ITNV&" + 
                    "notBidSelectionMethod=YkWc4MhTFqh8B&notBidSelectionMethod=_EM_26544_XYZ_&notBidSelectionMethod=gn&" + 
                    "contrMethod=Pm&contrMethod=4oZDEIjc7mSzcs&contrMethod=_EM_26790_XYZ_&contrMethod=&contrMethod=&" + 
                    "planningLoc=_EM_498_XYZ_&planningLoc=_EM_499_XYZ_&" + 
                    "procurementMethod=_EM_501_XYZ_&procurementMethod=EFjD2pqghQqsva&procurementMethod=_EM_502_XYZ_&procurementMethod=A4l_Ewq4raLzTw&procurementMethod=_EM_26794_XYZ_&" + 
                    "procuringEntityCityId=U8U&procuringEntityCityId=E9&" + 
                    "procuringEntityDepartmentId=-16776700&procuringEntityDepartmentId=833&procuringEntityDepartmentId=2949&procuringEntityDepartmentId=180&" + 
                    "procuringEntityGroupId=-8388567&procuringEntityGroupId=-16777066&procuringEntityGroupId=942&procuringEntityGroupId=898&" + 
                    "year=781&year=32&year=32894&year=484&year=760&" + 
                    "month=16776710&month=131079&month=8495&month=638&month=262430&" + 
                    "pageNumber=0&" + 
                    "minTenderValue=1.04938&" + 
                    "maxTenderValue=-1.240443537342&" + 
                    "minAwardValue=0.6277915304928946&" + 
                    "maxAwardValue=0.0&" + 
                    "electronicSubmission=false&" + 
                    "skip=_EM_26791_XYZ_&" + 
                    "class=_EM_26798_XYZ_&" + 
                    "yearFilterPagingRequest=pOifPmPpkIMw3y")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(6))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notBidTypeId[0]", "EachPattern.yearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[0]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notBidTypeId[0]", "notBidTypeId[0]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[0]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notBidTypeId[0]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notBidTypeId[0]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_488_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.contrMethod[3]", "EachPattern.yearFilterPagingRequest.contrMethod", "EachPattern.contrMethod[3]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.contrMethod[3]", "contrMethod[3]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("contrMethod[3]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("contrMethod[3]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("contrMethod[3]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_26790_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[1]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[1]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[1]", "bidTypeId[1]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("bidTypeId[1]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("bidTypeId[1]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("bidTypeId[1]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_26789_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 6"))
                .body("'path'", containsString("/api/ocds/package/all"));
    }
}
