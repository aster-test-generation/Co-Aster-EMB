package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_1722_test_1722_postOnStatsReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (400) POST:/api/tenderValueInterval
    * 2 - (400) POST:/api/percentageAwardsNarrowPublicationDates
    * 3 - (200) POST:/api/ocds/location/search
    * 4 - (200) GET:/api/costEffectivenessTenderAwardAmount
    * 5 - (400) GET:/api/ocds/averageNumberBidsExcelChart
    * 6 - (200) POST:/api/ocds/organization/all
    * 7 - (200) POST:/api/ocds/city/all
    * 8 - (200) GET:/api/ocds/city/all
    * 9 - (302) POST:/api/flags/i007/stats
    * Found 4 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_1722_postOnStatsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/tenderValueInterval'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/tenderValueInterval?" + 
                    "notBidTypeId=Ns6HprRf8i17D4au&notBidTypeId=FRAUD&" + 
                    "procuringEntityId=&" + 
                    "notBidSelectionMethod=_EM_33789_XYZ_&" + 
                    "contrMethod=rsjJusOW&contrMethod=jIAusMDB67S&contrMethod=_EM_33790_XYZ_&contrMethod=blvm&contrMethod=Po&" + 
                    "planningLoc=&" + 
                    "procurementMethod=_EM_33791_XYZ_&procurementMethod=QkNqc8k6lqq&procurementMethod=pJU1y&procurementMethod=_EM_33792_XYZ_&" + 
                    "year=792&year=49&year=971&year=295&year=321&" + 
                    "pageSize=292&" + 
                    "minAwardValue=0.555281694732712&" + 
                    "electronicSubmission=true")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.contrMethod[1]", "EachPattern.yearFilterPagingRequest.contrMethod", "EachPattern.contrMethod[1]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.contrMethod[1]", "contrMethod[1]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("contrMethod[1]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("contrMethod[1]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("contrMethod[1]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_33790_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[1].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("year"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(5))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(49.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(295.0))
                .body("'errors'[1].'rejectedValue'[2]", numberMatches(321.0))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/tenderValueInterval"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/percentageAwardsNarrowPublicationDates'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/percentageAwardsNarrowPublicationDates?" + 
                    "bidTypeId=RIGGING&bidTypeId=Rr2bLsxONP&bidTypeId=RIGGING&bidTypeId=bW&" + 
                    "notProcuringEntityId=&" + 
                    "planningLoc=_EM_33801_XYZ_&planningLoc=kd4FfXD97&planningLoc=_EM_33802_XYZ_&planningLoc=_EM_33803_XYZ_&planningLoc=drZNX&" + 
                    "procurementMethod=owatdnDjp6&procurementMethod=b6TpVZyJ&procurementMethod=mT3k1aYU1SrL&" + 
                    "procuringEntityCityId=_EM_33806_XYZ_&procuringEntityCityId=8_86tMzYwgmffRP5&" + 
                    "procuringEntityDepartmentId=463&procuringEntityDepartmentId=284&procuringEntityDepartmentId=25&procuringEntityDepartmentId=933&" + 
                    "year=889&year=53&year=442&year=969&" + 
                    "pageSize=-72234054&" + 
                    "minAwardValue=0.2925730720050298&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "skip=ElyP__2qxbx2gfk&" + 
                    "yearFilterPagingRequest=_EM_33807_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("Range.yearFilterPagingRequest.pageSize", "Range.pageSize", "Range.java.lang.Integer", "Range"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.pageSize", "pageSize"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("pageSize"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("pageSize"))
                .body("'errors'[0].'arguments'[1]", numberMatches(1000.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 1000"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("pageSize"))
                .body("'errors'[0].'rejectedValue'", numberMatches(-7.2234054E7))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("Range"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[1].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("year"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(4))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(53.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(442.0))
                .body("'errors'[1].'rejectedValue'[2]", numberMatches(889.0))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/percentageAwardsNarrowPublicationDates"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageNumber=796&" + 
                    "pageSize=828")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/costEffectivenessTenderAwardAmount?" + 
                    "bidTypeId=RIGGING&" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=_EM_33812_XYZ_&bidSelectionMethod=JnxO&bidSelectionMethod=_EM_33813_XYZ_&" + 
                    "notBidSelectionMethod=_EM_33814_XYZ_&" + 
                    "tenderLoc=_EM_33817_XYZ_&tenderLoc=&tenderLoc=_EM_33818_XYZ_&tenderLoc=6y4uxgLH&" + 
                    "procurementMethod=_EM_33819_XYZ_&procurementMethod=wq9&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityGroupId=438&procuringEntityGroupId=628&procuringEntityGroupId=112&" + 
                    "minAwardValue=0.46901870646889354&" + 
                    "maxAwardValue=0.234448831318686&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "groupingFilterPagingRequest=MYVxG5jRD&" + 
                    "username=_EM_33820_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/averageNumberBidsExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/averageNumberBidsExcelChart?" + 
                    "bidTypeId=&" + 
                    "bidSelectionMethod=FbPKAc&bidSelectionMethod=_EM_33822_XYZ_&bidSelectionMethod=_EM_33823_XYZ_&bidSelectionMethod=_EM_33824_XYZ_&bidSelectionMethod=_rdBMh2PWtTYb3&" + 
                    "planningLoc=_EM_33826_XYZ_&planningLoc=&planningLoc=&" + 
                    "procurementMethod=O&procurementMethod=8h9e5Sr8c6BzU&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=648&" + 
                    "year=329&year=418&year=970&year=587&year=344&" + 
                    "month=327&month=839&month=588&month=543&month=444&" + 
                    "pageSize=878&" + 
                    "maxTenderValue=0.3589987949487722&" + 
                    "minAwardValue=0.35140576221567776&" + 
                    "maxAwardValue=0.38009195604720714&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "skip=svblmh1&" + 
                    "password=_EM_33829_XYZ_&" + 
                    "langYearFilterPagingRequest=Kfjsoyb_uGkKvcY&" + 
                    "username=_EM_33830_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.langYearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(5))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(327.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(444.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(543.0))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.langYearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.year", "year"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[1].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[1].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("year"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(5))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(329.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(344.0))
                .body("'errors'[1].'rejectedValue'[2]", numberMatches(418.0))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/ocds/averageNumberBidsExcelChart"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/organization/all?" + 
                    "password=_EM_33832_XYZ_&" + 
                    "text=Nv7d&" + 
                    "class=03w&" + 
                    "username=C")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/city/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/city/all?" + 
                    "password=_1bI46lQNB8_MGY&" + 
                    "username=ublPkEBn1y_MIC")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 302 not defined for path '/api/flags/i007/stats'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/flags/i007/stats?" + 
                    "bidTypeId=qpTW7MUPlaKlV&bidTypeId=Hmt0LTTblxpvVe&bidTypeId=_EM_33836_XYZ_&bidTypeId=D2VoDbKgTRX&bidTypeId=_EM_33837_XYZ_&" + 
                    "notProcuringEntityId=&" + 
                    "tenderLoc=_EM_33845_XYZ_&" + 
                    "procurementMethod=OE&procurementMethod=cvPKEW&" + 
                    "procuringEntityCityId=d4LjMk_bLE&procuringEntityCityId=WZfg&procuringEntityCityId=_EM_33846_XYZ_&" + 
                    "procuringEntityDepartmentId=673&" + 
                    "procuringEntityGroupId=513&procuringEntityGroupId=881&procuringEntityGroupId=830&" + 
                    "year=186&year=638&year=-2041131847&year=963&" + 
                    "maxTenderValue=0.663819640519969&" + 
                    "monthly=false&" + 
                    "skip=_EM_33848_XYZ_&" + 
                    "password=_EM_33849_XYZ_&" + 
                    "class=grt3oFnu97T50l&" + 
                    "username=_EM_33851_XYZ_")
                .then()
                .statusCode(302)
                .assertThat()
                .body(isEmptyOrNullString());
    }
}
