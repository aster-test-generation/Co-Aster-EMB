package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_1537_test_1537_postOnI085ReleasesWithQueryParamsShowsFaults_100_101 {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (500) POST:/api/ocds/location/search
    * 2 - (200) POST:/api/ocds/location/all
    * 3 - (200) GET:/api/ocds/location/all
    * 4 - (400) POST:/api/flags/i038/crosstab
    * 5 - (400) POST:/api/flags/i038/crosstab
    * 6 - (400) POST:/api/ocds/cancelledFundingPercentageExcelChart
    * 7 - (400) GET:/api/ocds/cancelledFundingPercentageExcelChart
    * 8 - (500) POST:/api/activeAwardsCount
    * 9 - (500) GET:/api/activeAwardsCount
    * 10 - (500) POST:/api/flags/i085/releases
    * Found 12 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_1537_postOnI085ReleasesWithQueryParamsShowsFaults_100_101() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/rest/controller/selector/LocationSearchController_55_locationsSearch.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/ocds/location/search'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageNumber=312&" + 
                    "pageSize=482&" + 
                    "text=WAChNezC3yOJQFt&" + 
                    "password=B5jzIvv&" + 
                    "textSearchRequest=ZBZXJ2&" + 
                    "username=hwqwkyadf")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/rest/controller/selector/LocationSearchController_55_locationsSearch
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.data.mongodb.UncategorizedMongoDbException"))
                .body("'path'", containsString("/api/ocds/location/search"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/location/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/location/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/flags/i038/crosstab'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i038/crosstab?" + 
                    "procuringEntityId=_EM_37593_XYZ_&procuringEntityId=j4ym70Hp2I&procuringEntityId=eDA5dx&procuringEntityId=&" + 
                    "notProcuringEntityId=77m6&notProcuringEntityId=SoCN1&notProcuringEntityId=ec9X&notProcuringEntityId=2jTvO&" + 
                    "supplierId=qZTCrc&supplierId=scJ&supplierId=_EM_37594_XYZ_&supplierId=GLAzlDq&" + 
                    "contrMethod=&" + 
                    "planningLoc=_EM_37601_XYZ_&planningLoc=dQXsS7u&planningLoc=5fuONicW&" + 
                    "tenderLoc=&tenderLoc=vDeTazjuiiND&tenderLoc=wIUdu25hTj&tenderLoc=JdHEEOOoSZJ7zbf&tenderLoc=Y&" + 
                    "procuringEntityDepartmentId=474&" + 
                    "month=757&" + 
                    "pageSize=482&" + 
                    "minAwardValue=0.5276242011452054&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "yearFilterPagingRequest=vnxTk1h_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(757.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[1]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[1]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[1]", "procuringEntityId[1]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[1]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("procuringEntityId[1]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("procuringEntityId[1]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_37593_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/flags/i038/crosstab"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/flags/i038/crosstab'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i038/crosstab?" + 
                    "bidTypeId=sEcs7sSfQ51tqaK&" + 
                    "notBidTypeId=PTY&notBidTypeId=_EM_37607_XYZ_&" + 
                    "procuringEntityId=_EM_37608_XYZ_&procuringEntityId=j4ym70Hp2I&procuringEntityId=eDA5dx&procuringEntityId=&" + 
                    "notProcuringEntityId=77m6&notProcuringEntityId=SoCN1&notProcuringEntityId=ec9X&notProcuringEntityId=2jTvO&" + 
                    "bidSelectionMethod=pA&bidSelectionMethod=JjO&bidSelectionMethod=pMhM&" + 
                    "contrMethod=&" + 
                    "planningLoc=_EM_37617_XYZ_&planningLoc=_EM_37618_XYZ_&planningLoc=5fuONicW&" + 
                    "tenderLoc=V&tenderLoc=vDeTazjuiiND&tenderLoc=wIUdu25hTj&tenderLoc=JdHEEOOoSZJ7zbf&tenderLoc=Y&" + 
                    "procurementMethod=nVe2&procurementMethod=BbvRPH&procurementMethod=cKaRDaGEIhmEX&" + 
                    "procuringEntityDepartmentId=474&" + 
                    "procuringEntityGroupId=845&procuringEntityGroupId=83&procuringEntityGroupId=764&procuringEntityGroupId=1074&procuringEntityGroupId=742&" + 
                    "month=757&" + 
                    "minTenderValue=3.0155643088570474&" + 
                    "maxTenderValue=0.6856154036412169&" + 
                    "maxAwardValue=-0.69234204598&" + 
                    "electronicSubmission=false&" + 
                    "monthly=false&" + 
                    "skip=&" + 
                    "password=UPRlhA&" + 
                    "class=UpPAUEpUVIbjXRc2&" + 
                    "yearFilterPagingRequest=GRU2c9T_i7hujJpQ&" + 
                    "username=3XidE6HTkOKqvyW")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(3))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[1]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[1]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[1]", "procuringEntityId[1]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[1]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("procuringEntityId[1]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("procuringEntityId[1]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_37608_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[1].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("month"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(757.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notBidTypeId[1]", "EachPattern.yearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[1]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notBidTypeId[1]", "notBidTypeId[1]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[1]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("notBidTypeId[1]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("notBidTypeId[1]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_37607_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 3"))
                .body("'path'", containsString("/api/flags/i038/crosstab"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/cancelledFundingPercentageExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/cancelledFundingPercentageExcelChart?" + 
                    "supplierId=_EM_37625_XYZ_&supplierId=scJ&supplierId=_EM_37626_XYZ_&supplierId=GLAzlDq&" + 
                    "bidSelectionMethod=_EM_37627_XYZ_&bidSelectionMethod=JjO&bidSelectionMethod=pMhM&" + 
                    "notBidSelectionMethod=_EM_37628_XYZ_&notBidSelectionMethod=hh7d4ms&notBidSelectionMethod=_EM_37629_XYZ_&notBidSelectionMethod=zdnq2bY02dKPgP&notBidSelectionMethod=_EM_37630_XYZ_&" + 
                    "contrMethod=&" + 
                    "procurementMethod=nVe2&procurementMethod=BbvRPH&procurementMethod=cKaRDaGEIhmEX&" + 
                    "procuringEntityDepartmentId=474&" + 
                    "year=&" + 
                    "month=757&" + 
                    "pageNumber=312&" + 
                    "minTenderValue=3.0155643088570474&" + 
                    "maxTenderValue=0.6856154036412169&" + 
                    "maxAwardValue=-0.69234204598&" + 
                    "monthly=false&" + 
                    "language=2fs94LNdKC8a&" + 
                    "langYearFilterPagingRequest=iDpY")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.langYearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(757.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/ocds/cancelledFundingPercentageExcelChart"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/cancelledFundingPercentageExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/cancelledFundingPercentageExcelChart?" + 
                    "bidTypeId=sEcs7sSfQ51tqaK&" + 
                    "notBidTypeId=_EM_37637_XYZ_&notBidTypeId=COLLUSION&" + 
                    "procuringEntityId=_EM_37638_XYZ_&procuringEntityId=_EM_37639_XYZ_&procuringEntityId=_EM_37640_XYZ_&procuringEntityId=_EM_37641_XYZ_&" + 
                    "notProcuringEntityId=77m6&notProcuringEntityId=SoCN1&notProcuringEntityId=ec9X&notProcuringEntityId=2jTvO&" + 
                    "supplierId=qZTCrc&supplierId=_EM_37645_XYZ_&supplierId=FF&supplierId=GLAzlDq&" + 
                    "bidSelectionMethod=pA&bidSelectionMethod=JjO&bidSelectionMethod=pMhM&" + 
                    "notBidSelectionMethod=voLgTz3xP7sJe&notBidSelectionMethod=hh7d4ms&notBidSelectionMethod=&notBidSelectionMethod=zdnq2bY02dKPgP&notBidSelectionMethod=iPE31&" + 
                    "contrMethod=&" + 
                    "planningLoc=XXHZqwdFBTp4qF&planningLoc=_EM_37646_XYZ_&planningLoc=_EM_37647_XYZ_&" + 
                    "tenderLoc=V&tenderLoc=vDeTazjuiiND&tenderLoc=wIUdu25hTj&tenderLoc=JdHEEOOoSZJ7zbf&tenderLoc=Y&" + 
                    "procurementMethod=nVe2&procurementMethod=_EM_37650_XYZ_&procurementMethod=_EM_37651_XYZ_&" + 
                    "procuringEntityCityId=_EM_37652_XYZ_&" + 
                    "procuringEntityGroupId=781&procuringEntityGroupId=83&procuringEntityGroupId=764&procuringEntityGroupId=1074&" + 
                    "year=&" + 
                    "month=757&" + 
                    "pageSize=482&" + 
                    "minTenderValue=3.0155643088570474&" + 
                    "maxTenderValue=0.6856154036412169&" + 
                    "minAwardValue=0.5276242011452054&" + 
                    "maxAwardValue=-0.69234204598&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "language=2fs94LNdKC8a&" + 
                    "password=UPRlhA&" + 
                    "class=UpPAUEpUVIbjXRc2&" + 
                    "langYearFilterPagingRequest=KfIx8WqZXREq&" + 
                    "username=3XidE6HTkOKqvyW")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(3))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.langYearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(757.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.procuringEntityId[0]", "EachPattern.langYearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[0]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.procuringEntityId[0]", "procuringEntityId[0]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[0]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("procuringEntityId[0]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("procuringEntityId[0]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_37638_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.notBidTypeId[1]", "EachPattern.langYearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[1]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.notBidTypeId[1]", "notBidTypeId[1]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[1]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("notBidTypeId[1]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("notBidTypeId[1]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_37637_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 3"))
                .body("'path'", containsString("/api/ocds/cancelledFundingPercentageExcelChart"));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/rest/controller/FrequentTenderersController_111_activeAwardsCount.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/activeAwardsCount'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/activeAwardsCount?" + 
                    "bidTypeId=sEcs7sSfQ51tqaK&" + 
                    "supplierId=qZTCrc&supplierId=_EM_37656_XYZ_&supplierId=FF&supplierId=GLAzlDq&" + 
                    "notBidSelectionMethod=voLgTz3xP7sJe&notBidSelectionMethod=hh7d4ms&notBidSelectionMethod=&notBidSelectionMethod=_EM_37657_XYZ_&notBidSelectionMethod=iPE31&" + 
                    "contrMethod=&" + 
                    "planningLoc=_EM_37659_XYZ_&planningLoc=dQXsS7u&planningLoc=_EM_37660_XYZ_&" + 
                    "tenderLoc=V&tenderLoc=vDeTazjuiiND&tenderLoc=wIUdu25hTj&tenderLoc=JdHEEOOoSZJ7zbf&tenderLoc=Y&" + 
                    "procurementMethod=nVe2&procurementMethod=BbvRPH&procurementMethod=cKaRDaGEIhmEX&" + 
                    "procuringEntityGroupId=781&procuringEntityGroupId=83&procuringEntityGroupId=764&procuringEntityGroupId=1074&procuringEntityGroupId=742&" + 
                    "year=&" + 
                    "maxTenderValue=0.6856154036412169&" + 
                    "maxAwardValue=-0.69234204598&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/rest/controller/FrequentTenderersController_111_activeAwardsCount
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.InvalidDataAccessApiUsageException"))
                .body("'path'", containsString("/api/activeAwardsCount"));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/rest/controller/FrequentTenderersController_111_activeAwardsCount.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/activeAwardsCount'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/activeAwardsCount?" + 
                    "supplierId=qZTCrc&supplierId=scJ&supplierId=_EM_37665_XYZ_&supplierId=GLAzlDq&" + 
                    "bidSelectionMethod=pA&bidSelectionMethod=_EM_37666_XYZ_&bidSelectionMethod=pMhM&" + 
                    "notBidSelectionMethod=_EM_37667_XYZ_&notBidSelectionMethod=hh7d4ms&notBidSelectionMethod=&notBidSelectionMethod=_EM_37668_XYZ_&notBidSelectionMethod=iPE31&" + 
                    "contrMethod=&" + 
                    "procurementMethod=_EM_37671_XYZ_&procurementMethod=BbvRPH&procurementMethod=_EM_37672_XYZ_&" + 
                    "procuringEntityCityId=_EM_37673_XYZ_&" + 
                    "procuringEntityDepartmentId=474&" + 
                    "procuringEntityGroupId=781&procuringEntityGroupId=83&procuringEntityGroupId=764&procuringEntityGroupId=1074&procuringEntityGroupId=742&" + 
                    "year=&" + 
                    "pageSize=482&" + 
                    "minTenderValue=3.0155643088570474&" + 
                    "maxTenderValue=0.6856154036412169&" + 
                    "minAwardValue=0.5276242011452054&" + 
                    "maxAwardValue=-0.69234204598&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "skip=&" + 
                    "password=UPRlhA&" + 
                    "class=UpPAUEpUVIbjXRc2&" + 
                    "username=3XidE6HTkOKqvyW")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/rest/controller/FrequentTenderersController_111_activeAwardsCount
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.InvalidDataAccessApiUsageException"))
                .body("'path'", containsString("/api/activeAwardsCount"));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/rest/controller/flags/AbstractFlagReleaseSearchController_50_releaseFlagSearch.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/flags/i085/releases'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i085/releases?" + 
                    "supplierId=zae0wZYe&supplierId=3Q_yod8b3rmmywY&supplierId=09tu1jPgvQ6k5aG&supplierId=S&supplierId=owkg&" + 
                    "bidSelectionMethod=993Zna8&bidSelectionMethod=cT9YYC3tI&" + 
                    "notBidSelectionMethod=&" + 
                    "procurementMethod=&" + 
                    "procuringEntityDepartmentId=648&procuringEntityDepartmentId=356&procuringEntityDepartmentId=704&procuringEntityDepartmentId=112&procuringEntityDepartmentId=200&" + 
                    "procuringEntityGroupId=794&procuringEntityGroupId=637&procuringEntityGroupId=-1980864816&" + 
                    "year=&" + 
                    "month=&" + 
                    "pageSize=181&" + 
                    "maxTenderValue=0.49263614408934786&" + 
                    "minAwardValue=0.08152312763716962&" + 
                    "flagged=false")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/rest/controller/flags/AbstractFlagReleaseSearchController_50_releaseFlagSearch
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.InvalidDataAccessApiUsageException"))
                .body("'path'", containsString("/api/flags/i085/releases"));
    }
}
