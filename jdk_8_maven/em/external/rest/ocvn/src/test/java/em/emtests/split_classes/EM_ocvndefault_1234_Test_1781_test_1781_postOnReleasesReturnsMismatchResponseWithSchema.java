package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_1781_test_1781_postOnReleasesReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (200) POST:/api/ocds/bidType/all
    * 2 - (200) POST:/api/ocds/bidType/all
    * 3 - (400) POST:/api/qualityAverageAwardPeriod
    * 4 - (200) POST:/api/qualityAverageAwardPeriod
    * 5 - (400) GET:/api/percentTendersWithLinkedProcurementPlan
    * 6 - (400) POST:/api/countBidPlansByYear
    * 7 - (400) GET:/api/countBidPlansByYear
    * 8 - (400) POST:/api/ocds/excelExport
    * 9 - (400) POST:/api/flags/i085/releases
    * Found 6 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_1781_postOnReleasesReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/bidType/all?" + 
                    "password=qZh9TX6fFw&" + 
                    "username=C2A25xLP")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/bidType/all?" + 
                    "password=z&" + 
                    "username=mIZn")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/qualityAverageAwardPeriod'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/qualityAverageAwardPeriod?" + 
                    "notBidTypeId=41&notBidTypeId=A7k2b&notBidTypeId=O8ANMXeKWZhDil&notBidTypeId=GexCs_Fkuwdl9&" + 
                    "procuringEntityId=&" + 
                    "notProcuringEntityId=Pod4&" + 
                    "supplierId=C3_4xF5EuBSGR&supplierId=4KLeFLSQDM&" + 
                    "notBidSelectionMethod=9TR6JC&notBidSelectionMethod=ni2QkCiC_uk&notBidSelectionMethod=ftmIY2dX3SuGc&notBidSelectionMethod=&notBidSelectionMethod=Zu&" + 
                    "planningLoc=G_BRM54OJ8lxx&planningLoc=M9mWij&planningLoc=_EM_42875_XYZ_&planningLoc=Y&planningLoc=rB8&" + 
                    "tenderLoc=&" + 
                    "procuringEntityGroupId=540&procuringEntityGroupId=782&procuringEntityGroupId=616&" + 
                    "maxTenderValue=0.7515435910348984&" + 
                    "minAwardValue=0.1699509083770313&" + 
                    "defaultFilterPagingRequest=COcj&" + 
                    "skip=&" + 
                    "class=NmrWdjeB30")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.defaultFilterPagingRequest.notBidTypeId[2]", "EachPattern.defaultFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[2]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("defaultFilterPagingRequest.notBidTypeId[2]", "notBidTypeId[2]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[2]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notBidTypeId[2]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("defaultFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notBidTypeId[2]"))
                .body("'errors'[0].'rejectedValue'", containsString("GexCs_Fkuwdl9"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='defaultFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/qualityAverageAwardPeriod"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/qualityAverageAwardPeriod?" + 
                    "bidTypeId=pkgJfGmW6yIcU&bidTypeId=Trp&bidTypeId=&" + 
                    "procuringEntityId=&" + 
                    "notProcuringEntityId=Pod4&" + 
                    "bidSelectionMethod=ExHnX6iX75&bidSelectionMethod=&bidSelectionMethod=e8fVFx23&bidSelectionMethod=8qq&" + 
                    "planningLoc=G_BRM54OJ8lxx&planningLoc=M9mWij&planningLoc=_EM_42875_XYZ_&planningLoc=Y&planningLoc=rB8&" + 
                    "procurementMethod=75PcyM8dNVkbI&procurementMethod=zt2&procurementMethod=LXK6xQRgZ2U&" + 
                    "procuringEntityCityId=25d6tCmEH&procuringEntityCityId=QBLviqsyLzNr&procuringEntityCityId=8Hkj&" + 
                    "procuringEntityDepartmentId=-936656189&procuringEntityDepartmentId=594&procuringEntityDepartmentId=991&" + 
                    "procuringEntityGroupId=540&procuringEntityGroupId=782&procuringEntityGroupId=616&" + 
                    "pageSize=347&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "skip=04Z4XX3TXOZi2BfU&" + 
                    "class=XIEURjF")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/percentTendersWithLinkedProcurementPlan'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/percentTendersWithLinkedProcurementPlan?" + 
                    "bidTypeId=_EM_34426_XYZ_&bidTypeId=yfdFQt8jDk21vCDZ&" + 
                    "notBidTypeId=_EM_34427_XYZ_&notBidTypeId=_EM_34428_XYZ_&" + 
                    "procuringEntityId=&procuringEntityId=rxuMvM&procuringEntityId=_EM_34429_XYZ_&" + 
                    "notProcuringEntityId=&" + 
                    "supplierId=Gz9VXTmFzD7WHd3&supplierId=KXw&supplierId=_EM_34430_XYZ_&supplierId=gtjWuXgzm8BC_&" + 
                    "bidSelectionMethod=_EM_34431_XYZ_&bidSelectionMethod=g4x2&bidSelectionMethod=_EM_34432_XYZ_&" + 
                    "notBidSelectionMethod=_EM_34433_XYZ_&" + 
                    "procurementMethod=Ma_LGfCyyVROGr54&procurementMethod=_EM_34435_XYZ_&procurementMethod=8KxT8KPgMnzw7e&procurementMethod=_EM_34436_XYZ_&" + 
                    "month=299&month=423&month=5&" + 
                    "pageNumber=379&" + 
                    "pageSize=301&" + 
                    "maxTenderValue=0.48498555496567897&" + 
                    "maxAwardValue=0.3780842689586891&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "skip=i3C&" + 
                    "class=AFa_dr5gHAA&" + 
                    "yearFilterPagingRequest=_EM_34438_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[0]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[0]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[0]", "bidTypeId[0]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("bidTypeId[0]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("bidTypeId[0]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("bidTypeId[0]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_34426_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[1]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[1]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[1]", "procuringEntityId[1]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[1]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("procuringEntityId[1]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("procuringEntityId[1]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_34429_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[2].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[2].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[2].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("month"))
                .body("'errors'[2].'rejectedValue'.size()", equalTo(3))
                .body("'errors'[2].'rejectedValue'[0]", numberMatches(5.0))
                .body("'errors'[2].'rejectedValue'[1]", numberMatches(299.0))
                .body("'errors'[2].'rejectedValue'[2]", numberMatches(423.0))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachRange"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 4"))
                .body("'path'", containsString("/api/percentTendersWithLinkedProcurementPlan"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/countBidPlansByYear'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/countBidPlansByYear?" + 
                    "notBidTypeId=qAnWjk&notBidTypeId=teehvxvDmx3&notBidTypeId=P&notBidTypeId=0AzwF81zhA6iK&" + 
                    "procuringEntityId=&" + 
                    "notBidSelectionMethod=J78Vo%7Ch&notBidSelectionMethod=gWbs2rJp9wR&notBidSelectionMethod=jZe&notBidSelectionMethod=pb9o&notBidSelectionMethod=M7xx9NWXHk&" + 
                    "planningLoc=J&planningLoc=KxO&planningLoc=&" + 
                    "tenderLoc=&" + 
                    "procuringEntityDepartmentId=3&procuringEntityDepartmentId=164&procuringEntityDepartmentId=920&procuringEntityDepartmentId=48&" + 
                    "procuringEntityGroupId=&" + 
                    "month=-587&" + 
                    "pageNumber=287&" + 
                    "minTenderValue=0.6385333591317831&" + 
                    "minAwardValue=-0.8632494567572961&" + 
                    "maxAwardValue=0.24820904721998593&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "skip=2&" + 
                    "class=2TZixGfG2UodsG1&" + 
                    "yearFilterPagingRequest=ODiDsGvO3R8N")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(-587.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/countBidPlansByYear"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/countBidPlansByYear'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/countBidPlansByYear?" + 
                    "bidTypeId=c2p8q1kqu6709&bidTypeId=&bidTypeId=fuCsVehNk&" + 
                    "notBidTypeId=qAnWjk&notBidTypeId=teehvxvDmx3&notBidTypeId=P&notBidTypeId=0AzwF81zhA6iK&" + 
                    "notProcuringEntityId=GD&notProcuringEntityId=BN33In9yC7EjD&notProcuringEntityId=VyKDiPv&notProcuringEntityId=EiIc0z3TP0&notProcuringEntityId=qF_H&" + 
                    "supplierId=89Bpxs8NG0mfh&supplierId=TlBUuDiYCL&" + 
                    "bidSelectionMethod=qoiuljlN1L0Ak&bidSelectionMethod=5IVJP&bidSelectionMethod=hWQmHDR&bidSelectionMethod=dd5CQw&bidSelectionMethod=QnlB_SyPyVi&" + 
                    "notBidSelectionMethod=J78Vo%7Ch&notBidSelectionMethod=gWbs2rJp9wR&notBidSelectionMethod=jZe&notBidSelectionMethod=pb9o&notBidSelectionMethod=M7xx9NWXHk&" + 
                    "contrMethod=jG&contrMethod=g0jU6ja3&contrMethod=glO8iOxb1B&contrMethod=z06681Ur&" + 
                    "tenderLoc=&" + 
                    "procuringEntityCityId=aKsGV6r03OgF&" + 
                    "procuringEntityDepartmentId=3&procuringEntityDepartmentId=164&procuringEntityDepartmentId=920&procuringEntityDepartmentId=48&" + 
                    "pageNumber=287&" + 
                    "pageSize=264&" + 
                    "minAwardValue=-0.8632494567572961&" + 
                    "maxAwardValue=0.24820904721998593&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "skip=IvveZyZRb&" + 
                    "class=Y4&" + 
                    "yearFilterPagingRequest=i8qOOkfPlNhf&" + 
                    "username=4p_QlGx1plviU")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[4]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[4]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[4]", "notProcuringEntityId[4]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[4]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notProcuringEntityId[4]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notProcuringEntityId[4]"))
                .body("'errors'[0].'rejectedValue'", containsString("qF_H"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/countBidPlansByYear"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/excelExport'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/excelExport?" + 
                    "bidTypeId=r&bidTypeId=py1E&bidTypeId=Le7FqG_7DsvNZxp&bidTypeId=6XAbjWLZKzJ&bidTypeId=5KSbH9OtI&" + 
                    "notBidTypeId=&" + 
                    "procuringEntityId=hEaaI&procuringEntityId=vBeKM5RR&procuringEntityId=nvOD&" + 
                    "supplierId=Ca3&supplierId=YeFwGrkLYFhR0z35&supplierId=kGU3rjDHretee&supplierId=jZZJIRBP&supplierId=&" + 
                    "bidSelectionMethod=&" + 
                    "contrMethod=rZ1XgY6kXsWIUK&contrMethod=mDHoYS&" + 
                    "procuringEntityCityId=&" + 
                    "month=77&" + 
                    "pageSize=786&" + 
                    "minTenderValue=0.5722801653735644&" + 
                    "maxTenderValue=0.2973056518820044&" + 
                    "minAwardValue=0.6241941498622153&" + 
                    "flagged=false&" + 
                    "class=2BSZtBNkMKwq8lk3&" + 
                    "yearFilterPagingRequest=SB9VSIxnxLg5jVmS")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(77.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[2]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[2]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[2]", "bidTypeId[2]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("bidTypeId[2]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("bidTypeId[2]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("bidTypeId[2]"))
                .body("'errors'[1].'rejectedValue'", containsString("Le7FqG_7DsvNZxp"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/ocds/excelExport"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/flags/i085/releases'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i085/releases?" + 
                    "notBidTypeId=_EM_34462_XYZ_&notBidTypeId=_EM_34463_XYZ_&notBidTypeId=5ElI&notBidTypeId=o74&" + 
                    "procuringEntityId=turXqZRnOi&procuringEntityId=Ikw&" + 
                    "supplierId=lZsi&supplierId=&supplierId=E4gchRPeFaONGT&" + 
                    "notBidSelectionMethod=ukBBXH06WYse&" + 
                    "tenderLoc=unj280aon2S8Bvs&" + 
                    "procuringEntityCityId=_EM_34464_XYZ_&procuringEntityCityId=e&procuringEntityCityId=_EM_34465_XYZ_&" + 
                    "procuringEntityGroupId=561&procuringEntityGroupId=787&procuringEntityGroupId=98&procuringEntityGroupId=718&" + 
                    "month=611&month=1248&" + 
                    "pageSize=993&" + 
                    "minTenderValue=0.1130194879906894&" + 
                    "minAwardValue=0.37676912542556196&" + 
                    "maxAwardValue=0.977210489946109&" + 
                    "monthly=false&" + 
                    "yearFilterPagingRequest=0MrtBni6EKacSM")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(2))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(611.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(1248.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notBidTypeId[1]", "EachPattern.yearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[1]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notBidTypeId[1]", "notBidTypeId[1]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[1]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("notBidTypeId[1]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("notBidTypeId[1]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_34462_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/flags/i085/releases"));
    }
}
