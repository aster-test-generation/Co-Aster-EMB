package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_2039_test_2039_getOnI171StatsWithQueryParamsMonthlyReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (400) POST:/api/flags/i171/stats
    * 2 - (400) GET:/api/flags/i171/stats
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_2039_getOnI171StatsWithQueryParamsMonthlyReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/flags/i171/stats'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i171/stats?" + 
                    "notProcuringEntityId=_EM_21306_XYZ_&notProcuringEntityId=_EM_21307_XYZ_&notProcuringEntityId=_EM_21308_XYZ_&" + 
                    "bidSelectionMethod=&" + 
                    "notBidSelectionMethod=_EM_21310_XYZ_&notBidSelectionMethod=ywN2cBDRe8l&notBidSelectionMethod=wTGS90835tR0&notBidSelectionMethod=mEwgxfnL&notBidSelectionMethod=IZ2j8&" + 
                    "planningLoc=_EM_21314_XYZ_&planningLoc=_EM_21315_XYZ_&planningLoc=rj0Pgusv89QcFidS&planningLoc=&planningLoc=1_O3djn&" + 
                    "tenderLoc=8kMA842IzkXBEa&tenderLoc=9Wuz3Sa&tenderLoc=HL&" + 
                    "procuringEntityDepartmentId=812&procuringEntityDepartmentId=954&" + 
                    "year=770&year=86&year=947&year=314&year=703&" + 
                    "month=&" + 
                    "pageNumber=-660371633&" + 
                    "pageSize=512&" + 
                    "minTenderValue=0.20856923967858654&" + 
                    "maxTenderValue=0.1716638171701662&" + 
                    "flagged=true&" + 
                    "monthly=true")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(3))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[0]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[0]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[0]", "notProcuringEntityId[0]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_21306_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("Min.yearFilterPagingRequest.pageNumber", "Min.pageNumber", "Min.java.lang.Integer", "Min"))
                .body("'errors'[1].'arguments'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.pageNumber", "pageNumber"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("pageNumber"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("pageNumber"))
                .body("'errors'[1].'arguments'[1]", numberMatches(0.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be greater than or equal to 0"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("pageNumber"))
                .body("'errors'[1].'rejectedValue'", numberMatches(-6.60371633E8))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("Min"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[2].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[2].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[2].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("year"))
                .body("'errors'[2].'rejectedValue'.size()", equalTo(5))
                .body("'errors'[2].'rejectedValue'[0]", numberMatches(86.0))
                .body("'errors'[2].'rejectedValue'[1]", numberMatches(314.0))
                .body("'errors'[2].'rejectedValue'[2]", numberMatches(703.0))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 3"))
                .body("'path'", containsString("/api/flags/i171/stats"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/flags/i171/stats'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i171/stats?" + 
                    "bidTypeId=K7u5cMXACZll&bidTypeId=_EM_21321_XYZ_&" + 
                    "procuringEntityId=AcOyZGh1&procuringEntityId=_EM_21323_XYZ_&procuringEntityId=fchqrla&procuringEntityId=_EM_21324_XYZ_&" + 
                    "notProcuringEntityId=aXMyP1yuZeWd9&notProcuringEntityId=CjoufAPJoCx&notProcuringEntityId=_EM_21325_XYZ_&" + 
                    "supplierId=M2C0eY&" + 
                    "notBidSelectionMethod=&notBidSelectionMethod=_EM_21326_XYZ_&notBidSelectionMethod=_EM_21327_XYZ_&notBidSelectionMethod=mEwgxfnL&notBidSelectionMethod=IZ2j8&" + 
                    "contrMethod=h_YvkCBrG87f&contrMethod=_EM_21328_XYZ_&contrMethod=t6Lz53a2U&contrMethod=_XtVzAR15Sd&contrMethod=_EM_21329_XYZ_&" + 
                    "tenderLoc=8kMA842IzkXBEa&tenderLoc=9Wuz3Sa&tenderLoc=HL&" + 
                    "procurementMethod=TBJNn2DffP&procurementMethod=BDq4FYUQxJij3&procurementMethod=hm0T&procurementMethod=_EM_21333_XYZ_&procurementMethod=_EM_21334_XYZ_&" + 
                    "procuringEntityCityId=_EM_21335_XYZ_&procuringEntityCityId=vY0ZfgMHA&procuringEntityCityId=_EM_21336_XYZ_&" + 
                    "procuringEntityDepartmentId=812&procuringEntityDepartmentId=954&" + 
                    "month=&" + 
                    "maxTenderValue=0.1716638171701662&" + 
                    "monthly=true")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[1]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[1]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[1]", "procuringEntityId[1]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[1]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("procuringEntityId[1]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("procuringEntityId[1]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_21323_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[1]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[1]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[1]", "notProcuringEntityId[1]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_21325_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.contrMethod[0]", "EachPattern.yearFilterPagingRequest.contrMethod", "EachPattern.contrMethod[0]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.contrMethod[0]", "contrMethod[0]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("contrMethod[0]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("contrMethod[0]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("contrMethod[0]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_21328_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 4"))
                .body("'path'", containsString("/api/flags/i171/stats"));
    }
}
