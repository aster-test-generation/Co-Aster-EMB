package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_1377_test_1377_getOnTendersByItemExcelChartReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (400) POST:/api/ocds/tendersByItemExcelChart
    * 2 - (400) GET:/api/ocds/tendersByItemExcelChart
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_1377_getOnTendersByItemExcelChartReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/tendersByItemExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/tendersByItemExcelChart?" + 
                    "bidTypeId=5_cUq&" + 
                    "procuringEntityId=_EM_14230_XYZ_&procuringEntityId=_EM_14231_XYZ_&procuringEntityId=W6H&procuringEntityId=WdjjpNrFvxY0jMH&procuringEntityId=_EM_14233_XYZ_&" + 
                    "notProcuringEntityId=QnEQD&notProcuringEntityId=_EM_36470_XYZ_&notProcuringEntityId=oGUcfKVlYb&notProcuringEntityId=&" + 
                    "supplierId=&supplierId=LPmjrQUJVz&supplierId=_GM_U%3C238_XYZ_&" + 
                    "bidSelectionMethod=_EM_14218_XYZ_&bidSelectionMethod=L01WcL&bidSelectionMethod=wum7H8&bidSelectionMethod=1ad&bidSelectionMethod=&" + 
                    "notBidSelectionMethod=_EM_36471_XYZ_&" + 
                    "contrMethod=_EM_36610_XYZ_&contrMethod=0&contrMethod=0prIQ&contrMethod=PxhGRH&contrMethod=PxizCQaaOt5F8f1&" + 
                    "planningLoc=JW&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=_EM_14221_XYZ_&procurementMethod=wImDCovuyEB8aevy&procurementMethod=_EM_14223_XYZ_&procurementMethod=6HLFVjMa4iqKCg7l&procurementMethod=3PCglJSDK1O&" + 
                    "procuringEntityCityId=_EMU364U7UUU%5E_&procuringEntityCityId=BRSszTCdeYpu&" + 
                    "procuringEntityDepartmentId=551&procuringEntityDepartmentId=-45&" + 
                    "procuringEntityGroupId=365&procuringEntityGroupId=272&procuringEntityGroupId=960&procuringEntityGroupId=870&procuringEntityGroupId=339&" + 
                    "year=-265916449&year=141&year=308872588&year=705&year=268&" + 
                    "month=0&month=8&month=0&month=0&" + 
                    "pageNumber=536871489&" + 
                    "pageSize=262727&" + 
                    "minTenderValue=1.4418548968981408&" + 
                    "maxTenderValue=2781.685128059276&" + 
                    "minAwardValue=0.10301500914123884&" + 
                    "maxAwardValue=0.21375180206505517&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "password=0_ipXe%C2%82pAMk&" + 
                    "langYearFilterPagingRequest=_EM_36472_XYZ_&" + 
                    "username=cFxay")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(7))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("Range.langYearFilterPagingRequest.pageSize", "Range.pageSize", "Range.java.lang.Integer", "Range"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.pageSize", "pageSize"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("pageSize"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("pageSize"))
                .body("'errors'[0].'arguments'[1]", numberMatches(1000.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 1000"))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("pageSize"))
                .body("'errors'[0].'rejectedValue'", numberMatches(262727.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("Range"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.notProcuringEntityId[2]", "EachPattern.langYearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[2]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.notProcuringEntityId[2]", "notProcuringEntityId[2]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_36470_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.contrMethod[4]", "EachPattern.langYearFilterPagingRequest.contrMethod", "EachPattern.contrMethod[4]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.contrMethod[4]", "contrMethod[4]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("contrMethod[4]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("contrMethod[4]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("contrMethod[4]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_36610_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                // Skipping assertions on the remaining 4 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 7"))
                .body("'path'", containsString("/api/ocds/tendersByItemExcelChart"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/tendersByItemExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/tendersByItemExcelChart?" + 
                    "bidTypeId=5_cUq&" + 
                    "notBidTypeId=NDePPht6&notBidTypeId=_EM_14228_XYZ_&notBidTypeId=FRAUD&notBidTypeId=_EM_14229_XYZ_&" + 
                    "procuringEntityId=&procuringEntityId=LW&procuringEntityId=&procuringEntityId=WdjjpNrFvxY8jMH&procuringEntityId=52&" + 
                    "notProcuringEntityId=QnEQD&notProcuringEntityId=_EM_36470_XYZ_&notProcuringEntityId=oGUcfKVlYb&notProcuringEntityId=&" + 
                    "supplierId=U&supplierId=LPmjrQUJVz&supplierId=_GM_U%3C238_XYZ_&" + 
                    "notBidSelectionMethod=APsI3s85L8c&" + 
                    "planningLoc=JU&" + 
                    "procurementMethod=_EM_14221_XYZ_&procurementMethod=wImDCovuyEB8aevy&procurementMethod=_EM_14223_XYZ_&procurementMethod=6HLFVjMa4iqKCg7l&procurementMethod=3PCglJSDK1O&" + 
                    "procuringEntityCityId=_EM_36468_XYZ_&procuringEntityCityId=BRSszTCdeYpuC&" + 
                    "procuringEntityDepartmentId=551&procuringEntityDepartmentId=-45&" + 
                    "pageNumber=536871489&" + 
                    "minTenderValue=1.4418548968981408&" + 
                    "maxTenderValue=2781.685128059276&" + 
                    "minAwardValue=0.10301500914123884&" + 
                    "maxAwardValue=0.21375180206505517")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(3))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.notBidTypeId[2]", "EachPattern.langYearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[2]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.notBidTypeId[2]", "notBidTypeId[2]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[2]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notBidTypeId[2]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notBidTypeId[2]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_14228_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.bidTypeId[0]", "EachPattern.langYearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[0]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.bidTypeId[0]", "bidTypeId[0]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("bidTypeId[0]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("bidTypeId[0]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("bidTypeId[0]"))
                .body("'errors'[1].'rejectedValue'", containsString("5_cUq"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.notProcuringEntityId[2]", "EachPattern.langYearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[2]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.notProcuringEntityId[2]", "notProcuringEntityId[2]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_36470_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 3"))
                .body("'path'", containsString("/api/ocds/tendersByItemExcelChart"));
    }
}
