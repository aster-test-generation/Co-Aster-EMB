package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_163_test_163_getOnPlanningByLocationReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (200) POST:/api/planningByLocation
    * 2 - (400) GET:/api/planningByLocation
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_163_getOnPlanningByLocationReturnsMismatchResponseWithSchema() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/planningByLocation?" + 
                    "notProcuringEntityId=T0OV5ADe0fme&notProcuringEntityId=2fhmkVD9I&notProcuringEntityId=IGz1QrN&notProcuringEntityId=lwuxG80y&" + 
                    "supplierId=_EM_7529_XYZ_&" + 
                    "bidSelectionMethod=KE0WwGEc&bidSelectionMethod=_EM_7530_XYZ_&bidSelectionMethod=2gsat0&bidSelectionMethod=qGU&" + 
                    "notBidSelectionMethod=yCRp4jdY&notBidSelectionMethod=_EM_7531_XYZ_&notBidSelectionMethod=_EM_7532_XYZ_&notBidSelectionMethod=xtSt&notBidSelectionMethod=8QUVmomJO&" + 
                    "tenderLoc=_EM_7536_XYZ_&tenderLoc=P4rXMfbbI1XAgZ6W&tenderLoc=_EM_7537_XYZ_&tenderLoc=R&" + 
                    "procurementMethod=_EM_7538_XYZ_&procurementMethod=NB_Xup_BHy7xf6&procurementMethod=LloWzeCYTmBBC&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityGroupId=411&procuringEntityGroupId=462&procuringEntityGroupId=934&" + 
                    "minAwardValue=0.12331846082259013&" + 
                    "maxAwardValue=0.4400467664017188&" + 
                    "electronicSubmission=false&" + 
                    "monthly=false&" + 
                    "skip=I7b8_P1f_yQlND&" + 
                    "class=huZUKwS5&" + 
                    "yearFilterPagingRequest=_6zXsjrceEHEDo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/planningByLocation'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/planningByLocation?" + 
                    "bidTypeId=lNfMEck&bidTypeId=NUd0r&bidTypeId=PDND&bidTypeId=Pvf&bidTypeId=4&" + 
                    "notBidTypeId=pJTjwix&notBidTypeId=uRm6_st&" + 
                    "bidSelectionMethod=KE0WwGEc&bidSelectionMethod=_EM_7541_XYZ_&bidSelectionMethod=2gsat0&bidSelectionMethod=_EM_7542_XYZ_&" + 
                    "contrMethod=zBgPlZfQpcBwC5v1&contrMethod=_EM_7547_XYZ_&contrMethod=E72jqYJK8fQ8&contrMethod=32hsc3JtpvypXa&" + 
                    "planningLoc=_EM_7548_XYZ_&" + 
                    "tenderLoc=_EM_7549_XYZ_&tenderLoc=_EM_7550_XYZ_&tenderLoc=q&tenderLoc=_EM_7551_XYZ_&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=&" + 
                    "month=489&month=667&month=142&month=571&month=835&" + 
                    "pageNumber=438&" + 
                    "pageSize=463&" + 
                    "minTenderValue=0.7490771910125187&" + 
                    "minAwardValue=0.12331846082259013&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "skip=xM&" + 
                    "class=XlVaYD5u&" + 
                    "yearFilterPagingRequest=Etoy0UoahdVe")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(3))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.contrMethod[2]", "EachPattern.yearFilterPagingRequest.contrMethod", "EachPattern.contrMethod[2]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.contrMethod[2]", "contrMethod[2]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("contrMethod[2]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("contrMethod[2]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("contrMethod[2]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_7547_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[1].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("month"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(5))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(142.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(489.0))
                .body("'errors'[1].'rejectedValue'[2]", numberMatches(571.0))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notBidTypeId[1]", "EachPattern.yearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[1]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notBidTypeId[1]", "notBidTypeId[1]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[1]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("notBidTypeId[1]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("notBidTypeId[1]"))
                .body("'errors'[2].'rejectedValue'", containsString("uRm6_st"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 3"))
                .body("'path'", containsString("/api/planningByLocation"));
    }
}
