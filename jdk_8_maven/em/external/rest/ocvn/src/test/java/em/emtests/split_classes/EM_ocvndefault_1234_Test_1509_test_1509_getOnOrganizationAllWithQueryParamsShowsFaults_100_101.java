package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_1509_test_1509_getOnOrganizationAllWithQueryParamsShowsFaults_100_101 {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (200) GET:/api/ocds/location/search
    * 2 - (200) POST:/api/ocds/location/all
    * 3 - (200) POST:/api/ocds/location/all
    * 4 - (400) POST:/api/countTendersByYear
    * 5 - (400) POST:/api/countTendersByYear
    * 6 - (400) POST:/api/ocds/procurementMethodExcelChart
    * 7 - (400) GET:/api/ocds/procurementMethodExcelChart
    * 8 - (500) POST:/api/ocds/cancelledFundingExcelChart
    * 9 - (400) GET:/api/ocds/cancelledFundingExcelChart
    * 10 - (400) GET:/api/ocds/organization/all
    * Found 8 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_1509_getOnOrganizationAllWithQueryParamsShowsFaults_100_101() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageNumber=117&" + 
                    "pageSize=587&" + 
                    "password=HePnsd&" + 
                    "skip=GLXCzzV1&" + 
                    "class=_EM_35299_XYZ_&" + 
                    "textSearchRequest=_EM_31075_XYZ_&" + 
                    "username=a7NO")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/all?" + 
                    "password=HePnsd&" + 
                    "username=a7NO")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/countTendersByYear'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/countTendersByYear?" + 
                    "bidTypeId=COLLUSION&bidTypeId=COLLUSION&bidTypeId=_EM_31102_XYZ_&" + 
                    "notBidTypeId=zigNYejXvh_&notBidTypeId=BY4xVEgug&notBidTypeId=BVuqZ1gm3s0Nejr&notBidTypeId=sztD584dQ&" + 
                    "procuringEntityId=bxmWX26dp5k&" + 
                    "supplierId=_EM_35300_XYZ_&supplierId=4luE5b1VQK&" + 
                    "bidSelectionMethod=9%5D87&bidSelectionMethod=_EM_35303_XYZ_&" + 
                    "contrMethod=bb&contrMethod=_EM_31081_XYZ_&contrMethod=ayi7aybY75fxQS&" + 
                    "tenderLoc=rakvQ5T&tenderLoc=pdTzh13FchcDOzy&tenderLoc=epREywIOXL&" + 
                    "month=738&month=64&month=863&" + 
                    "minTenderValue=0.55299775310529&" + 
                    "maxTenderValue=0.8692608619614389&" + 
                    "flagged=true&" + 
                    "yearFilterPagingRequest=VfMqR5I")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[1]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[1]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[1]", "bidTypeId[1]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("bidTypeId[1]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("bidTypeId[1]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("bidTypeId[1]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_31102_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.contrMethod[0]", "EachPattern.yearFilterPagingRequest.contrMethod", "EachPattern.contrMethod[0]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.contrMethod[0]", "contrMethod[0]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("contrMethod[0]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("contrMethod[0]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("contrMethod[0]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_31081_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notBidTypeId[3]", "EachPattern.yearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[3]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notBidTypeId[3]", "notBidTypeId[3]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[3]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("notBidTypeId[3]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("notBidTypeId[3]"))
                .body("'errors'[2].'rejectedValue'", containsString("zigNYejXvh_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 4"))
                .body("'path'", containsString("/api/countTendersByYear"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/countTendersByYear'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/countTendersByYear?" + 
                    "bidTypeId=COLLUSION&bidTypeId=COLLUSION&bidTypeId=_EM_31102_XYZ_&" + 
                    "notBidTypeId=zigNYejXvh_&notBidTypeId=BY4xVEgug&notBidTypeId=BVuqZ1gm3s0Nejr&notBidTypeId=sztD584dQ&" + 
                    "notProcuringEntityId=_EM_31104_XYZ_&notProcuringEntityId=_EM_35301_XYZ_&notProcuringEntityId=qv&notProcuringEntityId=Q_&" + 
                    "bidSelectionMethod=9%5D87&bidSelectionMethod=_EM_35303_XYZ_&" + 
                    "tenderLoc=_EM_31094_XYZ_&tenderLoc=pdTzh13FchcDOzy&tenderLoc=_EM_31095_XYZ_&" + 
                    "procuringEntityDepartmentId=1711269866&" + 
                    "procuringEntityGroupId=-755410067&" + 
                    "month=738&month=64&month=863&" + 
                    "maxTenderValue=0.8692608619614389&" + 
                    "minAwardValue=0.49549394975938676&" + 
                    "maxAwardValue=0.35656346424310703&" + 
                    "flagged=true&" + 
                    "skip=GLXCzzV1&" + 
                    "password=HePnsd&" + 
                    "class=_EM_35299_XYZ_&" + 
                    "yearFilterPagingRequest=2qntctep&" + 
                    "username=a7NO")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(3))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(64.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(738.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(863.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[1]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[1]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[1]", "bidTypeId[1]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("bidTypeId[1]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("bidTypeId[1]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("bidTypeId[1]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_31102_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notBidTypeId[3]", "EachPattern.yearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[3]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notBidTypeId[3]", "notBidTypeId[3]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[3]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("notBidTypeId[3]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("notBidTypeId[3]"))
                .body("'errors'[2].'rejectedValue'", containsString("zigNYejXvh_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 4"))
                .body("'path'", containsString("/api/countTendersByYear"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/procurementMethodExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/procurementMethodExcelChart?" + 
                    "bidTypeId=COLLUSION&bidTypeId=COLLUSION&bidTypeId=_EM_31102_XYZ_&" + 
                    "procuringEntityId=_EM_31103_XYZ_&" + 
                    "notProcuringEntityId=_EM_31104_XYZ_&notProcuringEntityId=_EM_35301_XYZ_&notProcuringEntityId=qv&notProcuringEntityId=Q_&" + 
                    "supplierId=_EM_35300_XYZ_&supplierId=4luE5b1VQKs&" + 
                    "bidSelectionMethod=9%5D87&bidSelectionMethod=_EM_35303_XYZ_&" + 
                    "planningLoc=7DsBJ_&planningLoc=_EM_31107_XYZ_&planningLoc=vLZtxh&planningLoc=_EM_35302_XYZ_&" + 
                    "procuringEntityCityId=_EM_31135_XYZ_&procuringEntityCityId=BtnX1ZiCKkbu&procuringEntityCityId=phH9unE&" + 
                    "procuringEntityDepartmentId=1711269866&" + 
                    "procuringEntityGroupId=-755410067&" + 
                    "month=738&month=64&month=863&" + 
                    "maxAwardValue=0.35656346424310703&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "langYearFilterPagingRequest=Y4ql9LSG0RO8EKZ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.notProcuringEntityId[0]", "EachPattern.langYearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[0]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.notProcuringEntityId[0]", "notProcuringEntityId[0]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[0].'rejectedValue'", containsString("Q_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.langYearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.month", "month"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[1].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[1].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("month"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(3))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(64.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(738.0))
                .body("'errors'[1].'rejectedValue'[2]", numberMatches(863.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.procuringEntityId[0]", "EachPattern.langYearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[0]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.procuringEntityId[0]", "procuringEntityId[0]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[0]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("procuringEntityId[0]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("procuringEntityId[0]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_31103_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 4"))
                .body("'path'", containsString("/api/ocds/procurementMethodExcelChart"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/procurementMethodExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/procurementMethodExcelChart?" + 
                    "supplierId=_EM_35300_XYZ_&supplierId=4luE5b1VQKs&" + 
                    "bidSelectionMethod=9%5D87&bidSelectionMethod=_EM_35303_XYZ_&" + 
                    "notBidSelectionMethod=_EM_31119_XYZ_&notBidSelectionMethod=oDPLVPLaRM9rxjtH&notBidSelectionMethod=cVWx&" + 
                    "planningLoc=7DsBJ_&planningLoc=_EM_31107_XYZ_&planningLoc=vLZtxh&planningLoc=_EM_35302_XYZ_&" + 
                    "procuringEntityCityId=_EM_31135_XYZ_&procuringEntityCityId=BtnX1ZiCKkbu&procuringEntityCityId=phH9unE&" + 
                    "procuringEntityDepartmentId=1711269866&" + 
                    "month=738&month=64&month=863&" + 
                    "pageNumber=117&" + 
                    "minTenderValue=0.55299775310529&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "password=HePnsd&" + 
                    "class=_EM_35299_XYZ_&" + 
                    "langYearFilterPagingRequest=_EM_35304_XYZ_&" + 
                    "username=a7NO")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.langYearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(3))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(64.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(738.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(863.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/ocds/procurementMethodExcelChart"));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/spring/TranslationService_40_ensureLanguageLoaded.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/ocds/cancelledFundingExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/cancelledFundingExcelChart?" + 
                    "supplierId=_EM_35300_XYZ_&supplierId=4luE5b1VQKs&" + 
                    "bidSelectionMethod=9%5D87&bidSelectionMethod=_EM_35303_XYZ_&" + 
                    "notBidSelectionMethod=8_wGifpPPDQP5o&notBidSelectionMethod=_EM_31130_XYZ_&notBidSelectionMethod=cVWx&" + 
                    "planningLoc=7DsBJ_&planningLoc=_EM_31107_XYZ_&planningLoc=vLZtxh&planningLoc=_EM_35302_XYZ_&" + 
                    "tenderLoc=_EM_31133_XYZ_&tenderLoc=pdTzh13FchcDOzy&tenderLoc=epREywIOXL&" + 
                    "procuringEntityCityId=_EM_31135_XYZ_&procuringEntityCityId=BtnX1ZiCKkbu&procuringEntityCityId=phH9unE&" + 
                    "procuringEntityDepartmentId=1711269866&" + 
                    "procuringEntityGroupId=-755410067&" + 
                    "pageSize=587&" + 
                    "maxTenderValue=0.8692608619614389&" + 
                    "maxAwardValue=0.35656346424310703&" + 
                    "monthly=false&" + 
                    "langYearFilterPagingRequest=g4nQpUeYum2Pjknt")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/spring/TranslationService_40_ensureLanguageLoaded
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("Language must not be null!"))
                .body("'path'", containsString("/api/ocds/cancelledFundingExcelChart"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/cancelledFundingExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/cancelledFundingExcelChart?" + 
                    "bidTypeId=COLLUSION&bidTypeId=COLLUSION&bidTypeId=_EM_31102_XYZ_&" + 
                    "procuringEntityId=bxmWX26dp5k&" + 
                    "notProcuringEntityId=_EM_31104_XYZ_&notProcuringEntityId=_EM_35301_XYZ_&notProcuringEntityId=qv&notProcuringEntityId=Q_&" + 
                    "supplierId=_EM_35300_XYZ_&supplierId=4luE5b1VQK&" + 
                    "bidSelectionMethod=9%5D87&bidSelectionMethod=_EM_35303_XYZ_&" + 
                    "notBidSelectionMethod=8_wGifpPPDQP5o&notBidSelectionMethod=_EM_31144_XYZ_&notBidSelectionMethod=_EM_31145_XYZ_&" + 
                    "procurementMethod=_EM_31149_XYZ_&procurementMethod=Fn9UfKgm9sH&procurementMethod=_EM_31150_XYZ_&procurementMethod=xSU90ep&" + 
                    "procuringEntityCityId=_EM_31135_XYZ_&procuringEntityCityId=BtnX1ZiCKkbu&procuringEntityCityId=phH9unE&" + 
                    "pageNumber=117&" + 
                    "pageSize=587&" + 
                    "minTenderValue=0.55299775310529&" + 
                    "maxTenderValue=0.8692608619614389&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "skip=GLXCzzV1&" + 
                    "password=HePnsd&" + 
                    "class=_EM_35299_XYZ_&" + 
                    "langYearFilterPagingRequest=_EM_35304_XYZ_&" + 
                    "username=a7NO")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.bidTypeId[1]", "EachPattern.langYearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[1]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.bidTypeId[1]", "bidTypeId[1]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("bidTypeId[1]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("bidTypeId[1]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("bidTypeId[1]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_31102_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.notProcuringEntityId[0]", "EachPattern.langYearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[0]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.notProcuringEntityId[0]", "notProcuringEntityId[0]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[1].'rejectedValue'", containsString("Q_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/ocds/cancelledFundingExcelChart"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/organization/all'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/organization/all?" + 
                    "password=UZ&" + 
                    "pageNumber=_EM_35305_XYZ_&" + 
                    "pageSize=_EM_35306_XYZ_&" + 
                    "class=LHEJsmozIBkP&" + 
                    "textSearchRequest=mYsaqZNLVc")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("typeMismatch.textSearchRequest.pageNumber", "typeMismatch.pageNumber", "typeMismatch.java.lang.Integer", "typeMismatch"))
                .body("'errors'[0].'arguments'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("textSearchRequest.pageNumber", "pageNumber"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("pageNumber"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("pageNumber"))
                .body("'errors'[0].'defaultMessage'", containsString("Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'pageNumber'; nested exception is java.lang.NumberFormatException: For input string: \"_EM_35305_XYZ_\""))
                .body("'errors'[0].'objectName'", containsString("textSearchRequest"))
                .body("'errors'[0].'field'", containsString("pageNumber"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_35305_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(true))
                .body("'errors'[0].'code'", containsString("typeMismatch"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("typeMismatch.textSearchRequest.pageSize", "typeMismatch.pageSize", "typeMismatch.java.lang.Integer", "typeMismatch"))
                .body("'errors'[1].'arguments'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("textSearchRequest.pageSize", "pageSize"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("pageSize"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("pageSize"))
                .body("'errors'[1].'defaultMessage'", containsString("Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'pageSize'; nested exception is java.lang.NumberFormatException: For input string: \"_EM_35306_XYZ_\""))
                .body("'errors'[1].'objectName'", containsString("textSearchRequest"))
                .body("'errors'[1].'field'", containsString("pageSize"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_35306_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(true))
                .body("'errors'[1].'code'", containsString("typeMismatch"))
                .body("'message'", containsString("Validation failed for object='textSearchRequest'. Error count: 2"))
                .body("'path'", containsString("/api/ocds/organization/all"));
    }
}
