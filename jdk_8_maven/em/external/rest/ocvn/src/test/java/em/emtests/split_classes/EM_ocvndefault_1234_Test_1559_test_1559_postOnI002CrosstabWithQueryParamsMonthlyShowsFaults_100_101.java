package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_1559_test_1559_postOnI002CrosstabWithQueryParamsMonthlyShowsFaults_100_101 {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (400) POST:/api/ocds/location/search
    * 2 - (400) POST:/api/ocds/location/search
    * 3 - (200) POST:/api/ocds/location/all
    * 4 - (200) POST:/api/ocds/location/all
    * 5 - (400) POST:/api/ocds/averageNumberBidsExcelChart
    * 6 - (400) GET:/api/ocds/averageNumberBidsExcelChart
    * 7 - (400) POST:/api/ocds/cancelledFundingExcelChart
    * 8 - (400) POST:/api/percentTendersUsingEgp
    * 9 - (500) POST:/api/totalProjectsByYear
    * 10 - (400) POST:/api/flags/i002/crosstab
    * Found 9 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_1559_postOnI002CrosstabWithQueryParamsMonthlyShowsFaults_100_101() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/location/search'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageSize=-1047824&" + 
                    "text=f&" + 
                    "password=zQxp0jRpUnz&" + 
                    "textSearchRequest=r8R3clFfwlX&" + 
                    "username=_EM_30249_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("Range.textSearchRequest.pageSize", "Range.pageSize", "Range.java.lang.Integer", "Range"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("textSearchRequest.pageSize", "pageSize"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("pageSize"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("pageSize"))
                .body("'errors'[0].'arguments'[1]", numberMatches(1000.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 1000"))
                .body("'errors'[0].'objectName'", containsString("textSearchRequest"))
                .body("'errors'[0].'field'", containsString("pageSize"))
                .body("'errors'[0].'rejectedValue'", numberMatches(-1047824.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("Range"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("Size.textSearchRequest.text", "Size.text", "Size.java.lang.String", "Size"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("textSearchRequest.text", "text"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("text"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("text"))
                .body("'errors'[1].'arguments'[1]", numberMatches(30.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(3.0))
                .body("'errors'[1].'defaultMessage'", containsString("size must be between 3 and 30"))
                .body("'errors'[1].'objectName'", containsString("textSearchRequest"))
                .body("'errors'[1].'field'", containsString("text"))
                .body("'errors'[1].'rejectedValue'", containsString("f"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("Size"))
                .body("'message'", containsString("Validation failed for object='textSearchRequest'. Error count: 2"))
                .body("'path'", containsString("/api/ocds/location/search"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/location/search'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "text=f&" + 
                    "skip=_EM_30241_XYZ_&" + 
                    "class=e&" + 
                    "textSearchRequest=_EM_30242_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("Size.textSearchRequest.text", "Size.text", "Size.java.lang.String", "Size"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("textSearchRequest.text", "text"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("text"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("text"))
                .body("'errors'[0].'arguments'[1]", numberMatches(30.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(3.0))
                .body("'errors'[0].'defaultMessage'", containsString("size must be between 3 and 30"))
                .body("'errors'[0].'objectName'", containsString("textSearchRequest"))
                .body("'errors'[0].'field'", containsString("text"))
                .body("'errors'[0].'rejectedValue'", containsString("f"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("Size"))
                .body("'message'", containsString("Validation failed for object='textSearchRequest'. Error count: 1"))
                .body("'path'", containsString("/api/ocds/location/search"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/all?" + 
                    "password=_EM_30248_XYZ_&" + 
                    "username=QiU5vBS1XNT")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/averageNumberBidsExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/averageNumberBidsExcelChart?" + 
                    "procuringEntityId=d&procuringEntityId=7&procuringEntityId=vq_BgTjOd&" + 
                    "notProcuringEntityId=9G&notProcuringEntityId=F&notProcuringEntityId=_EM_29184_XYZ_&notProcuringEntityId=_EM_30250_XYZ_&notProcuringEntityId=&" + 
                    "supplierId=OMXVI%60Yi&" + 
                    "bidSelectionMethod=%3FBQ&" + 
                    "notBidSelectionMethod=kxicC4DPEkgXAt&" + 
                    "planningLoc=&" + 
                    "procurementMethod=_EM_30254_XYZ_&procurementMethod=_EM_30253_XYZ_&" + 
                    "procuringEntityCityId=J4QOzgRVp8Nys7EQ&procuringEntityCityId=xr&procuringEntityCityId=x1drRP&procuringEntityCityId=_EM_29211_XYZ_&procuringEntityCityId=NwfjWelPE5M&" + 
                    "procuringEntityDepartmentId=-261451&procuringEntityDepartmentId=974&procuringEntityDepartmentId=1591&procuringEntityDepartmentId=4235419&procuringEntityDepartmentId=649&" + 
                    "year=553&year=290&year=-31832&year=4605&" + 
                    "pageNumber=-4456231&" + 
                    "minAwardValue=1.0&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "language=AB211ITmb8_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.notProcuringEntityId[3]", "EachPattern.langYearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[3]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.notProcuringEntityId[3]", "notProcuringEntityId[3]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[3]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notProcuringEntityId[3]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notProcuringEntityId[3]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_29184_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.procuringEntityId[2]", "EachPattern.langYearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[2]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.procuringEntityId[2]", "procuringEntityId[2]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[2]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("procuringEntityId[2]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("procuringEntityId[2]"))
                .body("'errors'[1].'rejectedValue'", containsString("vq_BgTjOd"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("Min.langYearFilterPagingRequest.pageNumber", "Min.pageNumber", "Min.java.lang.Integer", "Min"))
                .body("'errors'[2].'arguments'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.pageNumber", "pageNumber"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("pageNumber"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("pageNumber"))
                .body("'errors'[2].'arguments'[1]", numberMatches(0.0))
                .body("'errors'[2].'defaultMessage'", containsString("must be greater than or equal to 0"))
                .body("'errors'[2].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("pageNumber"))
                .body("'errors'[2].'rejectedValue'", numberMatches(-4456231.0))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("Min"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 4"))
                .body("'path'", containsString("/api/ocds/averageNumberBidsExcelChart"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/averageNumberBidsExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/averageNumberBidsExcelChart?" + 
                    "bidTypeId=_EM_30251_XYZ_&" + 
                    "notBidTypeId=zU&notBidTypeId=jtb9HYeHZ&notBidTypeId=IOq5tPDF&notBidTypeId=jIxjVgGFsSlHfU2&notBidTypeId=qz&" + 
                    "procuringEntityId=d&procuringEntityId=7&procuringEntityId=vq_BgTjOd&" + 
                    "notProcuringEntityId=9G&notProcuringEntityId=F&notProcuringEntityId=_EM_29184_XYZ_&notProcuringEntityId=_EM_30250_XYZ_&notProcuringEntityId=&" + 
                    "supplierId=OMXVIbYi&" + 
                    "contrMethod=e0dAQaVeUf7tcL&contrMethod=_EM_30245_XYZ_&contrMethod=_EM_30246_XYZ_&" + 
                    "planningLoc=&" + 
                    "tenderLoc=7F&tenderLoc=_EM_30252_XYZ_&" + 
                    "procuringEntityDepartmentId=-261451&procuringEntityDepartmentId=974&procuringEntityDepartmentId=1463&procuringEntityDepartmentId=4194459&procuringEntityDepartmentId=648&" + 
                    "month=451&month=245&month=2181&" + 
                    "pageSize=-1047824&" + 
                    "minTenderValue=870437.5607599824&" + 
                    "maxTenderValue=5892.0949613617&" + 
                    "monthly=false&" + 
                    "language=AB211ITmb8_&" + 
                    "skip=_EM_30241_XYZ_&" + 
                    "password=_EM_30248_XYZ_&" + 
                    "langYearFilterPagingRequest=aQjSvWGJUL&" + 
                    "username=QiU5vBS1XNT")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(6))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.procuringEntityId[2]", "EachPattern.langYearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[2]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.procuringEntityId[2]", "procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'rejectedValue'", containsString("vq_BgTjOd"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("Range.langYearFilterPagingRequest.pageSize", "Range.pageSize", "Range.java.lang.Integer", "Range"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.pageSize", "pageSize"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("pageSize"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("pageSize"))
                .body("'errors'[1].'arguments'[1]", numberMatches(1000.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1 and 1000"))
                .body("'errors'[1].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("pageSize"))
                .body("'errors'[1].'rejectedValue'", numberMatches(-1047824.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("Range"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.notProcuringEntityId[3]", "EachPattern.langYearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[3]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.notProcuringEntityId[3]", "notProcuringEntityId[3]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[3]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("notProcuringEntityId[3]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("notProcuringEntityId[3]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_29184_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 6"))
                .body("'path'", containsString("/api/ocds/averageNumberBidsExcelChart"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/cancelledFundingExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/cancelledFundingExcelChart?" + 
                    "notBidTypeId=zU&notBidTypeId=jtb9HYeHZ&notBidTypeId=IOq5tPDF&notBidTypeId=jIxjVgGFsSlHfU2&notBidTypeId=qz&" + 
                    "procuringEntityId=d&procuringEntityId=7&procuringEntityId=vq_BgTjOd&" + 
                    "notProcuringEntityId=9H&notProcuringEntityId=E&notProcuringEntityId=DSMKAk9Pia5&notProcuringEntityId=V&notProcuringEntityId=7&" + 
                    "supplierId=OMXVIbYi&" + 
                    "contrMethod=e0dAQaVeUf7tcL&contrMethod=_EM_30245_XYZ_&contrMethod=_EM_30246_XYZ_&" + 
                    "planningLoc=&" + 
                    "procurementMethod=x6&procurementMethod=_EM_30253_XYZ_&" + 
                    "procuringEntityCityId=J4QOzgRVp8Nys7EQ&procuringEntityCityId=xr&procuringEntityCityId=x1drRP&procuringEntityCityId=_EM_29211_XYZ_&procuringEntityCityId=NwfjWelPE5M&" + 
                    "procuringEntityDepartmentId=-261451&procuringEntityDepartmentId=974&procuringEntityDepartmentId=1463&procuringEntityDepartmentId=4202651&procuringEntityDepartmentId=649&" + 
                    "pageNumber=-4456231&" + 
                    "maxAwardValue=0.06047&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "language=AB211ITmb8_&" + 
                    "langYearFilterPagingRequest=kh5uc")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(3))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.procuringEntityId[2]", "EachPattern.langYearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[2]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.procuringEntityId[2]", "procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'rejectedValue'", containsString("vq_BgTjOd"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("Min.langYearFilterPagingRequest.pageNumber", "Min.pageNumber", "Min.java.lang.Integer", "Min"))
                .body("'errors'[1].'arguments'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.pageNumber", "pageNumber"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("pageNumber"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("pageNumber"))
                .body("'errors'[1].'arguments'[1]", numberMatches(0.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be greater than or equal to 0"))
                .body("'errors'[1].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("pageNumber"))
                .body("'errors'[1].'rejectedValue'", numberMatches(-4456231.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("Min"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.contrMethod[0]", "EachPattern.langYearFilterPagingRequest.contrMethod", "EachPattern.contrMethod[0]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.contrMethod[0]", "contrMethod[0]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("contrMethod[0]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("contrMethod[0]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("contrMethod[0]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_30245_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 3"))
                .body("'path'", containsString("/api/ocds/cancelledFundingExcelChart"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/percentTendersUsingEgp'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/percentTendersUsingEgp?" + 
                    "notBidTypeId=zU&notBidTypeId=jtb9HYeHZ&notBidTypeId=IOq5tPDF&notBidTypeId=jIxjVgGFsSlHfU2&notBidTypeId=qz&" + 
                    "procuringEntityId=c&procuringEntityId=7&procuringEntityId=vq_BgTjOd&" + 
                    "notProcuringEntityId=9G&notProcuringEntityId=F&notProcuringEntityId=_EM_29184_XYZ_&notProcuringEntityId=_EM_30250_XYZ_&notProcuringEntityId=&" + 
                    "bidSelectionMethod=GBQ&" + 
                    "notBidSelectionMethod=kxicC4DPEkgXAt&" + 
                    "contrMethod=e0dAQaVeUf7tcL&contrMethod=_EM_30245_XYZ_&contrMethod=_EM_30246_XYZ_&" + 
                    "procurementMethod=_EM_30254_XYZ_&procurementMethod=_EM_30253_XYZ_&" + 
                    "procuringEntityDepartmentId=-261451&procuringEntityDepartmentId=974&procuringEntityDepartmentId=1463&procuringEntityDepartmentId=4202651&procuringEntityDepartmentId=649&" + 
                    "procuringEntityGroupId=33038&" + 
                    "year=553&year=322&year=-31832&year=4605&" + 
                    "month=451&month=245&month=2181&" + 
                    "pageNumber=-4456231&" + 
                    "pageSize=-1047824&" + 
                    "minTenderValue=870437.5607599824&" + 
                    "maxTenderValue=5892.0949613617&" + 
                    "minAwardValue=1.0&" + 
                    "maxAwardValue=0.06047&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "yearFilterPagingRequest=_Ro")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(7))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[2]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[2]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[2]", "procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'rejectedValue'", containsString("vq_BgTjOd"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.contrMethod[0]", "EachPattern.yearFilterPagingRequest.contrMethod", "EachPattern.contrMethod[0]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.contrMethod[0]", "contrMethod[0]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("contrMethod[0]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("contrMethod[0]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("contrMethod[0]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_30245_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[2].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[2].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[2].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("year"))
                .body("'errors'[2].'rejectedValue'.size()", equalTo(4))
                .body("'errors'[2].'rejectedValue'[0]", numberMatches(-31832.0))
                .body("'errors'[2].'rejectedValue'[1]", numberMatches(322.0))
                .body("'errors'[2].'rejectedValue'[2]", numberMatches(553.0))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachRange"))
                // Skipping assertions on the remaining 4 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 7"))
                .body("'path'", containsString("/api/percentTendersUsingEgp"));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/rest/controller/GenericOCDSController_353_lambda$getContrMethodFilterCriteria$1.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/totalProjectsByYear'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/totalProjectsByYear?" + 
                    "bidTypeId=VS590AH&" + 
                    "notBidTypeId=zU&notBidTypeId=jtb9HYeHZ&notBidTypeId=IOq5tPDF&notBidTypeId=jIxjVgGFsSlHfU2&notBidTypeId=qz&" + 
                    "procuringEntityId=d&procuringEntityId=7&procuringEntityId=vq_BgTjOd&" + 
                    "supplierId=OMXVIbYi&" + 
                    "contrMethod=e0dAQaVeUf7tcL&contrMethod=_EM_30245_XYZ_&contrMethod=_EM_30246_XYZ_&" + 
                    "planningLoc=&" + 
                    "tenderLoc=7F&tenderLoc=fHBpZQL76b%2CL8T3A&" + 
                    "procurementMethod=_EM_30254_XYZ_&procurementMethod=_EM_30253_XYZ_&" + 
                    "procuringEntityCityId=J4QOzgRVp8Nys7EQ&procuringEntityCityId=xr&procuringEntityCityId=x1drRP&procuringEntityCityId=_EM_29211_XYZ_&procuringEntityCityId=NwfjWelPE5M&" + 
                    "procuringEntityDepartmentId=-261451&procuringEntityDepartmentId=974&procuringEntityDepartmentId=1591&procuringEntityDepartmentId=4235419&procuringEntityDepartmentId=649&" + 
                    "pageNumber=-4456231&" + 
                    "minTenderValue=870437.5607599824&" + 
                    "maxTenderValue=5892.0949613617&" + 
                    "minAwardValue=1.0&" + 
                    "maxAwardValue=0.06047&" + 
                    "electronicSubmission=false")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/rest/controller/GenericOCDSController_353_lambda$getContrMethodFilterCriteria$1
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("invalid hexadecimal representation of an ObjectId: [_EM_30245_XYZ_]"))
                .body("'path'", containsString("/api/totalProjectsByYear"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/flags/i002/crosstab'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i002/crosstab?" + 
                    "notBidTypeId=_WqT&notBidTypeId=pasBAw&" + 
                    "procuringEntityId=0xF&procuringEntityId=0FoVnZeCgh5ZQX&procuringEntityId=&procuringEntityId=g&procuringEntityId=_ODLE&" + 
                    "notProcuringEntityId=5GPgf_DY&notProcuringEntityId=oIQnBv&notProcuringEntityId=CP69Y&notProcuringEntityId=6HLT9yrJnu&notProcuringEntityId=LbfTrEnMp8Xicq&" + 
                    "bidSelectionMethod=MPkaEqLMxDl3jlM&bidSelectionMethod=LBJa9BQjZ2nx&bidSelectionMethod=&bidSelectionMethod=wh&bidSelectionMethod=nhDcB&" + 
                    "notBidSelectionMethod=O&" + 
                    "contrMethod=i0TccFvxPcjS&" + 
                    "planningLoc=jm7WP&planningLoc=RKE4vaQkWSE5_&planningLoc=0X7cghAd&planningLoc=NQ&planningLoc=zD&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=276&procuringEntityDepartmentId=986&" + 
                    "year=869&year=383&" + 
                    "month=110&month=730&month=549&" + 
                    "minTenderValue=0.304653882375999&" + 
                    "maxAwardValue=0.4652808873687101&" + 
                    "monthly=true")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(5))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(3))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(110.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(549.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(730.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[0]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[0]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[0]", "notProcuringEntityId[0]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[1].'rejectedValue'", containsString("5GPgf_DY"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[3]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[3]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[3]", "procuringEntityId[3]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[3]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("procuringEntityId[3]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("procuringEntityId[3]"))
                .body("'errors'[2].'rejectedValue'", containsString("_ODLE"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 5"))
                .body("'path'", containsString("/api/flags/i002/crosstab"));
    }
}
