package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_25_test_25_getOnQualityAverageAwardPeriodShowsFaults_100_101 {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (400) POST:/api/qualityAverageAwardPeriod
    * 2 - (500) GET:/api/qualityAverageAwardPeriod
    * Found 3 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_25_getOnQualityAverageAwardPeriodShowsFaults_100_101() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/qualityAverageAwardPeriod'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/qualityAverageAwardPeriod?" + 
                    "bidTypeId=dhMUltT1xU&bidTypeId=_EM_41309_XYZ_&bidTypeId=Uk0beK25&" + 
                    "notBidTypeId=_EM_41307_XYZ_&" + 
                    "procuringEntityId=_EM_41308_XYZ_&procuringEntityId=_EM_23768_XYZ_&" + 
                    "notProcuringEntityId=_EM_23769_XYZ_&" + 
                    "supplierId=&" + 
                    "notBidSelectionMethod=_EM_23773_XYZ_&notBidSelectionMethod=hHZduKKTK&notBidSelectionMethod=_EM_23775_XYZ_&notBidSelectionMethod=NhW3DyYD6L&notBidSelectionMethod=e&" + 
                    "planningLoc=_EM_23778_XYZ_&planningLoc=_EM_23779_XYZ_&planningLoc=F9&planningLoc=_EM_23780_XYZ_&planningLoc=_EM_23781_XYZ_&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=j7q3Nmnq&procurementMethod=_EM_23782_XYZ_&procurementMethod=_EM_23783_XYZ_&procurementMethod=_EM_41310_XYZ_&" + 
                    "procuringEntityDepartmentId=65626&procuringEntityDepartmentId=-15752&" + 
                    "procuringEntityGroupId=673&procuringEntityGroupId=286&procuringEntityGroupId=861&procuringEntityGroupId=652&procuringEntityGroupId=854&" + 
                    "pageNumber=672&" + 
                    "pageSize=66421&" + 
                    "minTenderValue=0.41102103069105256&" + 
                    "maxTenderValue=0.6418611806631873&" + 
                    "maxAwardValue=0.5889700646412415&" + 
                    "electronicSubmission=true&" + 
                    "password=gGHjaZQZ1xArY&" + 
                    "defaultFilterPagingRequest=_EM_41306_XYZ_&" + 
                    "username=8MNvoUfdnh")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(5))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.defaultFilterPagingRequest.notBidTypeId[0]", "EachPattern.defaultFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[0]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("defaultFilterPagingRequest.notBidTypeId[0]", "notBidTypeId[0]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[0]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notBidTypeId[0]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("defaultFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notBidTypeId[0]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_41307_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.defaultFilterPagingRequest.notProcuringEntityId[0]", "EachPattern.defaultFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[0]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("defaultFilterPagingRequest.notProcuringEntityId[0]", "notProcuringEntityId[0]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("defaultFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_23769_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.defaultFilterPagingRequest.procuringEntityId[0]", "EachPattern.defaultFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[0]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("defaultFilterPagingRequest.procuringEntityId[0]", "procuringEntityId[0]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[0]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("procuringEntityId[0]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("defaultFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("procuringEntityId[0]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_23768_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='defaultFilterPagingRequest'. Error count: 5"))
                .body("'path'", containsString("/api/qualityAverageAwardPeriod"));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/rest/controller/GenericOCDSController_353_lambda$getContrMethodFilterCriteria$1.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/qualityAverageAwardPeriod'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/qualityAverageAwardPeriod?" + 
                    "bidTypeId=dlMBltT1x5&bidTypeId=rpgqJrDYsLlsM4&bidTypeId=Uk0beK25&" + 
                    "notBidTypeId=KzQMe6J8R&" + 
                    "notProcuringEntityId=I3J&" + 
                    "supplierId=&" + 
                    "notBidSelectionMethod=_EM_23773_XYZ_&notBidSelectionMethod=hHZduKKTK&notBidSelectionMethod=_EM_23775_XYZ_&notBidSelectionMethod=NhW3DyYD6L&notBidSelectionMethod=e&" + 
                    "contrMethod=62&contrMethod=75wiUpgmN6&" + 
                    "planningLoc=_EM_23778_XYZ_&planningLoc=_EM_23779_XYZ_&planningLoc=F9&planningLoc=_EM_23780_XYZ_&planningLoc=_EM_23781_XYZ_&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=j7q3Nmnq&procurementMethod=_EM_23782_XYZ_&procurementMethod=_EM_23783_XYZ_&procurementMethod=_EM_41310_XYZ_&" + 
                    "procuringEntityCityId=nmkmBoBgx6bqc&procuringEntityCityId=MfDe0tgD&procuringEntityCityId=yVrZVo5a4ztyq&procuringEntityCityId=_EM_41311_XYZ_&" + 
                    "procuringEntityDepartmentId=65626&procuringEntityDepartmentId=-15752&" + 
                    "procuringEntityGroupId=673&procuringEntityGroupId=286&procuringEntityGroupId=861&procuringEntityGroupId=652&procuringEntityGroupId=854&" + 
                    "pageNumber=672&" + 
                    "minAwardValue=0.660621188820626&" + 
                    "maxAwardValue=0.5889700646412415&" + 
                    "flagged=false&" + 
                    "defaultFilterPagingRequest=Y7")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/rest/controller/GenericOCDSController_353_lambda$getContrMethodFilterCriteria$1
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("invalid hexadecimal representation of an ObjectId: [62]"))
                .body("'path'", containsString("/api/qualityAverageAwardPeriod"));
    }
}
