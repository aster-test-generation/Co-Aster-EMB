package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_1646_test_1646_getOnAllReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (200) POST:/api/ocds/organization/id/{id}
    * 2 - (400) POST:/api/ocds/bidSelectionExcelChart
    * 3 - (400) GET:/api/ocds/bidSelectionExcelChart
    * 4 - (400) GET:/api/qualityPlannedFundingByLocation
    * 5 - (200) GET:/api/ocds/orgGroup/all
    * Found 4 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_1646_getOnAllReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. POST on path '/api/ocds/organization/id/{id}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/organization/id/O.?" + 
                    "password=TMtAHmGrFbqJxPg8&" + 
                    "username=_EM_26301_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/bidSelectionExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/bidSelectionExcelChart?" + 
                    "bidTypeId=W&bidTypeId=_EM_26250_XYZ_&bidTypeId=fYyVd7xhkrMmLW&bidTypeId=_EM_26251_XYZ_&bidTypeId=BURu7oCz9FfL7n&" + 
                    "procuringEntityId=&" + 
                    "notProcuringEntityId=uyPvj5XKK0pwmLO8&" + 
                    "bidSelectionMethod=_EM_26254_XYZ_&bidSelectionMethod=Ys8uKS&" + 
                    "contrMethod=&" + 
                    "tenderLoc=WD4F5RD4b&tenderLoc=X2oz5zDFT&tenderLoc=6&" + 
                    "procurementMethod=_EM_26259_XYZ_&procurementMethod=ISV6m7Chsnv32e&" + 
                    "pageSize=739&" + 
                    "maxTenderValue=-0.23380063127606804&" + 
                    "minAwardValue=0.5227940163539914&" + 
                    "maxAwardValue=0.24280847433750508&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "language=Gxmr2&" + 
                    "langYearFilterPagingRequest=6BrW4tK")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.bidTypeId[2]", "EachPattern.langYearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[2]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.bidTypeId[2]", "bidTypeId[2]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("bidTypeId[2]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("bidTypeId[2]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("bidTypeId[2]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_26250_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/ocds/bidSelectionExcelChart"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/bidSelectionExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/bidSelectionExcelChart?" + 
                    "bidTypeId=_EM_26260_XYZ_&bidTypeId=FRAUD&bidTypeId=_EM_26261_XYZ_&bidTypeId=F8QlAC_&bidTypeId=RIGGING&" + 
                    "notBidTypeId=COLLUSION&notBidTypeId=YMNV7&notBidTypeId=&notBidTypeId=_EM_26262_XYZ_&" + 
                    "notProcuringEntityId=uyPvj5XKK0pwmLO8&" + 
                    "bidSelectionMethod=_EM_26266_XYZ_&bidSelectionMethod=_EM_26267_XYZ_&" + 
                    "planningLoc=_EM_26269_XYZ_&planningLoc=_EM_26270_XYZ_&planningLoc=&" + 
                    "tenderLoc=_EM_26271_XYZ_&tenderLoc=X2oz5zDFT&tenderLoc=6&" + 
                    "procurementMethod=_EM_26272_XYZ_&procurementMethod=_EM_26273_XYZ_&" + 
                    "procuringEntityCityId=_EM_26274_XYZ_&" + 
                    "procuringEntityGroupId=195&" + 
                    "month=439&month=668&month=411&month=757&month=575&" + 
                    "pageNumber=496&" + 
                    "minTenderValue=0.5111884824908337&" + 
                    "maxTenderValue=-0.23380063127606804&" + 
                    "maxAwardValue=0.24280847433750508&" + 
                    "electronicSubmission=true&" + 
                    "monthly=true&" + 
                    "skip=kgz&" + 
                    "password=_EM_26275_XYZ_&" + 
                    "class=_EM_26276_XYZ_&" + 
                    "langYearFilterPagingRequest=MVPCQc_3Kq3&" + 
                    "username=j")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(3))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.bidTypeId[0]", "EachPattern.langYearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[0]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.bidTypeId[0]", "bidTypeId[0]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("bidTypeId[0]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("bidTypeId[0]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("bidTypeId[0]"))
                .body("'errors'[0].'rejectedValue'", containsString("F8QlAC_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.notBidTypeId[3]", "EachPattern.langYearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[3]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.notBidTypeId[3]", "notBidTypeId[3]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[3]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("notBidTypeId[3]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("notBidTypeId[3]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_26262_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("EachRange.langYearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.month", "month"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[2].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[2].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[2].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[2].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("month"))
                .body("'errors'[2].'rejectedValue'.size()", equalTo(5))
                .body("'errors'[2].'rejectedValue'[0]", numberMatches(411.0))
                .body("'errors'[2].'rejectedValue'[1]", numberMatches(439.0))
                .body("'errors'[2].'rejectedValue'[2]", numberMatches(575.0))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 3"))
                .body("'path'", containsString("/api/ocds/bidSelectionExcelChart"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/qualityPlannedFundingByLocation'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/qualityPlannedFundingByLocation?" + 
                    "notBidTypeId=_EM_26231_XYZ_&notBidTypeId=JpwZbL8ypbRjEdSf&notBidTypeId=p4Oht4i&notBidTypeId=AGtuHZACLM&notBidTypeId=FRAUD&" + 
                    "notProcuringEntityId=2Ya3jJ8cDlEXvU&notProcuringEntityId=ascS2_Q54KMIg&notProcuringEntityId=NdtJB8x2&notProcuringEntityId=_EM_26234_XYZ_&notProcuringEntityId=xNp5fMWcv&" + 
                    "notBidSelectionMethod=_EM_26237_XYZ_&notBidSelectionMethod=KISzRIX1P&notBidSelectionMethod=_EM_26238_XYZ_&" + 
                    "contrMethod=_EM_26239_XYZ_&contrMethod=_EM_26240_XYZ_&" + 
                    "tenderLoc=_EM_26241_XYZ_&tenderLoc=3Lf&tenderLoc=_EM_26242_XYZ_&tenderLoc=_EM_26243_XYZ_&tenderLoc=K5oAH68IKbAD&" + 
                    "procurementMethod=_EM_26244_XYZ_&procurementMethod=_EM_26245_XYZ_&procurementMethod=yKQ&procurementMethod=_EM_26247_XYZ_&procurementMethod=_EM_42593_XYZ_&" + 
                    "procuringEntityDepartmentId=790&" + 
                    "procuringEntityGroupId=127&procuringEntityGroupId=288&procuringEntityGroupId=845&procuringEntityGroupId=275&procuringEntityGroupId=502&" + 
                    "pageNumber=973&" + 
                    "pageSize=557&" + 
                    "minTenderValue=0.8536949394088578&" + 
                    "maxTenderValue=0.4804439684605972&" + 
                    "maxAwardValue=0.6468611331238758&" + 
                    "electronicSubmission=true&" + 
                    "defaultFilterPagingRequest=vRAuwEfS0m0HEcH&" + 
                    "skip=0GEbWkj&" + 
                    "password=OIqqJBkB0K7AiK&" + 
                    "username=JxwVB")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(3))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.defaultFilterPagingRequest.notBidTypeId[3]", "EachPattern.defaultFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[3]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("defaultFilterPagingRequest.notBidTypeId[3]", "notBidTypeId[3]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[3]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notBidTypeId[3]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("defaultFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notBidTypeId[3]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_26231_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.defaultFilterPagingRequest.notProcuringEntityId[2]", "EachPattern.defaultFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[2]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("defaultFilterPagingRequest.notProcuringEntityId[2]", "notProcuringEntityId[2]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("defaultFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_26234_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.defaultFilterPagingRequest.contrMethod[0]", "EachPattern.defaultFilterPagingRequest.contrMethod", "EachPattern.contrMethod[0]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("defaultFilterPagingRequest.contrMethod[0]", "contrMethod[0]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("contrMethod[0]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("contrMethod[0]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("defaultFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("contrMethod[0]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_26239_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='defaultFilterPagingRequest'. Error count: 3"))
                .body("'path'", containsString("/api/qualityPlannedFundingByLocation"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/orgGroup/all?" + 
                    "password=_EM_26303_XYZ_&" + 
                    "username=ZvBGT")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
}
