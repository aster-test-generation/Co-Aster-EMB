package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_1282_test_1282_getOnOcdsNumberCancelledFundingExcelChartWithQueryParamsAndMonthly {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (400) POST:/api/ocds/numberCancelledFundingExcelChart
    * 2 - (400) GET:/api/ocds/numberCancelledFundingExcelChart
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_1282_getOnOcdsNumberCancelledFundingExcelChartWithQueryParamsAndMonthly() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/numberCancelledFundingExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/numberCancelledFundingExcelChart?" + 
                    "bidTypeId=_EM_34292_XYZ_&" + 
                    "notBidTypeId=Y3qX45IcC&notBidTypeId=xdxmLMSXbaCs&" + 
                    "procuringEntityId=VwbHl&procuringEntityId=QN&procuringEntityId=95&" + 
                    "notProcuringEntityId=_EM_22035_XYZ_&" + 
                    "bidSelectionMethod=_EM_22037_XYZ_&bidSelectionMethod=FRJ30&bidSelectionMethod=_EM_34296_XYZ_&bidSelectionMethod=1Hoy4&bidSelectionMethod=_EM_34297_XYZ_&" + 
                    "notBidSelectionMethod=jYTi_hNUXSYL&notBidSelectionMethod=9_x59ac%3DPE&" + 
                    "contrMethod=Ntklc5p251dbY&contrMethod=_EM_22041_XYZ_&contrMethod=xPxxgk&contrMethod=zW&" + 
                    "planningLoc=_EM_22042_XYZ_&planningLoc=331Bg43ri1b9B&planningLoc=ZdL9i6tz&planningLoc=Y3qX45IcC&planningLoc=_EM_22045_XYZ_&" + 
                    "tenderLoc=_EM_22063_XYZ_&tenderLoc=ldAzqgdDfxC&tenderLoc=d&tenderLoc=_EM_34290_XYZ_&" + 
                    "procurementMethod=_EM_22049_XYZ_&procurementMethod=g6&procurementMethod=_EM_22050_XYZ_&" + 
                    "procuringEntityCityId=q%5C&" + 
                    "procuringEntityDepartmentId=682&procuringEntityDepartmentId=538&procuringEntityDepartmentId=222&procuringEntityDepartmentId=202&procuringEntityDepartmentId=620&" + 
                    "procuringEntityGroupId=&" + 
                    "year=84&year=8736&year=709&" + 
                    "month=-4193383&month=782&month=-130509&" + 
                    "pageNumber=4194597&" + 
                    "pageSize=-1073741755&" + 
                    "minTenderValue=0.09&" + 
                    "maxTenderValue=0.956074706826314&" + 
                    "minAwardValue=-1592.5379763312708&" + 
                    "maxAwardValue=-173.03715402807967&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "language=&" + 
                    "password=_EM_34298_XYZ_&" + 
                    "langYearFilterPagingRequest=P6&" + 
                    "username=DFDX0")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(6))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.langYearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(3))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(-4193383.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(-130509.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(782.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.contrMethod[1]", "EachPattern.langYearFilterPagingRequest.contrMethod", "EachPattern.contrMethod[1]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.contrMethod[1]", "contrMethod[1]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("contrMethod[1]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("contrMethod[1]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("contrMethod[1]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_22041_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("Range.langYearFilterPagingRequest.pageSize", "Range.pageSize", "Range.java.lang.Integer", "Range"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.pageSize", "pageSize"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("pageSize"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("pageSize"))
                .body("'errors'[2].'arguments'[1]", numberMatches(1000.0))
                .body("'errors'[2].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[2].'defaultMessage'", containsString("must be between 1 and 1000"))
                .body("'errors'[2].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("pageSize"))
                .body("'errors'[2].'rejectedValue'", numberMatches(-1.073741755E9))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("Range"))
                // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 6"))
                .body("'path'", containsString("/api/ocds/numberCancelledFundingExcelChart"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/numberCancelledFundingExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/numberCancelledFundingExcelChart?" + 
                    "procuringEntityId=VwbHl&procuringEntityId=QN&procuringEntityId=95&" + 
                    "notProcuringEntityId=KOWqwGuem6h2LbEo&" + 
                    "supplierId=_EM_22054_XYZ_&" + 
                    "bidSelectionMethod=_EM_22037_XYZ_&bidSelectionMethod=FRJ30&bidSelectionMethod=_EM_34296_XYZ_&bidSelectionMethod=1Hoy4&bidSelectionMethod=_EM_34297_XYZ_&" + 
                    "notBidSelectionMethod=zLH&notBidSelectionMethod=jYTi_hNUXSYL&notBidSelectionMethod=9_x59ac%3DPE&" + 
                    "tenderLoc=_EM_22063_XYZ_&tenderLoc=ldAzqgdDfxC&tenderLoc=d&tenderLoc=_EM_34290_XYZ_&" + 
                    "procuringEntityCityId=q%5C&" + 
                    "procuringEntityGroupId=&" + 
                    "year=84&year=8736&year=709&" + 
                    "pageSize=-1073741755&" + 
                    "minTenderValue=0.09&" + 
                    "minAwardValue=-1592.5379763312708&" + 
                    "maxAwardValue=-173.03715402807967&" + 
                    "electronicSubmission=true&" + 
                    "monthly=true&" + 
                    "language=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.langYearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(3))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(84.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(709.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(8736.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("Range.langYearFilterPagingRequest.pageSize", "Range.pageSize", "Range.java.lang.Integer", "Range"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.pageSize", "pageSize"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("pageSize"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("pageSize"))
                .body("'errors'[1].'arguments'[1]", numberMatches(1000.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1 and 1000"))
                .body("'errors'[1].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("pageSize"))
                .body("'errors'[1].'rejectedValue'", numberMatches(-1.073741755E9))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("Range"))
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/ocds/numberCancelledFundingExcelChart"));
    }
}
