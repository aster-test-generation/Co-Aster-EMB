package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_1188_test_1188_postOnExcelExportReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (400) POST:/api/tenderPriceByBidSelectionMethod
    * 2 - (400) GET:/api/tenderPriceByBidSelectionMethod
    * 3 - (400) POST:/api/percentTendersWithTwoOrMoreTenderers
    * 4 - (400) GET:/api/percentTendersWithTwoOrMoreTenderers
    * 5 - (302) GET:/api/totalEligibleIndicatorsByIndicatorType
    * 6 - (400) POST:/api/averageNumberOfTenderers
    * 7 - (400) GET:/api/averageNumberOfTenderers
    * 8 - (400) POST:/api/ocds/excelExport
    * 9 - (400) POST:/api/ocds/excelExport
    * Found 9 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_1188_postOnExcelExportReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/tenderPriceByBidSelectionMethod'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/tenderPriceByBidSelectionMethod?" + 
                    "bidTypeId=pqL0&bidTypeId=ZR6m_pSf4ZFN&bidTypeId=5hwh4q&bidTypeId=I96EVBQQ&" + 
                    "notProcuringEntityId=Llnk0k0c12Q3M&notProcuringEntityId=AmGb2yqgU4T&notProcuringEntityId=IDD&notProcuringEntityId=vRT6vbbSS&" + 
                    "supplierId=6&supplierId=p13IUoZsu9XP&" + 
                    "contrMethod=HjQYuL4vtkVAb0bT&contrMethod=rgK31F4DFnPO3K&contrMethod=u&contrMethod=s2r_89gtSRz&" + 
                    "procurementMethod=K_N3t&" + 
                    "procuringEntityCityId=Yl4w_1LVQwtR1&procuringEntityCityId=n&" + 
                    "procuringEntityDepartmentId=493&" + 
                    "month=260557826&month=731&" + 
                    "pageNumber=695&" + 
                    "minTenderValue=0.3904729883857603&" + 
                    "maxAwardValue=0.7121540519404358&" + 
                    "skip=4AzkT&" + 
                    "password=&" + 
                    "class=I9s2HjyIjUaKssg&" + 
                    "yearFilterPagingRequest=fiLk49&" + 
                    "username=GXS_0J")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(3))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(2))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(731.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(2.60557826E8))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[2]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[2]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[2]", "bidTypeId[2]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("bidTypeId[2]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("bidTypeId[2]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("bidTypeId[2]"))
                .body("'errors'[1].'rejectedValue'", containsString("ZR6m_pSf4ZFN"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.contrMethod[2]", "EachPattern.yearFilterPagingRequest.contrMethod", "EachPattern.contrMethod[2]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.contrMethod[2]", "contrMethod[2]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("contrMethod[2]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("contrMethod[2]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("contrMethod[2]"))
                .body("'errors'[2].'rejectedValue'", containsString("s2r_89gtSRz"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 3"))
                .body("'path'", containsString("/api/tenderPriceByBidSelectionMethod"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/tenderPriceByBidSelectionMethod'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/tenderPriceByBidSelectionMethod?" + 
                    "bidTypeId=pqL0&bidTypeId=ZR6m_pSf4ZFN&bidTypeId=5hwh4q&bidTypeId=I96EVBQQ&" + 
                    "notBidTypeId=&" + 
                    "procuringEntityId=nlAQTEZvpZnciYF&procuringEntityId=6mAHQlJnmccqL&procuringEntityId=c&procuringEntityId=tEQ9We5_5z7pX&" + 
                    "notProcuringEntityId=Llnk0k0c12Q3M&notProcuringEntityId=AmGb2yqgU4T&notProcuringEntityId=IDD&notProcuringEntityId=vRT6vbbSS&" + 
                    "notBidSelectionMethod=hWXhlQiJr0&notBidSelectionMethod=&notBidSelectionMethod=1Yeny&notBidSelectionMethod=nUmiyjIVCYu61dN&" + 
                    "procuringEntityCityId=Yl4w_1LVQwtR1&procuringEntityCityId=n&" + 
                    "procuringEntityDepartmentId=493&" + 
                    "procuringEntityGroupId=325&procuringEntityGroupId=485&procuringEntityGroupId=55&procuringEntityGroupId=782&procuringEntityGroupId=529&" + 
                    "year=36&year=-1968722252&year=827&year=392&year=342&" + 
                    "month=260557826&month=731&" + 
                    "pageSize=847&" + 
                    "minTenderValue=0.3904729883857603&" + 
                    "monthly=true&" + 
                    "skip=NEDVZQubQKm22&" + 
                    "password=_x3pniSr&" + 
                    "class=wyuAGoabkYkQs&" + 
                    "yearFilterPagingRequest=uIt4Vn&" + 
                    "username=41zRJzvAtRy")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(5))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(-1.968722252E9))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(36.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(342.0))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[3]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[3]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[3]", "procuringEntityId[3]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[3]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("procuringEntityId[3]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("procuringEntityId[3]"))
                .body("'errors'[1].'rejectedValue'", containsString("tEQ9We5_5z7pX"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[2].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[2].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[2].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("month"))
                .body("'errors'[2].'rejectedValue'.size()", equalTo(2))
                .body("'errors'[2].'rejectedValue'[0]", numberMatches(731.0))
                .body("'errors'[2].'rejectedValue'[1]", numberMatches(2.60557826E8))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachRange"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 4"))
                .body("'path'", containsString("/api/tenderPriceByBidSelectionMethod"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/percentTendersWithTwoOrMoreTenderers'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/percentTendersWithTwoOrMoreTenderers?" + 
                    "notProcuringEntityId=kxp&" + 
                    "planningLoc=hvuX&planningLoc=598_w&planningLoc=PkhvHxOZddFLrl&planningLoc=P&planningLoc=NgFiZ0&" + 
                    "procuringEntityGroupId=&" + 
                    "year=610&year=295&year=115&" + 
                    "month=987&month=530&month=29&month=276&" + 
                    "pageNumber=580&" + 
                    "minTenderValue=0.9614220146552325&" + 
                    "maxTenderValue=0.7408210597943126&" + 
                    "maxAwardValue=0.3710479412656652&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "password=aWl9ASA&" + 
                    "yearFilterPagingRequest=YeO3Rk&" + 
                    "username=E9CNttJ100")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(4))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(29.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(276.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(530.0))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[1].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("year"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(3))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(115.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(295.0))
                .body("'errors'[1].'rejectedValue'[2]", numberMatches(610.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/percentTendersWithTwoOrMoreTenderers"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/percentTendersWithTwoOrMoreTenderers'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/percentTendersWithTwoOrMoreTenderers?" + 
                    "procuringEntityId=xyo&" + 
                    "notProcuringEntityId=kxp&" + 
                    "supplierId=gKgJD71uhTRx&supplierId=VXJoRgYmjAA835a&supplierId=lpnt522Hi&supplierId=FrU2QoXf12n7oZt9&supplierId=5BE5EKoUuvj&" + 
                    "bidSelectionMethod=w_lDO0Rm1Rgzknj&bidSelectionMethod=gZH&bidSelectionMethod=Gxyny4zdn&bidSelectionMethod=5t&" + 
                    "notBidSelectionMethod=7wVIKpiEBhNo8n&notBidSelectionMethod=i1xQmWMYvZI&notBidSelectionMethod=ZLQwNdxIpACK&notBidSelectionMethod=&notBidSelectionMethod=MR&" + 
                    "contrMethod=&" + 
                    "tenderLoc=3WI&tenderLoc=JEJtj0ze2l5&tenderLoc=gG&tenderLoc=ZmVhku6IPz&" + 
                    "procuringEntityDepartmentId=941&procuringEntityDepartmentId=-71919660&procuringEntityDepartmentId=163&procuringEntityDepartmentId=16&procuringEntityDepartmentId=642&" + 
                    "procuringEntityGroupId=&" + 
                    "month=987&month=530&month=29&month=276&" + 
                    "pageNumber=580&" + 
                    "pageSize=475&" + 
                    "minTenderValue=0.9614220146552325&" + 
                    "maxTenderValue=0.7408210597943126&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "skip=cCP4JmjK5S&" + 
                    "password=0ZrhK&" + 
                    "class=3NmD9M8F07&" + 
                    "yearFilterPagingRequest=c7Vam7&" + 
                    "username=tw1u1")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(4))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(29.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(276.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(530.0))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/percentTendersWithTwoOrMoreTenderers"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 302 not defined for path '/api/totalEligibleIndicatorsByIndicatorType'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/totalEligibleIndicatorsByIndicatorType?" + 
                    "bidTypeId=_EM_28982_XYZ_&bidTypeId=6mXyr&bidTypeId=EmBcZ8tP&bidTypeId=_EM_28983_XYZ_&bidTypeId=YiShVML28xlvpKvm&" + 
                    "notBidTypeId=_EM_28984_XYZ_&notBidTypeId=FRAUD&notBidTypeId=RIGGING&notBidTypeId=D1tTcOeEeKgyQg&notBidTypeId=COLLUSION&" + 
                    "supplierId=_EM_28986_XYZ_&supplierId=&supplierId=_EM_28987_XYZ_&supplierId=_EM_28988_XYZ_&" + 
                    "contrMethod=&" + 
                    "planningLoc=&" + 
                    "procurementMethod=j&procurementMethod=C_yVvCz2xMR5&" + 
                    "procuringEntityDepartmentId=996&procuringEntityDepartmentId=-256&procuringEntityDepartmentId=616&" + 
                    "procuringEntityGroupId=334&procuringEntityGroupId=466&procuringEntityGroupId=639&procuringEntityGroupId=140&procuringEntityGroupId=354&" + 
                    "year=330&" + 
                    "month=494&" + 
                    "pageNumber=308&" + 
                    "maxTenderValue=0.15272815494644798&" + 
                    "maxAwardValue=0.596347147844543&" + 
                    "flagged=true&" + 
                    "skip=XN9N&" + 
                    "password=_EM_28993_XYZ_&" + 
                    "class=_EM_28994_XYZ_&" + 
                    "yearFilterPagingRequest=_EM_28995_XYZ_&" + 
                    "username=_EM_28996_XYZ_")
                .then()
                .statusCode(302)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/averageNumberOfTenderers'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/averageNumberOfTenderers?" + 
                    "bidTypeId=b4e4BV_ed0LN&bidTypeId=48&" + 
                    "supplierId=6UGLX&supplierId=8BVb6Q6g7m&supplierId=Wl1xA0A3&" + 
                    "bidSelectionMethod=RUL7qYNTJ&bidSelectionMethod=hbByq_sm4E&bidSelectionMethod=bDyaL&bidSelectionMethod=5lxUfUdI&bidSelectionMethod=kjg&" + 
                    "contrMethod=K66Hc&" + 
                    "planningLoc=A_t9CXt4&planningLoc=CHLxvkGBLG3Yoi&planningLoc=wN&planningLoc=dh2lG7G0mJ&planningLoc=WfPPp0&" + 
                    "tenderLoc=8&tenderLoc=3cO5iUOKiJVz&tenderLoc=y8gD5p77&tenderLoc=fLLHegRJ&" + 
                    "procurementMethod=&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=581&procuringEntityDepartmentId=267&procuringEntityDepartmentId=522&procuringEntityDepartmentId=927&" + 
                    "procuringEntityGroupId=&" + 
                    "pageSize=282&" + 
                    "maxTenderValue=0.12731566079483558&" + 
                    "minAwardValue=0.9543144347846284&" + 
                    "monthly=true&" + 
                    "skip=yuMGk&" + 
                    "class=p1aMS4kbpb7GkuXH&" + 
                    "yearFilterPagingRequest=9")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[1]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[1]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[1]", "bidTypeId[1]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("bidTypeId[1]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("bidTypeId[1]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("bidTypeId[1]"))
                .body("'errors'[0].'rejectedValue'", containsString("b4e4BV_ed0LN"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/averageNumberOfTenderers"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/averageNumberOfTenderers'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/averageNumberOfTenderers?" + 
                    "bidTypeId=b4e4BV_ed0LN&bidTypeId=48&" + 
                    "notProcuringEntityId=s7VuU&notProcuringEntityId=JH7Lt&" + 
                    "notBidSelectionMethod=rkUBemh&notBidSelectionMethod=a&" + 
                    "contrMethod=K66Hc&" + 
                    "planningLoc=A_t9CXt4&planningLoc=CHLxvkGBLG3Yoi&planningLoc=wN&planningLoc=dh2lG7G0mJ&planningLoc=WfPPp0&" + 
                    "procuringEntityDepartmentId=581&procuringEntityDepartmentId=267&procuringEntityDepartmentId=522&procuringEntityDepartmentId=927&" + 
                    "pageNumber=357&" + 
                    "minTenderValue=0.7732043930193369&" + 
                    "maxAwardValue=0.45352264807601517&" + 
                    "electronicSubmission=true&" + 
                    "monthly=true&" + 
                    "skip=znq6EP&" + 
                    "password=rJ_joLEnlsEm&" + 
                    "class=eFQrznb74ln09&" + 
                    "yearFilterPagingRequest=5P8M_q&" + 
                    "username=gtmmQC_8bri1SDc")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[1]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[1]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[1]", "bidTypeId[1]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("bidTypeId[1]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("bidTypeId[1]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("bidTypeId[1]"))
                .body("'errors'[0].'rejectedValue'", containsString("b4e4BV_ed0LN"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/averageNumberOfTenderers"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/excelExport'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/excelExport?" + 
                    "bidTypeId=&" + 
                    "notProcuringEntityId=38wrTYq0tQBzI_dF&notProcuringEntityId=PBC2fa&" + 
                    "supplierId=g1mMTo2NCP_&supplierId=_EM_28961_XYZ_&supplierId=JGeBgdxK&supplierId=FGcda4EMWbX4&" + 
                    "bidSelectionMethod=gghiiNM&bidSelectionMethod=_EM_28962_XYZ_&bidSelectionMethod=_EM_28963_XYZ_&bidSelectionMethod=sG&bidSelectionMethod=cGXkYERWrPhT66xs&" + 
                    "planningLoc=MZHiT&planningLoc=20czJ2xqMfucRDkB&" + 
                    "tenderLoc=LVU49&tenderLoc=i5w&tenderLoc=Jgc&tenderLoc=_EM_28964_XYZ_&tenderLoc=QcQYLoj1bbTh&" + 
                    "procurementMethod=_EM_28965_XYZ_&" + 
                    "procuringEntityCityId=_EM_28966_XYZ_&procuringEntityCityId=_EM_28967_XYZ_&procuringEntityCityId=lzVDJY&" + 
                    "month=103&month=25&" + 
                    "pageSize=972&" + 
                    "maxTenderValue=0.3100399732381679&" + 
                    "maxAwardValue=0.1878720664814162&" + 
                    "password=TTMxT&" + 
                    "yearFilterPagingRequest=YqSYXD&" + 
                    "username=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(2))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(25.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(103.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[0]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[0]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[0]", "notProcuringEntityId[0]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[1].'rejectedValue'", containsString("38wrTYq0tQBzI_dF"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/ocds/excelExport"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/excelExport'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/excelExport?" + 
                    "notBidTypeId=RIGGING&notBidTypeId=RIGGING&" + 
                    "procuringEntityId=_EM_28968_XYZ_&procuringEntityId=kto9vD&procuringEntityId=_EM_28969_XYZ_&procuringEntityId=9z&procuringEntityId=Eo3F&" + 
                    "notProcuringEntityId=38wrTYq0tQBzI_dF&notProcuringEntityId=PBC2fa&" + 
                    "notBidSelectionMethod=&" + 
                    "contrMethod=&" + 
                    "planningLoc=_EM_28972_XYZ_&planningLoc=_EM_28973_XYZ_&" + 
                    "tenderLoc=LVU49&tenderLoc=_EM_28974_XYZ_&tenderLoc=_EM_28975_XYZ_&tenderLoc=_EM_28976_XYZ_&tenderLoc=_EM_28977_XYZ_&" + 
                    "procurementMethod=zgR3gXx&" + 
                    "procuringEntityDepartmentId=508&" + 
                    "procuringEntityGroupId=814&procuringEntityGroupId=663&" + 
                    "minAwardValue=0.875425343545799&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "skip=OpvMXjufhcX&" + 
                    "password=hRY8&" + 
                    "class=_EM_28980_XYZ_&" + 
                    "yearFilterPagingRequest=_EM_28981_XYZ_&" + 
                    "username=HVUUc97I3lM6")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[2]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[2]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[2]", "procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_28968_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[0]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[0]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[0]", "notProcuringEntityId[0]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[1].'rejectedValue'", containsString("38wrTYq0tQBzI_dF"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/ocds/excelExport"));
    }
}
