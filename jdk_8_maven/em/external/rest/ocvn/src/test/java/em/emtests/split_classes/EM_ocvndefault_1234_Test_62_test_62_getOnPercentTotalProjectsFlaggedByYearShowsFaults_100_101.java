package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_62_test_62_getOnPercentTotalProjectsFlaggedByYearShowsFaults_100_101 {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (200) POST:/api/ocds/location/all
    * 2 - (400) POST:/api/ocds/location/search
    * 3 - (400) POST:/api/ocds/location/search
    * 4 - (400) POST:/api/ocds/excelExport
    * 5 - (400) GET:/api/ocds/excelExport
    * 6 - (400) POST:/api/totalEligibleIndicatorsByIndicatorType
    * 7 - (400) POST:/api/flags/i003/stats
    * 8 - (400) POST:/api/flags/i003/stats
    * 9 - (500) POST:/api/percentTotalProjectsFlaggedByYear
    * 10 - (200) GET:/api/percentTotalProjectsFlaggedByYear
    * Found 9 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_62_getOnPercentTotalProjectsFlaggedByYearShowsFaults_100_101() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/location/all?" + 
                    "password=ZSX0sdK&" + 
                    "username=caOIolJnXaajom2R")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/location/search'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageNumber=-31860&" + 
                    "pageSize=2088881541&" + 
                    "text=&" + 
                    "textSearchRequest=JVdxtAoXWf")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(3))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("Range.textSearchRequest.pageSize", "Range.pageSize", "Range.java.lang.Integer", "Range"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("textSearchRequest.pageSize", "pageSize"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("pageSize"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("pageSize"))
                .body("'errors'[0].'arguments'[1]", numberMatches(1000.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 1000"))
                .body("'errors'[0].'objectName'", containsString("textSearchRequest"))
                .body("'errors'[0].'field'", containsString("pageSize"))
                .body("'errors'[0].'rejectedValue'", numberMatches(2.088881541E9))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("Range"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("Size.textSearchRequest.text", "Size.text", "Size.java.lang.String", "Size"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("textSearchRequest.text", "text"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("text"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("text"))
                .body("'errors'[1].'arguments'[1]", numberMatches(30.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(3.0))
                .body("'errors'[1].'defaultMessage'", containsString("size must be between 3 and 30"))
                .body("'errors'[1].'objectName'", containsString("textSearchRequest"))
                .body("'errors'[1].'field'", containsString("text"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("Size"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("Min.textSearchRequest.pageNumber", "Min.pageNumber", "Min.java.lang.Integer", "Min"))
                .body("'errors'[2].'arguments'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("textSearchRequest.pageNumber", "pageNumber"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("pageNumber"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("pageNumber"))
                .body("'errors'[2].'arguments'[1]", numberMatches(0.0))
                .body("'errors'[2].'defaultMessage'", containsString("must be greater than or equal to 0"))
                .body("'errors'[2].'objectName'", containsString("textSearchRequest"))
                .body("'errors'[2].'field'", containsString("pageNumber"))
                .body("'errors'[2].'rejectedValue'", numberMatches(-31860.0))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("Min"))
                .body("'message'", containsString("Validation failed for object='textSearchRequest'. Error count: 3"))
                .body("'path'", containsString("/api/ocds/location/search"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/location/search'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageNumber=-31860&" + 
                    "pageSize=2088881541&" + 
                    "text=&" + 
                    "password=cj_LjLMkR&" + 
                    "class=6S&" + 
                    "textSearchRequest=n6S1qM1l79xY")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(3))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("Range.textSearchRequest.pageSize", "Range.pageSize", "Range.java.lang.Integer", "Range"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("textSearchRequest.pageSize", "pageSize"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("pageSize"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("pageSize"))
                .body("'errors'[0].'arguments'[1]", numberMatches(1000.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 1000"))
                .body("'errors'[0].'objectName'", containsString("textSearchRequest"))
                .body("'errors'[0].'field'", containsString("pageSize"))
                .body("'errors'[0].'rejectedValue'", numberMatches(2.088881541E9))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("Range"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("Size.textSearchRequest.text", "Size.text", "Size.java.lang.String", "Size"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("textSearchRequest.text", "text"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("text"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("text"))
                .body("'errors'[1].'arguments'[1]", numberMatches(30.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(3.0))
                .body("'errors'[1].'defaultMessage'", containsString("size must be between 3 and 30"))
                .body("'errors'[1].'objectName'", containsString("textSearchRequest"))
                .body("'errors'[1].'field'", containsString("text"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("Size"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("Min.textSearchRequest.pageNumber", "Min.pageNumber", "Min.java.lang.Integer", "Min"))
                .body("'errors'[2].'arguments'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("textSearchRequest.pageNumber", "pageNumber"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("pageNumber"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("pageNumber"))
                .body("'errors'[2].'arguments'[1]", numberMatches(0.0))
                .body("'errors'[2].'defaultMessage'", containsString("must be greater than or equal to 0"))
                .body("'errors'[2].'objectName'", containsString("textSearchRequest"))
                .body("'errors'[2].'field'", containsString("pageNumber"))
                .body("'errors'[2].'rejectedValue'", numberMatches(-31860.0))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("Min"))
                .body("'message'", containsString("Validation failed for object='textSearchRequest'. Error count: 3"))
                .body("'path'", containsString("/api/ocds/location/search"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/excelExport'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/excelExport?" + 
                    "bidTypeId=COLLUSIO&bidTypeId=_EM_39176_XYZ_&bidTypeId=KOD9BQAJceHf&" + 
                    "notBidTypeId=uimnSEsOaCl&notBidTypeId=_EM_39121_XYZ_&notBidTypeId=_EM_39122_XYZ_&notBidTypeId=RIGGING&notBidTypeId=0gWsUwgIsqIS&" + 
                    "procuringEntityId=&" + 
                    "supplierId=zGJBkUVC&" + 
                    "bidSelectionMethod=0az_fElsUlZ&bidSelectionMethod=5FrrW&" + 
                    "contrMethod=Bymzt5h&contrMethod=etSqAEyDRCguh&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityGroupId=827&procuringEntityGroupId=475&procuringEntityGroupId=386&procuringEntityGroupId=698&" + 
                    "year=462&year=305&year=255&year=583&" + 
                    "month=723&" + 
                    "minTenderValue=0.4698534429124148&" + 
                    "maxTenderValue=0.383249049616&" + 
                    "minAwardValue=0.5012693990152717&" + 
                    "maxAwardValue=0.65264&" + 
                    "electronicSubmission=false&" + 
                    "monthly=false&" + 
                    "yearFilterPagingRequest=ZcQOgcIl4em")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[2]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[2]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[2]", "bidTypeId[2]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("bidTypeId[2]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("bidTypeId[2]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("bidTypeId[2]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_39176_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[1].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("year"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(4))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(255.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(305.0))
                .body("'errors'[1].'rejectedValue'[2]", numberMatches(462.0))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[2].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[2].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[2].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("month"))
                .body("'errors'[2].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[2].'rejectedValue'[0]", numberMatches(723.0))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachRange"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 4"))
                .body("'path'", containsString("/api/ocds/excelExport"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/excelExport'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/excelExport?" + 
                    "bidTypeId=COLLUSIO&bidTypeId=_EM_39176_XYZ_&bidTypeId=KOD9BQAJceHf&" + 
                    "bidSelectionMethod=0az_fElsUlZ&bidSelectionMethod=5FrrW&" + 
                    "notBidSelectionMethod=Nj&" + 
                    "tenderLoc=&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=292&procuringEntityDepartmentId=630&procuringEntityDepartmentId=91&procuringEntityDepartmentId=659&" + 
                    "year=462&year=305&year=255&year=583&" + 
                    "month=723&" + 
                    "pageNumber=-31860&" + 
                    "maxTenderValue=0.383249049616&" + 
                    "electronicSubmission=false&" + 
                    "skip=lVelLZSuhR9DX&" + 
                    "password=cj_LjLMkR&" + 
                    "yearFilterPagingRequest=_EM_39177_XYZ_&" + 
                    "username=lk4ABs")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[2]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[2]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[2]", "bidTypeId[2]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("bidTypeId[2]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("bidTypeId[2]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("bidTypeId[2]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_39176_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("Min.yearFilterPagingRequest.pageNumber", "Min.pageNumber", "Min.java.lang.Integer", "Min"))
                .body("'errors'[1].'arguments'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.pageNumber", "pageNumber"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("pageNumber"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("pageNumber"))
                .body("'errors'[1].'arguments'[1]", numberMatches(0.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be greater than or equal to 0"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("pageNumber"))
                .body("'errors'[1].'rejectedValue'", numberMatches(-31860.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("Min"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[2].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[2].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[2].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("year"))
                .body("'errors'[2].'rejectedValue'.size()", equalTo(4))
                .body("'errors'[2].'rejectedValue'[0]", numberMatches(255.0))
                .body("'errors'[2].'rejectedValue'[1]", numberMatches(305.0))
                .body("'errors'[2].'rejectedValue'[2]", numberMatches(462.0))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachRange"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 4"))
                .body("'path'", containsString("/api/ocds/excelExport"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/totalEligibleIndicatorsByIndicatorType'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/totalEligibleIndicatorsByIndicatorType?" + 
                    "bidTypeId=COLLUSIO&bidTypeId=_EM_39176_XYZ_&bidTypeId=KOD9BQAJceHf&" + 
                    "notBidTypeId=uimnSEsOaCl&notBidTypeId=QolACzR&notBidTypeId=EYYwt4trI&notBidTypeId=FRAUD&notBidTypeId=0gWsUwgIsqIS&" + 
                    "procuringEntityId=&" + 
                    "notProcuringEntityId=aZwIzaR0wDsyo4o&notProcuringEntityId=gnKwG_GlNrPzHF&notProcuringEntityId=_EM_39130_XYZ_&" + 
                    "bidSelectionMethod=0az_fElsUlZ&bidSelectionMethod=5FrrW&" + 
                    "contrMethod=Bymzt5h&contrMethod=_EM_39131_XYZ_&" + 
                    "procurementMethod=M&procurementMethod=_q6&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityGroupId=827&procuringEntityGroupId=475&procuringEntityGroupId=386&procuringEntityGroupId=698&" + 
                    "month=723&" + 
                    "pageSize=2088881541&" + 
                    "minTenderValue=0.4698534429124148&" + 
                    "maxTenderValue=0.383249049616&" + 
                    "minAwardValue=0.5012693990152717&" + 
                    "maxAwardValue=0.65264&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "yearFilterPagingRequest=CprhXO_Z")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(5))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[0]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[0]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[0]", "notProcuringEntityId[0]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_39130_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("Range.yearFilterPagingRequest.pageSize", "Range.pageSize", "Range.java.lang.Integer", "Range"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.pageSize", "pageSize"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("pageSize"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("pageSize"))
                .body("'errors'[1].'arguments'[1]", numberMatches(1000.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1 and 1000"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("pageSize"))
                .body("'errors'[1].'rejectedValue'", numberMatches(2.088881541E9))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("Range"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[2].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[2].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[2].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("month"))
                .body("'errors'[2].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[2].'rejectedValue'[0]", numberMatches(723.0))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachRange"))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 5"))
                .body("'path'", containsString("/api/totalEligibleIndicatorsByIndicatorType"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/flags/i003/stats'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i003/stats?" + 
                    "bidTypeId=COLLUSIO&bidTypeId=_EM_39176_XYZ_&bidTypeId=KOD9BQAJceHf&" + 
                    "notBidTypeId=uimnSEsOaCl&notBidTypeId=QolACzR&notBidTypeId=COLLUSION&notBidTypeId=_EM_39134_XYZ_&notBidTypeId=FRAUD&" + 
                    "notProcuringEntityId=_EM_39135_XYZ_&notProcuringEntityId=gnKwG_GlNrPzHF&notProcuringEntityId=&" + 
                    "supplierId=zGJBkUVC&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=292&procuringEntityDepartmentId=630&procuringEntityDepartmentId=91&procuringEntityDepartmentId=659&" + 
                    "year=462&year=305&year=255&year=583&" + 
                    "month=723&" + 
                    "pageNumber=-31860&" + 
                    "pageSize=2088881541&" + 
                    "minTenderValue=0.4698534429124148&" + 
                    "minAwardValue=0.5012693990152717&" + 
                    "maxAwardValue=0.65264&" + 
                    "electronicSubmission=false&" + 
                    "yearFilterPagingRequest=F")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(7))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[2]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[2]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[2]", "bidTypeId[2]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("bidTypeId[2]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("bidTypeId[2]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("bidTypeId[2]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_39176_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("Min.yearFilterPagingRequest.pageNumber", "Min.pageNumber", "Min.java.lang.Integer", "Min"))
                .body("'errors'[1].'arguments'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.pageNumber", "pageNumber"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("pageNumber"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("pageNumber"))
                .body("'errors'[1].'arguments'[1]", numberMatches(0.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be greater than or equal to 0"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("pageNumber"))
                .body("'errors'[1].'rejectedValue'", numberMatches(-31860.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("Min"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[2].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[2].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[2].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("year"))
                .body("'errors'[2].'rejectedValue'.size()", equalTo(4))
                .body("'errors'[2].'rejectedValue'[0]", numberMatches(255.0))
                .body("'errors'[2].'rejectedValue'[1]", numberMatches(305.0))
                .body("'errors'[2].'rejectedValue'[2]", numberMatches(462.0))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachRange"))
                // Skipping assertions on the remaining 4 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 7"))
                .body("'path'", containsString("/api/flags/i003/stats"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/flags/i003/stats'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i003/stats?" + 
                    "notBidTypeId=_EM_39140_XYZ_&notBidTypeId=FRAUD&notBidTypeId=EYYwt4trI&notBidTypeId=_EM_39141_XYZ_&notBidTypeId=_EM_39142_XYZ_&" + 
                    "procuringEntityId=&" + 
                    "supplierId=zGJBkUVC&" + 
                    "contrMethod=Bymzt5h&contrMethod=_EM_39145_XYZ_&" + 
                    "procurementMethod=M&procurementMethod=_q6&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=292&procuringEntityDepartmentId=630&procuringEntityDepartmentId=91&procuringEntityDepartmentId=659&" + 
                    "month=723&" + 
                    "pageNumber=-31860&" + 
                    "pageSize=2088881541&" + 
                    "minAwardValue=0.5012693990152717&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "skip=lVelLZSuhR9DX&" + 
                    "class=6S&" + 
                    "yearFilterPagingRequest=_EM_39177_XYZ_&" + 
                    "username=lk4ABs")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(5))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.contrMethod[1]", "EachPattern.yearFilterPagingRequest.contrMethod", "EachPattern.contrMethod[1]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.contrMethod[1]", "contrMethod[1]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("contrMethod[1]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("contrMethod[1]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("contrMethod[1]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_39145_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("Min.yearFilterPagingRequest.pageNumber", "Min.pageNumber", "Min.java.lang.Integer", "Min"))
                .body("'errors'[1].'arguments'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.pageNumber", "pageNumber"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("pageNumber"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("pageNumber"))
                .body("'errors'[1].'arguments'[1]", numberMatches(0.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be greater than or equal to 0"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("pageNumber"))
                .body("'errors'[1].'rejectedValue'", numberMatches(-31860.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("Min"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("Range.yearFilterPagingRequest.pageSize", "Range.pageSize", "Range.java.lang.Integer", "Range"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.pageSize", "pageSize"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("pageSize"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("pageSize"))
                .body("'errors'[2].'arguments'[1]", numberMatches(1000.0))
                .body("'errors'[2].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[2].'defaultMessage'", containsString("must be between 1 and 1000"))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("pageSize"))
                .body("'errors'[2].'rejectedValue'", numberMatches(2.088881541E9))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("Range"))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 5"))
                .body("'path'", containsString("/api/flags/i003/stats"));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/rest/controller/GenericOCDSController_353_lambda$getContrMethodFilterCriteria$1.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/percentTotalProjectsFlaggedByYear'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/percentTotalProjectsFlaggedByYear?" + 
                    "bidTypeId=GMeAmtIfVvB&bidTypeId=4HQzKZn1wROXF&bidTypeId=D2Zyn0dzx&bidTypeId=6D1gR8EHtqIJz&bidTypeId=UcBpPnNbtENr&" + 
                    "procuringEntityId=O9eYNe&" + 
                    "notBidSelectionMethod=&notBidSelectionMethod=6UZLSze&notBidSelectionMethod=Oy_CI&notBidSelectionMethod=c&" + 
                    "contrMethod=AIn&contrMethod=K_6n46d3o&contrMethod=drmFH1qeIh&" + 
                    "tenderLoc=qFA&tenderLoc=evN&tenderLoc=gu0nB&tenderLoc=Gi11El&tenderLoc=vVIJ2RBDK_0d&" + 
                    "procurementMethod=fkL3&procurementMethod=hloLOGgrP4f&procurementMethod=r30foMX&" + 
                    "procuringEntityGroupId=1165203362&procuringEntityGroupId=123&procuringEntityGroupId=686&procuringEntityGroupId=712&" + 
                    "pageNumber=635&" + 
                    "minTenderValue=0.7330322711069899&" + 
                    "maxTenderValue=0.651428962070371&" + 
                    "minAwardValue=0.4771421702512014&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/rest/controller/GenericOCDSController_353_lambda$getContrMethodFilterCriteria$1
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("invalid hexadecimal representation of an ObjectId: [AIn]"))
                .body("'path'", containsString("/api/percentTotalProjectsFlaggedByYear"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/percentTotalProjectsFlaggedByYear?" + 
                    "notBidTypeId=Ycc4678Z55&notBidTypeId=ijmsdpt&notBidTypeId=CoZKANs&" + 
                    "procuringEntityCityId=Akh&procuringEntityCityId=KVZmOwvHiI&" + 
                    "procuringEntityGroupId=1165203362&procuringEntityGroupId=123&procuringEntityGroupId=686&procuringEntityGroupId=712&" + 
                    "pageNumber=635&" + 
                    "pageSize=905&" + 
                    "minTenderValue=0.7330322711069899&" + 
                    "maxTenderValue=0.651428962070371&" + 
                    "minAwardValue=0.4771421702512014&" + 
                    "maxAwardValue=0.16793603741433816&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "EMextraParam123=42&" + 
                    "password=zFFP0qjQL3u&" + 
                    "skip=XFYsA_6vXU5UE&" + 
                    "class=O7ch0nR_pwX9e4K")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
}
