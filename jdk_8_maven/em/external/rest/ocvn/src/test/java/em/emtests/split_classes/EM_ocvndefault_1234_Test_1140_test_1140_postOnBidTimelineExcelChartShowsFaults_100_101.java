package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_1140_test_1140_postOnBidTimelineExcelChartShowsFaults_100_101 {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (400) POST:/api/topTenSuppliers
    * 2 - (400) GET:/api/topTenSuppliers
    * 3 - (400) POST:/api/averageNumberOfTenderers
    * 4 - (400) POST:/api/averageNumberOfTenderers
    * 5 - (500) POST:/api/ocds/tendersWithLinkedProcurementPlanExcelChart
    * 6 - (500) POST:/api/ocds/tendersWithLinkedProcurementPlanExcelChart
    * 7 - (400) POST:/api/ocds/bidTimelineExcelChart
    * 8 - (400) POST:/api/ocds/bidTimelineExcelChart
    * Found 10 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_1140_postOnBidTimelineExcelChartShowsFaults_100_101() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/topTenSuppliers'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/topTenSuppliers?" + 
                    "bidTypeId=mf_HkQdAvCJy&" + 
                    "notBidTypeId=uH3xdOivpF7_t&notBidTypeId=wMTf8Mg5Hw&notBidTypeId=sGpXvtIaE&notBidTypeId=qF3Xw_g&notBidTypeId=&" + 
                    "procuringEntityId=_S2y935vT&procuringEntityId=6FnNqXVdT1QE9t&" + 
                    "notProcuringEntityId=1ofJOq5Tswz&notProcuringEntityId=D&" + 
                    "supplierId=wavBGxB3SVy3c&supplierId=ZE64CZgqD&supplierId=8iJ83Uz&" + 
                    "notBidSelectionMethod=&" + 
                    "planningLoc=GUAaoz&planningLoc=oO&planningLoc=dOd_B6sA&" + 
                    "procurementMethod=gTAsGA8F&procurementMethod=eYZNwKSPli&procurementMethod=M&" + 
                    "procuringEntityCityId=ktgJ4prxO_r2I&procuringEntityCityId=XMB&procuringEntityCityId=Xlq&procuringEntityCityId=vmeSPvj&" + 
                    "procuringEntityDepartmentId=&" + 
                    "year=696&year=205&year=630&" + 
                    "month=671&month=987&month=632&month=639&month=443&" + 
                    "pageNumber=312&" + 
                    "maxTenderValue=0.2872512280347138&" + 
                    "minAwardValue=0.9060669403374384&" + 
                    "maxAwardValue=0.9268528563372599&" + 
                    "monthly=true&" + 
                    "skip=caZh6KiJTesfngDx&" + 
                    "class=WeOPya&" + 
                    "yearFilterPagingRequest=uxffkdd")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(5))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(5))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(443.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(632.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(639.0))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[1].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("year"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(3))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(205.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(630.0))
                .body("'errors'[1].'rejectedValue'[2]", numberMatches(696.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[0]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[0]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[0]", "bidTypeId[0]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("bidTypeId[0]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("bidTypeId[0]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("bidTypeId[0]"))
                .body("'errors'[2].'rejectedValue'", containsString("mf_HkQdAvCJy"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 5"))
                .body("'path'", containsString("/api/topTenSuppliers"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/topTenSuppliers'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/topTenSuppliers?" + 
                    "bidTypeId=mf_HkQdAvCJy&" + 
                    "notBidTypeId=uH3xdOivpF7_t&notBidTypeId=wMTf8Mg5Hw&notBidTypeId=sGpXvtIaE&notBidTypeId=qF3Xw_g&notBidTypeId=&" + 
                    "procuringEntityId=_S2y935vT&procuringEntityId=6FnNqXVdT1QE9t&" + 
                    "bidSelectionMethod=I4tAgkG&bidSelectionMethod=r71&bidSelectionMethod=Lulov7&" + 
                    "notBidSelectionMethod=&" + 
                    "tenderLoc=BTrAsRi3ho&" + 
                    "procurementMethod=gTAsGA8F&procurementMethod=eYZNwKSPli&procurementMethod=M&" + 
                    "procuringEntityCityId=ktgJ4prxO_r2I&procuringEntityCityId=XMB&procuringEntityCityId=Xlq&procuringEntityCityId=vmeSPvj&" + 
                    "pageNumber=312&" + 
                    "pageSize=899&" + 
                    "maxAwardValue=0.9268528563372599&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "skip=Nek_HD1lcdb&" + 
                    "password=2SGpQ&" + 
                    "class=ZwtBWwpcjxF&" + 
                    "yearFilterPagingRequest=i_ZiecDxw&" + 
                    "username=dRw5i72zmNOE9r3")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(3))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[1]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[1]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[1]", "procuringEntityId[1]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[1]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("procuringEntityId[1]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("procuringEntityId[1]"))
                .body("'errors'[0].'rejectedValue'", containsString("_S2y935vT"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[0]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[0]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[0]", "bidTypeId[0]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("bidTypeId[0]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("bidTypeId[0]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("bidTypeId[0]"))
                .body("'errors'[1].'rejectedValue'", containsString("mf_HkQdAvCJy"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notBidTypeId[1]", "EachPattern.yearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[1]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notBidTypeId[1]", "notBidTypeId[1]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[1]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("notBidTypeId[1]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("notBidTypeId[1]"))
                .body("'errors'[2].'rejectedValue'", containsString("qF3Xw_g"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 3"))
                .body("'path'", containsString("/api/topTenSuppliers"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/averageNumberOfTenderers'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/averageNumberOfTenderers?" + 
                    "bidSelectionMethod=8TWw81PySY&bidSelectionMethod=tytuuWYe&bidSelectionMethod=l9dQYV1rkm&bidSelectionMethod=dMwodBzvN7YeT&bidSelectionMethod=_OmFbwP&" + 
                    "procurementMethod=DD5EY&" + 
                    "procuringEntityGroupId=997&procuringEntityGroupId=1264808370&procuringEntityGroupId=318&procuringEntityGroupId=492&procuringEntityGroupId=976&" + 
                    "year=431&year=934&" + 
                    "pageSize=402&" + 
                    "minTenderValue=0.7464303384719291&" + 
                    "maxTenderValue=0.10667707123382109&" + 
                    "minAwardValue=0.8880439360198817&" + 
                    "maxAwardValue=0.48506573216218063&" + 
                    "flagged=true&" + 
                    "skip=gkLZvdV4A4yiHN8&" + 
                    "class=JOh&" + 
                    "yearFilterPagingRequest=Co08")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(2))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(431.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(934.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/averageNumberOfTenderers"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/averageNumberOfTenderers'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/averageNumberOfTenderers?" + 
                    "bidTypeId=xzy6LSQC&bidTypeId=S1B&bidTypeId=GQwbRT&bidTypeId=aBy_rc7kUh2H4bZH&bidTypeId=GzI5ZKGB&" + 
                    "notProcuringEntityId=B8XmO5YSK5XgKS&notProcuringEntityId=QLfu&notProcuringEntityId=4MShsUA&notProcuringEntityId=&notProcuringEntityId=TSyvMLxiTsPaDV&" + 
                    "supplierId=nP&supplierId=1rDnLyqHbOFm0&supplierId=ApR3OhG1NqR&supplierId=nwsioNouMft&supplierId=zfDu2fzNs1&" + 
                    "contrMethod=Lonv&contrMethod=_UB&contrMethod=LULRAFAaeRUEc&" + 
                    "procuringEntityCityId=VTBYi&" + 
                    "procuringEntityDepartmentId=&" + 
                    "procuringEntityGroupId=997&procuringEntityGroupId=1264808370&procuringEntityGroupId=318&procuringEntityGroupId=492&procuringEntityGroupId=976&" + 
                    "year=431&year=934&" + 
                    "month=803&month=381&month=455&" + 
                    "pageNumber=739&" + 
                    "pageSize=402&" + 
                    "minTenderValue=0.7464303384719291&" + 
                    "maxTenderValue=0.10667707123382109&" + 
                    "maxAwardValue=0.48506573216218063&" + 
                    "flagged=true&" + 
                    "skip=&" + 
                    "password=50Yjr&" + 
                    "class=RK&" + 
                    "yearFilterPagingRequest=Hhg0A0c&" + 
                    "username=BN_Xdek4mEjkF8")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(2))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(431.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(934.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.contrMethod[2]", "EachPattern.yearFilterPagingRequest.contrMethod", "EachPattern.contrMethod[2]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.contrMethod[2]", "contrMethod[2]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("contrMethod[2]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("contrMethod[2]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("contrMethod[2]"))
                .body("'errors'[1].'rejectedValue'", containsString("_UB"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[3]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[3]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[3]", "bidTypeId[3]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("bidTypeId[3]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("bidTypeId[3]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("bidTypeId[3]"))
                .body("'errors'[2].'rejectedValue'", containsString("aBy_rc7kUh2H4bZH"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 4"))
                .body("'path'", containsString("/api/averageNumberOfTenderers"));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/spring/TranslationService_40_ensureLanguageLoaded.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/ocds/tendersWithLinkedProcurementPlanExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/ocds/tendersWithLinkedProcurementPlanExcelChart?" + 
                    "bidTypeId=zJo58l&bidTypeId=TWusqN86O&bidTypeId=DGwf&bidTypeId=TbNrN6wXf&bidTypeId=XkyM&" + 
                    "notProcuringEntityId=IgmVRgbbjFPdqA&notProcuringEntityId=xef&notProcuringEntityId=uHZswwsUP378vB&notProcuringEntityId=drt5awG1tLmZQ&notProcuringEntityId=gr24N&" + 
                    "bidSelectionMethod=lmbH588I&" + 
                    "procurementMethod=iVHhKbbI4&procurementMethod=u8lF9eitntBlpB&" + 
                    "procuringEntityDepartmentId=1194812477&procuringEntityDepartmentId=363&procuringEntityDepartmentId=185&procuringEntityDepartmentId=1163904110&procuringEntityDepartmentId=206&" + 
                    "pageNumber=891&" + 
                    "minTenderValue=0.12209036229904868&" + 
                    "minAwardValue=0.7988335970238092&" + 
                    "maxAwardValue=0.8811593263719397&" + 
                    "flagged=false&" + 
                    "langYearFilterPagingRequest=0ovXkW6iP")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/spring/TranslationService_40_ensureLanguageLoaded
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("Language must not be null!"))
                .body("'path'", containsString("/api/ocds/tendersWithLinkedProcurementPlanExcelChart"));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/spring/TranslationService_40_ensureLanguageLoaded.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/ocds/tendersWithLinkedProcurementPlanExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/ocds/tendersWithLinkedProcurementPlanExcelChart?" + 
                    "notProcuringEntityId=IgmVRgbbjFPdqA&notProcuringEntityId=xef&notProcuringEntityId=uHZswwsUP378vB&notProcuringEntityId=drt5awG1tLmZQ&notProcuringEntityId=gr24N&" + 
                    "supplierId=DmKwK8nuDH3Qun&supplierId=8982I3MmWjR&supplierId=Q&supplierId=AGKDn&" + 
                    "bidSelectionMethod=lmbH588I&" + 
                    "planningLoc=U38ow06eYAP&" + 
                    "tenderLoc=TMubGVKPoot&tenderLoc=rEZ9&" + 
                    "procuringEntityDepartmentId=1194812477&procuringEntityDepartmentId=363&procuringEntityDepartmentId=185&procuringEntityDepartmentId=1163904110&procuringEntityDepartmentId=206&" + 
                    "procuringEntityGroupId=271&procuringEntityGroupId=592&procuringEntityGroupId=908&procuringEntityGroupId=431&" + 
                    "pageSize=840&" + 
                    "minTenderValue=0.12209036229904868&" + 
                    "minAwardValue=0.7988335970238092&" + 
                    "maxAwardValue=0.8811593263719397&" + 
                    "electronicSubmission=true&" + 
                    "monthly=false&" + 
                    "skip=1RlUGuprmEbh&" + 
                    "password=YVdZiWm0&" + 
                    "class=0vc7Mfw7Uw&" + 
                    "langYearFilterPagingRequest=rQV9M&" + 
                    "username=hva_11rWtcZroLA")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/spring/TranslationService_40_ensureLanguageLoaded
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("Language must not be null!"))
                .body("'path'", containsString("/api/ocds/tendersWithLinkedProcurementPlanExcelChart"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/bidTimelineExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/ocds/bidTimelineExcelChart?" + 
                    "notProcuringEntityId=0LrJN&notProcuringEntityId=YWalgazVq_k5wmt&notProcuringEntityId=BnRdVSG6GOE&notProcuringEntityId=QekAgbfb8FxJ&" + 
                    "bidSelectionMethod=b7z6reiAYx2bNXy&bidSelectionMethod=KO&" + 
                    "contrMethod=&contrMethod=U6bNcNn&" + 
                    "planningLoc=o1q9F7qSMc&planningLoc=oM&planningLoc=UkN7AXEDkUX&planningLoc=8O&planningLoc=a&" + 
                    "tenderLoc=iIEDT34nrZmDvn2h&tenderLoc=a9uEUniiADG&tenderLoc=qyWKkEEG&tenderLoc=_N1fk9fU_kylJg&tenderLoc=aW&" + 
                    "procuringEntityDepartmentId=447&procuringEntityDepartmentId=45&procuringEntityDepartmentId=840&procuringEntityDepartmentId=417&procuringEntityDepartmentId=928&" + 
                    "procuringEntityGroupId=105&procuringEntityGroupId=986&procuringEntityGroupId=26&procuringEntityGroupId=314&" + 
                    "month=406&" + 
                    "pageSize=423&" + 
                    "maxTenderValue=0.71918628103889&" + 
                    "maxAwardValue=0.3680517842954102&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "skip=gc3SLbz7nmdoueJ&" + 
                    "class=3nDO&" + 
                    "langYearFilterPagingRequest=fG")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.langYearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(406.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.notProcuringEntityId[3]", "EachPattern.langYearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[3]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.notProcuringEntityId[3]", "notProcuringEntityId[3]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[3]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("notProcuringEntityId[3]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("notProcuringEntityId[3]"))
                .body("'errors'[1].'rejectedValue'", containsString("YWalgazVq_k5wmt"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/ocds/bidTimelineExcelChart"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/bidTimelineExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/ocds/bidTimelineExcelChart?" + 
                    "notBidTypeId=kM4oXJXsJ8y&notBidTypeId=KV2qtq&notBidTypeId=K5Cvurss&" + 
                    "notBidSelectionMethod=qA4vl_du&notBidSelectionMethod=PbO1cI3G&notBidSelectionMethod=Qa_C3Bnpr3EG&notBidSelectionMethod=bEDEn1Le&notBidSelectionMethod=oDn_7ssWw5KLUs&" + 
                    "contrMethod=&contrMethod=U6bNcNn&" + 
                    "planningLoc=o1q9F7qSMc&planningLoc=oM&planningLoc=UkN7AXEDkUX&planningLoc=8O&planningLoc=a&" + 
                    "procurementMethod=J3FQJFts&procurementMethod=1UodRvKymA&procurementMethod=FSzv3hxZYwivAPhm&procurementMethod=akMF6BZ&" + 
                    "procuringEntityDepartmentId=447&procuringEntityDepartmentId=45&procuringEntityDepartmentId=840&procuringEntityDepartmentId=417&procuringEntityDepartmentId=928&" + 
                    "procuringEntityGroupId=105&procuringEntityGroupId=986&procuringEntityGroupId=26&procuringEntityGroupId=314&" + 
                    "year=396&" + 
                    "month=406&" + 
                    "pageSize=423&" + 
                    "minAwardValue=0.7982929985046647&" + 
                    "monthly=true&" + 
                    "language=U&" + 
                    "skip=PT1p&" + 
                    "password=P65z02IEIfvxn&" + 
                    "class=i3jv2N&" + 
                    "langYearFilterPagingRequest=65FLq&" + 
                    "username=Q7jurdYYaF")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.langYearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(406.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.langYearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.year", "year"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[1].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[1].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("year"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(396.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/ocds/bidTimelineExcelChart"));
    }
}
