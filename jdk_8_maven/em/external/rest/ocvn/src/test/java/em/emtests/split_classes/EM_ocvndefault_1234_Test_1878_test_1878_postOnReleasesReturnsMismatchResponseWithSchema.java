package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_1878_test_1878_postOnReleasesReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (302) POST:/api/flags/i180/releases
    * 2 - (302) POST:/api/flags/i180/releases
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_1878_postOnReleasesReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 302 not defined for path '/api/flags/i180/releases'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/flags/i180/releases?" + 
                    "notBidTypeId=Evkh2t40aY8hA&notBidTypeId=MWFzuPC&notBidTypeId=vG5wfnRa&" + 
                    "procuringEntityId=_EM_4774_XYZ_&procuringEntityId=cI5d1hWvTBoTN&procuringEntityId=_EM_4775_XYZ_&procuringEntityId=_EM_4776_XYZ_&" + 
                    "bidSelectionMethod=&" + 
                    "notBidSelectionMethod=P&notBidSelectionMethod=7&notBidSelectionMethod=&notBidSelectionMethod=_EM_4778_XYZ_&notBidSelectionMethod=g22N71GCynT1q&" + 
                    "tenderLoc=_EM_4779_XYZ_&tenderLoc=N7&tenderLoc=3q&" + 
                    "procurementMethod=53PtQy&procurementMethod=_EM_4780_XYZ_&procurementMethod=_EM_4781_XYZ_&procurementMethod=puqfV&procurementMethod=_EM_4782_XYZ_&" + 
                    "procuringEntityCityId=uU&procuringEntityCityId=_EM_4783_XYZ_&procuringEntityCityId=G1FJF1SWpvJjOU&" + 
                    "procuringEntityDepartmentId=653&procuringEntityDepartmentId=902&" + 
                    "procuringEntityGroupId=619&procuringEntityGroupId=309&" + 
                    "pageNumber=597&" + 
                    "maxTenderValue=0.032093126179257636&" + 
                    "electronicSubmission=false&" + 
                    "monthly=true")
                .then()
                .statusCode(302)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 302 not defined for path '/api/flags/i180/releases'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/flags/i180/releases?" + 
                    "bidTypeId=_EM_4784_XYZ_&bidTypeId=_EM_4785_XYZ_&bidTypeId=_EM_4786_XYZ_&bidTypeId=7&" + 
                    "supplierId=_EM_4790_XYZ_&supplierId=wn3WkQSHmWGTq&" + 
                    "notBidSelectionMethod=_EM_4791_XYZ_&notBidSelectionMethod=_EM_4792_XYZ_&notBidSelectionMethod=_EM_4793_XYZ_&notBidSelectionMethod=uz6GMVqZD&notBidSelectionMethod=_EM_4794_XYZ_&" + 
                    "planningLoc=M3NG3&" + 
                    "procurementMethod=_EM_4797_XYZ_&procurementMethod=N2Zj&procurementMethod=_EM_4798_XYZ_&procurementMethod=puqfV&procurementMethod=A&" + 
                    "procuringEntityCityId=uU&procuringEntityCityId=_EM_4799_XYZ_&procuringEntityCityId=_EM_4800_XYZ_&" + 
                    "year=416&year=602&year=488&year=129&" + 
                    "month=475&month=362&month=988&" + 
                    "pageNumber=597&" + 
                    "pageSize=100&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(302)
                .assertThat()
                .body(isEmptyOrNullString());
    }
}
