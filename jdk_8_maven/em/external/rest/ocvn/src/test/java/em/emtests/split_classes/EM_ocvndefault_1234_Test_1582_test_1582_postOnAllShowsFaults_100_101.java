package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_1582_test_1582_postOnAllShowsFaults_100_101 {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (200) POST:/api/topTenLargestAwards
    * 2 - (400) POST:/api/topTenLargestAwards
    * 3 - (400) POST:/api/percentTendersCancelled
    * 4 - (500) POST:/api/ocds/location/search
    * 5 - (200) POST:/api/ocds/location/all
    * 6 - (200) POST:/api/ocds/location/all
    * 7 - (400) POST:/api/ocds/tendersByItemExcelChart
    * 8 - (400) POST:/api/costEffectivenessTenderAmount
    * 9 - (400) GET:/api/costEffectivenessTenderAmount
    * 10 - (400) POST:/api/ocds/release/all
    * Found 8 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_1582_postOnAllShowsFaults_100_101() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/topTenLargestAwards?" + 
                    "supplierId=36Ym53YebO_gYUz&supplierId=0jj9TUVqKDGF&" + 
                    "bidSelectionMethod=7rj&" + 
                    "planningLoc=&" + 
                    "procurementMethod=tbz5aIZ&procurementMethod=_8V45_Pm&procurementMethod=qMx&procurementMethod=0VFPSd&" + 
                    "procuringEntityCityId=o&" + 
                    "procuringEntityDepartmentId=561&procuringEntityDepartmentId=147&" + 
                    "minTenderValue=0.6192640454000364&" + 
                    "maxTenderValue=0.8117319278189784&" + 
                    "minAwardValue=0.34686532554316485&" + 
                    "password=FJ8YuqIeLWJI&" + 
                    "yearFilterPagingRequest=aC_U29IVHj&" + 
                    "username=qfGarKl64BB")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/topTenLargestAwards'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/topTenLargestAwards?" + 
                    "procuringEntityId=bahti4fX5upF7kM&procuringEntityId=57biki&procuringEntityId=vsBsU2L&procuringEntityId=laxh7MxsjJtM&procuringEntityId=GTZh&" + 
                    "notProcuringEntityId=OvM&" + 
                    "supplierId=36Ym53YebO_gYUz&supplierId=0jj9TUVqKDGF&" + 
                    "notBidSelectionMethod=&" + 
                    "tenderLoc=DB&tenderLoc=ji&" + 
                    "procuringEntityDepartmentId=561&procuringEntityDepartmentId=147&" + 
                    "procuringEntityGroupId=73&procuringEntityGroupId=502&procuringEntityGroupId=299&procuringEntityGroupId=12&" + 
                    "year=415&" + 
                    "pageSize=797&" + 
                    "maxAwardValue=0.5866570137148361&" + 
                    "skip=Y5CM3yxOhj4ZlgMW&" + 
                    "password=&" + 
                    "class=4BrRqZZPXq&" + 
                    "yearFilterPagingRequest=EcyV093nvcr&" + 
                    "username=NMUD3")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(415.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/topTenLargestAwards"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/percentTendersCancelled'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/percentTendersCancelled?" + 
                    "supplierId=hraOOZ&supplierId=hcnwhMAwr7&supplierId=M9fVgve0ycY7Yzu&supplierId=iaNhU&" + 
                    "planningLoc=&" + 
                    "procurementMethod=lpIkCJUHM&procurementMethod=a5&procurementMethod=K6I7Tx_j5Wb&procurementMethod=&" + 
                    "procuringEntityCityId=CxSe&procuringEntityCityId=DgNzGgJ&procuringEntityCityId=A&" + 
                    "year=615&year=387&year=233&year=485&" + 
                    "month=992&month=112&month=482&" + 
                    "maxTenderValue=0.3676797513031409&" + 
                    "maxAwardValue=0.9022848120698266&" + 
                    "electronicSubmission=false&" + 
                    "monthly=false")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(4))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(233.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(387.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(485.0))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[1].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("month"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(3))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(112.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(482.0))
                .body("'errors'[1].'rejectedValue'[2]", numberMatches(992.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/percentTendersCancelled"));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/rest/controller/selector/LocationSearchController_55_locationsSearch.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/ocds/location/search'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageNumber=506&" + 
                    "pageSize=593&" + 
                    "text=uHWzjTCHhwYuwQV&" + 
                    "password=lS9AT2E&" + 
                    "textSearchRequest=api%2Focds%2Frelease%2Fall&" + 
                    "username=05Ej7wpbXV3z4")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/rest/controller/selector/LocationSearchController_55_locationsSearch
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.data.mongodb.UncategorizedMongoDbException"))
                .body("'path'", containsString("/api/ocds/location/search"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/all?" + 
                    "password=QXQIBuYu1BNjUgh&" + 
                    "username=SwW")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/tendersByItemExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/tendersByItemExcelChart?" + 
                    "notBidTypeId=G&" + 
                    "procuringEntityId=_EM_36933_XYZ_&procuringEntityId=Wud239jZ&procuringEntityId=&" + 
                    "notProcuringEntityId=msrNwAgvfS3mE&notProcuringEntityId=j0DNJ2HLg19&notProcuringEntityId=EexUbSCG6S449W&notProcuringEntityId=UqIuDUykzj50O&notProcuringEntityId=nCkS1N&" + 
                    "planningLoc=pfQ16D6Wx3Dr0etI&planningLoc=_EM_36942_XYZ_&planningLoc=_EM_36943_XYZ_&planningLoc=Ip616&planningLoc=vFmo3Df2SAuor&" + 
                    "tenderLoc=bUds&tenderLoc=DBYmqe&" + 
                    "procuringEntityCityId=lLFkOfwW1abb1Io&" + 
                    "procuringEntityGroupId=413&procuringEntityGroupId=22&procuringEntityGroupId=871&procuringEntityGroupId=946&" + 
                    "month=&" + 
                    "pageSize=593&" + 
                    "minTenderValue=-0.8745040896805225&" + 
                    "maxTenderValue=0.475&" + 
                    "minAwardValue=0.7759198456775454&" + 
                    "maxAwardValue=-0.03109446&" + 
                    "flagged=true&" + 
                    "language=oR&" + 
                    "langYearFilterPagingRequest=QDQwVkS")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.procuringEntityId[2]", "EachPattern.langYearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[2]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.procuringEntityId[2]", "procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_36933_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/ocds/tendersByItemExcelChart"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/costEffectivenessTenderAmount'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/costEffectivenessTenderAmount?" + 
                    "bidTypeId=FRAUD&bidTypeId=J2ndUreaM&bidTypeId=yUPP&bidTypeId=RIGGING&" + 
                    "procuringEntityId=_EM_36933_XYZ_&procuringEntityId=Wud239jZ&procuringEntityId=&" + 
                    "bidSelectionMethod=P2HfTMfR&" + 
                    "contrMethod=xTJx&contrMethod=Tj&contrMethod=jX0nAPxP6Mc3&contrMethod=HSuCmWjDECkD&contrMethod=Viorgp7aX6P1t&" + 
                    "procuringEntityDepartmentId=211&procuringEntityDepartmentId=798&procuringEntityDepartmentId=161&" + 
                    "year=552&" + 
                    "month=&" + 
                    "pageNumber=506&" + 
                    "pageSize=593&" + 
                    "minTenderValue=-0.8745040896805225&" + 
                    "maxTenderValue=0.475&" + 
                    "maxAwardValue=-0.03109446&" + 
                    "flagged=true&" + 
                    "groupingFilterPagingRequest=4jGKez3u9gJ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.groupingFilterPagingRequest.procuringEntityId[2]", "EachPattern.groupingFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[2]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("groupingFilterPagingRequest.procuringEntityId[2]", "procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("groupingFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_36933_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.groupingFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("groupingFilterPagingRequest.year", "year"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[1].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[1].'objectName'", containsString("groupingFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("year"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(552.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='groupingFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/costEffectivenessTenderAmount"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/costEffectivenessTenderAmount'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/costEffectivenessTenderAmount?" + 
                    "notBidTypeId=G&" + 
                    "notProcuringEntityId=msrNwAgvfS3mE&notProcuringEntityId=j0DNJ2HLg19&notProcuringEntityId=EexUbSCG6S449W&notProcuringEntityId=UqIuDUykzj50O&notProcuringEntityId=nCkS1N&" + 
                    "bidSelectionMethod=_EM_42922_XYZ_&" + 
                    "planningLoc=pfQ16D6Wx3Dr0etI&planningLoc=_EM_36942_XYZ_&planningLoc=_EM_36943_XYZ_&planningLoc=Ip616&planningLoc=vFmo3Df2SAuor&" + 
                    "tenderLoc=bUds&tenderLoc=DBYmqe&" + 
                    "procurementMethod=eG6OzHHDHvx&" + 
                    "procuringEntityCityId=lLFkOfwW1abb1Io&" + 
                    "procuringEntityDepartmentId=211&procuringEntityDepartmentId=798&procuringEntityDepartmentId=161&" + 
                    "year=552&" + 
                    "minAwardValue=0.7759198456775454&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "skip=&" + 
                    "groupingFilterPagingRequest=DRo_pYVTH")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.groupingFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("groupingFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("groupingFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(552.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='groupingFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/costEffectivenessTenderAmount"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/release/all'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/release/all?" + 
                    "notBidTypeId=G&" + 
                    "procuringEntityId=_EM_36933_XYZ_&procuringEntityId=Wud239jZ&procuringEntityId=&" + 
                    "notProcuringEntityId=msrNwAgvfS3mE&notProcuringEntityId=j0DNJ2HLg19&notProcuringEntityId=EexUbSCG6S449W&notProcuringEntityId=UqIuDUykzj50O&notProcuringEntityId=nCkS1N&" + 
                    "bidSelectionMethod=P2HfTMfR&" + 
                    "notBidSelectionMethod=JY8g6cgc0GLOr&notBidSelectionMethod=yayNKt&notBidSelectionMethod=G2&notBidSelectionMethod=CHPdfHDP__&" + 
                    "planningLoc=pfQ16D6Wx3Dr0etI&planningLoc=_EM_36942_XYZ_&planningLoc=_EM_36943_XYZ_&planningLoc=Ip616&planningLoc=vFmo3Df2SAuor&" + 
                    "tenderLoc=_EM_36944_XYZ_&tenderLoc=DBYmqe&" + 
                    "procuringEntityCityId=lLFkOfwW1abb1Io&" + 
                    "procuringEntityDepartmentId=211&procuringEntityDepartmentId=798&procuringEntityDepartmentId=161&" + 
                    "pageNumber=506&" + 
                    "pageSize=593&" + 
                    "minTenderValue=-0.8745040896805225&" + 
                    "maxTenderValue=0.475&" + 
                    "minAwardValue=0.7759198456775454&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "yearFilterPagingRequest=59bwAf")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[2]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[2]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[2]", "procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_36933_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/ocds/release/all"));
    }
}
