package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_63_test_63_getOnCostEffectivenessTenderAwardAmountShowsFaults_100_101 {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (200) POST:/api/ocds/location/all
    * 2 - (200) POST:/api/ocds/location/all
    * 3 - (500) POST:/api/ocds/location/search
    * 4 - (200) POST:/api/ocds/location/search
    * 5 - (400) POST:/api/ocds/numberCancelledFundingExcelChart
    * 6 - (400) GET:/api/ocds/numberCancelledFundingExcelChart
    * 7 - (200) POST:/api/ocds/release/budgetProjectId/{projectId}
    * 8 - (200) GET:/api/ocds/release/budgetProjectId/{projectId}
    * 9 - (400) POST:/api/costEffectivenessTenderAwardAmount
    * 10 - (400) GET:/api/costEffectivenessTenderAwardAmount
    * Found 8 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_63_getOnCostEffectivenessTenderAwardAmountShowsFaults_100_101() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/all?" + 
                    "password=_EM_33906_XYZ_&" + 
                    "username=cEVOD")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/all?username=_EM_40027_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/rest/controller/selector/LocationSearchController_55_locationsSearch.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/ocds/location/search'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageNumber=887&" + 
                    "pageSize=320&" + 
                    "text=ntO44L&" + 
                    "textSearchRequest=W4GvoULbR6h3r17")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/rest/controller/selector/LocationSearchController_55_locationsSearch
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.data.mongodb.UncategorizedMongoDbException"))
                .body("'path'", containsString("/api/ocds/location/search"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageNumber=887&" + 
                    "pageSize=320&" + 
                    "skip=osqnTw1U_Fqw7&" + 
                    "class=_EM_33907_XYZ_&" + 
                    "username=_EM_40027_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/numberCancelledFundingExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/numberCancelledFundingExcelChart?" + 
                    "bidTypeId=mcbkLh1kcp&" + 
                    "notBidTypeId=_EM_33606_XYZ_&notBidTypeId=_EM_33607_XYZ_&notBidTypeId=_EM_33608_XYZ_&" + 
                    "procuringEntityId=XU&" + 
                    "notProcuringEntityId=Kwb2i39Q&notProcuringEntityId=_EM_33909_XYZ_&notProcuringEntityId=_EM_33908_XYZ_&notProcuringEntityId=EDZnUU&" + 
                    "contrMethod=H7FyukarokkF7BUB&" + 
                    "planningLoc=&" + 
                    "tenderLoc=jmciZPZazyu&" + 
                    "procurementMethod=oe&procurementMethod=ZIo&procurementMethod=roNOdj3sNrdJm&procurementMethod=_EM_33612_XYZ_&procurementMethod=BCrSD&" + 
                    "procuringEntityGroupId=-1791&procuringEntityGroupId=423&procuringEntityGroupId=94&procuringEntityGroupId=724&" + 
                    "pageSize=320&" + 
                    "minTenderValue=-0.20096264244206574&" + 
                    "maxTenderValue=0.0465&" + 
                    "minAwardValue=-483.876680552946&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "language=w0zMG41b&" + 
                    "langYearFilterPagingRequest=G6iNCn20YbQd")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.notBidTypeId[0]", "EachPattern.langYearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[0]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.notBidTypeId[0]", "notBidTypeId[0]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[0]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notBidTypeId[0]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notBidTypeId[0]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_33606_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.notProcuringEntityId[2]", "EachPattern.langYearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[2]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.notProcuringEntityId[2]", "notProcuringEntityId[2]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_33908_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/ocds/numberCancelledFundingExcelChart"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/numberCancelledFundingExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/numberCancelledFundingExcelChart?" + 
                    "bidTypeId=mcbkLh1kcp&" + 
                    "procuringEntityId=XU&" + 
                    "notProcuringEntityId=Kwb2i39Q&notProcuringEntityId=_EM_33610_XYZ_&notProcuringEntityId=_EM_33908_XYZ_&notProcuringEntityId=EDZnUU&" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=P5Ak2ueQ9Gja&" + 
                    "notBidSelectionMethod=_EM_33632_XYZ_&notBidSelectionMethod=_EM_33633_XYZ_&notBidSelectionMethod=c9&" + 
                    "contrMethod=H7FyukarokkF7BUB&" + 
                    "planningLoc=&" + 
                    "tenderLoc=jmciZPZazyu&" + 
                    "procurementMethod=_EM_33618_XYZ_&procurementMethod=ZIo&procurementMethod=roNOdj3sNrdJm&procurementMethod=f&procurementMethod=_EM_33619_XYZ_&" + 
                    "procuringEntityCityId=zn79_8kB4WCHilA&" + 
                    "pageNumber=887&" + 
                    "minTenderValue=-0.20096264244206574&" + 
                    "maxTenderValue=0.0465&" + 
                    "minAwardValue=-483.876680552946&" + 
                    "maxAwardValue=-0.12421201402314996&" + 
                    "electronicSubmission=true&" + 
                    "monthly=true&" + 
                    "language=w0zMG41b")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.notProcuringEntityId[2]", "EachPattern.langYearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[2]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.notProcuringEntityId[2]", "notProcuringEntityId[2]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_33610_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/ocds/numberCancelledFundingExcelChart"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. Instance type (null) does not match any allowed primitive type (allowed: ["object"])
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/release/budgetProjectId/pLec6zp")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. Instance type (null) does not match any allowed primitive type (allowed: ["object"])
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/release/budgetProjectId/pLec6zp?" + 
                    "password=2LKiGENbQqcnWy&" + 
                    "username=_EM_40027_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/costEffectivenessTenderAwardAmount'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/costEffectivenessTenderAwardAmount?" + 
                    "bidTypeId=mcbkLh1kcp&" + 
                    "notBidTypeId=COLLUSION&notBidTypeId=whIKeyBXre2LapMM&notBidTypeId=_EM_33622_XYZ_&" + 
                    "notProcuringEntityId=Kwb2i39Q&notProcuringEntityId=_EM_33909_XYZ_&notProcuringEntityId=_EM_33908_XYZ_&notProcuringEntityId=EDZnUU&" + 
                    "bidSelectionMethod=P5Ak2ueQ9Gja&" + 
                    "contrMethod=H7FyukarokkF7BUB&" + 
                    "planningLoc=&" + 
                    "tenderLoc=jmciZPZazyu&" + 
                    "procuringEntityCityId=zn79_8kB4WCHilA&" + 
                    "procuringEntityDepartmentId=912&" + 
                    "procuringEntityGroupId=-1791&procuringEntityGroupId=423&procuringEntityGroupId=94&procuringEntityGroupId=724&" + 
                    "year=&" + 
                    "month=&" + 
                    "pageNumber=887&" + 
                    "minTenderValue=-0.20096264244206574&" + 
                    "maxTenderValue=0.0465&" + 
                    "maxAwardValue=-0.12421201402314996&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "groupingFilterPagingRequest=kaJtfE_pJ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.groupingFilterPagingRequest.notBidTypeId[1]", "EachPattern.groupingFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[1]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("groupingFilterPagingRequest.notBidTypeId[1]", "notBidTypeId[1]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[1]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notBidTypeId[1]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("groupingFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notBidTypeId[1]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_33622_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.groupingFilterPagingRequest.notProcuringEntityId[2]", "EachPattern.groupingFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[2]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("groupingFilterPagingRequest.notProcuringEntityId[2]", "notProcuringEntityId[2]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("groupingFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_33908_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='groupingFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/costEffectivenessTenderAwardAmount"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/costEffectivenessTenderAwardAmount'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/costEffectivenessTenderAwardAmount?" + 
                    "bidTypeId=mcbkLh1kcp&" + 
                    "notBidTypeId=COLLUSION&notBidTypeId=whIKeyBXre2LapMM&notBidTypeId=Y_X0pLtT5Y&" + 
                    "procuringEntityId=XU&" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=P5Ak2ueQ9Gja&" + 
                    "notBidSelectionMethod=_EM_33632_XYZ_&notBidSelectionMethod=_EM_33633_XYZ_&notBidSelectionMethod=c9&" + 
                    "tenderLoc=&" + 
                    "procuringEntityCityId=zn79_8kB4WCHilA&" + 
                    "procuringEntityDepartmentId=912&" + 
                    "procuringEntityGroupId=-1791&procuringEntityGroupId=423&procuringEntityGroupId=94&procuringEntityGroupId=724&" + 
                    "month=&" + 
                    "pageNumber=887&" + 
                    "pageSize=320&" + 
                    "maxAwardValue=-0.12421201402314996&" + 
                    "electronicSubmission=true&" + 
                    "monthly=true&" + 
                    "groupByCategory=lIBht6akimVW_nrk&" + 
                    "password=2LKiGENbQqcnWy&" + 
                    "class=_EM_33907_XYZ_&" + 
                    "groupingFilterPagingRequest=CKaEvnft0YaB73wE&" + 
                    "username=_EM_40027_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.groupingFilterPagingRequest.notBidTypeId[1]", "EachPattern.groupingFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[1]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("groupingFilterPagingRequest.notBidTypeId[1]", "notBidTypeId[1]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[1]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notBidTypeId[1]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("groupingFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notBidTypeId[1]"))
                .body("'errors'[0].'rejectedValue'", containsString("Y_X0pLtT5Y"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='groupingFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/costEffectivenessTenderAwardAmount"));
    }
}
