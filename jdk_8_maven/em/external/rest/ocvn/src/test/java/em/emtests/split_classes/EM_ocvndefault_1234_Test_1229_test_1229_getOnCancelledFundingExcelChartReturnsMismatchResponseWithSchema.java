package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_1229_test_1229_getOnCancelledFundingExcelChartReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (400) GET:/api/ocds/cancelledFundingExcelChart
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1229_getOnCancelledFundingExcelChartReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/cancelledFundingExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ocds/cancelledFundingExcelChart?" + 
                    "bidTypeId=true&bidTypeId=X7fwhLCqemJ&bidTypeId=error&bidTypeId=&" + 
                    "notBidTypeId=_EM_567_XYZ_&notBidTypeId=_EM_568_XYZ_&notBidTypeId=I&notBidTypeId=1&" + 
                    "procuringEntityId=9h&procuringEntityId=&procuringEntityId=2%2FTQ50&procuringEntityId=_EM_32954_XYZ_&" + 
                    "notProcuringEntityId=Cb&notProcuringEntityId=MQQp9xNY&" + 
                    "supplierId=czAN6g&supplierId=C8FnWmjgwfw&" + 
                    "bidSelectionMethod=_EM_575_XYZ_&bidSelectionMethod=ngLms9o&bidSelectionMethod=craxe6u&" + 
                    "notBidSelectionMethod=KJg_S68aU&notBidSelectionMethod=4Azzf7wca&notBidSelectionMethod=lzXYl6TTD36hd&notBidSelectionMethod=_EM_577_XYZ_&notBidSelectionMethod=_EM_578_XYZ_&" + 
                    "contrMethod=_EM_32394_XYZ_&contrMethod=XwnRVMVnQ9hQPP&contrMethod=_EM_579_XYZ_&contrMethod=GjbEj9mgI&" + 
                    "planningLoc=UDU_5%3AU_XUVU&planningLoc=po_tQYv&planningLoc=_EM_32866_XYZ&planningLoc=_EM_32955_XYZ_&" + 
                    "tenderLoc=month&" + 
                    "procurementMethod=_EM_585_XYZ_&procurementMethod=Z2bu&procurementMethod=QDeRdCGyXkzwQ&procurementMethod=_EM_587_XYZ_&" + 
                    "procuringEntityCityId=_EM_588_XYZ_&procuringEntityCityId=_EM_32392_XYZ_&" + 
                    "procuringEntityDepartmentId=112&procuringEntityDepartmentId=499&procuringEntityDepartmentId=-130205&" + 
                    "procuringEntityGroupId=8800&procuringEntityGroupId=911&procuringEntityGroupId=96&procuringEntityGroupId=-4194167&procuringEntityGroupId=10991&" + 
                    "year=&" + 
                    "month=-1888123583&month=125&month=694&month=525024&" + 
                    "pageNumber=-113&" + 
                    "pageSize=470&" + 
                    "minTenderValue=-3.64811550127&" + 
                    "maxTenderValue=-0.17643399187928632&" + 
                    "minAwardValue=-8.988465674311579E307&" + 
                    "maxAwardValue=0.689280354597&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "language=k_mEJkBuBHeP&" + 
                    "langYearFilterPagingRequest=_EM_32396_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(5))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.contrMethod[2]", "EachPattern.langYearFilterPagingRequest.contrMethod", "EachPattern.contrMethod[2]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.contrMethod[2]", "contrMethod[2]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("contrMethod[2]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("contrMethod[2]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("contrMethod[2]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_32394_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.procuringEntityId[1]", "EachPattern.langYearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[1]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.procuringEntityId[1]", "procuringEntityId[1]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[1]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("procuringEntityId[1]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("procuringEntityId[1]"))
                .body("'errors'[1].'rejectedValue'", containsString("2/TQ50"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("Min.langYearFilterPagingRequest.pageNumber", "Min.pageNumber", "Min.java.lang.Integer", "Min"))
                .body("'errors'[2].'arguments'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.pageNumber", "pageNumber"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("pageNumber"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("pageNumber"))
                .body("'errors'[2].'arguments'[1]", numberMatches(0.0))
                .body("'errors'[2].'defaultMessage'", containsString("must be greater than or equal to 0"))
                .body("'errors'[2].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("pageNumber"))
                .body("'errors'[2].'rejectedValue'", numberMatches(-113.0))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("Min"))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 5"))
                .body("'path'", containsString("/api/ocds/cancelledFundingExcelChart"));
    }
}
