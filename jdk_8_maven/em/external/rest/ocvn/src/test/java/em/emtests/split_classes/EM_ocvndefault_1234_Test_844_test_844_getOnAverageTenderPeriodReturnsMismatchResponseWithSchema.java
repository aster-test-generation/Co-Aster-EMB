package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_844_test_844_getOnAverageTenderPeriodReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (400) POST:/api/averageTenderPeriod
    * 2 - (400) GET:/api/averageTenderPeriod
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_844_getOnAverageTenderPeriodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/averageTenderPeriod'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/averageTenderPeriod?" + 
                    "bidTypeId=_EM_37983_XYZ_&" + 
                    "notBidTypeId=_EM_6142_XYZ_&notBidTypeId=_EM_37977_XYZ_&notBidTypeId=2OaF&notBidTypeId=&notBidTypeId=_EM_37978_XYZ_&" + 
                    "procuringEntityId=_EM_37981_XYZ_&" + 
                    "notProcuringEntityId=tu4&notProcuringEntityId=N_jqTIKGkKM&notProcuringEntityId=Q0CUrPBQp3x&" + 
                    "supplierId=_EM_37993_XYZ_&supplierId=oNR5&" + 
                    "bidSelectionMethod=1C4J%40MEz&" + 
                    "notBidSelectionMethod=hijJs&" + 
                    "contrMethod=M1XjiFZXVvBZzr&contrMethod=J7&contrMethod=_EM_6148_XYZ_&contrMethod=_EM_37979_XYZ_S&" + 
                    "planningLoc=_EM_37990_XYZ_&" + 
                    "tenderLoc=xIUUZU4mhuU&" + 
                    "procurementMethod=e9a10LKFaI5vmGSEA&" + 
                    "procuringEntityCityId=EUWnIb1JgZkU2_Dv&procuringEntityCityId=_EM_6151_XYZ_&procuringEntityCityId=yWBtIsRavbOc9&" + 
                    "procuringEntityDepartmentId=317&procuringEntityDepartmentId=1766153705&procuringEntityDepartmentId=947&procuringEntityDepartmentId=298&procuringEntityDepartmentId=-1492&" + 
                    "procuringEntityGroupId=65&procuringEntityGroupId=-1015586&procuringEntityGroupId=127&procuringEntityGroupId=679&" + 
                    "year=-523859&" + 
                    "month=8964&month=-635&" + 
                    "pageNumber=-523895&" + 
                    "pageSize=256&" + 
                    "minTenderValue=-0.7802974125334878&" + 
                    "maxTenderValue=0.730292&" + 
                    "minAwardValue=-42443.56738801834&" + 
                    "maxAwardValue=0.9902384542120088&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "skip=_EM_37988_XYZ_&" + 
                    "class=iMaa4TCpILD5&" + 
                    "yearFilterPagingRequest=LP")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(8))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[0]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[0]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[0]", "procuringEntityId[0]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[0]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("procuringEntityId[0]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("procuringEntityId[0]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_37981_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("Min.yearFilterPagingRequest.pageNumber", "Min.pageNumber", "Min.java.lang.Integer", "Min"))
                .body("'errors'[1].'arguments'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.pageNumber", "pageNumber"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("pageNumber"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("pageNumber"))
                .body("'errors'[1].'arguments'[1]", numberMatches(0.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be greater than or equal to 0"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("pageNumber"))
                .body("'errors'[1].'rejectedValue'", numberMatches(-523895.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("Min"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[2].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[2].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[2].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("month"))
                .body("'errors'[2].'rejectedValue'.size()", equalTo(2))
                .body("'errors'[2].'rejectedValue'[0]", numberMatches(-635.0))
                .body("'errors'[2].'rejectedValue'[1]", numberMatches(8964.0))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachRange"))
                // Skipping assertions on the remaining 5 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 8"))
                .body("'path'", containsString("/api/averageTenderPeriod"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/averageTenderPeriod'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/averageTenderPeriod?" + 
                    "notBidTypeId=9F&notBidTypeId=_EM_37977_XYZ_&notBidTypeId=_EM_37991_XYZ_&notBidTypeId=_EM_37992_XYZ_&notBidTypeId=SdQlf3N&" + 
                    "procuringEntityId=_EM_37981_XYZ_&" + 
                    "notProcuringEntityId=tu4&notProcuringEntityId=N_jqTIKGkKM&notProcuringEntityId=Q0CUrPBQp3x&" + 
                    "supplierId=_EM_37993_XYZ_&supplierId=oNR5&" + 
                    "notBidSelectionMethod=hijJs&" + 
                    "tenderLoc=&" + 
                    "procuringEntityCityId=EUWnIb1JgZkU2_Dv&procuringEntityCityId=_EM_6151_XYZ_&procuringEntityCityId=yWBtIsRavbOc9&" + 
                    "month=8964&month=-635&" + 
                    "pageNumber=-523895&" + 
                    "pageSize=256&" + 
                    "minTenderValue=-0.7802974125334878&" + 
                    "minAwardValue=-42443.56738801834&" + 
                    "maxAwardValue=0.9902384542120088&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "skip=pa4pzp8gBaRHt7&" + 
                    "class=6uJHxZk9JaB68")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(5))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(2))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(-635.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(8964.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notBidTypeId[2]", "EachPattern.yearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[2]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notBidTypeId[2]", "notBidTypeId[2]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[2]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("notBidTypeId[2]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("notBidTypeId[2]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_37977_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[0]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[0]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[0]", "notProcuringEntityId[0]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[2].'rejectedValue'", containsString("N_jqTIKGkKM"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 5"))
                .body("'path'", containsString("/api/averageTenderPeriod"));
    }
}
