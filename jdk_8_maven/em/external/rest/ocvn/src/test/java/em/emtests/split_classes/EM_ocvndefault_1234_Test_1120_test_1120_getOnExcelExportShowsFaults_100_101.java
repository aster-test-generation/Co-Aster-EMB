package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_1120_test_1120_getOnExcelExportShowsFaults_100_101 {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (302) GET:/api/totalEligibleIndicatorsByIndicatorType
    * 2 - (400) POST:/api/averageNumberOfTenderers
    * 3 - (500) GET:/api/averageNumberOfTenderers
    * 4 - (200) POST:/api/qualityPlannedFundingByLocation
    * 5 - (200) POST:/api/qualityPlannedFundingByLocation
    * 6 - (400) GET:/api/ocds/excelExport
    * Found 5 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_1120_getOnExcelExportShowsFaults_100_101() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 302 not defined for path '/api/totalEligibleIndicatorsByIndicatorType'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/totalEligibleIndicatorsByIndicatorType?" + 
                    "bidTypeId=_EM_28982_XYZ_&bidTypeId=6mXyr&bidTypeId=EmBcZ8tP&bidTypeId=_EM_28983_XYZ_&bidTypeId=YiShVML28xlvpKvm&" + 
                    "notBidTypeId=_EM_28984_XYZ_&notBidTypeId=FRAUD&notBidTypeId=RIGGING&notBidTypeId=D1tTcOeEeKgyQg&notBidTypeId=COLLUSION&" + 
                    "supplierId=_EM_28986_XYZ_&supplierId=&supplierId=_EM_28987_XYZ_&supplierId=_EM_28988_XYZ_&" + 
                    "contrMethod=&" + 
                    "planningLoc=&" + 
                    "procurementMethod=j&procurementMethod=C_yVvCz2xMR5&" + 
                    "procuringEntityDepartmentId=996&procuringEntityDepartmentId=-256&procuringEntityDepartmentId=616&" + 
                    "procuringEntityGroupId=334&procuringEntityGroupId=466&procuringEntityGroupId=639&procuringEntityGroupId=140&procuringEntityGroupId=354&" + 
                    "year=330&" + 
                    "month=238&" + 
                    "pageNumber=308&" + 
                    "maxTenderValue=0.15272815494644798&" + 
                    "maxAwardValue=0.596347147844543&" + 
                    "flagged=true&" + 
                    "skip=XN9N&" + 
                    "password=_EM_28993_XYZ_&" + 
                    "class=_EM_28994_XYZ_&" + 
                    "yearFilterPagingRequest=_EM_28995_XYZ_&" + 
                    "username=_EM_28996_XYZ_")
                .then()
                .statusCode(302)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/averageNumberOfTenderers'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/averageNumberOfTenderers?" + 
                    "bidTypeId=b4e4BV_ed0LN&bidTypeId=48&" + 
                    "notProcuringEntityId=s7VuU&notProcuringEntityId=JH7Lt&" + 
                    "supplierId=6UGLX&supplierId=8BVb6Q6g7m&supplierId=Wl1x%3F0A3&" + 
                    "bidSelectionMethod=RUL7qYNTJ&bidSelectionMethod=hbByq_sm4E&bidSelectionMethod=bDyaL&bidSelectionMethod=5lxUfUdI&bidSelectionMethod=kjg&" + 
                    "contrMethod=K66Hc&" + 
                    "planningLoc=A_t9CXt4&planningLoc=CHLxvkGBLG3Yoi&planningLoc=wN&planningLoc=dh2lG7G0mJ&planningLoc=WfPPp0&" + 
                    "tenderLoc=8&tenderLoc=3cO5iUOKiJVz&tenderLoc=y8gD5p77&tenderLoc=fLLHegRJ&" + 
                    "procurementMethod=&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=581&procuringEntityDepartmentId=267&procuringEntityDepartmentId=522&procuringEntityDepartmentId=927&" + 
                    "procuringEntityGroupId=&" + 
                    "pageSize=282&" + 
                    "maxTenderValue=0.12731566079483558&" + 
                    "minAwardValue=0.9543144347846284&" + 
                    "monthly=true&" + 
                    "skip=yuMGk&" + 
                    "class=p1aMS4kbpb7GkuXH&" + 
                    "yearFilterPagingRequest=9")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[1]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[1]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[1]", "bidTypeId[1]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("bidTypeId[1]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("bidTypeId[1]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("bidTypeId[1]"))
                .body("'errors'[0].'rejectedValue'", containsString("b4e4BV_ed0LN"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/averageNumberOfTenderers"));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/rest/controller/GenericOCDSController_353_lambda$getContrMethodFilterCriteria$1.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/averageNumberOfTenderers'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/averageNumberOfTenderers?" + 
                    "notProcuringEntityId=s7VuU&notProcuringEntityId=JH7Lt&" + 
                    "notBidSelectionMethod=rkUBemh&notBidSelectionMethod=a&" + 
                    "contrMethod=K66Hc&" + 
                    "planningLoc=A_t9CXt4&planningLoc=CHLxvkGBLG3Yoi&planningLoc=wN&planningLoc=dh2lG7G0mJ&planningLoc=WfPPp0&" + 
                    "procuringEntityDepartmentId=581&procuringEntityDepartmentId=267&procuringEntityDepartmentId=522&procuringEntityDepartmentId=927&" + 
                    "pageNumber=357&" + 
                    "minTenderValue=0.7732043930193369&" + 
                    "maxAwardValue=0.45352264807601517&" + 
                    "electronicSubmission=true&" + 
                    "monthly=true&" + 
                    "skip=znq6EP&" + 
                    "password=rJ_joLGnlsEm&" + 
                    "class=eFQrznb74ln09&" + 
                    "yearFilterPagingRequest=5P8M_q&" + 
                    "username=gtmmQC_8bri1SDc")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/rest/controller/GenericOCDSController_353_lambda$getContrMethodFilterCriteria$1
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("invalid hexadecimal representation of an ObjectId: [K66Hc]"))
                .body("'path'", containsString("/api/averageNumberOfTenderers"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/api/qualityPlannedFundingByLocation?" + 
                    "notProcuringEntityId=b1IJYMSqTz&" + 
                    "procuringEntityCityId=1LZPWqGxGh&procuringEntityCityId=9y&procuringEntityCityId=_PSOSTjfUZkh6W&" + 
                    "procuringEntityDepartmentId=832&procuringEntityDepartmentId=744&" + 
                    "pageSize=740&" + 
                    "minTenderValue=0.8818874981659526&" + 
                    "minAwardValue=0.469140794641584&" + 
                    "maxAwardValue=0.14898956206537572&" + 
                    "flagged=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/api/qualityPlannedFundingByLocation?" + 
                    "bidTypeId=&" + 
                    "notProcuringEntityId=b1IJYMSqTz&" + 
                    "bidSelectionMethod=lJKrzHhwimoj&" + 
                    "planningLoc=Ylh0jibSrFfeP&planningLoc=h8RmDoHhd0KR0tc&planningLoc=9RkAN4&" + 
                    "tenderLoc=jLsA5FIL&" + 
                    "procurementMethod=YU_wAb&procurementMethod=&procurementMethod=YA7XU&procurementMethod=yZXeauJkxo9Bz&" + 
                    "procuringEntityCityId=1LZPWqGxGh&procuringEntityCityId=9y&procuringEntityCityId=_PSOSTjfUZkh6W&" + 
                    "maxTenderValue=0.9705594733245962&" + 
                    "minAwardValue=0.469140794641584&" + 
                    "maxAwardValue=0.14898956206537572&" + 
                    "flagged=true&" + 
                    "class=JYJSxwqy")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/excelExport'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ocds/excelExport?" + 
                    "bidTypeId=&" + 
                    "notBidTypeId=We&notBidTypeId=ov3kGZT_wtF75s&notBidTypeId=sf0MfJ7f1&" + 
                    "notBidSelectionMethod=wj321&notBidSelectionMethod=q4EEfe2DN4&" + 
                    "planningLoc=KSsVZCxm3Z0E&planningLoc=WzDvm&" + 
                    "tenderLoc=RUymed3Ngt7Y&tenderLoc=4Aq&tenderLoc=1iLtwuc2VWl8zX3&" + 
                    "procurementMethod=&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=447&procuringEntityDepartmentId=746&procuringEntityDepartmentId=196&" + 
                    "month=958&month=283&month=303&month=716&month=8&" + 
                    "minAwardValue=0.8753653102768584&" + 
                    "electronicSubmission=false&" + 
                    "EMextraParam123=_EM_9603_XYZ_&" + 
                    "password=4D2QNHn2FEjC4&" + 
                    "yearFilterPagingRequest=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(5))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(8.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(283.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(303.0))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notBidTypeId[1]", "EachPattern.yearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[1]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notBidTypeId[1]", "notBidTypeId[1]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[1]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("notBidTypeId[1]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("notBidTypeId[1]"))
                .body("'errors'[1].'rejectedValue'", containsString("ov3kGZT_wtF75s"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/ocds/excelExport"));
    }
}
