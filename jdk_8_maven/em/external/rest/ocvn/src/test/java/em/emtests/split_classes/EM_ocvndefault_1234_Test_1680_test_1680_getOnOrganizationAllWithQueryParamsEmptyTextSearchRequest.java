package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_1680_test_1680_getOnOrganizationAllWithQueryParamsEmptyTextSearchRequest {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (200) POST:/api/ocds/location/search
    * 2 - (200) GET:/api/ocds/location/search
    * 3 - (200) POST:/api/ocds/location/all
    * 4 - (400) POST:/api/flags/i007/crosstab
    * 5 - (400) GET:/api/flags/i007/crosstab
    * 6 - (400) POST:/api/percentTendersAwardedWithTwoOrMoreTenderers
    * 7 - (400) POST:/api/percentTendersAwardedWithTwoOrMoreTenderers
    * 8 - (200) POST:/api/indicatorTypesMapping
    * 9 - (200) POST:/api/indicatorTypesMapping
    * 10 - (200) POST:/api/ocds/organization/all
    * 11 - (200) GET:/api/ocds/organization/all
    * Found 4 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_1680_getOnOrganizationAllWithQueryParamsEmptyTextSearchRequest() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/search?pageNumber=414")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageNumber=414&" + 
                    "class=DsnPxYwXUEGf&" + 
                    "textSearchRequest=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/flags/i007/crosstab'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i007/crosstab?" + 
                    "notBidTypeId=PosbhzSIrZx&notBidTypeId=_EM_30735_XYZ_&" + 
                    "notProcuringEntityId=_EM_30738_XYZ_&notProcuringEntityId=_EM_30739_XYZ_&" + 
                    "bidSelectionMethod=3SqkQo0lGZdFr&bidSelectionMethod=MxT&bidSelectionMethod=_EM_30741_XYZ_&bidSelectionMethod=_EM_30742_XYZ_&" + 
                    "contrMethod=&contrMethod=atwIj&contrMethod=_EM_30743_XYZ_&" + 
                    "tenderLoc=vLW&tenderLoc=_EM_30746_XYZ_&" + 
                    "procuringEntityDepartmentId=994&procuringEntityDepartmentId=78&procuringEntityDepartmentId=368&" + 
                    "procuringEntityGroupId=820&procuringEntityGroupId=451&procuringEntityGroupId=519&" + 
                    "pageSize=68&" + 
                    "minTenderValue=0.22475577008189063&" + 
                    "minAwardValue=0.294875311073275&" + 
                    "maxAwardValue=0.7066502419604099&" + 
                    "flagged=false")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(3))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[0]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[0]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[0]", "notProcuringEntityId[0]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_30738_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notBidTypeId[1]", "EachPattern.yearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[1]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notBidTypeId[1]", "notBidTypeId[1]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[1]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("notBidTypeId[1]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("notBidTypeId[1]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_30735_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.contrMethod[1]", "EachPattern.yearFilterPagingRequest.contrMethod", "EachPattern.contrMethod[1]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.contrMethod[1]", "contrMethod[1]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("contrMethod[1]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("contrMethod[1]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("contrMethod[1]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_30743_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 3"))
                .body("'path'", containsString("/api/flags/i007/crosstab"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/flags/i007/crosstab'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i007/crosstab?" + 
                    "bidTypeId=G_wSy&bidTypeId=RIGGING&bidTypeId=1FcPCiE6yn4l&" + 
                    "notBidTypeId=RIGGING&notBidTypeId=_EM_30748_XYZ_&" + 
                    "procuringEntityId=_EM_30749_XYZ_&procuringEntityId=_EM_30750_XYZ_&procuringEntityId=SXUuH7d&procuringEntityId=wFH8ZoDI6oOcW2&procuringEntityId=XqPFW&" + 
                    "notProcuringEntityId=_EM_30751_XYZ_&notProcuringEntityId=bgD&" + 
                    "bidSelectionMethod=3SqkQo0lGZdFr&bidSelectionMethod=_EM_30753_XYZ_&bidSelectionMethod=rW20ceRMqpjmxG9&bidSelectionMethod=_EM_30754_XYZ_&" + 
                    "notBidSelectionMethod=&" + 
                    "planningLoc=F&planningLoc=_EM_30757_XYZ_&planningLoc=_EM_30758_XYZ_&planningLoc=_EM_30759_XYZ_&" + 
                    "tenderLoc=_EM_30760_XYZ_&tenderLoc=_EM_30761_XYZ_&" + 
                    "procuringEntityCityId=jt9MfePZO3AB&" + 
                    "procuringEntityDepartmentId=994&procuringEntityDepartmentId=78&procuringEntityDepartmentId=368&" + 
                    "procuringEntityGroupId=820&procuringEntityGroupId=451&procuringEntityGroupId=519&" + 
                    "year=728&" + 
                    "month=-103697775&" + 
                    "pageNumber=414&" + 
                    "minTenderValue=0.22475577008189063&" + 
                    "maxAwardValue=0.7066502419604099&" + 
                    "monthly=false&" + 
                    "skip=o3zUL003Uz3t6rZw&" + 
                    "password=kgf&" + 
                    "class=DsnPxYwXUEGf&" + 
                    "username=pTJJ8rZ8LuE")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(6))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[2]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[2]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[2]", "procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_30749_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[0]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[0]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[0]", "notProcuringEntityId[0]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_30751_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[1]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[1]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[1]", "bidTypeId[1]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("bidTypeId[1]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("bidTypeId[1]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("bidTypeId[1]"))
                .body("'errors'[2].'rejectedValue'", containsString("G_wSy"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 6"))
                .body("'path'", containsString("/api/flags/i007/crosstab"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/percentTendersAwardedWithTwoOrMoreTenderers'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/percentTendersAwardedWithTwoOrMoreTenderers?" + 
                    "bidTypeId=G_wSy&bidTypeId=z9xE&bidTypeId=COLLUSION&" + 
                    "procuringEntityId=&procuringEntityId=_EM_30763_XYZ_&procuringEntityId=_EM_30764_XYZ_&procuringEntityId=_EM_30765_XYZ_&procuringEntityId=XqPFW&" + 
                    "supplierId=_EM_30768_XYZ_&" + 
                    "notBidSelectionMethod=&" + 
                    "contrMethod=&contrMethod=_EM_30772_XYZ_&contrMethod=_EM_30773_XYZ_&" + 
                    "tenderLoc=vLW&tenderLoc=_EM_30776_XYZ_&" + 
                    "procuringEntityCityId=jt9MfePZO3AB&" + 
                    "procuringEntityDepartmentId=994&procuringEntityDepartmentId=78&procuringEntityDepartmentId=368&" + 
                    "procuringEntityGroupId=820&procuringEntityGroupId=451&procuringEntityGroupId=519&" + 
                    "month=-103697775&" + 
                    "pageNumber=414&" + 
                    "minTenderValue=0.22475577008189063")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.contrMethod[1]", "EachPattern.yearFilterPagingRequest.contrMethod", "EachPattern.contrMethod[1]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.contrMethod[1]", "contrMethod[1]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("contrMethod[1]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("contrMethod[1]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("contrMethod[1]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_30772_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[1]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[1]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[1]", "bidTypeId[1]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("bidTypeId[1]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("bidTypeId[1]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("bidTypeId[1]"))
                .body("'errors'[1].'rejectedValue'", containsString("G_wSy"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[2].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[2].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[2].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("month"))
                .body("'errors'[2].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[2].'rejectedValue'[0]", numberMatches(-1.03697775E8))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachRange"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 4"))
                .body("'path'", containsString("/api/percentTendersAwardedWithTwoOrMoreTenderers"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/percentTendersAwardedWithTwoOrMoreTenderers'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/percentTendersAwardedWithTwoOrMoreTenderers?" + 
                    "procuringEntityId=_EM_30777_XYZ_&procuringEntityId=8AEfsnhUO_nD1&procuringEntityId=_EM_30778_XYZ_&procuringEntityId=_EM_30779_XYZ_&procuringEntityId=_EM_30780_XYZ_&" + 
                    "notProcuringEntityId=_EM_30781_XYZ_&notProcuringEntityId=bgD&" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=_EM_30782_XYZ_&bidSelectionMethod=MxT&bidSelectionMethod=_EM_30783_XYZ_&bidSelectionMethod=Ir5dtw5M&" + 
                    "notBidSelectionMethod=&" + 
                    "tenderLoc=vLW&tenderLoc=z5LBypGNkX&" + 
                    "procuringEntityCityId=_EM_30785_XYZ_&" + 
                    "procuringEntityDepartmentId=994&procuringEntityDepartmentId=78&procuringEntityDepartmentId=368&" + 
                    "procuringEntityGroupId=820&procuringEntityGroupId=451&procuringEntityGroupId=519&" + 
                    "year=728&" + 
                    "month=-103697775&" + 
                    "pageNumber=414&" + 
                    "pageSize=68&" + 
                    "monthly=false&" + 
                    "skip=o3zUL003Uz3t6rZw&" + 
                    "class=DsnPxYwXUEGf&" + 
                    "username=pTJJ8rZ8LuE")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[0]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[0]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[0]", "procuringEntityId[0]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[0]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("procuringEntityId[0]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("procuringEntityId[0]"))
                .body("'errors'[0].'rejectedValue'", containsString("8AEfsnhUO_nD1"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[1].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("year"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(728.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[2].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[2].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[2].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("month"))
                .body("'errors'[2].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[2].'rejectedValue'[0]", numberMatches(-1.03697775E8))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachRange"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 4"))
                .body("'path'", containsString("/api/percentTendersAwardedWithTwoOrMoreTenderers"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/indicatorTypesMapping")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'i038'.'types'.size()", equalTo(1))
                .body("'i038'.'types'", hasItems("RIGGING"))
                .body("'i038'.'rationale'", containsString("Preconditions that are not met: Needs to have tender start date; Needs to have open tender procurement method; Needs to have tender end date; "))
                .body("'i003'.'types'.size()", equalTo(2))
                .body("'i003'.'types'", hasItems("FRAUD", "RIGGING"))
                .body("'i003'.'rationale'", containsString("Preconditions that are not met: Needs to have electronic submission tender submission method; Needs to have open tender procurement method; Needs to have at least one unsuccessful award; Needs to have at least one active award; "))
                .body("'i007'.'types'.size()", equalTo(1))
                .body("'i007'.'types'", hasItems("RIGGING"))
                .body("'i007'.'rationale'", containsString("Preconditions that are not met: Needs to have electronic submission tender submission method; Needs to have open tender procurement method; Needs to have at least one active award; "))
                .body("'i004'.'types'.size()", equalTo(1))
                .body("'i004'.'types'", hasItems("RIGGING"))
                .body("'i004'.'rationale'", containsString("Preconditions that are not met: Needs to have limited tender procurement method; Needs to have tender with items classification; Needs to have at least one award with awarded amount; Needs to have at least one active award; "))
                .body("'i077'.'types'.size()", equalTo(1))
                .body("'i077'.'types'", hasItems("RIGGING"))
                .body("'i077'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have open tender procurement method OR Needs to have selective tender procurement method; "))
                .body("'i019'.'types'.size()", equalTo(1))
                .body("'i019'.'types'", hasItems("RIGGING"))
                .body("'i019'.'rationale'", containsString("Preconditions that are not met: Needs to have open tender procurement method; Needs to have tender end date; Needs to have at least one active award; "))
                .body("'i180'.'types'.size()", equalTo(1))
                .body("'i180'.'types'", hasItems("RIGGING"))
                .body("'i180'.'rationale'", containsString("Preconditions that are not met: Needs to have limited tender procurement method; Needs to have tender procuring entity; Needs to have at least one active award; "))
                .body("'i002'.'types'.size()", equalTo(2))
                .body("'i002'.'types'", hasItems("RIGGING", "FRAUD"))
                .body("'i002'.'rationale'", containsString("Preconditions that are not met: Needs to have electronic submission tender submission method; Needs to have open tender procurement method; Needs to have at least one unsuccessful award; Needs to have at least one active award; "))
                .body("'i085'.'types'.size()", equalTo(2))
                .body("'i085'.'types'", hasItems("FRAUD", "COLLUSION"))
                .body("'i085'.'rationale'", containsString("Preconditions that are not met: Needs to have electronic submission tender submission method; Needs to have at least one active award; "))
                .body("'i171'.'types'.size()", equalTo(2))
                .body("'i171'.'types'", hasItems("RIGGING", "FRAUD"))
                .body("'i171'.'rationale'", containsString("Preconditions that are not met: Needs to have electronic submission tender submission method; Needs to have open tender procurement method; Needs to have tender value amount; Needs to have at least one active award; "));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/indicatorTypesMapping?password=kgf")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'i038'.'types'.size()", equalTo(1))
                .body("'i038'.'types'", hasItems("RIGGING"))
                .body("'i038'.'rationale'", containsString("Preconditions that are not met: Needs to have tender start date; Needs to have open tender procurement method; Needs to have tender end date; "))
                .body("'i003'.'types'.size()", equalTo(2))
                .body("'i003'.'types'", hasItems("FRAUD", "RIGGING"))
                .body("'i003'.'rationale'", containsString("Preconditions that are not met: Needs to have electronic submission tender submission method; Needs to have open tender procurement method; Needs to have at least one unsuccessful award; Needs to have at least one active award; "))
                .body("'i007'.'types'.size()", equalTo(1))
                .body("'i007'.'types'", hasItems("RIGGING"))
                .body("'i007'.'rationale'", containsString("Preconditions that are not met: Needs to have electronic submission tender submission method; Needs to have open tender procurement method; Needs to have at least one active award; "))
                .body("'i004'.'types'.size()", equalTo(1))
                .body("'i004'.'types'", hasItems("RIGGING"))
                .body("'i004'.'rationale'", containsString("Preconditions that are not met: Needs to have limited tender procurement method; Needs to have tender with items classification; Needs to have at least one award with awarded amount; Needs to have at least one active award; "))
                .body("'i077'.'types'.size()", equalTo(1))
                .body("'i077'.'types'", hasItems("RIGGING"))
                .body("'i077'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have open tender procurement method OR Needs to have selective tender procurement method; "))
                .body("'i019'.'types'.size()", equalTo(1))
                .body("'i019'.'types'", hasItems("RIGGING"))
                .body("'i019'.'rationale'", containsString("Preconditions that are not met: Needs to have open tender procurement method; Needs to have tender end date; Needs to have at least one active award; "))
                .body("'i180'.'types'.size()", equalTo(1))
                .body("'i180'.'types'", hasItems("RIGGING"))
                .body("'i180'.'rationale'", containsString("Preconditions that are not met: Needs to have limited tender procurement method; Needs to have tender procuring entity; Needs to have at least one active award; "))
                .body("'i002'.'types'.size()", equalTo(2))
                .body("'i002'.'types'", hasItems("RIGGING", "FRAUD"))
                .body("'i002'.'rationale'", containsString("Preconditions that are not met: Needs to have electronic submission tender submission method; Needs to have open tender procurement method; Needs to have at least one unsuccessful award; Needs to have at least one active award; "))
                .body("'i085'.'types'.size()", equalTo(2))
                .body("'i085'.'types'", hasItems("FRAUD", "COLLUSION"))
                .body("'i085'.'rationale'", containsString("Preconditions that are not met: Needs to have electronic submission tender submission method; Needs to have at least one active award; "))
                .body("'i171'.'types'.size()", equalTo(2))
                .body("'i171'.'types'", hasItems("RIGGING", "FRAUD"))
                .body("'i171'.'rationale'", containsString("Preconditions that are not met: Needs to have electronic submission tender submission method; Needs to have open tender procurement method; Needs to have tender value amount; Needs to have at least one active award; "));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/organization/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/organization/all?" + 
                    "pageSize=68&" + 
                    "skip=o3zUL003Uz3t6rZw&" + 
                    "text=rO4y4HLP9&" + 
                    "textSearchRequest=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
}
