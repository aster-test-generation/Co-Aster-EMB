package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_2_test_2_getOnTenderPriceByBidSelectionMethodShowsFaults_100_101 {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (500) POST:/api/flags/i007/releases
    * 2 - (200) GET:/api/flags/i007/releases
    * 3 - (500) GET:/api/ocds/package/ocid/{ocid}
    * 4 - (400) POST:/api/ocds/procurementMethodExcelChart
    * 5 - (400) GET:/api/ocds/procurementMethodExcelChart
    * 6 - (200) POST:/api/ocds/orgDepartment/all
    * 7 - (200) POST:/api/ocds/orgDepartment/all
    * 8 - (500) GET:/api/tenderPriceByBidSelectionMethod
    * Found 8 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_2_getOnTenderPriceByBidSelectionMethodShowsFaults_100_101() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/rest/controller/GenericOCDSController_353_lambda$getContrMethodFilterCriteria$1.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/flags/i007/releases'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i007/releases?" + 
                    "bidTypeId=kRV&bidTypeId=Jk&bidTypeId=ut&" + 
                    "procuringEntityId=&" + 
                    "notProcuringEntityId=&" + 
                    "contrMethod=83lEAwPFC5k9&contrMethod=BUOUqRJw&contrMethod=iRErwo9rN9jC&" + 
                    "procuringEntityCityId=EaNJ8Vu580XAjt&procuringEntityCityId=l9Do7V6&procuringEntityCityId=K1&procuringEntityCityId=45hMk&procuringEntityCityId=jGSsFgpW9RnBMt&" + 
                    "procuringEntityDepartmentId=&" + 
                    "pageSize=199&" + 
                    "minTenderValue=0.4207006524798883&" + 
                    "minAwardValue=0.362725367110857&" + 
                    "maxAwardValue=0.7653098001947517&" + 
                    "flagged=true&" + 
                    "monthly=true")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/rest/controller/GenericOCDSController_353_lambda$getContrMethodFilterCriteria$1
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("invalid hexadecimal representation of an ObjectId: [83lEAwPFC5k9]"))
                .body("'path'", containsString("/api/flags/i007/releases"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i007/releases?" + 
                    "procuringEntityId=&" + 
                    "notProcuringEntityId=&" + 
                    "bidSelectionMethod=&" + 
                    "planningLoc=uQORkZlMZRgSl77&planningLoc=XhPv8mjvpaE&" + 
                    "month=&" + 
                    "maxTenderValue=0.1174925773397455&" + 
                    "minAwardValue=0.362725367110857&" + 
                    "username=d199ZRZ3")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/rest/controller/OcdsController_111_createReleasePackage.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/ocds/package/ocid/{ocid}'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/package/ocid/_EM_26717_XYZ_?username=_EM_26721_XYZ_")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/rest/controller/OcdsController_111_createReleasePackage
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/ocds/package/ocid/_EM_26717_XYZ_"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/procurementMethodExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/procurementMethodExcelChart?" + 
                    "notBidTypeId=&" + 
                    "supplierId=4DFQ&supplierId=uIKJjm8&supplierId=TD2b&supplierId=FYoLT6Ik&supplierId=J5y9v8ouBRC5&" + 
                    "notBidSelectionMethod=&" + 
                    "planningLoc=iX9_yiaZZ9&planningLoc=PCvPX27&planningLoc=8k8B3OnQ0LJa&planningLoc=WyIe&" + 
                    "procuringEntityCityId=&" + 
                    "year=197&year=75&" + 
                    "electronicSubmission=true&" + 
                    "language=t5gB9vnPzW8wkHv&" + 
                    "EMextraParam123=_EM_9691_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.langYearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(2))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(75.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(197.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/ocds/procurementMethodExcelChart"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/procurementMethodExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/procurementMethodExcelChart?" + 
                    "notBidTypeId=&" + 
                    "notProcuringEntityId=qVHsw&" + 
                    "supplierId=4DFQ&supplierId=uIKJjm8&supplierId=TD2b&supplierId=FYoLT6Ik&supplierId=J5y9v8ouBRC5&" + 
                    "bidSelectionMethod=fggqPAXCjbgt&bidSelectionMethod=TykVwQLaYP&bidSelectionMethod=t0rsEj7QV&bidSelectionMethod=m8JULCaIOWTwLQju&" + 
                    "tenderLoc=tdDqD&tenderLoc=Dp&tenderLoc=DAfuK&" + 
                    "year=197&year=75&" + 
                    "month=769&" + 
                    "pageNumber=198&" + 
                    "maxTenderValue=0.9769950523615802&" + 
                    "maxAwardValue=0.3459247790549822&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "skip=tbLEGKAB&" + 
                    "password=&" + 
                    "langYearFilterPagingRequest=W6Xa_xFHL_LQh&" + 
                    "username=1mjtWwqh")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.langYearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(769.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.langYearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.year", "year"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[1].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[1].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("year"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(2))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(75.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(197.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/ocds/procurementMethodExcelChart"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/orgDepartment/all?" + 
                    "password=5hhx_o7&" + 
                    "username=nmaMPG")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/orgDepartment/all?" + 
                    "password=AAaZuJbGM5InFp&" + 
                    "username=j")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/rest/controller/GenericOCDSController_353_lambda$getContrMethodFilterCriteria$1.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/tenderPriceByBidSelectionMethod'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/tenderPriceByBidSelectionMethod?" + 
                    "notBidSelectionMethod=ldrD&notBidSelectionMethod=HJVR&notBidSelectionMethod=N4ljKurzky&" + 
                    "contrMethod=IbJr0s&contrMethod=PZz02Z&contrMethod=54twXtgfIL&" + 
                    "planningLoc=Eigzqug6J0tjK&planningLoc=_gSU&planningLoc=bgIs&planningLoc=Kqt7fk15mEN&planningLoc=yFLTnPGb_az5CL&" + 
                    "tenderLoc=&" + 
                    "procuringEntityCityId=&" + 
                    "pageSize=431&" + 
                    "maxTenderValue=0.3390655899170598&" + 
                    "minAwardValue=0.1625044895440957&" + 
                    "electronicSubmission=false&" + 
                    "EMextraParam123=_EM_18185_XYZ_&" + 
                    "skip=rYpn&" + 
                    "password=FB")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/rest/controller/GenericOCDSController_353_lambda$getContrMethodFilterCriteria$1
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("invalid hexadecimal representation of an ObjectId: [54twXtgfIL]"))
                .body("'path'", containsString("/api/tenderPriceByBidSelectionMethod"));
    }
}
