package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_1159_test_1159_postOnNumberCancelledFundingExcelChartShowsFaults_100_101 {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (400) POST:/api/ocds/cancelledFundingPercentageExcelChart
    * 2 - (500) POST:/api/ocds/location/search
    * 3 - (200) GET:/api/ocds/location/search
    * 4 - (200) POST:/api/ocds/location/all
    * 5 - (200) GET:/api/ocds/location/all
    * 6 - (200) POST:/api/percentageAwardsNarrowPublicationDates
    * 7 - (400) POST:/api/percentageAwardsNarrowPublicationDates
    * 8 - (400) POST:/api/ocds/numberCancelledFundingExcelChart
    * Found 5 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_1159_postOnNumberCancelledFundingExcelChartShowsFaults_100_101() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/cancelledFundingPercentageExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/cancelledFundingPercentageExcelChart?" + 
                    "procuringEntityId=S&procuringEntityId=jI7azyBe0TAu&procuringEntityId=z7t&procuringEntityId=oFiyXNdGe4&procuringEntityId=fb47mx2&" + 
                    "supplierId=UxCyNrY&supplierId=pE&supplierId=ujIsBg&supplierId=6JGV14ydbYaZ6o&supplierId=EBuMw4gBxksnUHS&" + 
                    "contrMethod=&" + 
                    "tenderLoc=uWyyUYkuGhh6&tenderLoc=SROsm9bmt&tenderLoc=KBBz2JhSs&" + 
                    "procurementMethod=b5PASiK1wjbt&procurementMethod=lI6A2uuFfiE_&" + 
                    "procuringEntityCityId=4nUm4Wcz&" + 
                    "procuringEntityGroupId=-1328699917&procuringEntityGroupId=775&procuringEntityGroupId=19&" + 
                    "month=325&month=854&" + 
                    "pageNumber=591&" + 
                    "pageSize=776&" + 
                    "maxTenderValue=0.5562789973444955&" + 
                    "minAwardValue=0.29448845126186707&" + 
                    "maxAwardValue=0.833033025960079&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.langYearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(2))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(325.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(854.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/ocds/cancelledFundingPercentageExcelChart"));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/rest/controller/selector/LocationSearchController_55_locationsSearch.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/ocds/location/search'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageNumber=827&" + 
                    "pageSize=539&" + 
                    "text=84dQxdE3_&" + 
                    "password=LylxjgjtxpcN&" + 
                    "textSearchRequest=mFU0YvI3Z_QRg&" + 
                    "username=c_VS8XvlSt_1B9h")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/rest/controller/selector/LocationSearchController_55_locationsSearch
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.data.mongodb.UncategorizedMongoDbException"))
                .body("'path'", containsString("/api/ocds/location/search"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageNumber=827&" + 
                    "password=8r&" + 
                    "skip=07tgu0N&" + 
                    "class=4xOZ0qrl&" + 
                    "textSearchRequest=_EM_30391_XYZ_&" + 
                    "username=c")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/location/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/location/all?" + 
                    "password=8r&" + 
                    "username=c")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/percentageAwardsNarrowPublicationDates?" + 
                    "contrMethod=&" + 
                    "procuringEntityCityId=Xv&procuringEntityCityId=YQ2G&" + 
                    "pageNumber=827&" + 
                    "pageSize=539&" + 
                    "maxTenderValue=0.0688656458841227&" + 
                    "maxAwardValue=0.5426872095090639&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "yearFilterPagingRequest=D_iaAn6p6dh")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/percentageAwardsNarrowPublicationDates'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/percentageAwardsNarrowPublicationDates?" + 
                    "procuringEntityId=O&" + 
                    "notProcuringEntityId=IvjnCdw0m&notProcuringEntityId=_EM_30400_XYZ_&notProcuringEntityId=T2F&notProcuringEntityId=_EM_30401_XYZ_&" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=RdFxH8cqO1mRv4&bidSelectionMethod=_DNizBhadU0t&" + 
                    "contrMethod=&" + 
                    "planningLoc=_&planningLoc=QreaQs&" + 
                    "procurementMethod=Ef0JdNQjT&procurementMethod=_EM_30404_XYZ_&procurementMethod=Wui&" + 
                    "procuringEntityGroupId=992&" + 
                    "year=&" + 
                    "maxTenderValue=0.0688656458841227&" + 
                    "minAwardValue=0.8397346378500734&" + 
                    "maxAwardValue=0.5426872095090639&" + 
                    "electronicSubmission=true&" + 
                    "skip=07tgu0N&" + 
                    "password=8r&" + 
                    "class=4xOZ0qrl&" + 
                    "yearFilterPagingRequest=tqmQxLb&" + 
                    "username=c")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[2]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[2]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[2]", "notProcuringEntityId[2]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_30400_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/percentageAwardsNarrowPublicationDates"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/numberCancelledFundingExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/numberCancelledFundingExcelChart?" + 
                    "notProcuringEntityId=9zbS8z9sUm&" + 
                    "supplierId=&" + 
                    "contrMethod=6DuQ3GnAoOXM&contrMethod=XKPBPGDq1W&contrMethod=wXN_TJViw8adjwu&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=lKF86J0sgD412hL&procurementMethod=2&procurementMethod=30ofetDZlr8F4u5&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=455&procuringEntityDepartmentId=575&procuringEntityDepartmentId=961&procuringEntityDepartmentId=947&" + 
                    "procuringEntityGroupId=&" + 
                    "year=484&year=228&year=464&year=279&" + 
                    "pageNumber=967&" + 
                    "pageSize=179&" + 
                    "maxTenderValue=0.5961331502538197&" + 
                    "minAwardValue=0.04542976590024417&" + 
                    "maxAwardValue=0.953003579094257&" + 
                    "electronicSubmission=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.langYearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(4))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(228.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(279.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(464.0))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.contrMethod[2]", "EachPattern.langYearFilterPagingRequest.contrMethod", "EachPattern.contrMethod[2]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.contrMethod[2]", "contrMethod[2]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("contrMethod[2]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("contrMethod[2]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("contrMethod[2]"))
                .body("'errors'[1].'rejectedValue'", containsString("wXN_TJViw8adjwu"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/ocds/numberCancelledFundingExcelChart"));
    }
}
