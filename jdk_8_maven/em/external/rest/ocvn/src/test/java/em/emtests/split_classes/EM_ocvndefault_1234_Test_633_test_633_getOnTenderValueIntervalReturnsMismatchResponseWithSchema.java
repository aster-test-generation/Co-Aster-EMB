package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_633_test_633_getOnTenderValueIntervalReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (400) GET:/api/tenderValueInterval
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_633_getOnTenderValueIntervalReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/tenderValueInterval'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/tenderValueInterval?" + 
                    "bidTypeId=&bidTypeId=5c&bidTypeId=ce&bidTypeId=3&" + 
                    "notBidTypeId=_EM_41881_XYZ_&notBidTypeId=vJ&notBidTypeId=_EM_41882_XYZ_&" + 
                    "procuringEntityId=sQva_0&procuringEntityId=_EM_1362_XYZ_&procuringEntityId=_EM_1363_XYZ_&procuringEntityId=tUnATyvgRK&" + 
                    "notProcuringEntityId=NkpvarnUPm1dub6&notProcuringEntityId=JFxU&notProcuringEntityId=&" + 
                    "supplierId=4eHJiw5S&supplierId=EEh&supplierId=Ztb&" + 
                    "notBidSelectionMethod=mAMjUipBKduIFp&notBidSelectionMethod=8Cgr1I&" + 
                    "contrMethod=TsQ8&contrMethod=H2&contrMethod=XgB1WnNB4NVUoKT5&contrMethod=&contrMethod=LHD&" + 
                    "planningLoc=&planningLoc=YU&" + 
                    "tenderLoc=fx8m2A1KG0F&tenderLoc=_EM_41872_XYZ_&tenderLoc=servJ5o&tenderLoc=oq4gw5dSa&tenderLoc=L&" + 
                    "procurementMethod=S5BC6U&" + 
                    "procuringEntityCityId=_EM_1373_XYZ_&procuringEntityCityId=_EM_1374_XYZ_&" + 
                    "procuringEntityDepartmentId=1553085517&procuringEntityDepartmentId=577&procuringEntityDepartmentId=121&" + 
                    "procuringEntityGroupId=-65397&procuringEntityGroupId=554&procuringEntityGroupId=384&procuringEntityGroupId=0&procuringEntityGroupId=9013&" + 
                    "year=3&year=967&year=643&year=63&" + 
                    "month=4624&month=17061&month=14&" + 
                    "pageNumber=732&" + 
                    "pageSize=257&" + 
                    "minTenderValue=0.1067575562771516&" + 
                    "maxTenderValue=309.41469913463226&" + 
                    "minAwardValue=-8.988465674311579E307&" + 
                    "maxAwardValue=0.907372918596&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "yearFilterPagingRequest=_EM_41880_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[0]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[0]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[0]", "procuringEntityId[0]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[0]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("procuringEntityId[0]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("procuringEntityId[0]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_1362_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notBidTypeId[0]", "EachPattern.yearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[0]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notBidTypeId[0]", "notBidTypeId[0]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[0]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("notBidTypeId[0]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("notBidTypeId[0]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_41881_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[2].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[2].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[2].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("month"))
                .body("'errors'[2].'rejectedValue'.size()", equalTo(3))
                .body("'errors'[2].'rejectedValue'[0]", numberMatches(14.0))
                .body("'errors'[2].'rejectedValue'[1]", numberMatches(4624.0))
                .body("'errors'[2].'rejectedValue'[2]", numberMatches(17061.0))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachRange"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 4"))
                .body("'path'", containsString("/api/tenderValueInterval"));
    }
}
