package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_1571_test_1571_postOnCrosstabShowsFaults_100_101 {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (400) GET:/api/qualityPlannedFundingByLocation
    * 2 - (400) POST:/api/flags/i019/stats
    * 3 - (500) POST:/api/translations/{language}
    * 4 - (500) POST:/api/translations/{language}
    * 5 - (400) GET:/api/tendersByLocation
    * 6 - (400) POST:/api/fundingByTenderDeliveryLocation
    * 7 - (400) POST:/api/flags/i085/stats
    * 8 - (400) POST:/api/ocds/excelExport
    * 9 - (400) POST:/api/flags/i003/crosstab
    * Found 11 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_1571_postOnCrosstabShowsFaults_100_101() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/qualityPlannedFundingByLocation'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/qualityPlannedFundingByLocation?" + 
                    "bidTypeId=_EM_42024_XYZ_&bidTypeId=RIGGING&bidTypeId=2FgYxmGW&bidTypeId=COLLUSION&" + 
                    "notBidTypeId=7xa0&" + 
                    "notProcuringEntityId=U2tkXXol8Wg&" + 
                    "notBidSelectionMethod=_EM_36398_XYZ_&notBidSelectionMethod=hu&notBidSelectionMethod=_EM_36399_XYZ_&notBidSelectionMethod=_EM_36400_XYZ_&" + 
                    "contrMethod=&" + 
                    "planningLoc=P7sYcdWJ8ndbgs4&" + 
                    "tenderLoc=LLLZ6DjsP5Zfw&tenderLoc=LXjrER4Kqn5&tenderLoc=_EM_36403_XYZ_&" + 
                    "procurementMethod=NEj&procurementMethod=_EM_42025_XYZ_&procurementMethod=m5EiMoLHTlDiVuj&procurementMethod=lj3EjQ&" + 
                    "procuringEntityDepartmentId=765&procuringEntityDepartmentId=992&" + 
                    "procuringEntityGroupId=471&procuringEntityGroupId=793&procuringEntityGroupId=977&" + 
                    "pageNumber=-64591&" + 
                    "pageSize=366&" + 
                    "minTenderValue=0.7551267160737&" + 
                    "maxTenderValue=0.657001&" + 
                    "minAwardValue=0.8475359946830633&" + 
                    "maxAwardValue=0.08553342595929167&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "defaultFilterPagingRequest=dBOeCpjWv&" + 
                    "skip=8as&" + 
                    "class=Kb0JHe7a8sNU5&" + 
                    "password=_EM_36408_XYZ_&" + 
                    "username=2iYg3_cWY7U")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.defaultFilterPagingRequest.bidTypeId[3]", "EachPattern.defaultFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[3]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("defaultFilterPagingRequest.bidTypeId[3]", "bidTypeId[3]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("bidTypeId[3]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("bidTypeId[3]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("defaultFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("bidTypeId[3]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_42024_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("Min.defaultFilterPagingRequest.pageNumber", "Min.pageNumber", "Min.java.lang.Integer", "Min"))
                .body("'errors'[1].'arguments'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("defaultFilterPagingRequest.pageNumber", "pageNumber"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("pageNumber"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("pageNumber"))
                .body("'errors'[1].'arguments'[1]", numberMatches(0.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be greater than or equal to 0"))
                .body("'errors'[1].'objectName'", containsString("defaultFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("pageNumber"))
                .body("'errors'[1].'rejectedValue'", numberMatches(-64591.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("Min"))
                .body("'message'", containsString("Validation failed for object='defaultFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/qualityPlannedFundingByLocation"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/flags/i019/stats'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i019/stats?" + 
                    "notBidTypeId=fy9jUT0H&notBidTypeId=6TL7A0z8jYUIH&notBidTypeId=&notBidTypeId=RHLQRltrYs3ZpN&" + 
                    "procuringEntityId=374vvfu&" + 
                    "supplierId=&" + 
                    "planningLoc=Qr6x7Iygaz3_V8s4&planningLoc=xqqPa6mJizqm&planningLoc=An&" + 
                    "tenderLoc=OUB6Ltqdb&tenderLoc=&tenderLoc=7Jbw87cCiUI&tenderLoc=IY8KTZl9&" + 
                    "procuringEntityCityId=1tsMa2g&" + 
                    "procuringEntityGroupId=336&" + 
                    "year=3&" + 
                    "pageNumber=774&" + 
                    "minAwardValue=0.8540916508804572&" + 
                    "maxAwardValue=0.7653132557330834&" + 
                    "electronicSubmission=true&" + 
                    "yearFilterPagingRequest=6Rs14Mi58tE")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(3.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/flags/i019/stats"));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/spring/TranslationService_41_ensureLanguageLoaded.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/translations/{language}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/translations/jaBLhy347nV9v")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/spring/TranslationService_41_ensureLanguageLoaded
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("Language string must comply with RFC5646 standard!"))
                .body("'path'", containsString("/api/translations/jaBLhy347nV9v"));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/spring/TranslationService_48_ensureLanguageLoaded.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/translations/{language}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/translations/ef_KN?" + 
                    "password=&" + 
                    "username=fJg")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/spring/TranslationService_48_ensureLanguageLoaded
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("No translations found for language ef_KN"))
                .body("'path'", containsString("/api/translations/ef_KN"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/tendersByLocation'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/tendersByLocation?" + 
                    "bidTypeId=_EM_36410_XYZ_&bidTypeId=QBDJNcOp&bidTypeId=kMHk_MLJq&bidTypeId=COLLUSION&" + 
                    "notBidTypeId=_EM_36411_XYZ_&notBidTypeId=1JvrY7bOXft0vk8&notBidTypeId=W28&" + 
                    "procuringEntityId=gx5pG_Sb7NALN4&procuringEntityId=H5hNMNDBu&" + 
                    "notProcuringEntityId=&notProcuringEntityId=G&notProcuringEntityId=_EM_36412_XYZ_&" + 
                    "supplierId=&" + 
                    "notBidSelectionMethod=&" + 
                    "planningLoc=_EM_36415_XYZ_&planningLoc=_EM_36416_XYZ_&planningLoc=w8i3uccftitp&" + 
                    "tenderLoc=_EM_36417_XYZ_&tenderLoc=uxQhsDjdvc00_poz&" + 
                    "procuringEntityCityId=_EM_36418_XYZ_&procuringEntityCityId=q7GQXWtyYyDpaWQ&procuringEntityCityId=qHz&procuringEntityCityId=D9Vju&procuringEntityCityId=_EM_36419_XYZ_&" + 
                    "procuringEntityDepartmentId=479&procuringEntityDepartmentId=204&procuringEntityDepartmentId=702&procuringEntityDepartmentId=691&" + 
                    "procuringEntityGroupId=301&" + 
                    "year=376&year=951&" + 
                    "pageNumber=472&" + 
                    "pageSize=33533&" + 
                    "minTenderValue=0.12348539647609968&" + 
                    "maxTenderValue=0.03375981700087527&" + 
                    "maxAwardValue=0.12157921073234612&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "password=2cIoT0MiP_ndtnu8&" + 
                    "yearFilterPagingRequest=BLtxyHL")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(6))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notBidTypeId[2]", "EachPattern.yearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[2]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notBidTypeId[2]", "notBidTypeId[2]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[2]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notBidTypeId[2]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notBidTypeId[2]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_36411_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[2]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[2]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[2]", "bidTypeId[2]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("bidTypeId[2]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("bidTypeId[2]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("bidTypeId[2]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_36410_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[2].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[2].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[2].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("year"))
                .body("'errors'[2].'rejectedValue'.size()", equalTo(2))
                .body("'errors'[2].'rejectedValue'[0]", numberMatches(376.0))
                .body("'errors'[2].'rejectedValue'[1]", numberMatches(951.0))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachRange"))
                // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 6"))
                .body("'path'", containsString("/api/tendersByLocation"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/fundingByTenderDeliveryLocation'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/fundingByTenderDeliveryLocation?" + 
                    "bidTypeId=_EM_36421_XYZ_&bidTypeId=y_Bft0oX&bidTypeId=4&" + 
                    "notProcuringEntityId=&" + 
                    "supplierId=_EM_36422_XYZ_&" + 
                    "bidSelectionMethod=&bidSelectionMethod=zC9&bidSelectionMethod=_EM_36423_XYZ_&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=Ugr&procurementMethod=m2EtyxmHu9Loj&procurementMethod=_EM_36429_XYZ_&procurementMethod=&procurementMethod=_EM_36430_XYZ_&" + 
                    "procuringEntityDepartmentId=765&procuringEntityDepartmentId=74&procuringEntityDepartmentId=44&" + 
                    "month=146&month=825&month=293&month=721&month=576&" + 
                    "pageSize=774&" + 
                    "electronicSubmission=true&" + 
                    "skip=I0&" + 
                    "yearFilterPagingRequest=Hx8cJqnt&" + 
                    "username=_EM_36432_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[1]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[1]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[1]", "bidTypeId[1]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("bidTypeId[1]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("bidTypeId[1]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("bidTypeId[1]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_36421_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[1].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("month"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(5))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(146.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(293.0))
                .body("'errors'[1].'rejectedValue'[2]", numberMatches(576.0))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/fundingByTenderDeliveryLocation"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/flags/i085/stats'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i085/stats?" + 
                    "supplierId=&" + 
                    "tenderLoc=_EM_36438_XYZ_&tenderLoc=IxSg8BPZoQs1VL&tenderLoc=fkWoloDGgNcNs&tenderLoc=_EM_36439_XYZ_&" + 
                    "procuringEntityCityId=B6DI6WQHGW5CuX&procuringEntityCityId=stX&procuringEntityCityId=fiYiOSBueT&" + 
                    "procuringEntityGroupId=296&procuringEntityGroupId=432&procuringEntityGroupId=-1858851964&" + 
                    "month=170&" + 
                    "pageSize=862&" + 
                    "maxTenderValue=0.44924923800121697&" + 
                    "minAwardValue=23.20287551194182&" + 
                    "maxAwardValue=0.1917019881&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "password=_EM_36441_XYZ_&" + 
                    "class=_EM_36442_XYZ_&" + 
                    "yearFilterPagingRequest=IR4RiU&" + 
                    "username=_EM_36443_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(170.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/flags/i085/stats"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/excelExport'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/excelExport?" + 
                    "notBidTypeId=COLLUSION&notBidTypeId=b19SQqb3thndPeS&" + 
                    "procuringEntityId=_EM_36444_XYZ_&procuringEntityId=&procuringEntityId=1D0Gzy7f1lssZAZ&procuringEntityId=rvIT&" + 
                    "notProcuringEntityId=xiE1ZYluzTijAF&notProcuringEntityId=_EM_36445_XYZ_&notProcuringEntityId=_EM_36446_XYZ_&notProcuringEntityId=KeIpNle&notProcuringEntityId=_EM_36447_XYZ_&" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=_EM_36448_XYZ_&bidSelectionMethod=Jq93BhEI&" + 
                    "contrMethod=&" + 
                    "tenderLoc=&tenderLoc=_EM_36452_XYZ_&tenderLoc=_EM_36453_XYZ_&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=657&procuringEntityDepartmentId=473&procuringEntityDepartmentId=306&procuringEntityDepartmentId=188&procuringEntityDepartmentId=61&" + 
                    "procuringEntityGroupId=45&procuringEntityGroupId=620&procuringEntityGroupId=709&" + 
                    "month=155&month=921&month=644&month=223&" + 
                    "pageNumber=46&" + 
                    "pageSize=616&" + 
                    "minTenderValue=107191.24770541649&" + 
                    "maxTenderValue=0.18307&" + 
                    "minAwardValue=0.03648712517463537&" + 
                    "maxAwardValue=0.0305&" + 
                    "electronicSubmission=false")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(3))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[2]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[2]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[2]", "procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_36444_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[1].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("month"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(4))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(155.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(223.0))
                .body("'errors'[1].'rejectedValue'[2]", numberMatches(644.0))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[1]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[1]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[1]", "notProcuringEntityId[1]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_36445_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 3"))
                .body("'path'", containsString("/api/ocds/excelExport"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/flags/i003/crosstab'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i003/crosstab?" + 
                    "bidTypeId=_8%5B&" + 
                    "notProcuringEntityId=_EM_36455_XYZ_&notProcuringEntityId=_EM_36456_XYZ_&notProcuringEntityId=_EM_36457_XYZ_&notProcuringEntityId=&notProcuringEntityId=_EM_36458_XYZ_&" + 
                    "bidSelectionMethod=xzXf&" + 
                    "notBidSelectionMethod=kyWNbPfkc_s&notBidSelectionMethod=_EM_36461_XYZ_&notBidSelectionMethod=9MsIpq8w&" + 
                    "contrMethod=PV7Tp_dXAsmIGk&" + 
                    "planningLoc=&" + 
                    "tenderLoc=Sb&tenderLoc=qF13JcoV&tenderLoc=_EM_36462_XYZ_&tenderLoc=_EM_36463_XYZ_&tenderLoc=lXL9yNsgJ&" + 
                    "procurementMethod=QkX2I&" + 
                    "year=399&year=704&" + 
                    "month=649&" + 
                    "pageNumber=464&" + 
                    "pageSize=325&" + 
                    "minTenderValue=0.09098433881660528&" + 
                    "minAwardValue=0.9629023821488542&" + 
                    "maxAwardValue=0.7803786087489974&" + 
                    "yearFilterPagingRequest=_EM_42027_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(5))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[0]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[0]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[0]", "bidTypeId[0]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("bidTypeId[0]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("bidTypeId[0]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("bidTypeId[0]"))
                .body("'errors'[0].'rejectedValue'", containsString("_8["))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.contrMethod[0]", "EachPattern.yearFilterPagingRequest.contrMethod", "EachPattern.contrMethod[0]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.contrMethod[0]", "contrMethod[0]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("contrMethod[0]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("contrMethod[0]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("contrMethod[0]"))
                .body("'errors'[1].'rejectedValue'", containsString("PV7Tp_dXAsmIGk"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[1]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[1]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[1]", "notProcuringEntityId[1]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_36455_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 5"))
                .body("'path'", containsString("/api/flags/i003/crosstab"));
    }
}
