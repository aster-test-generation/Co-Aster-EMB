package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_60_test_60_getOnApiPercentTotalProjectsFlaggedByYearWithQueryParamsEmptyClass {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (200) POST:/api/ocds/location/all
    * 2 - (200) GET:/api/ocds/location/all
    * 3 - (500) POST:/api/ocds/location/search
    * 4 - (200) POST:/api/ocds/location/search
    * 5 - (400) POST:/api/ocds/costEffectivenessExcelChart
    * 6 - (400) POST:/api/ocds/costEffectivenessExcelChart
    * 7 - (200) POST:/api/ocds/orgGroup/all
    * 8 - (200) POST:/api/ocds/orgGroup/all
    * 9 - (500) POST:/api/percentTotalProjectsFlaggedByYear
    * 10 - (200) GET:/api/percentTotalProjectsFlaggedByYear
    * Found 6 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_60_getOnApiPercentTotalProjectsFlaggedByYearWithQueryParamsEmptyClass() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/location/all?" + 
                    "password=_cv_SK&" + 
                    "username=z8IU")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/rest/controller/selector/LocationSearchController_55_locationsSearch.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/ocds/location/search'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageSize=406&" + 
                    "text=69I5voRX5HZ")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/rest/controller/selector/LocationSearchController_55_locationsSearch
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.data.mongodb.UncategorizedMongoDbException"))
                .body("'path'", containsString("/api/ocds/location/search"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageNumber=51&" + 
                    "password=_cv_SK&" + 
                    "class=&" + 
                    "username=z8IU")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/costEffectivenessExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/costEffectivenessExcelChart?" + 
                    "bidSelectionMethod=4r0zYiWo1f&bidSelectionMethod=f&bidSelectionMethod=_EM_41790_XYZ_&" + 
                    "notBidSelectionMethod=aWfxzyT&notBidSelectionMethod=SRI1oggrzM&" + 
                    "contrMethod=_EM_41791_XYZ_&contrMethod=lPL59pPEutn7&contrMethod=_GCiIe&" + 
                    "planningLoc=&" + 
                    "tenderLoc=wjtwP0z&" + 
                    "procurementMethod=&" + 
                    "procuringEntityCityId=&procuringEntityCityId=ZJK&" + 
                    "month=185&month=158&month=248&month=488&" + 
                    "minAwardValue=0.15085759405836363&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "groupByCategory=7AJNhekTW5W&" + 
                    "language=paqj")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.langGroupingFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langGroupingFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("langGroupingFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(4))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(158.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(185.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(248.0))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.langGroupingFilterPagingRequest.contrMethod[0]", "EachPattern.langGroupingFilterPagingRequest.contrMethod", "EachPattern.contrMethod[0]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("langGroupingFilterPagingRequest.contrMethod[0]", "contrMethod[0]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("contrMethod[0]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("contrMethod[0]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("langGroupingFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("contrMethod[0]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_41791_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='langGroupingFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/ocds/costEffectivenessExcelChart"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/costEffectivenessExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/costEffectivenessExcelChart?" + 
                    "supplierId=_EM_41795_XYZ_&supplierId=_EM_41796_XYZ_&supplierId=_EM_41797_XYZ_&supplierId=Xl&supplierId=_EM_41798_XYZ_&" + 
                    "planningLoc=&" + 
                    "tenderLoc=wjtwP0z&" + 
                    "procurementMethod=&" + 
                    "month=185&month=158&month=248&month=488&" + 
                    "pageNumber=51&" + 
                    "minTenderValue=0.8968973079964498&" + 
                    "maxTenderValue=0.8514456771618261&" + 
                    "minAwardValue=0.15085759405836363&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "skip=lxCI2nIy&" + 
                    "password=_cv_SK&" + 
                    "class=&" + 
                    "username=z8IU")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.langGroupingFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langGroupingFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("langGroupingFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(4))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(158.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(185.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(248.0))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='langGroupingFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/ocds/costEffectivenessExcelChart"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/orgGroup/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/orgGroup/all?" + 
                    "password=_cv_SK&" + 
                    "username=z8IU")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/rest/controller/GenericOCDSController_353_lambda$getContrMethodFilterCriteria$1.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/percentTotalProjectsFlaggedByYear'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/percentTotalProjectsFlaggedByYear?" + 
                    "bidTypeId=_EM_41802_XYZ_&bidTypeId=&bidTypeId=_EM_41803_XYZ_&bidTypeId=Tuuk&" + 
                    "notBidTypeId=mc&notBidTypeId=l&notBidTypeId=ozIe&" + 
                    "procuringEntityId=WRUp&" + 
                    "notProcuringEntityId=7_nhHjtfePTa&notProcuringEntityId=_EM_41804_XYZ_&notProcuringEntityId=76&notProcuringEntityId=aq&notProcuringEntityId=lFOlbx4eH6Ph&" + 
                    "supplierId=cB4l1vz2le&supplierId=_EM_41805_XYZ_&supplierId=CYRcFPBR&supplierId=Xl&supplierId=_EM_41806_XYZ_&" + 
                    "bidSelectionMethod=4r0zYiWo1f&bidSelectionMethod=f&bidSelectionMethod=8&" + 
                    "notBidSelectionMethod=aWfxzyT&notBidSelectionMethod=SRI1oggrzM&" + 
                    "contrMethod=5HpynoSEaC0M00N&contrMethod=lPL59pPEutn7&contrMethod=_GCiIe&" + 
                    "tenderLoc=wjtwP0z&" + 
                    "procurementMethod=&" + 
                    "procuringEntityCityId=_EM_41807_XYZ_&procuringEntityCityId=_EM_41808_XYZ_&" + 
                    "procuringEntityDepartmentId=718&procuringEntityDepartmentId=519&procuringEntityDepartmentId=356&procuringEntityDepartmentId=123&" + 
                    "pageNumber=51&" + 
                    "minTenderValue=0.8968973079964498&" + 
                    "maxAwardValue=0.35114558542409713")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/rest/controller/GenericOCDSController_353_lambda$getContrMethodFilterCriteria$1
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("invalid hexadecimal representation of an ObjectId: [5HpynoSEaC0M00N]"))
                .body("'path'", containsString("/api/percentTotalProjectsFlaggedByYear"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/percentTotalProjectsFlaggedByYear?" + 
                    "bidTypeId=J&bidTypeId=&bidTypeId=jzrDzSfzdXEP&bidTypeId=Tuuk&" + 
                    "supplierId=_EM_41810_XYZ_&supplierId=ModGKaXACSpuDv&supplierId=CYRcFPBR&supplierId=Xl&supplierId=_EM_41811_XYZ_&" + 
                    "planningLoc=&" + 
                    "procurementMethod=&" + 
                    "year=440&year=707&" + 
                    "maxTenderValue=0.8514456771618261&" + 
                    "minAwardValue=0.15085759405836363&" + 
                    "maxAwardValue=0.35114558542409713&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "yearFilterPagingRequest=_EM_41816_XYZ_&" + 
                    "class=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
}
