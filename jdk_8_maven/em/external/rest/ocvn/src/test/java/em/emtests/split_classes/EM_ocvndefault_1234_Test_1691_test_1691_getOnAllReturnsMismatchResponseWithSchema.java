package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_1691_test_1691_getOnAllReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (400) POST:/api/ocds/location/search
    * 2 - (400) GET:/api/flags/i171/stats
    * 3 - (200) POST:/api/ocds/location/all
    * 4 - (200) POST:/api/ocds/location/all
    * 5 - (200) POST:/api/ocds/organization/id/{id}
    * 6 - (200) GET:/api/ocds/organization/id/{id}
    * 7 - (400) POST:/api/frequentTenderers
    * 8 - (400) GET:/api/frequentTenderers
    * 9 - (400) POST:/api/ocds/package/all
    * 10 - (400) GET:/api/ocds/package/all
    * Found 8 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_1691_getOnAllReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/location/search'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageNumber=0&" + 
                    "pageSize=2116&" + 
                    "text=_EM_32397_XYZ_&" + 
                    "password=pmE5xsOraQW09zk&" + 
                    "textSearchRequest=_EM_42570_XYZ_&" + 
                    "username=_EM_42571_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("Range.textSearchRequest.pageSize", "Range.pageSize", "Range.java.lang.Integer", "Range"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("textSearchRequest.pageSize", "pageSize"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("pageSize"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("pageSize"))
                .body("'errors'[0].'arguments'[1]", numberMatches(1000.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 1000"))
                .body("'errors'[0].'objectName'", containsString("textSearchRequest"))
                .body("'errors'[0].'field'", containsString("pageSize"))
                .body("'errors'[0].'rejectedValue'", numberMatches(2116.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("Range"))
                .body("'message'", containsString("Validation failed for object='textSearchRequest'. Error count: 1"))
                .body("'path'", containsString("/api/ocds/location/search"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/flags/i171/stats'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i171/stats?" + 
                    "bidTypeId=s&bidTypeId=gsJgiAN8RjijKA_2&" + 
                    "notBidTypeId=66K&notBidTypeId=&notBidTypeId=X&notBidTypeId=W8LhMXppw&" + 
                    "procuringEntityId=&procuringEntityId=kHvaMbrb&procuringEntityId=pK&procuringEntityId=iJessKScuC&" + 
                    "notProcuringEntityId=_EM_42572_XYZ_&" + 
                    "supplierId=IR&supplierId=fOWL9ZqEFaj3DY&supplierId=gPJbXFc&" + 
                    "bidSelectionMethod=&" + 
                    "contrMethod=&" + 
                    "planningLoc=jumbT&planningLoc=f68ExYokM5wsPej6&planningLoc=q3BhN_0laH&planningLoc=p5MMZKvBpmH&" + 
                    "tenderLoc=true&" + 
                    "procuringEntityCityId=oIQWlb536KSf&procuringEntityCityId=4G7cLjEyK&" + 
                    "procuringEntityDepartmentId=&" + 
                    "procuringEntityGroupId=240&procuringEntityGroupId=495&procuringEntityGroupId=158&procuringEntityGroupId=451&" + 
                    "year=561&year=936&year=78&year=507&" + 
                    "pageNumber=800&" + 
                    "pageSize=1173756379&" + 
                    "minTenderValue=0.7243800005888144&" + 
                    "maxAwardValue=0.6032228116492909&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "password=b4lzhOLIMO&" + 
                    "yearFilterPagingRequest=jQeBq0T7AtddIx&" + 
                    "username=HDZ13ovWYvC&" + 
                    "skip=SFi&" + 
                    "class=Vvn8lNoF1x4a")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[0]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[0]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[0]", "bidTypeId[0]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("bidTypeId[0]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("bidTypeId[0]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("bidTypeId[0]"))
                .body("'errors'[0].'rejectedValue'", containsString("gsJgiAN8RjijKA_2"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("Range.yearFilterPagingRequest.pageSize", "Range.pageSize", "Range.java.lang.Integer", "Range"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.pageSize", "pageSize"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("pageSize"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("pageSize"))
                .body("'errors'[1].'arguments'[1]", numberMatches(1000.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1 and 1000"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("pageSize"))
                .body("'errors'[1].'rejectedValue'", numberMatches(1.173756379E9))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("Range"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[0]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[0]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[0]", "notProcuringEntityId[0]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_42572_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 4"))
                .body("'path'", containsString("/api/flags/i171/stats"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/all?" + 
                    "password=jo_&" + 
                    "username=_lFj")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. POST on path '/api/ocds/organization/id/{id}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/organization/id/Rwfo3TUbbUUPVO")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. GET on path '/api/ocds/organization/id/{id}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/organization/id/Rwfo3TUbbUUPVO")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/frequentTenderers'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/frequentTenderers?" + 
                    "bidTypeId=uDMg_v8cp&" + 
                    "notBidTypeId=_EM_37322_XYZ_&notBidTypeId=_EM_37325_XYZ_&notBidTypeId=&notBidTypeId=_EM_42560_XYZ_&" + 
                    "notBidSelectionMethod=_EM_32478_XYZ_&notBidSelectionMethod=Z3MLEwt0Z&notBidSelectionMethod=LRLcJxSLh9aIeZ2&" + 
                    "contrMethod=_EM_42568_XYZ_&contrMethod=HV&contrMethod=_EM_42569_XYZ_&contrMethod=_EM_32407_XYZ_&" + 
                    "planningLoc=U3CU&planningLoc=_EM_37326_XYZ_&planningLoc=_EM_32409_XYZ_&" + 
                    "tenderLoc=2&tenderLoc=wkoXuV2dJf2b8n&" + 
                    "procurementMethod=Jo8PN7_psf&" + 
                    "procuringEntityCityId=lYB_b&procuringEntityCityId=_EM_42567_XYZ_&procuringEntityCityId=Cs&" + 
                    "procuringEntityDepartmentId=264&procuringEntityDepartmentId=870&procuringEntityDepartmentId=0&procuringEntityDepartmentId=262177&" + 
                    "procuringEntityGroupId=296&procuringEntityGroupId=-262581&procuringEntityGroupId=262702&" + 
                    "year=375&year=953&year=131171&year=16562&year=167&" + 
                    "month=-7861&" + 
                    "pageNumber=0&" + 
                    "pageSize=2116&" + 
                    "minTenderValue=-116.10493874205487&" + 
                    "maxTenderValue=-1.5341911678450806&" + 
                    "minAwardValue=2682.9894727982974&" + 
                    "maxAwardValue=-5.659608813967346&" + 
                    "electronicSubmission=true&" + 
                    "monthly=false&" + 
                    "yearFilterPagingRequest=FAG")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(6))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(-7861.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[1].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("year"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(5))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(167.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(375.0))
                .body("'errors'[1].'rejectedValue'[2]", numberMatches(953.0))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.contrMethod[1]", "EachPattern.yearFilterPagingRequest.contrMethod", "EachPattern.contrMethod[1]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.contrMethod[1]", "contrMethod[1]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("contrMethod[1]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("contrMethod[1]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("contrMethod[1]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_32407_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 6"))
                .body("'path'", containsString("/api/frequentTenderers"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/frequentTenderers'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/frequentTenderers?" + 
                    "bidTypeId=&" + 
                    "notProcuringEntityId=_EM_32481_XYZ_&notProcuringEntityId=x&" + 
                    "supplierId=c783Wh&" + 
                    "bidSelectionMethod=jV&" + 
                    "notBidSelectionMethod=_EM_32478_XYZ_&notBidSelectionMethod=Z3MLEwt0&notBidSelectionMethod=LRLcJxTLh9aIeZ2E&" + 
                    "planningLoc=r3Cm&planningLoc=_EM_37326_XYZ_&planningLoc=_EM_32409_XYZ_&" + 
                    "procurementMethod=Jo8PN7_psf&" + 
                    "procuringEntityCityId=lYB_b&procuringEntityCityId=_EM_42573_XYZ_&procuringEntityCityId=Cs&" + 
                    "procuringEntityDepartmentId=-7928&procuringEntityDepartmentId=870&procuringEntityDepartmentId=0&procuringEntityDepartmentId=262177&" + 
                    "year=375&year=953&year=131171&year=16562&year=167&" + 
                    "pageNumber=0&" + 
                    "pageSize=2116&" + 
                    "minTenderValue=-116.10493874205487&" + 
                    "maxTenderValue=-1.5341911678450806&" + 
                    "minAwardValue=2682.9894727982974&" + 
                    "maxAwardValue=-5.659608813967346&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "skip=_EM_32479_XYZ_&" + 
                    "yearFilterPagingRequest=Jdt8x")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(3))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(5))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(167.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(375.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(953.0))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[0]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[0]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[0]", "notProcuringEntityId[0]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_32481_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("Range.yearFilterPagingRequest.pageSize", "Range.pageSize", "Range.java.lang.Integer", "Range"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.pageSize", "pageSize"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("pageSize"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("pageSize"))
                .body("'errors'[2].'arguments'[1]", numberMatches(1000.0))
                .body("'errors'[2].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[2].'defaultMessage'", containsString("must be between 1 and 1000"))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("pageSize"))
                .body("'errors'[2].'rejectedValue'", numberMatches(2116.0))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("Range"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 3"))
                .body("'path'", containsString("/api/frequentTenderers"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/package/all'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/package/all?" + 
                    "notBidTypeId=07w&notBidTypeId=acZtJXfDKz&notBidTypeId=&notBidTypeId=JsX9Em&" + 
                    "procuringEntityId=_EM_42555_XYZ_&procuringEntityId=alo&procuringEntityId=oRvQOsfAljvVyRxd&procuringEntityId=d0DC&" + 
                    "notProcuringEntityId=VR&notProcuringEntityId=P51GenolpQLIaeC&notProcuringEntityId=O&notProcuringEntityId=wjz&notProcuringEntityId=JQyqbectw2sBX&" + 
                    "supplierId=B&supplierId=GODh&" + 
                    "bidSelectionMethod=k&" + 
                    "notBidSelectionMethod=2Nm&notBidSelectionMethod=APSkKMmLUflt4Cr&notBidSelectionMethod=aG1ZZkIX03Q4rq&notBidSelectionMethod=j77&notBidSelectionMethod=Mu&" + 
                    "tenderLoc=wZcS&tenderLoc=4hUjeqp&tenderLoc=uP1T2Op2jGoujkJ&" + 
                    "procuringEntityCityId=NLOPklvNxjZ&procuringEntityCityId=dOJJWtPqlW40Y&procuringEntityCityId=T77QS5xb&procuringEntityCityId=yjCjzE4&procuringEntityCityId=VFDm3ko0xFze&" + 
                    "procuringEntityDepartmentId=-1433&" + 
                    "procuringEntityGroupId=539&procuringEntityGroupId=315&procuringEntityGroupId=204&procuringEntityGroupId=377&" + 
                    "year=2017&year=-15612&year=140&" + 
                    "month=685&month=32951&month=-83&month=-1411298500&" + 
                    "pageNumber=673&" + 
                    "minTenderValue=0.22127581011104935&" + 
                    "maxTenderValue=0.4714468509772082&" + 
                    "minAwardValue=2238.2629&" + 
                    "maxAwardValue=0.9159907691068659&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "skip=Z87KETDI1lY2&" + 
                    "class=vJz4m23B4W&" + 
                    "yearFilterPagingRequest=O&" + 
                    "password=_EM_42574_XYZ_&" + 
                    "username=cLCQ8RnWe8C1Gv")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(3))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(3))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(-15612.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(140.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(2017.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[0]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[0]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[0]", "procuringEntityId[0]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[0]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("procuringEntityId[0]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("procuringEntityId[0]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_42555_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[2].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[2].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[2].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("month"))
                .body("'errors'[2].'rejectedValue'.size()", equalTo(4))
                .body("'errors'[2].'rejectedValue'[0]", numberMatches(-1.4112985E9))
                .body("'errors'[2].'rejectedValue'[1]", numberMatches(-83.0))
                .body("'errors'[2].'rejectedValue'[2]", numberMatches(685.0))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 3"))
                .body("'path'", containsString("/api/ocds/package/all"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/package/all'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/package/all?" + 
                    "procuringEntityId=_EM_42555_XYZ_&procuringEntityId=alo&procuringEntityId=oRvQOsfAljvVyRxd&procuringEntityId=d0DC&" + 
                    "notProcuringEntityId=VR&notProcuringEntityId=P51GenolpQLIaeC&notProcuringEntityId=O&notProcuringEntityId=wjz&notProcuringEntityId=JQyqbectw2sBX&" + 
                    "supplierId=B&supplierId=GODh&" + 
                    "contrMethod=BQEJa&contrMethod=kZqW&" + 
                    "planningLoc=Y&planningLoc=p6&planningLoc=28SrJ0G82mE&planningLoc=dbzzpJDBF&" + 
                    "tenderLoc=wZcS&tenderLoc=4hUjeqp&tenderLoc=uP1T2Op2jGoujkJ&" + 
                    "procuringEntityGroupId=539&procuringEntityGroupId=315&procuringEntityGroupId=204&procuringEntityGroupId=377&" + 
                    "month=685&month=32951&month=-83&month=-1411298500&" + 
                    "pageNumber=673&" + 
                    "pageSize=428&" + 
                    "minTenderValue=0.22127581011104935&" + 
                    "maxTenderValue=0.4714468509772082&" + 
                    "minAwardValue=2238.2629&" + 
                    "maxAwardValue=0.9159907691068659&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "skip=xVc&" + 
                    "class=&" + 
                    "yearFilterPagingRequest=_EM_42561_XYZ_&" + 
                    "password=963q3Iw_W")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[0]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[0]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[0]", "procuringEntityId[0]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[0]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("procuringEntityId[0]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("procuringEntityId[0]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_42555_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[1].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("month"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(4))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(-1.4112985E9))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(-83.0))
                .body("'errors'[1].'rejectedValue'[2]", numberMatches(685.0))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/ocds/package/all"));
    }
}
