package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_1689_test_1689_getOnLocationAllWithQueryParamsReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (400) GET:/api/flags/i007/stats
    * 2 - (200) POST:/api/ocds/orgDepartment/all
    * 3 - (200) POST:/api/ocds/orgDepartment/all
    * 4 - (400) POST:/api/averageAwardPeriod
    * 5 - (400) POST:/api/averageAwardPeriod
    * 6 - (400) POST:/api/averageAwardPeriod
    * 7 - (400) GET:/api/averageAwardPeriod
    * 8 - (400) GET:/api/totalFlaggedProjectsByIndicatorTypeByYear
    * 9 - (200) GET:/api/ocds/release/ocid/{ocid}
    * 10 - (200) GET:/api/ocds/location/all
    * Found 7 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_1689_getOnLocationAllWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/flags/i007/stats'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i007/stats?" + 
                    "bidTypeId=_EM_42435_XYZ_&bidTypeId=5aJoVi7hF&" + 
                    "notBidTypeId=NNQyNfHxI4B&notBidTypeId=DfoqVvcSS&notBidTypeId=JyDr6o6prM9&notBidTypeId=_EM_42436_XYZ_&" + 
                    "procuringEntityId=_EM_42437_XYZ_&procuringEntityId=_EM_42438_XYZ_&procuringEntityId=HyVeyM&" + 
                    "bidSelectionMethod=2Oad0YFtWPL&bidSelectionMethod=&bidSelectionMethod=F&bidSelectionMethod=oh9iH6&bidSelectionMethod=UAA9HGuS&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=x_3TwL_0Pmz&procurementMethod=C827cFva&procurementMethod=_EM_42442_XYZ_&procurementMethod=GO&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=592&procuringEntityDepartmentId=896&" + 
                    "procuringEntityGroupId=745&procuringEntityGroupId=185&procuringEntityGroupId=479&procuringEntityGroupId=-1498725001&procuringEntityGroupId=727&" + 
                    "year=397&year=938&" + 
                    "pageNumber=194&" + 
                    "minAwardValue=0.7059426207623161&" + 
                    "flagged=true&" + 
                    "password=5hne2X0_0kDSuSzP&" + 
                    "username=_EM_42446_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(2))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(397.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(938.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[1]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[1]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[1]", "bidTypeId[1]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("bidTypeId[1]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("bidTypeId[1]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("bidTypeId[1]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_42435_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notBidTypeId[3]", "EachPattern.yearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[3]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notBidTypeId[3]", "notBidTypeId[3]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[3]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("notBidTypeId[3]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("notBidTypeId[3]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_42436_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 4"))
                .body("'path'", containsString("/api/flags/i007/stats"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/orgDepartment/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/orgDepartment/all?" + 
                    "password=&" + 
                    "username=G")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/averageAwardPeriod'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/averageAwardPeriod?" + 
                    "notBidTypeId=c&notBidTypeId=_EM_42447_XYZ_&notBidTypeId=_EM_42448_XYZ_&notBidTypeId=cs_AscyX2ZF2vmM&" + 
                    "supplierId=Hrsyu2wT4dfOh&supplierId=shn22QNsk5xk&supplierId=cu&" + 
                    "contrMethod=&" + 
                    "planningLoc=&planningLoc=3AhG8Gu&planningLoc=_EM_42449_XYZ_&planningLoc=&planningLoc=uucj1&" + 
                    "procurementMethod=PkoGBleM&procurementMethod=ZWPPMIE&procurementMethod=Ucz&procurementMethod=_EM_42450_XYZ_&procurementMethod=w5chr&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=503&procuringEntityDepartmentId=159&procuringEntityDepartmentId=4&procuringEntityDepartmentId=330&procuringEntityDepartmentId=444&" + 
                    "procuringEntityGroupId=183&procuringEntityGroupId=220&procuringEntityGroupId=308&procuringEntityGroupId=372&procuringEntityGroupId=635&" + 
                    "year=&" + 
                    "month=112&month=905&month=759&month=272&month=240&" + 
                    "pageSize=125&" + 
                    "maxTenderValue=0.3107546902297751&" + 
                    "minAwardValue=0.3290838730147594&" + 
                    "flagged=false&" + 
                    "monthly=true")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notBidTypeId[0]", "EachPattern.yearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[0]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notBidTypeId[0]", "notBidTypeId[0]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[0]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notBidTypeId[0]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notBidTypeId[0]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_42447_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[1].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("month"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(5))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(112.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(240.0))
                .body("'errors'[1].'rejectedValue'[2]", numberMatches(272.0))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/averageAwardPeriod"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/averageAwardPeriod'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/averageAwardPeriod?" + 
                    "notBidTypeId=COLLUSION&notBidTypeId=l&notBidTypeId=W&notBidTypeId=cs_AscyX2ZF2vmM&" + 
                    "procuringEntityId=0OIUq&procuringEntityId=TT8nte&procuringEntityId=ZYRzh&procuringEntityId=F7F&procuringEntityId=TxlrbxMNWd7aMx&" + 
                    "supplierId=Hrsyu2wT4dfOh&supplierId=shn22QNsk5xk&supplierId=_EM_42452_XYZ_&" + 
                    "notBidSelectionMethod=&notBidSelectionMethod=aDXa&notBidSelectionMethod=x&" + 
                    "tenderLoc=cAfbQDnnIQE5y&tenderLoc=lCrh6CXrF2l&tenderLoc=M&" + 
                    "procurementMethod=PkoGBleM&procurementMethod=_EM_42454_XYZ_&procurementMethod=Ucz&procurementMethod=0Vx&procurementMethod=w5chr&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityGroupId=183&procuringEntityGroupId=220&procuringEntityGroupId=308&procuringEntityGroupId=372&procuringEntityGroupId=635&" + 
                    "year=&" + 
                    "month=112&month=905&month=759&month=272&month=240&" + 
                    "pageNumber=402&" + 
                    "pageSize=125&" + 
                    "minTenderValue=0.05621334256311317&" + 
                    "maxTenderValue=0.3107546902297751&" + 
                    "maxAwardValue=0.6267066422267698&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "class=_EM_42455_XYZ_&" + 
                    "username=_EM_42457_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notBidTypeId[2]", "EachPattern.yearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[2]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notBidTypeId[2]", "notBidTypeId[2]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[2]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notBidTypeId[2]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notBidTypeId[2]"))
                .body("'errors'[0].'rejectedValue'", containsString("cs_AscyX2ZF2vmM"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[1].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("month"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(5))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(112.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(240.0))
                .body("'errors'[1].'rejectedValue'[2]", numberMatches(272.0))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/averageAwardPeriod"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/averageAwardPeriod'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/averageAwardPeriod?" + 
                    "bidTypeId=_EM_42458_XYZ_&" + 
                    "procuringEntityId=_EM_42459_XYZ_&procuringEntityId=_EM_42460_XYZ_&procuringEntityId=_EM_42461_XYZ_&procuringEntityId=g&procuringEntityId=WEqPKgfQfEwoW&" + 
                    "contrMethod=YRBSF&contrMethod=IOG1vRKUq&contrMethod=XPqq5&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=nYpSygqE4BmJ&procurementMethod=LPP4dp_A&procurementMethod=_EM_42466_XYZ_&" + 
                    "procuringEntityDepartmentId=766&procuringEntityDepartmentId=291&procuringEntityDepartmentId=838&procuringEntityDepartmentId=646&procuringEntityDepartmentId=705&" + 
                    "procuringEntityGroupId=253&procuringEntityGroupId=997&procuringEntityGroupId=475&procuringEntityGroupId=858&" + 
                    "month=655&month=606&month=54&month=751&" + 
                    "pageSize=588&" + 
                    "minAwardValue=0.8383916742625948&" + 
                    "maxAwardValue=0.6625509252740236&" + 
                    "flagged=false")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(3))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(4))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(54.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(606.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(655.0))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[0]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[0]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[0]", "bidTypeId[0]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("bidTypeId[0]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("bidTypeId[0]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("bidTypeId[0]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_42458_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[1]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[1]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[1]", "procuringEntityId[1]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[1]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("procuringEntityId[1]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("procuringEntityId[1]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_42459_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 3"))
                .body("'path'", containsString("/api/averageAwardPeriod"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/averageAwardPeriod'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/averageAwardPeriod?" + 
                    "supplierId=vOrM50PUE8zap0&supplierId=IWRNELSCh&supplierId=7PAoxH7Mh6hXEfz&supplierId=ZTwniVf0JNi&" + 
                    "bidSelectionMethod=&" + 
                    "notBidSelectionMethod=g3Uko7&notBidSelectionMethod=iy6m7&notBidSelectionMethod=_EM_42468_XYZ_&notBidSelectionMethod=ROREHAqzKD41&notBidSelectionMethod=Vs0OCa1oDMUAFij8&" + 
                    "contrMethod=YRBSF&contrMethod=IOG1vRKUq&contrMethod=XPqq5&" + 
                    "planningLoc=sUpHPG&planningLoc=_EM_42469_XYZ_&planningLoc=abhVZTTdVlH&planningLoc=gMJgUem6yZeAa&" + 
                    "procurementMethod=_EM_42470_XYZ_&procurementMethod=LPP4dp_A&procurementMethod=_EM_42471_XYZ_&" + 
                    "procuringEntityDepartmentId=766&procuringEntityDepartmentId=291&procuringEntityDepartmentId=838&procuringEntityDepartmentId=646&procuringEntityDepartmentId=705&" + 
                    "month=655&month=606&month=54&month=751&" + 
                    "pageSize=588&" + 
                    "minTenderValue=0.9812972882824111&" + 
                    "minAwardValue=0.8383916742625948&" + 
                    "maxAwardValue=0.6625509252740236&" + 
                    "electronicSubmission=false&" + 
                    "monthly=false&" + 
                    "password=IGgKISKFQ55Dab&" + 
                    "yearFilterPagingRequest=1gUgL5h&" + 
                    "username=QLdKg_pSN")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(4))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(54.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(606.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(655.0))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/averageAwardPeriod"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/totalFlaggedProjectsByIndicatorTypeByYear'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/totalFlaggedProjectsByIndicatorTypeByYear?" + 
                    "procuringEntityId=j&procuringEntityId=_EM_42473_XYZ_&" + 
                    "bidSelectionMethod=CCk&bidSelectionMethod=_EM_42476_XYZ_&bidSelectionMethod=a0D1MW7fR87&bidSelectionMethod=0VtckeLhQ21l0&" + 
                    "notBidSelectionMethod=9&" + 
                    "planningLoc=rKKnXcHkoKLcX8xR&planningLoc=pub&" + 
                    "year=393&year=567&year=771&year=703&" + 
                    "pageNumber=550&" + 
                    "pageSize=991&" + 
                    "maxTenderValue=0.3359553850336525&" + 
                    "minAwardValue=0.5143013603952503&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "skip=_EM_42478_XYZ_&" + 
                    "password=_EM_42479_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(4))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(393.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(567.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(703.0))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[0]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[0]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[0]", "procuringEntityId[0]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[0]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("procuringEntityId[0]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("procuringEntityId[0]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_42473_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/totalFlaggedProjectsByIndicatorTypeByYear"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. Instance type (null) does not match any allowed primitive type (allowed: ["object"])
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/release/ocid/GplBof")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/location/all?" + 
                    "password=JoTyy8wIoAd8r8i&" + 
                    "username=nyYBCFBFbMy")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
}
