package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_1497_test_1497_getOnCrosstabShowsFaults_100_101 {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (400) POST:/api/ocds/excelExport
    * 2 - (400) POST:/api/ocds/excelExport
    * 3 - (400) POST:/api/totalEligibleIndicatorsByIndicatorType
    * 4 - (500) GET:/api/totalEligibleIndicatorsByIndicatorType
    * 5 - (200) POST:/api/averageNumberOfTenderers
    * 6 - (400) POST:/api/averageNumberOfTenderers
    * 7 - (400) GET:/api/flags/i077/crosstab
    * Found 7 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_1497_getOnCrosstabShowsFaults_100_101() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/excelExport'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/excelExport?" + 
                    "notProcuringEntityId=38wrTYq0tQBzI_dF&notProcuringEntityId=PBC2fa&" + 
                    "supplierId=g1mMTo2NCP_&supplierId=_EM_28961_XYZ_&supplierId=JGeBgdxK&supplierId=FGcda4EMWbX4&" + 
                    "bidSelectionMethod=gghiiNM&bidSelectionMethod=_EM_28962_XYZ_&bidSelectionMethod=_EM_28963_XYZ_&bidSelectionMethod=sG&bidSelectionMethod=cGXkYERWrPhT66xs&" + 
                    "planningLoc=MZHiT&planningLoc=20czJ2xqMfucRDkB&" + 
                    "tenderLoc=LVU49&tenderLoc=i5w&tenderLoc=Jgc&tenderLoc=_EM_28964_XYZ_&tenderLoc=QcQYLoj1bbTh&" + 
                    "procurementMethod=_EM_28965_XYZ_&" + 
                    "procuringEntityCityId=_EM_28966_XYZ_&procuringEntityCityId=_EM_28967_XYZ_&procuringEntityCityId=lzVDJY&" + 
                    "pageSize=972&" + 
                    "maxTenderValue=0.3100399732381679&" + 
                    "maxAwardValue=0.1878720664814162&" + 
                    "password=TTMxT&" + 
                    "yearFilterPagingRequest=YqSYXD&" + 
                    "username=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[0]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[0]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[0]", "notProcuringEntityId[0]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[0].'rejectedValue'", containsString("38wrTYq0tQBzI_dF"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/ocds/excelExport"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/excelExport'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/excelExport?" + 
                    "notBidTypeId=RIGGING&notBidTypeId=RIGGING&" + 
                    "procuringEntityId=_EM_28968_XYZ_&procuringEntityId=kto9vD&procuringEntityId=_EM_28969_XYZ_&procuringEntityId=9z&procuringEntityId=Eo3F&" + 
                    "notProcuringEntityId=38wrTYq0tQBzI_dF&notProcuringEntityId=PBC2fa&" + 
                    "notBidSelectionMethod=&" + 
                    "contrMethod=&" + 
                    "planningLoc=_EM_28972_XYZ_&planningLoc=_EM_28973_XYZ_&" + 
                    "tenderLoc=LVU49&tenderLoc=_EM_28974_XYZ_&tenderLoc=_EM_28975_XYZ_&tenderLoc=_EM_28976_XYZ_&tenderLoc=_EM_28977_XYZ_&" + 
                    "procurementMethod=zgR3gXx&" + 
                    "procuringEntityDepartmentId=508&" + 
                    "procuringEntityGroupId=814&procuringEntityGroupId=663&" + 
                    "minAwardValue=0.875425343545799&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "skip=OpvMXjufhcX&" + 
                    "password=hRY8&" + 
                    "class=_EM_28980_XYZ_&" + 
                    "yearFilterPagingRequest=_EM_28981_XYZ_&" + 
                    "username=HVUUc97I3lM6")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[0]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[0]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[0]", "notProcuringEntityId[0]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[0].'rejectedValue'", containsString("38wrTYq0tQBzI_dF"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[2]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[2]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[2]", "procuringEntityId[2]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[2]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("procuringEntityId[2]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("procuringEntityId[2]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_28968_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/ocds/excelExport"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/totalEligibleIndicatorsByIndicatorType'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/totalEligibleIndicatorsByIndicatorType?" + 
                    "notBidTypeId=f4&notBidTypeId=ptkk&notBidTypeId=G97N&notBidTypeId=uAWAMJBS3Lq&" + 
                    "procuringEntityId=&" + 
                    "bidSelectionMethod=k&bidSelectionMethod=h1k1rgHqEGc8gpN&" + 
                    "procuringEntityGroupId=394&" + 
                    "year=366&year=-843150420&year=316&year=588&year=889&" + 
                    "month=&" + 
                    "minTenderValue=0.7803925160660823&" + 
                    "maxTenderValue=0.1508013975771917&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(5))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(-8.4315042E8))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(316.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(366.0))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/totalEligibleIndicatorsByIndicatorType"));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/rest/controller/GenericOCDSController_353_lambda$getContrMethodFilterCriteria$1.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/totalEligibleIndicatorsByIndicatorType'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/totalEligibleIndicatorsByIndicatorType?" + 
                    "notProcuringEntityId=&" + 
                    "supplierId=Q&supplierId=ravNfzVxhg&" + 
                    "bidSelectionMethod=k&bidSelectionMethod=h1k1rgHqEGc8gpN&" + 
                    "contrMethod=zL0&contrMethod=bb26OmEzBo244jUt&contrMethod=KhkgtxHzrX&contrMethod=tAJl&" + 
                    "planningLoc=&" + 
                    "tenderLoc=lfPmp1Fib3qtg1Ht&tenderLoc=DfXDcQrLi70Gf2c&tenderLoc=ks232khAq_3iD5R&" + 
                    "procurementMethod=YaarKXqR2&procurementMethod=qC&procurementMethod=u7yD&procurementMethod=HOCaEf41BwIn3&procurementMethod=SnVRglrj&" + 
                    "procuringEntityDepartmentId=81&" + 
                    "month=&" + 
                    "pageSize=374&" + 
                    "minTenderValue=0.7803925160660823&" + 
                    "maxTenderValue=0.1508013975771917&" + 
                    "minAwardValue=0.8211288953300118&" + 
                    "electronicSubmission=true&" + 
                    "monthly=false&" + 
                    "username=3lzfxSGwgez")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/rest/controller/GenericOCDSController_353_lambda$getContrMethodFilterCriteria$1
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("invalid hexadecimal representation of an ObjectId: [KhkgtxHzrX]"))
                .body("'path'", containsString("/api/totalEligibleIndicatorsByIndicatorType"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/averageNumberOfTenderers?" + 
                    "notBidTypeId=fauHCpHT3yY&notBidTypeId=ORb6J4fUoFMKZo&notBidTypeId=0aPr228sc9DZR&notBidTypeId=1Y86or1bz&notBidTypeId=I6tHqqtN4biW9yP&" + 
                    "procuringEntityId=K&procuringEntityId=FOVDVkRF&procuringEntityId=VfPXEWYc&procuringEntityId=LcYm3dt5ZfML9G1&" + 
                    "notProcuringEntityId=I3NGu&notProcuringEntityId=hToKFi&" + 
                    "bidSelectionMethod=hTX3k&" + 
                    "notBidSelectionMethod=pkOE9OasiJLePtk&notBidSelectionMethod=Yv1QKj5CNFg&notBidSelectionMethod=AdZKC90DCTnOsdN&notBidSelectionMethod=DPEw6QNv&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=OCXkhqj8mLMtZsC&procurementMethod=bGp&procurementMethod=Or&procurementMethod=qnMG&procurementMethod=H&" + 
                    "procuringEntityCityId=&" + 
                    "pageNumber=92&" + 
                    "minTenderValue=0.6589348920013959&" + 
                    "maxTenderValue=0.5846342805872281&" + 
                    "maxAwardValue=0.202688602097303&" + 
                    "flagged=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/averageNumberOfTenderers'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_11266_XYZ_")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/averageNumberOfTenderers?" + 
                    "bidTypeId=Kve_LBGLKs9Kjslc&" + 
                    "procuringEntityId=K&procuringEntityId=FOVDVkRF&procuringEntityId=VfPXEWYc&procuringEntityId=LcYm3dt5ZfML9G1&" + 
                    "bidSelectionMethod=hTX3k&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=OCXkhqj8mLMtZsC&procurementMethod=bGp&procurementMethod=Or&procurementMethod=qnMG&procurementMethod=H&" + 
                    "procuringEntityDepartmentId=195&procuringEntityDepartmentId=903&" + 
                    "procuringEntityGroupId=638&procuringEntityGroupId=190&procuringEntityGroupId=-657979555&procuringEntityGroupId=-349125403&procuringEntityGroupId=546&" + 
                    "month=871&month=21&month=818&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "password=0Qgt22lyU&" + 
                    "yearFilterPagingRequest=vDUKcv8Ai1B72&" + 
                    "username=SrrKYq_K")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(3))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(21.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(818.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(871.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[0]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[0]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[0]", "bidTypeId[0]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("bidTypeId[0]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("bidTypeId[0]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("bidTypeId[0]"))
                .body("'errors'[1].'rejectedValue'", containsString("Kve_LBGLKs9Kjslc"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/averageNumberOfTenderers"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/flags/i077/crosstab'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i077/crosstab?" + 
                    "notBidTypeId=&" + 
                    "procuringEntityId=_EM_28999_XYZ_&procuringEntityId=_EM_29000_XYZ_&procuringEntityId=fI0_O8&procuringEntityId=8Ws1x&procuringEntityId=JnKVF&" + 
                    "supplierId=_EM_29001_XYZ_&supplierId=_EM_29002_XYZ_&supplierId=cra9krE&" + 
                    "bidSelectionMethod=_EM_29003_XYZ_&bidSelectionMethod=CZabuxZ5&bidSelectionMethod=&bidSelectionMethod=BU&" + 
                    "planningLoc=_EM_29008_XYZ_&planningLoc=xROPMKuy&planningLoc=_EM_29009_XYZ_&planningLoc=XQCAaJ&" + 
                    "tenderLoc=_EM_29010_XYZ_&tenderLoc=_EM_29011_XYZ_&" + 
                    "procurementMethod=BZq6TjNmC&procurementMethod=_EM_29012_XYZ_&procurementMethod=J&procurementMethod=&procurementMethod=w&" + 
                    "pageNumber=289&" + 
                    "maxTenderValue=0.18908582232428417&" + 
                    "maxAwardValue=0.5710230280411234&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "skip=mMgqgQIH&" + 
                    "password=UbLXnmwueFgQc&" + 
                    "class=EeHQ0AU&" + 
                    "yearFilterPagingRequest=YB6&" + 
                    "username=_EM_29013_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[2]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[2]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[2]", "procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("procuringEntityId[2]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_28999_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/flags/i077/crosstab"));
    }
}
