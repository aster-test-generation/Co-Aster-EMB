package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_1806_test_1806_getOnReleasesReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (302) GET:/api/flags/i019/releases
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1806_getOnReleasesReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 302 not defined for path '/api/flags/i019/releases'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/flags/i019/releases?" + 
                    "procuringEntityId=vKUNntTbW_j&procuringEntityId=eD&procuringEntityId=_EM_215_XYZ_&procuringEntityId=zsAb&procuringEntityId=jgB7xVP&" + 
                    "bidSelectionMethod=CHZeUTy0z3&bidSelectionMethod=_EM_218_XYZ_&bidSelectionMethod=_EM_219_XYZ_&" + 
                    "notBidSelectionMethod=WDg&notBidSelectionMethod=k3s_K9&notBidSelectionMethod=_EM_220_XYZ_&notBidSelectionMethod=_EM_221_XYZ_&" + 
                    "contrMethod=_EM_222_XYZ_&contrMethod=_EM_223_XYZ_&contrMethod=ml3ZVhEsSPJo0&contrMethod=_EM_224_XYZ_&contrMethod=_EM_225_XYZ_&" + 
                    "tenderLoc=rCJkp23Ds&" + 
                    "procurementMethod=vJDPc&" + 
                    "procuringEntityCityId=pErqE1kvoDBT&procuringEntityCityId=_EM_226_XYZ_&" + 
                    "procuringEntityGroupId=701&procuringEntityGroupId=734&procuringEntityGroupId=907&" + 
                    "year=&" + 
                    "month=3&month=544&month=610&month=226&" + 
                    "pageSize=195&" + 
                    "maxTenderValue=0.6466850868415758&" + 
                    "minAwardValue=0.933325833759902&" + 
                    "maxAwardValue=0.07285933805765799&" + 
                    "electronicSubmission=false&" + 
                    "monthly=true")
                .then()
                .statusCode(302)
                .assertThat()
                .body(isEmptyOrNullString());
    }
}
