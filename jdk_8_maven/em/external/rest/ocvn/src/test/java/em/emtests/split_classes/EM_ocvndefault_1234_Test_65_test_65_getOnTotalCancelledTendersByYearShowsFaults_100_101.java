package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_65_test_65_getOnTotalCancelledTendersByYearShowsFaults_100_101 {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (404) GET:/api/ocds/package/planningBidNo/{bidNo}
    * 2 - (400) POST:/api/flags/i038/stats
    * 3 - (400) GET:/api/flags/i002/crosstab
    * 4 - (400) GET:/api/ocds/package/all
    * 5 - (500) POST:/api/ocds/package/ocid/{ocid}
    * 6 - (400) POST:/api/tendersByLocation
    * 7 - (400) POST:/api/ocds/bidTimelineExcelChart
    * 8 - (400) POST:/api/ocds/bidTimelineExcelChart
    * 9 - (200) GET:/api/ocds/orgDepartment/search
    * 10 - (400) GET:/api/totalCancelledTendersByYear
    * Found 10 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_65_getOnTotalCancelledTendersByYearShowsFaults_100_101() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/package/planningBidNo/9.Dv?" + 
                    "password=_EM_37131_XYZ_&" + 
                    "username=")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/ocds/package/planningBidNo/9.Dv"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/flags/i038/stats'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i038/stats?" + 
                    "bidTypeId=tf7aMYLS31xmv&bidTypeId=_EM_37158_XYZ_&bidTypeId=PlszBF1&bidTypeId=_EM_37160_XYZ_&bidTypeId=65yb4R9o&" + 
                    "notBidTypeId=wdjeK0LRDVtnB&" + 
                    "procuringEntityId=_EM_37161_XYZ_&procuringEntityId=_EM_37162_XYZ_&procuringEntityId=_EM_37163_XYZ_&procuringEntityId=Oe_n12gw5Ur2TVXF&procuringEntityId=yj6&" + 
                    "notProcuringEntityId=F8dsBX&notProcuringEntityId=KA6qm&notProcuringEntityId=_EM_37164_XYZ_&" + 
                    "notBidSelectionMethod=PkyOZiVtD4i5&" + 
                    "contrMethod=PjL9Q0E&contrMethod=QOrChQwZD&contrMethod=TSxP&" + 
                    "planningLoc=B18%60X8p7&planningLoc=teo6&" + 
                    "tenderLoc=_EM_37167_XYZ_&" + 
                    "procuringEntityCityId=_EM_37168_XYZ_&procuringEntityCityId=&procuringEntityCityId=N5TPQYhUu9sIi&procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=104&procuringEntityDepartmentId=631&procuringEntityDepartmentId=878&" + 
                    "year=&" + 
                    "month=565&month=422&month=138&month=265&month=775&" + 
                    "pageNumber=462&" + 
                    "pageSize=888&" + 
                    "minTenderValue=432.55758258227485&" + 
                    "minAwardValue=0.8596116187844294&" + 
                    "maxAwardValue=0.8096317228456489&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "yearFilterPagingRequest=s6bLmrpvdQqugHVN")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(5))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(138.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(265.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(422.0))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[0]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[0]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[0]", "procuringEntityId[0]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[0]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("procuringEntityId[0]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("procuringEntityId[0]"))
                .body("'errors'[1].'rejectedValue'", containsString("Oe_n12gw5Ur2TVXF"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[2]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[2]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[2]", "bidTypeId[2]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("bidTypeId[2]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("bidTypeId[2]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("bidTypeId[2]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_37158_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 4"))
                .body("'path'", containsString("/api/flags/i038/stats"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/flags/i002/crosstab'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i002/crosstab?" + 
                    "bidTypeId=FRAUD&bidTypeId=_EM_37144_XYZ_&" + 
                    "notBidTypeId=4opJzZsXq_PQCZg&notBidTypeId=_EM_37145_XYZ_&notBidTypeId=3R1wDk&notBidTypeId=tr8XGL95TpplY23&notBidTypeId=YTIl&" + 
                    "procuringEntityId=&procuringEntityId=WXPJxi&procuringEntityId=&procuringEntityId=Krm&procuringEntityId=_EM_37146_XYZ_&" + 
                    "notProcuringEntityId=NWsZ10Yh3W&notProcuringEntityId=&notProcuringEntityId=_EM_37148_XYZ_&notProcuringEntityId=46BHPwzbcD&notProcuringEntityId=mAjG5T_FvxlFY&" + 
                    "supplierId=sTKIIRA2JB0&" + 
                    "procurementMethod=&" + 
                    "procuringEntityCityId=_EM_37153_XYZ_&procuringEntityCityId=_EM_37154_XYZ_&procuringEntityCityId=_EM_37155_XYZ_&" + 
                    "procuringEntityGroupId=649&procuringEntityGroupId=1050758442&procuringEntityGroupId=250&procuringEntityGroupId=722&procuringEntityGroupId=156&" + 
                    "year=386&year=637&year=280&" + 
                    "month=607&month=314&month=562&month=47&month=107&" + 
                    "pageNumber=37&" + 
                    "pageSize=841&" + 
                    "maxAwardValue=0.019302871893375873&" + 
                    "skip=r83wm2&" + 
                    "password=_EM_37156_XYZ_&" + 
                    "class=_EM_37157_XYZ_&" + 
                    "yearFilterPagingRequest=AfqtmIw8&" + 
                    "username=TtUo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(6))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[3]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[3]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[3]", "notProcuringEntityId[3]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[3]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notProcuringEntityId[3]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notProcuringEntityId[3]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_37148_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[1].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("year"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(3))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(280.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(386.0))
                .body("'errors'[1].'rejectedValue'[2]", numberMatches(637.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notBidTypeId[1]", "EachPattern.yearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[1]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notBidTypeId[1]", "notBidTypeId[1]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[1]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("notBidTypeId[1]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("notBidTypeId[1]"))
                .body("'errors'[2].'rejectedValue'", containsString("4opJzZsXq_PQCZg"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 6"))
                .body("'path'", containsString("/api/flags/i002/crosstab"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/package/all'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/package/all?" + 
                    "bidTypeId=&" + 
                    "notBidTypeId=SaPJ2XQ2XsF&notBidTypeId=B&" + 
                    "bidSelectionMethod=iKFvHxlPJ0c3DjLP&bidSelectionMethod=hODPgjfdlbtH&bidSelectionMethod=WUPSc0tgQpITLmB&" + 
                    "planningLoc=41ZZb4eS60i&planningLoc=U30lgy6D9bU&planningLoc=6OCnLSQ_z&planningLoc=_EzoN7QK3&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=_EM_37141_XYZ_&procurementMethod=_EM_37142_XYZ_&procurementMethod=Xg4CeJCvwV&" + 
                    "procuringEntityCityId=hmydAqXt4mlL&" + 
                    "procuringEntityDepartmentId=-4&" + 
                    "procuringEntityGroupId=893&" + 
                    "year=264&year=320&year=891&year=32976&" + 
                    "month=&" + 
                    "minTenderValue=0.7461295058565436&" + 
                    "maxTenderValue=0.5312624153608208&" + 
                    "minAwardValue=-0.38796971285780724&" + 
                    "maxAwardValue=0.12655433936577198&" + 
                    "electronicSubmission=true&" + 
                    "skip=GAKoaODSaJNOI&" + 
                    "class=_EM_37143_XYZ_&" + 
                    "yearFilterPagingRequest=u4VehT3q_44hbc&" + 
                    "username=_EM_42063_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(4))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(264.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(320.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(891.0))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/ocds/package/all"));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/rest/controller/OcdsController_111_createReleasePackage.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/ocds/package/ocid/{ocid}'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/package/ocid/phtEWznfJisZqu")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/rest/controller/OcdsController_111_createReleasePackage
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/ocds/package/ocid/phtEWznfJisZqu"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/tendersByLocation'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/tendersByLocation?" + 
                    "bidTypeId=RIGGING&bidTypeId=_EM_37204_XYZ_&bidTypeId=iuXE0Z&bidTypeId=COLLQSION&" + 
                    "notBidTypeId=d1tlQVHua&notBidTypeId=_EM_37205_XYZ_&notBidTypeId=_EM_37206_XYZ_&notBidTypeId=COLLUSION&notBidTypeId=_EM_37207_XYZ_&" + 
                    "procuringEntityId=_EM_37208_XYZ_&procuringEntityId=E2tLQa8R8gjRma2&procuringEntityId=cX&" + 
                    "supplierId=_EM_42065_XYZ_&supplierId=8YxQfHbog0NM_&supplierId=H&" + 
                    "notBidSelectionMethod=SIEhmT&notBidSelectionMethod=&notBidSelectionMethod=FQkYOInlksHJSiKb&" + 
                    "tenderLoc=_EM_37210_XYZ_&tenderLoc=Reil5&tenderLoc=0&" + 
                    "procurementMethod=_EM_37211_XYZ_&" + 
                    "procuringEntityDepartmentId=226&procuringEntityDepartmentId=303&" + 
                    "procuringEntityGroupId=-141&procuringEntityGroupId=930&procuringEntityGroupId=-2120282709&" + 
                    "year=179&year=-65404&year=716&" + 
                    "month=895&month=305&" + 
                    "pageSize=733&" + 
                    "minTenderValue=0.04894058843811253&" + 
                    "minAwardValue=0.5921290358494016&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "monthly=false")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(5))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[1]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[1]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[1]", "procuringEntityId[1]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[1]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("procuringEntityId[1]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("procuringEntityId[1]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_37208_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[2]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[2]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[2]", "bidTypeId[2]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("bidTypeId[2]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("bidTypeId[2]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("bidTypeId[2]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_37204_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[2].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[2].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[2].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("month"))
                .body("'errors'[2].'rejectedValue'.size()", equalTo(2))
                .body("'errors'[2].'rejectedValue'[0]", numberMatches(305.0))
                .body("'errors'[2].'rejectedValue'[1]", numberMatches(895.0))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachRange"))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 5"))
                .body("'path'", containsString("/api/tendersByLocation"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/bidTimelineExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/bidTimelineExcelChart?" + 
                    "bidTypeId=&" + 
                    "procuringEntityId=RGu3hoVz&procuringEntityId=_EM_37182_XYZ_&procuringEntityId=0HVs&procuringEntityId=oPT&procuringEntityId=_EM_37184_XYZ_&" + 
                    "notProcuringEntityId=jXwKeabZ&" + 
                    "contrMethod=niW6Ple5j&contrMethod=_EM_37187_XYZ_&" + 
                    "tenderLoc=_EM_37190_XYZ_&tenderLoc=1m&tenderLoc=6S4F2&tenderLoc=NduB7kccac17FOn&" + 
                    "procurementMethod=EtdybLTC_&procurementMethod=cRGH&procurementMethod=&procurementMethod=lj1w7VX_b3WCM3&procurementMethod=2mpulyw0TmkTJL&" + 
                    "procuringEntityCityId=P&procuringEntityCityId=_EM_42064_XYZ_&procuringEntityCityId=_EM_37193_XYZ_&procuringEntityCityId=C0XGZLdD&" + 
                    "procuringEntityDepartmentId=&" + 
                    "procuringEntityGroupId=102&procuringEntityGroupId=377&" + 
                    "year=551&year=420&year=627&year=868&" + 
                    "month=465&" + 
                    "pageNumber=1418&" + 
                    "maxTenderValue=0.8267521092995452&" + 
                    "minAwardValue=0.8568036229809289&" + 
                    "maxAwardValue=0.14304358686652074&" + 
                    "electronicSubmission=false&" + 
                    "language=ms&" + 
                    "langYearFilterPagingRequest=U2bXq")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.langYearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(4))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(420.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(551.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(627.0))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.langYearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.month", "month"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[1].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[1].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("month"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(465.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.procuringEntityId[2]", "EachPattern.langYearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[2]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.procuringEntityId[2]", "procuringEntityId[2]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[2]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("procuringEntityId[2]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("procuringEntityId[2]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_37182_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 4"))
                .body("'path'", containsString("/api/ocds/bidTimelineExcelChart"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/bidTimelineExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/bidTimelineExcelChart?" + 
                    "bidTypeId=&" + 
                    "contrMethod=niW6Ple5j&contrMethod=_EM_37198_XYZ_&" + 
                    "planningLoc=6PLW&planningLoc=bvKOzb5Sw3&" + 
                    "procurementMethod=EtdybLTC_&procurementMethod=cRGH&procurementMethod=&procurementMethod=lj1w7VX_b3WCM3&procurementMethod=2mpulyw0TmkTJL&" + 
                    "procuringEntityGroupId=102&procuringEntityGroupId=377&" + 
                    "year=551&year=420&year=627&year=868&" + 
                    "month=33233&" + 
                    "pageNumber=1418&" + 
                    "pageSize=32799&" + 
                    "minTenderValue=0.20458567850785847&" + 
                    "minAwardValue=0.8568036229809289&" + 
                    "maxAwardValue=0.14304358686652074&" + 
                    "electronicSubmission=false&" + 
                    "password=&" + 
                    "class=7dV6xnYmjnsi&" + 
                    "langYearFilterPagingRequest=VeBLKOYxN&" + 
                    "username=_EM_37203_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.langYearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(4))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(420.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(551.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(627.0))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.langYearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.month", "month"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[1].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[1].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("month"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(33233.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("Range.langYearFilterPagingRequest.pageSize", "Range.pageSize", "Range.java.lang.Integer", "Range"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.pageSize", "pageSize"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("pageSize"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("pageSize"))
                .body("'errors'[2].'arguments'[1]", numberMatches(1000.0))
                .body("'errors'[2].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[2].'defaultMessage'", containsString("must be between 1 and 1000"))
                .body("'errors'[2].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("pageSize"))
                .body("'errors'[2].'rejectedValue'", numberMatches(32799.0))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("Range"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 4"))
                .body("'path'", containsString("/api/ocds/bidTimelineExcelChart"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/orgDepartment/search?" + 
                    "password=ohtsLpP&" + 
                    "skip=htXzbteWT&" + 
                    "class=MOvs1mdoxcXOFF7&" + 
                    "textSearchRequest=_EM_37214_XYZ_&" + 
                    "username=_EM_37215_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/totalCancelledTendersByYear'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/totalCancelledTendersByYear?" + 
                    "bidTypeId=GHPqqqN&bidTypeId=NT8Ytg&bidTypeId=Dswc77OY&" + 
                    "notBidTypeId=RZCZMfKFaBf&notBidTypeId=AsuJm&notBidTypeId=tT3wcT&notBidTypeId=tf7aMYLS31xmv&notBidTypeId=wcANsiFQw257xP&" + 
                    "supplierId=Y1wX&supplierId=Ttij&" + 
                    "notBidSelectionMethod=O&notBidSelectionMethod=i6W&" + 
                    "contrMethod=OGGK1JqtMnp0&contrMethod=U_3rANLqUu4rYUAh&" + 
                    "planningLoc=10_aWrn2&planningLoc=1qA7KGrqoR42&planningLoc=EFnZ9VY__gPI&" + 
                    "tenderLoc=6l5&tenderLoc=5U18YEfYo7PXqb&tenderLoc=iSpFP&tenderLoc=bJlsIA&tenderLoc=WJ7&" + 
                    "procuringEntityCityId=3hmRHJX&procuringEntityCityId=lNhPPC1UiQP&procuringEntityCityId=N9X_OMMfIVW524&procuringEntityCityId=OhJzm&procuringEntityCityId=5h3lrhbVFxAcoqO&" + 
                    "procuringEntityDepartmentId=602&procuringEntityDepartmentId=-8211318&procuringEntityDepartmentId=628&procuringEntityDepartmentId=921&" + 
                    "year=969239664&year=920&year=886&year=70&year=87&" + 
                    "month=984&month=521&month=518&" + 
                    "pageNumber=803&" + 
                    "pageSize=988&" + 
                    "minTenderValue=0.5379292009723029&" + 
                    "minAwardValue=-0.46174108675662073&" + 
                    "maxAwardValue=0.15621060818162247&" + 
                    "monthly=true&" + 
                    "skip=n6fP8&" + 
                    "class=SICcA&" + 
                    "yearFilterPagingRequest=PiAKyIpQDN13&" + 
                    "password=knAkcJ2&" + 
                    "username=D5Ujd8YoIxix")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(3))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(5))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(70.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(87.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(886.0))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[1].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("month"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(3))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(518.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(521.0))
                .body("'errors'[1].'rejectedValue'[2]", numberMatches(984.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.contrMethod[1]", "EachPattern.yearFilterPagingRequest.contrMethod", "EachPattern.contrMethod[1]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.contrMethod[1]", "contrMethod[1]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("contrMethod[1]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("contrMethod[1]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("contrMethod[1]"))
                .body("'errors'[2].'rejectedValue'", containsString("U_3rANLqUu4rYUAh"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 3"))
                .body("'path'", containsString("/api/totalCancelledTendersByYear"));
    }
}
