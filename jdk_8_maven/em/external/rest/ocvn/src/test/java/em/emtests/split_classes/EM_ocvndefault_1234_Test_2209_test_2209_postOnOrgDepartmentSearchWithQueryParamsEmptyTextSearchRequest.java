package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_2209_test_2209_postOnOrgDepartmentSearchWithQueryParamsEmptyTextSearchRequest {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (400) POST:/api/ocds/orgDepartment/search
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_2209_postOnOrgDepartmentSearchWithQueryParamsEmptyTextSearchRequest() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/orgDepartment/search'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/ocds/orgDepartment/search?" + 
                    "pageNumber=239&" + 
                    "text=g&" + 
                    "skip=1uG7VNF2g0wUdlW&" + 
                    "class=_EM_42405_XYZ_&" + 
                    "textSearchRequest=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("Size.textSearchRequest.text", "Size.text", "Size.java.lang.String", "Size"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("textSearchRequest.text", "text"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("text"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("text"))
                .body("'errors'[0].'arguments'[1]", numberMatches(30.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(3.0))
                .body("'errors'[0].'defaultMessage'", containsString("size must be between 3 and 30"))
                .body("'errors'[0].'objectName'", containsString("textSearchRequest"))
                .body("'errors'[0].'field'", containsString("text"))
                .body("'errors'[0].'rejectedValue'", containsString("g"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("Size"))
                .body("'message'", containsString("Validation failed for object='textSearchRequest'. Error count: 1"))
                .body("'path'", containsString("/api/ocds/orgDepartment/search"));
    }
}
