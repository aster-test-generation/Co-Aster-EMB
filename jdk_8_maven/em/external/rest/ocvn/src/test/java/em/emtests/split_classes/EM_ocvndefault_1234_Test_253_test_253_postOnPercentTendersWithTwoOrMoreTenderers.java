package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_253_test_253_postOnPercentTendersWithTwoOrMoreTenderers {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (400) POST:/api/percentTendersWithTwoOrMoreTenderers
    * 2 - (200) POST:/api/percentTendersWithTwoOrMoreTenderers
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_253_postOnPercentTendersWithTwoOrMoreTenderers() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/percentTendersWithTwoOrMoreTenderers'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/percentTendersWithTwoOrMoreTenderers?" + 
                    "procuringEntityId=oNuN66dGOa&" + 
                    "notProcuringEntityId=_EM_15475_XYZ_&notProcuringEntityId=hW&notProcuringEntityId=_EM_15476_XYZ_&notProcuringEntityId=_EM_15477_XYZ_&notProcuringEntityId=_EM_15478_XYZ_&" + 
                    "planningLoc=_EM_15488_XYZ_&planningLoc=_EM_15489_XYZ_&planningLoc=_EM_15490_XYZ_&" + 
                    "tenderLoc=9S2_3hS2&tenderLoc=_EM_15491_XYZ_&tenderLoc=_EM_15492_XYZ_&" + 
                    "procuringEntityGroupId=89&procuringEntityGroupId=334&procuringEntityGroupId=396&procuringEntityGroupId=386&" + 
                    "pageNumber=605&" + 
                    "minTenderValue=0.11963662140675313&" + 
                    "minAwardValue=0.6647085917823863&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[0]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[0]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[0]", "notProcuringEntityId[0]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_15475_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/percentTendersWithTwoOrMoreTenderers"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/percentTendersWithTwoOrMoreTenderers?" + 
                    "bidTypeId=&" + 
                    "notBidTypeId=BgHHPVS&notBidTypeId=tOLYCf&" + 
                    "supplierId=mabgEH&supplierId=_EM_15500_XYZ_&supplierId=CDqNN3h29Q&supplierId=_EM_15501_XYZ_&" + 
                    "bidSelectionMethod=_EM_15502_XYZ_&bidSelectionMethod=_EM_15503_XYZ_&bidSelectionMethod=K&bidSelectionMethod=_EM_15504_XYZ_&" + 
                    "planningLoc=OI5vRbo_okdmvZ&planningLoc=FaaEvBHJYOJ9ajR&planningLoc=W&" + 
                    "procurementMethod=_EM_15508_XYZ_&procurementMethod=_EM_15509_XYZ_&procurementMethod=1j3LjL64_4f&procurementMethod=_EM_15510_XYZ_&procurementMethod=_EM_15511_XYZ_&" + 
                    "procuringEntityCityId=WgXnS3RJ3hkffyis&procuringEntityCityId=_EM_15512_XYZ_&procuringEntityCityId=jaZHwpqHkBMXtWu&" + 
                    "procuringEntityDepartmentId=556&" + 
                    "procuringEntityGroupId=89&procuringEntityGroupId=334&procuringEntityGroupId=396&procuringEntityGroupId=386&" + 
                    "month=&" + 
                    "minTenderValue=0.11963662140675313&" + 
                    "minAwardValue=0.6647085917823863&" + 
                    "maxAwardValue=0.9751425807908537&" + 
                    "electronicSubmission=true&" + 
                    "monthly=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
}
