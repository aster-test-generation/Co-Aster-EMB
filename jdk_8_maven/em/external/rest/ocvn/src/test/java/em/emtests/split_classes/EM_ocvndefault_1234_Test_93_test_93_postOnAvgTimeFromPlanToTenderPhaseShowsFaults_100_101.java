package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_93_test_93_postOnAvgTimeFromPlanToTenderPhaseShowsFaults_100_101 {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (400) GET:/api/percentTendersCancelled
    * 2 - (200) POST:/api/ocds/location/search
    * 3 - (400) GET:/api/qualityFundingByTenderDeliveryLocation
    * 4 - (400) POST:/api/ocds/bidSelectionExcelChart
    * 5 - (400) GET:/api/totalEligibleIndicatorsByIndicatorType
    * 6 - (500) POST:/api/flags/i007/crosstab
    * 7 - (400) POST:/api/costEffectivenessTenderAwardAmount
    * 8 - (500) POST:/api/ocds/package/ocid/{ocid}
    * 9 - (500) GET:/api/ocds/package/ocid/{ocid}
    * 10 - (400) POST:/api/avgTimeFromPlanToTenderPhase
    * Found 12 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_93_postOnAvgTimeFromPlanToTenderPhaseShowsFaults_100_101() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/percentTendersCancelled'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/percentTendersCancelled?" + 
                    "bidTypeId=&" + 
                    "notBidTypeId=_EM_28585_XYZ_&notBidTypeId=2ufglHv&notBidTypeId=_EM_28586_XYZ_&notBidTypeId=izFwAyiwdXVE&notBidTypeId=_EM_28587_XYZ_&" + 
                    "supplierId=f89tVQtwWKX&" + 
                    "notBidSelectionMethod=tjxQFVx&notBidSelectionMethod=wUqej2&" + 
                    "procuringEntityCityId=wfHk8&procuringEntityCityId=DVSSFBzMD&procuringEntityCityId=NnomfHgqNghz_LGG&" + 
                    "procuringEntityDepartmentId=250&procuringEntityDepartmentId=902&procuringEntityDepartmentId=605&procuringEntityDepartmentId=340&" + 
                    "procuringEntityGroupId=55&procuringEntityGroupId=385&procuringEntityGroupId=621&" + 
                    "pageSize=388&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "password=_EM_28594_XYZ_&" + 
                    "class=PUeOFPbxVz&" + 
                    "yearFilterPagingRequest=_EM_28595_XYZ_&" + 
                    "username=_EM_28596_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notBidTypeId[1]", "EachPattern.yearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[1]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notBidTypeId[1]", "notBidTypeId[1]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[1]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notBidTypeId[1]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notBidTypeId[1]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_28585_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/percentTendersCancelled"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageNumber=755&" + 
                    "pageSize=497")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/qualityFundingByTenderDeliveryLocation'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/qualityFundingByTenderDeliveryLocation?" + 
                    "bidTypeId=&" + 
                    "notProcuringEntityId=_EM_28599_XYZ_&notProcuringEntityId=Cb7rM1Z&notProcuringEntityId=_EM_28600_XYZ_&" + 
                    "bidSelectionMethod=RSnhtIH_9SbgyMVI&" + 
                    "planningLoc=&" + 
                    "procurementMethod=VrhzBoGn_&procurementMethod=OFBEjjF3h&" + 
                    "procuringEntityCityId=_EM_28605_XYZ_&procuringEntityCityId=_EM_28606_XYZ_&" + 
                    "year=822&year=5&year=438&" + 
                    "month=849&month=499&month=884&month=452&" + 
                    "pageNumber=-1894012354&" + 
                    "minTenderValue=0.8270825793707259&" + 
                    "flagged=false&" + 
                    "username=KBznj")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(4))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(452.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(499.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(849.0))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[1]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[1]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[1]", "notProcuringEntityId[1]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_28599_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[2].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[2].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[2].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("year"))
                .body("'errors'[2].'rejectedValue'.size()", equalTo(3))
                .body("'errors'[2].'rejectedValue'[0]", numberMatches(5.0))
                .body("'errors'[2].'rejectedValue'[1]", numberMatches(438.0))
                .body("'errors'[2].'rejectedValue'[2]", numberMatches(822.0))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachRange"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 4"))
                .body("'path'", containsString("/api/qualityFundingByTenderDeliveryLocation"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/bidSelectionExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/bidSelectionExcelChart?" + 
                    "bidTypeId=p8afE7Tkvp&bidTypeId=_EM_28607_XYZ_&" + 
                    "procuringEntityId=8S&procuringEntityId=AobzvWwcfu9Ah&procuringEntityId=MJjPkTi&" + 
                    "bidSelectionMethod=krrVzpemV&bidSelectionMethod=_EM_28612_XYZ_&bidSelectionMethod=_EM_28613_XYZ_&bidSelectionMethod=_EM_28614_XYZ_&" + 
                    "contrMethod=_EM_28618_XYZ_&contrMethod=_EM_28619_XYZ_&contrMethod=&" + 
                    "planningLoc=_EM_28620_XYZ_&planningLoc=_EM_28621_XYZ_&planningLoc=nwo83DGmm&planningLoc=Dhk8zW&planningLoc=XZ3DfIIkbYcH&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=tdhhxSwmGb3P2X1&procurementMethod=_EM_28622_XYZ_&procurementMethod=fMQSF0Du9Xq&" + 
                    "procuringEntityDepartmentId=424&procuringEntityDepartmentId=426&procuringEntityDepartmentId=912&procuringEntityDepartmentId=529&procuringEntityDepartmentId=485&" + 
                    "procuringEntityGroupId=487&procuringEntityGroupId=357&procuringEntityGroupId=73&procuringEntityGroupId=379&procuringEntityGroupId=102&" + 
                    "pageNumber=682&" + 
                    "pageSize=5&" + 
                    "minTenderValue=0.9609742471470742&" + 
                    "maxAwardValue=0.3775006722841121&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "language=FGCNOnMgUEYB3lF9&" + 
                    "password=N3X_Jg5G&" + 
                    "langYearFilterPagingRequest=_EM_28626_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.bidTypeId[0]", "EachPattern.langYearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[0]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.bidTypeId[0]", "bidTypeId[0]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("bidTypeId[0]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("bidTypeId[0]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("bidTypeId[0]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_28607_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.contrMethod[1]", "EachPattern.langYearFilterPagingRequest.contrMethod", "EachPattern.contrMethod[1]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.contrMethod[1]", "contrMethod[1]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("contrMethod[1]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("contrMethod[1]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("contrMethod[1]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_28618_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/ocds/bidSelectionExcelChart"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/totalEligibleIndicatorsByIndicatorType'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/totalEligibleIndicatorsByIndicatorType?" + 
                    "supplierId=8TGtn&" + 
                    "bidSelectionMethod=Mnl2pMgCs6&" + 
                    "notBidSelectionMethod=&" + 
                    "contrMethod=6tFrJC0vG&contrMethod=GymMN&contrMethod=_EM_28630_XYZ_&contrMethod=_vxOlN&contrMethod=mn4hJCaKa235&" + 
                    "planningLoc=_EM_28631_XYZ_&planningLoc=nrj3wV4pAg&planningLoc=_EM_28632_XYZ_&planningLoc=zWugIT6h&" + 
                    "procurementMethod=KWNv1Di6DxqbZ&" + 
                    "procuringEntityDepartmentId=112&procuringEntityDepartmentId=538&procuringEntityDepartmentId=872&" + 
                    "pageSize=-1168099436&" + 
                    "minTenderValue=0.815058643334719&" + 
                    "minAwardValue=0.08961794598303541&" + 
                    "maxAwardValue=0.7710176040391808&" + 
                    "electronicSubmission=true&" + 
                    "yearFilterPagingRequest=_EM_28636_XYZ_&" + 
                    "username=nsK2NwX3wNwrO")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("Range.yearFilterPagingRequest.pageSize", "Range.pageSize", "Range.java.lang.Integer", "Range"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.pageSize", "pageSize"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("pageSize"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("pageSize"))
                .body("'errors'[0].'arguments'[1]", numberMatches(1000.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 1000"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("pageSize"))
                .body("'errors'[0].'rejectedValue'", numberMatches(-1.168099436E9))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("Range"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.contrMethod[2]", "EachPattern.yearFilterPagingRequest.contrMethod", "EachPattern.contrMethod[2]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.contrMethod[2]", "contrMethod[2]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("contrMethod[2]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("contrMethod[2]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("contrMethod[2]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_28630_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/totalEligibleIndicatorsByIndicatorType"));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/rest/controller/flags/AbstractFlagCrosstabController_95_flagStats.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/flags/i007/crosstab'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i007/crosstab?" + 
                    "notBidTypeId=FRAUD&" + 
                    "notBidSelectionMethod=g1iwO6&notBidSelectionMethod=j8jCrmaw5&notBidSelectionMethod=_EM_28642_XYZ_&notBidSelectionMethod=_EM_28643_XYZ_&" + 
                    "contrMethod=&" + 
                    "planningLoc=_EM_28644_XYZ_&planningLoc=&planningLoc=qrEIFwup9I5WXAyH&planningLoc=_EM_28645_XYZ_&" + 
                    "tenderLoc=_EM_28646_XYZ_&" + 
                    "procurementMethod=_EM_28647_XYZ_&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=45&procuringEntityDepartmentId=124&procuringEntityDepartmentId=923&" + 
                    "procuringEntityGroupId=766&" + 
                    "year=&" + 
                    "minTenderValue=0.024981674171075996&" + 
                    "minAwardValue=0.6433090495154451&" + 
                    "maxAwardValue=0.24922453022149527&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "yearFilterPagingRequest=oQQhXKUDbJz146&" + 
                    "username=2tK6k3gP")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/rest/controller/flags/AbstractFlagCrosstabController_95_flagStats
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.InvalidDataAccessApiUsageException"))
                .body("'path'", containsString("/api/flags/i007/crosstab"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/costEffectivenessTenderAwardAmount'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/costEffectivenessTenderAwardAmount?" + 
                    "procuringEntityId=Dj79EID7dZnK&procuringEntityId=JzMn6QC2PFc_&procuringEntityId=_EM_28651_XYZ_&procuringEntityId=nN4TeY7NoEWHRYa&" + 
                    "notProcuringEntityId=MV13Yy4&notProcuringEntityId=_EM_28652_XYZ_&notProcuringEntityId=ImFIC6hDRVAxhtE&" + 
                    "supplierId=JjssTwrO&supplierId=_EM_28653_XYZ_&supplierId=OC9hv0_S8Q75T&supplierId=_EM_28654_XYZ_&supplierId=_EM_28655_XYZ_&" + 
                    "bidSelectionMethod=_EM_28656_XYZ_&bidSelectionMethod=&bidSelectionMethod=T8JG&" + 
                    "notBidSelectionMethod=W2L4r9o_n0V17LXq&notBidSelectionMethod=iVW02J9JFY0qz&notBidSelectionMethod=_EM_28657_XYZ_&notBidSelectionMethod=_EM_28658_XYZ_&" + 
                    "planningLoc=_EM_28659_XYZ_&planningLoc=mvmnUhyyQUZL&planningLoc=&planningLoc=2HNXw5EmUnv&" + 
                    "procuringEntityCityId=_EM_28663_XYZ_&procuringEntityCityId=_EM_28664_XYZ_&procuringEntityCityId=_EM_28665_XYZ_&procuringEntityCityId=pmnnp7kYe&" + 
                    "procuringEntityDepartmentId=484&procuringEntityDepartmentId=656&procuringEntityDepartmentId=857&procuringEntityDepartmentId=889&" + 
                    "month=&" + 
                    "minTenderValue=0.4909632740341887&" + 
                    "minAwardValue=0.7054390524015964&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "groupByCategory=FMhUjsCH90or_&" + 
                    "class=_EM_28667_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.groupingFilterPagingRequest.procuringEntityId[1]", "EachPattern.groupingFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[1]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("groupingFilterPagingRequest.procuringEntityId[1]", "procuringEntityId[1]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[1]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("procuringEntityId[1]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("groupingFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("procuringEntityId[1]"))
                .body("'errors'[0].'rejectedValue'", containsString("JzMn6QC2PFc_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.groupingFilterPagingRequest.notProcuringEntityId[2]", "EachPattern.groupingFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[2]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("groupingFilterPagingRequest.notProcuringEntityId[2]", "notProcuringEntityId[2]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("groupingFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_28652_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='groupingFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/costEffectivenessTenderAwardAmount"));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/rest/controller/OcdsController_111_createReleasePackage.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/ocds/package/ocid/{ocid}'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/package/ocid/5L3SOVB2t1_m10bm")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/rest/controller/OcdsController_111_createReleasePackage
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/ocds/package/ocid/5L3SOVB2t1_m10bm"));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/rest/controller/OcdsController_111_createReleasePackage.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/ocds/package/ocid/{ocid}'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/package/ocid/5L3SOVB2t1_m10bm?" + 
                    "password=mY&" + 
                    "username=_EM_28668_XYZ_")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/rest/controller/OcdsController_111_createReleasePackage
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/ocds/package/ocid/5L3SOVB2t1_m10bm"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/avgTimeFromPlanToTenderPhase'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/avgTimeFromPlanToTenderPhase?" + 
                    "notBidTypeId=COLLUSION&notBidTypeId=_EM_28669_XYZ_&notBidTypeId=7hSKzp8tppecT&notBidTypeId=COLLUSION&" + 
                    "procuringEntityId=L8&" + 
                    "notProcuringEntityId=_EM_28670_XYZ_&notProcuringEntityId=F2fVQo&notProcuringEntityId=xLnB0DyBTuJZGf&notProcuringEntityId=MEI_zrIE8wcg&notProcuringEntityId=_EM_28671_XYZ_&" + 
                    "supplierId=&" + 
                    "contrMethod=KAb&" + 
                    "tenderLoc=_EM_28676_XYZ_&tenderLoc=wmFo&tenderLoc=G9Zclq3yI&tenderLoc=_EM_28677_XYZ_&" + 
                    "procurementMethod=mFPl_i4aHU4Xli4&procurementMethod=lq4FlS&procurementMethod=xYpUeRWjIzfI&procurementMethod=_EM_28678_XYZ_&" + 
                    "year=900&year=878&year=738&year=480&" + 
                    "month=337&month=735&month=722&month=938&" + 
                    "pageSize=660&" + 
                    "maxAwardValue=0.10087287883174745&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(4))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(480.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(738.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(878.0))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[1].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("month"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(4))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(337.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(722.0))
                .body("'errors'[1].'rejectedValue'[2]", numberMatches(735.0))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notBidTypeId[2]", "EachPattern.yearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[2]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notBidTypeId[2]", "notBidTypeId[2]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[2]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("notBidTypeId[2]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("notBidTypeId[2]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_28669_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 4"))
                .body("'path'", containsString("/api/avgTimeFromPlanToTenderPhase"));
    }
}
