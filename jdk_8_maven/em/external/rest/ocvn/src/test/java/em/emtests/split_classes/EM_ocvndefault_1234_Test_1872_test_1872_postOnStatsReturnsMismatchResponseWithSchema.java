package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_1872_test_1872_postOnStatsReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (302) POST:/api/flags/i002/stats
    * 2 - (302) POST:/api/flags/i002/stats
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_1872_postOnStatsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 302 not defined for path '/api/flags/i002/stats'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/api/flags/i002/stats?" + 
                    "bidTypeId=gJR&bidTypeId=_EM_3298_XYZ_&" + 
                    "notBidTypeId=_EM_3299_XYZ_&" + 
                    "notProcuringEntityId=VIVakX6hNK&notProcuringEntityId=_EM_3301_XYZ_&notProcuringEntityId=_EM_3302_XYZ_&notProcuringEntityId=dKI3Yz6zoE&" + 
                    "supplierId=j4lVIu0nF_qYjYG&supplierId=_EM_3303_XYZ_&" + 
                    "bidSelectionMethod=&" + 
                    "contrMethod=_EM_3305_XYZ_&contrMethod=_EM_3306_XYZ_&" + 
                    "tenderLoc=_EM_3308_XYZ_&tenderLoc=U9uFChZDegb&tenderLoc=_EM_3309_XYZ_&tenderLoc=_EM_3310_XYZ_&tenderLoc=_EM_3311_XYZ_&" + 
                    "procurementMethod=Yrk2d&procurementMethod=Rm3&procurementMethod=XcUQ&" + 
                    "procuringEntityCityId=_EM_3312_XYZ_&" + 
                    "procuringEntityDepartmentId=724&" + 
                    "procuringEntityGroupId=700&procuringEntityGroupId=937&procuringEntityGroupId=812&" + 
                    "year=698&" + 
                    "month=436&month=442&month=149&month=643&" + 
                    "pageNumber=447&" + 
                    "maxTenderValue=0.18325730568526066&" + 
                    "minAwardValue=0.9897359441231184&" + 
                    "maxAwardValue=0.33310997405101683&" + 
                    "monthly=false")
                .then()
                .statusCode(302)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 302 not defined for path '/api/flags/i002/stats'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/flags/i002/stats?" + 
                    "bidTypeId=_EM_3313_XYZ_&bidTypeId=_EM_3314_XYZ_&" + 
                    "supplierId=j4lVIu0nF_qYjYG&supplierId=_EM_3317_XYZ_&" + 
                    "contrMethod=PYc&contrMethod=hqMY&" + 
                    "planningLoc=_EM_3320_XYZ_&planningLoc=iBEUFrIGtfMqHAN&" + 
                    "procurementMethod=Yrk2d&procurementMethod=_EM_3326_XYZ_&procurementMethod=_EM_3327_XYZ_&" + 
                    "procuringEntityDepartmentId=724&" + 
                    "month=436&month=442&month=149&month=643&" + 
                    "pageNumber=447&" + 
                    "maxTenderValue=0.18325730568526066&" + 
                    "minAwardValue=0.9897359441231184&" + 
                    "electronicSubmission=false&" + 
                    "monthly=false")
                .then()
                .statusCode(302)
                .assertThat()
                .body(isEmptyOrNullString());
    }
}
