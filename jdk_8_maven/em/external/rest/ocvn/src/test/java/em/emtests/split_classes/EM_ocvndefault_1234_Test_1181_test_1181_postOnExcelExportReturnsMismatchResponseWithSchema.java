package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_1181_test_1181_postOnExcelExportReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (200) POST:/api/totalEligibleProjectsByIndicatorTypeByYear
    * 2 - (400) POST:/api/totalEligibleProjectsByIndicatorTypeByYear
    * 3 - (200) POST:/api/ocds/organization/id/{id}
    * 4 - (400) POST:/api/ocds/bidSelectionExcelChart
    * 5 - (400) GET:/api/ocds/bidSelectionExcelChart
    * 6 - (200) POST:/api/qualityPlannedFundingByLocation
    * 7 - (400) POST:/api/qualityPlannedFundingByLocation
    * 8 - (400) POST:/api/ocds/excelExport
    * 9 - (400) POST:/api/ocds/excelExport
    * Found 7 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_1181_postOnExcelExportReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_11847_XYZ_")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/totalEligibleProjectsByIndicatorTypeByYear?" + 
                    "bidTypeId=eMzpO1B5skkXVz&bidTypeId=lhhUqVC3PaxfjL8&bidTypeId=HoA&" + 
                    "notBidTypeId=&" + 
                    "supplierId=0MPcWIrQvm&supplierId=prEPScCfRFTup&supplierId=FtykuYp66BHUKCn8&" + 
                    "contrMethod=&" + 
                    "planningLoc=C6FC5UG4Z3Hea5&planningLoc=ZW60FPCnLUX6M&planningLoc=bj1HQppn4tp&" + 
                    "tenderLoc=Avv&tenderLoc=chav7C8&tenderLoc=aTBeK2W&tenderLoc=G&" + 
                    "procurementMethod=ZVkwwCtkn7B&" + 
                    "procuringEntityCityId=n_gVXNLhoK5l0W&procuringEntityCityId=&procuringEntityCityId=ojOXgJJLr66&procuringEntityCityId=46OrIHvl3&procuringEntityCityId=ZPAHp5&" + 
                    "procuringEntityGroupId=&" + 
                    "pageSize=668&" + 
                    "minTenderValue=0.9428090751780221&" + 
                    "maxAwardValue=0.8127516764759548&" + 
                    "flagged=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/totalEligibleProjectsByIndicatorTypeByYear'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/totalEligibleProjectsByIndicatorTypeByYear?" + 
                    "procuringEntityId=d7GpnWQMd3yU&procuringEntityId=z1GaH65mvT&" + 
                    "notProcuringEntityId=f0tWFJzIkH&notProcuringEntityId=trOGAlfU&" + 
                    "supplierId=0MPcWIrQvm&supplierId=prEPScCfRFTup&supplierId=FtykuYp66BHUKCn8&" + 
                    "notBidSelectionMethod=SYk&notBidSelectionMethod=adqc59q&notBidSelectionMethod=TTP016Q9&notBidSelectionMethod=WgzsboTLkD&notBidSelectionMethod=&" + 
                    "planningLoc=C6FC5UG4Z3Hea5&planningLoc=ZW60FPCnLUX6M&planningLoc=bj1HQppn4tp&" + 
                    "procuringEntityCityId=n_gVXNLhoK5l0W&procuringEntityCityId=&procuringEntityCityId=ojOXgJJLr66&procuringEntityCityId=46OrIHvl3&procuringEntityCityId=ZPAHp5&" + 
                    "procuringEntityDepartmentId=-355503936&" + 
                    "year=&" + 
                    "month=816&" + 
                    "minTenderValue=0.9428090751780221&" + 
                    "maxTenderValue=0.9835174096837501&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "EMextraParam123=42&" + 
                    "password=fnuYVM45CaaOPry&" + 
                    "class=sy55N")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(816.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/totalEligibleProjectsByIndicatorTypeByYear"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. POST on path '/api/ocds/organization/id/{id}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/organization/id/O.?" + 
                    "password=TMtAHmGrFbqJxPg8&" + 
                    "username=_EM_26301_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/bidSelectionExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/bidSelectionExcelChart?" + 
                    "bidTypeId=W&bidTypeId=_EM_26250_XYZ_&bidTypeId=fYyVd7xhkrMmLW&bidTypeId=_EM_26251_XYZ_&bidTypeId=BURu7oCz9FfL7n&" + 
                    "procuringEntityId=&" + 
                    "notProcuringEntityId=uyPvj5XKK0pwmLO8&" + 
                    "bidSelectionMethod=_EM_26254_XYZ_&bidSelectionMethod=Ys8uKS&" + 
                    "contrMethod=&" + 
                    "tenderLoc=WD4F5RD4b&tenderLoc=X2oz5zDFT&tenderLoc=6&" + 
                    "procurementMethod=_EM_26259_XYZ_&procurementMethod=ISV6m7Chsnv32e&" + 
                    "pageSize=739&" + 
                    "maxTenderValue=-0.23380063127606804&" + 
                    "minAwardValue=0.5227940163539914&" + 
                    "maxAwardValue=0.24280847433750508&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "language=Gxmr2&" + 
                    "langYearFilterPagingRequest=6BrW4tK")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.bidTypeId[2]", "EachPattern.langYearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[2]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.bidTypeId[2]", "bidTypeId[2]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("bidTypeId[2]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("bidTypeId[2]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("bidTypeId[2]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_26250_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/ocds/bidSelectionExcelChart"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/bidSelectionExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/bidSelectionExcelChart?" + 
                    "bidTypeId=_EM_26260_XYZ_&bidTypeId=FRAUD&bidTypeId=_EM_26261_XYZ_&bidTypeId=F8QlAC_&bidTypeId=RIGGING&" + 
                    "notBidTypeId=COLLUSION&notBidTypeId=YMNV7&notBidTypeId=&notBidTypeId=_EM_26262_XYZ_&" + 
                    "notProcuringEntityId=uyPvj5XKK0pwmLO8&" + 
                    "bidSelectionMethod=_EM_26266_XYZ_&bidSelectionMethod=_EM_26267_XYZ_&" + 
                    "planningLoc=_EM_26269_XYZ_&planningLoc=_EM_26270_XYZ_&planningLoc=&" + 
                    "tenderLoc=_EM_26271_XYZ_&tenderLoc=X2oz5zDFT&tenderLoc=6&" + 
                    "procurementMethod=_EM_26272_XYZ_&procurementMethod=_EM_26273_XYZ_&" + 
                    "procuringEntityCityId=_EM_26274_XYZ_&" + 
                    "procuringEntityGroupId=195&" + 
                    "month=439&month=668&month=411&month=757&month=575&" + 
                    "pageNumber=496&" + 
                    "minTenderValue=0.5111884824908337&" + 
                    "maxTenderValue=-0.23380063127606804&" + 
                    "maxAwardValue=0.24280847433750508&" + 
                    "electronicSubmission=true&" + 
                    "monthly=true&" + 
                    "skip=kgz&" + 
                    "password=_EM_26275_XYZ_&" + 
                    "class=_EM_26276_XYZ_&" + 
                    "langYearFilterPagingRequest=MVPCQc_3Kq3&" + 
                    "username=j")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(3))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.notBidTypeId[3]", "EachPattern.langYearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[3]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.notBidTypeId[3]", "notBidTypeId[3]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[3]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notBidTypeId[3]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notBidTypeId[3]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_26262_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.bidTypeId[0]", "EachPattern.langYearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[0]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.bidTypeId[0]", "bidTypeId[0]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("bidTypeId[0]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("bidTypeId[0]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("bidTypeId[0]"))
                .body("'errors'[1].'rejectedValue'", containsString("F8QlAC_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("EachRange.langYearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.month", "month"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[2].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[2].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[2].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[2].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("month"))
                .body("'errors'[2].'rejectedValue'.size()", equalTo(5))
                .body("'errors'[2].'rejectedValue'[0]", numberMatches(411.0))
                .body("'errors'[2].'rejectedValue'[1]", numberMatches(439.0))
                .body("'errors'[2].'rejectedValue'[2]", numberMatches(575.0))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 3"))
                .body("'path'", containsString("/api/ocds/bidSelectionExcelChart"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/qualityPlannedFundingByLocation?" + 
                    "notBidTypeId=&" + 
                    "supplierId=Hzrt7zoSM&supplierId=wJzNJswUH&supplierId=LFgCv&" + 
                    "bidSelectionMethod=HoTKouAU8YbigQMz&bidSelectionMethod=qNU&bidSelectionMethod=&bidSelectionMethod=lM3W92Yjp&" + 
                    "procuringEntityDepartmentId=568&procuringEntityDepartmentId=855&procuringEntityDepartmentId=886&procuringEntityDepartmentId=69&" + 
                    "pageNumber=73&" + 
                    "minAwardValue=0.23090213116723401&" + 
                    "maxAwardValue=0.09460518309457344&" + 
                    "flagged=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/qualityPlannedFundingByLocation'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/qualityPlannedFundingByLocation?" + 
                    "bidTypeId=&" + 
                    "procuringEntityId=&" + 
                    "notProcuringEntityId=98Y_dtp7qJPn&notProcuringEntityId=SHSqxOQGQGEEAhIl&notProcuringEntityId=c3S0hOBp&notProcuringEntityId=Mer2dkFn4_&notProcuringEntityId=22AVXTVXqnS8h&" + 
                    "bidSelectionMethod=HoTKouAU8YbigQMz&bidSelectionMethod=qNU&bidSelectionMethod=&bidSelectionMethod=lM3W92Yjp&" + 
                    "notBidSelectionMethod=NUyQm&notBidSelectionMethod=7S&" + 
                    "contrMethod=Q4zilz&contrMethod=VwTDxUIbYME&contrMethod=OI8vPVLkDxEIn&contrMethod=c&" + 
                    "tenderLoc=&tenderLoc=hr&tenderLoc=VKkbE&" + 
                    "procuringEntityDepartmentId=568&procuringEntityDepartmentId=855&procuringEntityDepartmentId=886&procuringEntityDepartmentId=69&" + 
                    "pageNumber=73&" + 
                    "pageSize=210&" + 
                    "minTenderValue=0.9198656882712849&" + 
                    "maxAwardValue=0.09460518309457344&" + 
                    "electronicSubmission=false&" + 
                    "username=QR1ol6n2")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.defaultFilterPagingRequest.notProcuringEntityId[1]", "EachPattern.defaultFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[1]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("defaultFilterPagingRequest.notProcuringEntityId[1]", "notProcuringEntityId[1]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("defaultFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[0].'rejectedValue'", containsString("98Y_dtp7qJPn"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='defaultFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/qualityPlannedFundingByLocation"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/excelExport'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/excelExport?" + 
                    "bidTypeId=8h0khA0g9VMWS&bidTypeId=&" + 
                    "notBidSelectionMethod=c&notBidSelectionMethod=w&notBidSelectionMethod=&notBidSelectionMethod=y2d2S&notBidSelectionMethod=SMf_vleWIESOiwma&" + 
                    "procuringEntityCityId=YWk_Sj4VzK_&" + 
                    "procuringEntityGroupId=849&procuringEntityGroupId=188&procuringEntityGroupId=671&" + 
                    "year=947&year=970&year=336&year=891&year=665&" + 
                    "pageSize=453&" + 
                    "maxAwardValue=0.10985335147081332&" + 
                    "electronicSubmission=true")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(5))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(336.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(665.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(891.0))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/ocds/excelExport"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/excelExport'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/excelExport?" + 
                    "bidTypeId=8h0khA0g9VMWS&bidTypeId=&" + 
                    "procuringEntityId=hlnATvyG&" + 
                    "supplierId=b8KvekqeYH&supplierId=mghL21xnXCJt&supplierId=WZJTA8aCA4SIoTTA&" + 
                    "bidSelectionMethod=vzAAULb1qT&bidSelectionMethod=psteDSOCL8m&bidSelectionMethod=L7f8k5ykMRugy&bidSelectionMethod=4&" + 
                    "planningLoc=9O3ADv&planningLoc=_JraiqxHUW5crOM&planningLoc=oIwAX&planningLoc=BE&planningLoc=F&" + 
                    "tenderLoc=Qa2vOpRA_U&tenderLoc=z8w&" + 
                    "procurementMethod=ciOczKgjSjy8O&procurementMethod=O2JUX3&procurementMethod=&procurementMethod=tCpxdhAdCe7m0q&procurementMethod=LTLZeu2YMhCg2G&" + 
                    "month=72&month=825&month=848&month=844&month=429&" + 
                    "pageNumber=213&" + 
                    "pageSize=453&" + 
                    "minTenderValue=0.9118863351039436&" + 
                    "maxTenderValue=0.3383370373775363&" + 
                    "EMextraParam123=42&" + 
                    "skip=G1BBjRXsSRT&" + 
                    "password=3pNzn&" + 
                    "class=FzfvYji&" + 
                    "username=ks2jQ32rH30UJR")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(5))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(72.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(429.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(825.0))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/ocds/excelExport"));
    }
}
