package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_49_test_49_getOnQualityAverageTenderPeriodShowsFaults_100_101 {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (200) POST:/api/ocds/location/search
    * 2 - (500) GET:/api/ocds/location/search
    * 3 - (200) POST:/api/ocds/location/all
    * 4 - (200) POST:/api/ocds/location/all
    * 5 - (200) POST:/api/percentTotalProjectsEligibleByYear
    * 6 - (200) POST:/api/percentTotalProjectsEligibleByYear
    * 7 - (400) POST:/api/averageNumberOfTenderers
    * 8 - (200) POST:/api/averageNumberOfTenderers
    * 9 - (400) POST:/api/qualityAverageTenderPeriod
    * 10 - (400) GET:/api/qualityAverageTenderPeriod
    * Found 5 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_49_getOnQualityAverageTenderPeriodShowsFaults_100_101() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/search?pageNumber=325")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/rest/controller/selector/LocationSearchController_55_locationsSearch.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/ocds/location/search'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageSize=758&" + 
                    "text=Vp3rdK5&" + 
                    "username=9DqC63_PWRz")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/rest/controller/selector/LocationSearchController_55_locationsSearch
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.data.mongodb.UncategorizedMongoDbException"))
                .body("'path'", containsString("/api/ocds/location/search"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/all?" + 
                    "password=22e&" + 
                    "username=9DqC63_PWRz")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/percentTotalProjectsEligibleByYear?" + 
                    "bidTypeId=&" + 
                    "notBidTypeId=7tdbI&notBidTypeId=_EM_28300_XYZ_&" + 
                    "procuringEntityId=_EM_28301_XYZ_&" + 
                    "bidSelectionMethod=_EM_28304_XYZ_&bidSelectionMethod=d2YsYkaY03&" + 
                    "notBidSelectionMethod=_EM_28305_XYZ_&notBidSelectionMethod=_EM_28306_XYZ_&notBidSelectionMethod=idMyg_OKvef&notBidSelectionMethod=_EM_28307_XYZ_&" + 
                    "planningLoc=SG&planningLoc=GEv&" + 
                    "tenderLoc=Iavv&tenderLoc=_EM_28308_XYZ_&tenderLoc=JxbaDCphUZ992wex&" + 
                    "procuringEntityGroupId=244&procuringEntityGroupId=495&procuringEntityGroupId=49&procuringEntityGroupId=76&procuringEntityGroupId=752&" + 
                    "month=806&" + 
                    "minAwardValue=0.7183655881157471&" + 
                    "monthly=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/percentTotalProjectsEligibleByYear?" + 
                    "bidTypeId=&" + 
                    "procuringEntityId=UUR8FxT2eT46x&" + 
                    "procuringEntityCityId=Do&procuringEntityCityId=iqMNFpi8gCAM09sz&procuringEntityCityId=_EM_28322_XYZ_&procuringEntityCityId=_EM_28323_XYZ_&" + 
                    "procuringEntityGroupId=244&procuringEntityGroupId=495&procuringEntityGroupId=49&procuringEntityGroupId=76&procuringEntityGroupId=752&" + 
                    "pageSize=758&" + 
                    "maxTenderValue=0.8351273097854511&" + 
                    "maxAwardValue=0.06289330892791689&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "password=22e&" + 
                    "class=eQii6s89Yj&" + 
                    "yearFilterPagingRequest=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/averageNumberOfTenderers'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/averageNumberOfTenderers?" + 
                    "procuringEntityId=UUR8FxT2eT46x&" + 
                    "notProcuringEntityId=_EM_28325_XYZ_&notProcuringEntityId=_EM_28326_XYZ_&" + 
                    "bidSelectionMethod=_EM_28330_XYZ_&bidSelectionMethod=d2YsYkaY03&" + 
                    "tenderLoc=Iavv&tenderLoc=aKsKhdxdIi8h&tenderLoc=_EM_28336_XYZ_&" + 
                    "procurementMethod=msSS&procurementMethod=OsAhWRHlpKJ&procurementMethod=0ZZ&procurementMethod=tOMpTRP6eDUory&" + 
                    "procuringEntityCityId=Do&procuringEntityCityId=iqMNFpi8gCAM09sz&procuringEntityCityId=k_EdUcPdAxgiJkgu&procuringEntityCityId=_EM_28337_XYZ_&" + 
                    "procuringEntityGroupId=244&procuringEntityGroupId=495&procuringEntityGroupId=49&procuringEntityGroupId=76&procuringEntityGroupId=752&" + 
                    "month=806&" + 
                    "maxTenderValue=0.8351273097854511&" + 
                    "minAwardValue=0.7183655881157471&" + 
                    "monthly=true")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[0]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[0]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[0]", "notProcuringEntityId[0]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_28325_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[1].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("month"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(806.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/averageNumberOfTenderers"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/averageNumberOfTenderers?" + 
                    "bidTypeId=&" + 
                    "notBidTypeId=7tdbI&notBidTypeId=OR9INcBCi5sF&" + 
                    "procuringEntityId=UUR8FxT2eT46x&" + 
                    "supplierId=_EM_28340_XYZ_&supplierId=Rn4F&supplierId=_EM_28341_XYZ_&supplierId=_EM_28342_XYZ_&" + 
                    "notBidSelectionMethod=p&notBidSelectionMethod=qe&notBidSelectionMethod=idMyg_OKvef&notBidSelectionMethod=mHSsNWWyVeL&" + 
                    "procuringEntityDepartmentId=296&procuringEntityDepartmentId=210&procuringEntityDepartmentId=936&procuringEntityDepartmentId=191&" + 
                    "pageNumber=325&" + 
                    "maxAwardValue=0.06289330892791689&" + 
                    "monthly=true&" + 
                    "skip=U&" + 
                    "class=eQii6s89Yj")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/qualityAverageTenderPeriod'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/qualityAverageTenderPeriod?" + 
                    "bidTypeId=&" + 
                    "notBidTypeId=RIGGING&notBidTypeId=_EM_28351_XYZ_&" + 
                    "procuringEntityId=UUR8FxT2eT46x&" + 
                    "notProcuringEntityId=zD5vQprZm&notProcuringEntityId=_EM_28352_XYZ_&" + 
                    "bidSelectionMethod=2raa5_8Rkx4f&bidSelectionMethod=d2YsYkaY03&" + 
                    "contrMethod=Y2utPCw&contrMethod=_EM_28358_XYZ_&contrMethod=_EM_28359_XYZ_&" + 
                    "tenderLoc=Iavv&tenderLoc=_EM_28361_XYZ_&tenderLoc=_EM_28362_XYZ_&" + 
                    "procuringEntityGroupId=244&procuringEntityGroupId=495&procuringEntityGroupId=49&procuringEntityGroupId=76&procuringEntityGroupId=752&" + 
                    "pageSize=758&" + 
                    "minTenderValue=0.530354491327638&" + 
                    "maxTenderValue=0.8351273097854511&" + 
                    "minAwardValue=0.7183655881157471&" + 
                    "maxAwardValue=0.06289330892791689&" + 
                    "electronicSubmission=false")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(3))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.defaultFilterPagingRequest.notProcuringEntityId[0]", "EachPattern.defaultFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[0]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("defaultFilterPagingRequest.notProcuringEntityId[0]", "notProcuringEntityId[0]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("defaultFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_28352_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.defaultFilterPagingRequest.notBidTypeId[1]", "EachPattern.defaultFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[1]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("defaultFilterPagingRequest.notBidTypeId[1]", "notBidTypeId[1]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[1]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("notBidTypeId[1]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("defaultFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("notBidTypeId[1]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_28351_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.defaultFilterPagingRequest.contrMethod[1]", "EachPattern.defaultFilterPagingRequest.contrMethod", "EachPattern.contrMethod[1]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("defaultFilterPagingRequest.contrMethod[1]", "contrMethod[1]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("contrMethod[1]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("contrMethod[1]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("defaultFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("contrMethod[1]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_28358_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='defaultFilterPagingRequest'. Error count: 3"))
                .body("'path'", containsString("/api/qualityAverageTenderPeriod"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/qualityAverageTenderPeriod'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/qualityAverageTenderPeriod?" + 
                    "bidTypeId=&" + 
                    "bidSelectionMethod=_EM_28373_XYZ_&bidSelectionMethod=_EM_28374_XYZ_&" + 
                    "notBidSelectionMethod=p&notBidSelectionMethod=_EM_28375_XYZ_&notBidSelectionMethod=_EM_28376_XYZ_&notBidSelectionMethod=mHSsNWWyVeL&" + 
                    "contrMethod=_EM_28377_XYZ_&contrMethod=80KGCpWj1Lv1Q7&contrMethod=_EM_28378_XYZ_&" + 
                    "planningLoc=SG&planningLoc=_EM_28379_XYZ_&" + 
                    "tenderLoc=_EM_28380_XYZ_&tenderLoc=aKsKhdxdIi8h&tenderLoc=JxbaDCphUZ992wex&" + 
                    "procuringEntityDepartmentId=296&procuringEntityDepartmentId=210&procuringEntityDepartmentId=936&procuringEntityDepartmentId=191&" + 
                    "pageNumber=325&" + 
                    "pageSize=758&" + 
                    "minTenderValue=0.530354491327638&" + 
                    "minAwardValue=0.7183655881157471&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.defaultFilterPagingRequest.contrMethod[1]", "EachPattern.defaultFilterPagingRequest.contrMethod", "EachPattern.contrMethod[1]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("defaultFilterPagingRequest.contrMethod[1]", "contrMethod[1]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("contrMethod[1]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("contrMethod[1]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("defaultFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("contrMethod[1]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_28377_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='defaultFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/qualityAverageTenderPeriod"));
    }
}
