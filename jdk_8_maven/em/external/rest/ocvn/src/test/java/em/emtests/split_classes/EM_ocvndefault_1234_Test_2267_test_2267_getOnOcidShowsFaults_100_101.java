package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_2267_test_2267_getOnOcidShowsFaults_100_101 {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (200) POST:/api/flags/i004/stats
    * 2 - (200) POST:/api/ocds/location/search
    * 3 - (200) POST:/api/ocds/location/search
    * 4 - (200) POST:/api/ocds/location/all
    * 5 - (200) GET:/api/ocds/location/all
    * 6 - (400) POST:/api/flags/i171/crosstab
    * 7 - (400) GET:/api/flags/i171/crosstab
    * 8 - (500) POST:/api/ocds/package/ocid/{ocid}
    * 9 - (500) GET:/api/ocds/package/ocid/{ocid}
    * Found 6 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_2267_getOnOcidShowsFaults_100_101() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i004/stats?" + 
                    "notBidTypeId=&notBidTypeId=vfBYxUhtVYvFWlt8&notBidTypeId=Zi&notBidTypeId=XGgdFkxrRcd1YYaV&notBidTypeId=Mkt&" + 
                    "notBidSelectionMethod=_WqDmY5pG_7A9zA&notBidSelectionMethod=ZbzBdZex1cYFwqeW&notBidSelectionMethod=pHLtnYcLl&notBidSelectionMethod=7&notBidSelectionMethod=kdhjGYzy9hfN&" + 
                    "planningLoc=tXejC_qkozl8SJ&" + 
                    "procurementMethod=&" + 
                    "procuringEntityCityId=lkeKsasgzhuWxn&" + 
                    "procuringEntityDepartmentId=73&" + 
                    "procuringEntityGroupId=87&procuringEntityGroupId=566&procuringEntityGroupId=193&procuringEntityGroupId=380&" + 
                    "pageNumber=153&" + 
                    "pageSize=496&" + 
                    "minTenderValue=0.136669613801086&" + 
                    "maxTenderValue=0.5392807662562851")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "password=NiOd5&" + 
                    "textSearchRequest=W_C&" + 
                    "username=9sYgeNV")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageNumber=613&" + 
                    "pageSize=290&" + 
                    "password=75AqbSW0FU&" + 
                    "skip=R9onQmx&" + 
                    "textSearchRequest=RSH22wTNHTbONA&" + 
                    "username=kBd6")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/location/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/location/all?" + 
                    "password=75AqbSW0FU&" + 
                    "username=kBd6")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/flags/i171/crosstab'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i171/crosstab?" + 
                    "bidTypeId=b_8DDYAdoTy3z3&bidTypeId=P&bidTypeId=_EM_32302_XYZ_&" + 
                    "notBidTypeId=_EM_32303_XYZ_&notBidTypeId=Trg5H1klFAWcRx4&notBidTypeId=_EM_32304_XYZ_&notBidTypeId=mfP01bRmqnlFGX_&notBidTypeId=UPh&" + 
                    "notProcuringEntityId=_EM_32305_XYZ_&notProcuringEntityId=QyU0MN&" + 
                    "supplierId=uB&supplierId=wEx6eHhmm&supplierId=yIeL5j9YEa_8OcgR&supplierId=_EM_32306_XYZ_&supplierId=pTe3_YAYw&" + 
                    "notBidSelectionMethod=&" + 
                    "contrMethod=LNIn27tlbjv8V_J&contrMethod=_EM_32307_XYZ_&contrMethod=t8u4f&contrMethod=0YR6&contrMethod=Qy7EPZLd&" + 
                    "procuringEntityDepartmentId=554&procuringEntityDepartmentId=100&procuringEntityDepartmentId=759&procuringEntityDepartmentId=-1167310439&procuringEntityDepartmentId=669&" + 
                    "procuringEntityGroupId=869&procuringEntityGroupId=668&" + 
                    "pageNumber=613&" + 
                    "minTenderValue=0.9974828068511797&" + 
                    "minAwardValue=0.7179804994489455&" + 
                    "maxAwardValue=0.8514563131864679&" + 
                    "electronicSubmission=false&" + 
                    "monthly=false&" + 
                    "yearFilterPagingRequest=FqB_J8h8JxeayJG_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notBidTypeId[2]", "EachPattern.yearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[2]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notBidTypeId[2]", "notBidTypeId[2]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[2]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notBidTypeId[2]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notBidTypeId[2]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_32303_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[1]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[1]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[1]", "notProcuringEntityId[1]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_32305_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[1]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[1]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[1]", "bidTypeId[1]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("bidTypeId[1]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("bidTypeId[1]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("bidTypeId[1]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_32302_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 4"))
                .body("'path'", containsString("/api/flags/i171/crosstab"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/flags/i171/crosstab'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i171/crosstab?" + 
                    "notBidTypeId=GV39dsCudhAPGN&notBidTypeId=Trg5H1klFAWcRx4&notBidTypeId=lQM9PyJkYHaSD&notBidTypeId=_EM_32312_XYZ_&notBidTypeId=FRAUD&" + 
                    "notProcuringEntityId=&notProcuringEntityId=QyU0MN&" + 
                    "supplierId=_EM_32314_XYZ_&supplierId=_EM_32315_XYZ_&supplierId=yIeL5j9YEa_8OcgR&supplierId=_EM_32316_XYZ_&supplierId=_EM_32317_XYZ_&" + 
                    "bidSelectionMethod=1cgL_5sEOIrythNS&bidSelectionMethod=_EM_32318_XYZ_&bidSelectionMethod=_EM_32319_XYZ_&bidSelectionMethod=GNN5gMzgf4feSj&bidSelectionMethod=_EM_32320_XYZ_&" + 
                    "notBidSelectionMethod=&" + 
                    "planningLoc=_EM_32322_XYZ_&planningLoc=q&planningLoc=_EM_32323_XYZ_&planningLoc=ERc89MrSb&" + 
                    "tenderLoc=_EM_32324_XYZ_&" + 
                    "procuringEntityDepartmentId=554&procuringEntityDepartmentId=100&procuringEntityDepartmentId=759&procuringEntityDepartmentId=-1167310439&procuringEntityDepartmentId=669&" + 
                    "procuringEntityGroupId=869&procuringEntityGroupId=668&" + 
                    "year=&" + 
                    "pageSize=290&" + 
                    "minTenderValue=0.9974828068511797&" + 
                    "maxTenderValue=0.20785494407289307&" + 
                    "minAwardValue=0.7179804994489455&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "skip=R9onQmx&" + 
                    "password=75AqbSW0FU&" + 
                    "class=pQGE6w51LpCw&" + 
                    "yearFilterPagingRequest=_EM_32325_XYZ_&" + 
                    "username=kBd6")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notBidTypeId[3]", "EachPattern.yearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[3]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notBidTypeId[3]", "notBidTypeId[3]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[3]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notBidTypeId[3]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notBidTypeId[3]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_32312_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/flags/i171/crosstab"));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/rest/controller/OcdsController_111_createReleasePackage.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/ocds/package/ocid/{ocid}'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/package/ocid/h061qpZZ")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/rest/controller/OcdsController_111_createReleasePackage
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/ocds/package/ocid/h061qpZZ"));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/rest/controller/OcdsController_111_createReleasePackage.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/ocds/package/ocid/{ocid}'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/package/ocid/h061qpZZ?" + 
                    "password=75AqbSW0FU&" + 
                    "username=kBd6")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/rest/controller/OcdsController_111_createReleasePackage
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/ocds/package/ocid/h061qpZZ"));
    }
}
