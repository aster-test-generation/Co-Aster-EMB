package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_270_test_270_postOnApiPercentTotalProjectsEligibleByYearWithQueryParamsReturns200 {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (200) POST:/api/percentTotalProjectsEligibleByYear
    * 2 - (200) POST:/api/percentTotalProjectsEligibleByYear
    */
    @Test @Timeout(60)
    public void test_270_postOnApiPercentTotalProjectsEligibleByYearWithQueryParamsReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/percentTotalProjectsEligibleByYear?" + 
                    "notProcuringEntityId=AAAon3Ish&notProcuringEntityId=_EM_23513_XYZ_&notProcuringEntityId=twd45Ohm&notProcuringEntityId=h7gPi7e6Xr&" + 
                    "planningLoc=6&planningLoc=7b2H&" + 
                    "tenderLoc=81MjwxCoFaXb&" + 
                    "procurementMethod=ifa5qsYs_dnPQ&procurementMethod=_jpnf2XwI0DRfg&procurementMethod=_EM_23518_XYZ_&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=1650882914&procuringEntityDepartmentId=98&procuringEntityDepartmentId=2111846796&procuringEntityDepartmentId=305&procuringEntityDepartmentId=942&" + 
                    "year=258957096&" + 
                    "month=909&" + 
                    "pageNumber=681&" + 
                    "minTenderValue=0.6467440317925183&" + 
                    "maxTenderValue=0.6812110646302784&" + 
                    "minAwardValue=0.6006692140246336&" + 
                    "maxAwardValue=0.5428553826897031&" + 
                    "flagged=false&" + 
                    "monthly=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/percentTotalProjectsEligibleByYear?" + 
                    "notBidTypeId=OnbmnQXt76usq6&notBidTypeId=3Pz7xttcHYGh0Jx&" + 
                    "notProcuringEntityId=_EM_23522_XYZ_&notProcuringEntityId=_EM_23523_XYZ_&notProcuringEntityId=_EM_23524_XYZ_&notProcuringEntityId=h7gPi7e6Xr&" + 
                    "supplierId=_EM_23525_XYZ_&supplierId=f5HzObj&supplierId=zJxA3e47&supplierId=_EM_23526_XYZ_&supplierId=_EM_23527_XYZ_&" + 
                    "bidSelectionMethod=_EM_23528_XYZ_&bidSelectionMethod=_EM_23529_XYZ_&bidSelectionMethod=HmZ5z&" + 
                    "notBidSelectionMethod=afB8KWOZKSF16&" + 
                    "procurementMethod=ifa5qsYs_dnPQ&procurementMethod=_jpnf2XwI0DRfg&procurementMethod=GFcfuWFVm6G&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityGroupId=331&procuringEntityGroupId=236&procuringEntityGroupId=640&" + 
                    "month=909&" + 
                    "pageNumber=681&" + 
                    "electronicSubmission=false&" + 
                    "monthly=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
}
