package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_2299_test_2299_getOnProcuringEntityAllWithQueryParams {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (400) POST:/api/tenderPriceByProcurementMethod
    * 2 - (400) POST:/api/activeAwardsCount
    * 3 - (400) POST:/api/ocds/bidSelectionExcelChart
    * 4 - (200) POST:/api/ocds/organization/procuringEntity/id/{id}
    * 5 - (200) POST:/api/ocds/organization/procuringEntity/all
    * 6 - (400) GET:/api/ocds/organization/procuringEntity/all
    * Found 5 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_2299_getOnProcuringEntityAllWithQueryParams() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/tenderPriceByProcurementMethod'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/tenderPriceByProcurementMethod?" + 
                    "bidTypeId=COLLUSION&" + 
                    "notBidTypeId=&" + 
                    "bidSelectionMethod=_EM_32328_XYZ_&bidSelectionMethod=uUS6ydNgqEaJi&bidSelectionMethod=QfTKKInSGZxIj&bidSelectionMethod=saCXsUh2&bidSelectionMethod=Wo2xcIYytbF8utU&" + 
                    "notBidSelectionMethod=_EM_32329_XYZ_&notBidSelectionMethod=p3V4e8Uc&notBidSelectionMethod=_EM_32330_XYZ_&" + 
                    "tenderLoc=WEDoNUNCpd66c0&tenderLoc=db4RQJ0FfeR&" + 
                    "procurementMethod=SsjYe&procurementMethod=a&procurementMethod=GoNyOlm&procurementMethod=QFVecs0rFo8&procurementMethod=tB6&" + 
                    "month=324&month=979&month=441&month=941&month=-1412829206&" + 
                    "pageNumber=905&" + 
                    "pageSize=15&" + 
                    "minTenderValue=0.020357575667623418&" + 
                    "minAwardValue=0.7772740045430772&" + 
                    "maxAwardValue=0.17350027421703795&" + 
                    "flagged=true&" + 
                    "monthly=true")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(5))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(-1.412829206E9))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(324.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(441.0))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/tenderPriceByProcurementMethod"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/activeAwardsCount'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/activeAwardsCount?" + 
                    "procuringEntityId=_EM_32332_XYZ_&procuringEntityId=pg_Y6EBI6GDTk&procuringEntityId=Z4fg1s3NS7aGxZl&procuringEntityId=EC0OD&procuringEntityId=Bc&" + 
                    "notProcuringEntityId=SBOMm9ni3QftKS&" + 
                    "bidSelectionMethod=&" + 
                    "notBidSelectionMethod=LznKbD&notBidSelectionMethod=_EM_32333_XYZ_&notBidSelectionMethod=NFjF9VlJFGZ5T&" + 
                    "contrMethod=&contrMethod=_EM_32334_XYZ_&contrMethod=q3JwF4&" + 
                    "planningLoc=RvB5CZo0XvZfdh1e&planningLoc=aEAOabrS4ESgjG8f&planningLoc=DkWEfF6oVhyBxvgs&" + 
                    "tenderLoc=DsHNoaLyRyb&tenderLoc=AUHfHH&" + 
                    "procurementMethod=X4Lu&" + 
                    "procuringEntityCityId=raj452TGhKWtw&" + 
                    "procuringEntityGroupId=351&procuringEntityGroupId=752&procuringEntityGroupId=102&procuringEntityGroupId=667&" + 
                    "year=810&" + 
                    "month=&" + 
                    "pageNumber=318&" + 
                    "minTenderValue=0.3052428633576937&" + 
                    "maxTenderValue=0.14291926704290392&" + 
                    "electronicSubmission=true&" + 
                    "monthly=false&" + 
                    "password=&" + 
                    "yearFilterPagingRequest=_g5bMEYZoYOCJ&" + 
                    "username=_EM_32336_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(3))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.contrMethod[1]", "EachPattern.yearFilterPagingRequest.contrMethod", "EachPattern.contrMethod[1]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.contrMethod[1]", "contrMethod[1]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("contrMethod[1]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("contrMethod[1]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("contrMethod[1]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_32334_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[1].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("year"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(810.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[3]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[3]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[3]", "procuringEntityId[3]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[3]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("procuringEntityId[3]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("procuringEntityId[3]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_32332_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 3"))
                .body("'path'", containsString("/api/activeAwardsCount"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/bidSelectionExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/ocds/bidSelectionExcelChart?" + 
                    "notBidTypeId=RIGGING&notBidTypeId=_EM_32339_XYZ_&notBidTypeId=uoRyIXAs&" + 
                    "notProcuringEntityId=&" + 
                    "supplierId=_EM_32340_XYZ_&supplierId=mA2cTmb_gWqB&supplierId=Ro&" + 
                    "bidSelectionMethod=_EM_32341_XYZ_&bidSelectionMethod=Hua77L&bidSelectionMethod=LP9Jh_5dY7q&bidSelectionMethod=NCT6V7pHu&bidSelectionMethod=jBt&" + 
                    "notBidSelectionMethod=IHKLHgXW9dYzNzAA&notBidSelectionMethod=f45P&notBidSelectionMethod=_EM_32342_XYZ_&notBidSelectionMethod=SNkwP74Dj8qmSwGM&" + 
                    "contrMethod=lZ9oC&contrMethod=zGwgQegiE&contrMethod=&contrMethod=_EM_32343_XYZ_&contrMethod=_EM_32344_XYZ_&" + 
                    "procurementMethod=_EM_32347_XYZ_&procurementMethod=_EM_32348_XYZ_&procurementMethod=_EM_32349_XYZ_&procurementMethod=Dxn6UZQP&procurementMethod=_EM_32350_XYZ_&" + 
                    "procuringEntityCityId=bMgbIXs&procuringEntityCityId=_EM_32351_XYZ_&procuringEntityCityId=_EM_32352_XYZ_&procuringEntityCityId=_EM_32353_XYZ_&" + 
                    "procuringEntityGroupId=253&procuringEntityGroupId=632&procuringEntityGroupId=7&procuringEntityGroupId=116&procuringEntityGroupId=113&" + 
                    "pageNumber=646&" + 
                    "pageSize=91&" + 
                    "minTenderValue=0.690547599158501&" + 
                    "minAwardValue=0.8372226439019187&" + 
                    "maxAwardValue=0.9079207081418621&" + 
                    "monthly=false&" + 
                    "langYearFilterPagingRequest=_EM_32356_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.notBidTypeId[1]", "EachPattern.langYearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[1]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.notBidTypeId[1]", "notBidTypeId[1]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[1]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notBidTypeId[1]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notBidTypeId[1]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_32339_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.contrMethod[1]", "EachPattern.langYearFilterPagingRequest.contrMethod", "EachPattern.contrMethod[1]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.contrMethod[1]", "contrMethod[1]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("contrMethod[1]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("contrMethod[1]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("contrMethod[1]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_32343_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/ocds/bidSelectionExcelChart"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. POST on path '/api/ocds/organization/procuringEntity/id/{id}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/organization/procuringEntity/id/IFtc")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/organization/procuringEntity/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/organization/procuringEntity/all'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/organization/procuringEntity/all?" + 
                    "pageNumber=_EM_32360_XYZ_&" + 
                    "pageSize=_EM_32361_XYZ_&" + 
                    "skip=_EM_32362_XYZ_&" + 
                    "class=_EM_32363_XYZ_&" + 
                    "textSearchRequest=_EM_32364_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("typeMismatch.textSearchRequest.pageNumber", "typeMismatch.pageNumber", "typeMismatch.java.lang.Integer", "typeMismatch"))
                .body("'errors'[0].'arguments'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("textSearchRequest.pageNumber", "pageNumber"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("pageNumber"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("pageNumber"))
                .body("'errors'[0].'defaultMessage'", containsString("Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'pageNumber'; nested exception is java.lang.NumberFormatException: For input string: \"_EM_32360_XYZ_\""))
                .body("'errors'[0].'objectName'", containsString("textSearchRequest"))
                .body("'errors'[0].'field'", containsString("pageNumber"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_32360_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(true))
                .body("'errors'[0].'code'", containsString("typeMismatch"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("typeMismatch.textSearchRequest.pageSize", "typeMismatch.pageSize", "typeMismatch.java.lang.Integer", "typeMismatch"))
                .body("'errors'[1].'arguments'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("textSearchRequest.pageSize", "pageSize"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("pageSize"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("pageSize"))
                .body("'errors'[1].'defaultMessage'", containsString("Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'pageSize'; nested exception is java.lang.NumberFormatException: For input string: \"_EM_32361_XYZ_\""))
                .body("'errors'[1].'objectName'", containsString("textSearchRequest"))
                .body("'errors'[1].'field'", containsString("pageSize"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_32361_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(true))
                .body("'errors'[1].'code'", containsString("typeMismatch"))
                .body("'message'", containsString("Validation failed for object='textSearchRequest'. Error count: 2"))
                .body("'path'", containsString("/api/ocds/organization/procuringEntity/all"));
    }
}
