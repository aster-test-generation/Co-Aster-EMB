package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_316_test_316_getOnCorruptionRiskOverviewTableReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (302) POST:/api/corruptionRiskOverviewTable
    * 2 - (302) GET:/api/corruptionRiskOverviewTable
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_316_getOnCorruptionRiskOverviewTableReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 302 not defined for path '/api/corruptionRiskOverviewTable'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/corruptionRiskOverviewTable?" + 
                    "bidTypeId=fmpgZPd&bidTypeId=_EM_6349_XYZ_&bidTypeId=c&bidTypeId=_EM_6350_XYZ_&" + 
                    "notBidTypeId=&" + 
                    "supplierId=Nxd&supplierId=_EM_6356_XYZ_&" + 
                    "bidSelectionMethod=zOt5NK0Wu39jHr&bidSelectionMethod=l9XUuB1FZEbNDf&bidSelectionMethod=M_P7K&" + 
                    "planningLoc=Epibw2m&planningLoc=HSPQm__sxAUvvwl&planningLoc=_EM_6358_XYZ_&planningLoc=_EM_6359_XYZ_&planningLoc=_EM_6360_XYZ_&" + 
                    "procurementMethod=tqIs0&procurementMethod=1hiEGPS&procurementMethod=073MrJxsNXbL5L&" + 
                    "procuringEntityCityId=&" + 
                    "year=599&year=68&year=681&year=713&" + 
                    "pageNumber=499&" + 
                    "pageSize=686&" + 
                    "minTenderValue=0.30440719781947956&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(302)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 302 not defined for path '/api/corruptionRiskOverviewTable'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/corruptionRiskOverviewTable?" + 
                    "bidTypeId=fmpgZPd&bidTypeId=ZnssDOBno0sGd&bidTypeId=c&bidTypeId=_EM_6362_XYZ_&" + 
                    "procuringEntityId=Rc&procuringEntityId=le&procuringEntityId=PzhQ7Jgg6ufY3vtX&procuringEntityId=_EM_6363_XYZ_&procuringEntityId=&" + 
                    "supplierId=Nxd&supplierId=_EM_6364_XYZ_&" + 
                    "notBidSelectionMethod=_EM_6366_XYZ_&" + 
                    "contrMethod=&" + 
                    "planningLoc=_EM_6367_XYZ_&planningLoc=HSPQm__sxAUvvwl&planningLoc=toRZ&planningLoc=_EM_6368_XYZ_&planningLoc=MPs&" + 
                    "tenderLoc=_EM_6369_XYZ_&tenderLoc=w2GA9_pN6DQI&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityGroupId=843&procuringEntityGroupId=844&" + 
                    "year=599&year=68&year=681&year=713&" + 
                    "pageSize=686&" + 
                    "minTenderValue=0.30440719781947956&" + 
                    "electronicSubmission=false&" + 
                    "monthly=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(302)
                .assertThat()
                .body(isEmptyOrNullString());
    }
}
