package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_134_test_134_getOnApiAwardsByLocationWithQueryParamsFlaggedNegativeMaxAwardValue {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (400) POST:/api/ocds/cancelledFundingExcelChart
    * 2 - (400) GET:/api/flags/i085/stats
    * 3 - (400) GET:/api/percentTendersWithLinkedProcurementPlan
    * 4 - (400) GET:/api/frequentTenderers
    * 5 - (200) GET:/api/ocds/organization/buyer/id/{id}
    * 6 - (400) GET:/api/awardsByLocation
    * Found 6 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_134_getOnApiAwardsByLocationWithQueryParamsFlaggedNegativeMaxAwardValue() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/cancelledFundingExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/cancelledFundingExcelChart?" + 
                    "bidTypeId=OA5JF&" + 
                    "notBidTypeId=Dl1yTjWOvCQS9H2&notBidTypeId=snSJr0_GxvbjVu&notBidTypeId=PkcwwF&notBidTypeId=FNAUD&" + 
                    "procuringEntityId=wA5_EBsXJ&procuringEntityId=_EM_40707_XYZ_&procuringEntityId=_EM_39811_XYZ_&procuringEntityId=_EM_39812_XYZ_&" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=_EM_40708_XYZ_&bidSelectionMethod=_EM_39815_XYZ_&bidSelectionMethod=_EM_39816_XYZ_&bidSelectionMethod=_EM_40709_XYZ_&" + 
                    "contrMethod=UWhbI&contrMethod=YIk0K3ZgXu4l2&" + 
                    "planningLoc=&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=kPbpj&procurementMethod=_EM_39819_XYZ_&procurementMethod=ApL1fIBMGiSW&procurementMethod=Tbut2i6RIbF0Gwp&" + 
                    "procuringEntityCityId=_&procuringEntityCityId=An1pXsoqVm&procuringEntityCityId=_EM_39820_XYZ_&" + 
                    "procuringEntityDepartmentId=247&" + 
                    "procuringEntityGroupId=642&" + 
                    "month=674&month=66&" + 
                    "pageNumber=819667783&" + 
                    "pageSize=0&" + 
                    "minTenderValue=0.5162753123188678&" + 
                    "maxTenderValue=0.6630217925723892&" + 
                    "minAwardValue=0.0&" + 
                    "maxAwardValue=0.33842457833470885&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "language=pQc3mWOyj4DQ&" + 
                    "password=4Ou7Bqynik1vH&" + 
                    "langYearFilterPagingRequest=&" + 
                    "username=_EM_40713_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.langYearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(2))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(66.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(674.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.procuringEntityId[0]", "EachPattern.langYearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[0]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.procuringEntityId[0]", "procuringEntityId[0]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[0]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("procuringEntityId[0]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("procuringEntityId[0]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_39811_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("Range.langYearFilterPagingRequest.pageSize", "Range.pageSize", "Range.java.lang.Integer", "Range"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.pageSize", "pageSize"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("pageSize"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("pageSize"))
                .body("'errors'[2].'arguments'[1]", numberMatches(1000.0))
                .body("'errors'[2].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[2].'defaultMessage'", containsString("must be between 1 and 1000"))
                .body("'errors'[2].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("pageSize"))
                .body("'errors'[2].'rejectedValue'", numberMatches(0.0))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("Range"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 4"))
                .body("'path'", containsString("/api/ocds/cancelledFundingExcelChart"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/flags/i085/stats'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i085/stats?" + 
                    "bidTypeId=Il3Mnoe2&" + 
                    "notBidTypeId=n7Dh4dqAT_TBJTVp&notBidTypeId=_EM_39821_XYZ_&notBidTypeId=8HZaYwgpjK&notBidTypeId=FRAUD&notBidTypeId=RIGGING&" + 
                    "notProcuringEntityId=a%5CycnB74OhFd&notProcuringEntityId=D_Yv&notProcuringEntityId=I6EpAzDFnny&" + 
                    "supplierId=CGEhYwuUPuSe&" + 
                    "bidSelectionMethod=_EM_39824_XYZ_&bidSelectionMethod=vdxRZlnWPm3tG0N&bidSelectionMethod=ZRubcCVlgSu0&" + 
                    "notBidSelectionMethod=_EM_39825_XYZ_&notBidSelectionMethod=mMW7nBY&notBidSelectionMethod=vG7dQW&notBidSelectionMethod=M6Tm6&" + 
                    "contrMethod=_EM_39826_XYZ_&" + 
                    "planningLoc=ukPA8Cr&planningLoc=8rZaQ6elpy9&" + 
                    "tenderLoc=_EM_39827_XYZ_&tenderLoc=V4m&tenderLoc=E5rIPg7kkb5fj&" + 
                    "procurementMethod=1DfbCfI&" + 
                    "procuringEntityCityId=g6Xuem6a7iVsfer2&procuringEntityCityId=5KO1iRyHxGB&procuringEntityCityId=aSlfXTK&procuringEntityCityId=VK26PfPw&" + 
                    "procuringEntityDepartmentId=325&procuringEntityDepartmentId=664&" + 
                    "procuringEntityGroupId=-7668&procuringEntityGroupId=190&" + 
                    "month=970&" + 
                    "minTenderValue=0.2883874948491054&" + 
                    "minAwardValue=0.04269431021330661&" + 
                    "maxAwardValue=0.13323532497278523&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "yearFilterPagingRequest=_EM_39832_XYZ_&" + 
                    "username=bqnqdGh2rTg")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(970.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[0]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[0]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[0]", "notProcuringEntityId[0]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("notProcuringEntityId[0]"))
                .body("'errors'[1].'rejectedValue'", containsString("D_Yv"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.contrMethod[0]", "EachPattern.yearFilterPagingRequest.contrMethod", "EachPattern.contrMethod[0]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.contrMethod[0]", "contrMethod[0]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("contrMethod[0]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("contrMethod[0]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("contrMethod[0]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_39826_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 4"))
                .body("'path'", containsString("/api/flags/i085/stats"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/percentTendersWithLinkedProcurementPlan'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/percentTendersWithLinkedProcurementPlan?" + 
                    "procuringEntityId=J9O2898QHcnaY&procuringEntityId=yOi2B74jsG&procuringEntityId=_EM_39836_XYZ_&procuringEntityId=R727OydPwt7zP_&procuringEntityId=UmzIaUKUmcHTG&" + 
                    "supplierId=7pFp8Eq5MdC4cnE&supplierId=_EM_39837_XYZ_&supplierId=HTq1uZmu&" + 
                    "bidSelectionMethod=&bidSelectionMethod=eAoh_OE0aq0BUt&bidSelectionMethod=_EM_39838_XYZ_&bidSelectionMethod=EUGVWq06hltVjjt&bidSelectionMethod=x4fb3Ufb&" + 
                    "contrMethod=ipkAHg1Cdu8&contrMethod=LDi&contrMethod=QVlq&contrMethod=_EM_39839_XYZ_&" + 
                    "planningLoc=VcrC0&planningLoc=um7mLdckW&planningLoc=pINlm0&planningLoc=dV8HBK9otDlCtU&planningLoc=w792S9&" + 
                    "procurementMethod=6i&procurementMethod=_EM_40711_XYZ_&procurementMethod=3ulVCIpJt&" + 
                    "procuringEntityCityId=76wzDUk9TvK&procuringEntityCityId=SYS8T0hysCn7&procuringEntityCityId=_EM_39842_XYZ_&procuringEntityCityId=LPwbyKNqQw8qze&procuringEntityCityId=_EM_39843_XYZ_&" + 
                    "procuringEntityDepartmentId=153&procuringEntityDepartmentId=131538&" + 
                    "year=571&" + 
                    "month=417&" + 
                    "minTenderValue=0.62454253457809&" + 
                    "maxTenderValue=-0.2893024125531478&" + 
                    "minAwardValue=0.781105676&" + 
                    "maxAwardValue=-47.98764348514092&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "skip=XFD7&" + 
                    "class=_EM_39845_XYZ_&" + 
                    "password=jZamieU&" + 
                    "username=2uW")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(417.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[1]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[1]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[1]", "procuringEntityId[1]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[1]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("procuringEntityId[1]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("procuringEntityId[1]"))
                .body("'errors'[1].'rejectedValue'", containsString("R727OydPwt7zP_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.contrMethod[2]", "EachPattern.yearFilterPagingRequest.contrMethod", "EachPattern.contrMethod[2]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.contrMethod[2]", "contrMethod[2]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("contrMethod[2]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("contrMethod[2]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("contrMethod[2]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_39839_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 4"))
                .body("'path'", containsString("/api/percentTendersWithLinkedProcurementPlan"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/frequentTenderers'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/frequentTenderers?" + 
                    "procuringEntityId=&" + 
                    "notProcuringEntityId=2UvLO5mRSBayq&notProcuringEntityId=UN&notProcuringEntityId=_EM_39849_XYZ_&" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=&" + 
                    "contrMethod=B84Bjn&contrMethod=vYBNagntE5gWo&contrMethod=t7t&contrMethod=UMAi_M00u&contrMethod=zuth4X_1bLMLr&" + 
                    "planningLoc=fTY&planningLoc=_EM_39852_XYZ_&" + 
                    "tenderLoc=qGVKjPOjzx&tenderLoc=_EM_39853_XYZ_&tenderLoc=0G3TNyIOFSUrGfyi&" + 
                    "procurementMethod=QnJUBKISM&procurementMethod=uAem8TFRIjL6e8&procurementMethod=Qt4SqLzf4SMP&procurementMethod=_fj_nsE&procurementMethod=QM6Zc&" + 
                    "procuringEntityCityId=bIvgWIqqQO6EH3PK&procuringEntityCityId=_EM_40714_XYZ_&procuringEntityCityId=_EM_40704_XYZ_&procuringEntityCityId=BLRW5&procuringEntityCityId=sAErM8&" + 
                    "procuringEntityDepartmentId=&" + 
                    "procuringEntityGroupId=752&procuringEntityGroupId=729&procuringEntityGroupId=563&" + 
                    "month=-639&" + 
                    "pageNumber=-267&" + 
                    "pageSize=894&" + 
                    "minTenderValue=0.1594611047457405&" + 
                    "minAwardValue=0.59&" + 
                    "maxAwardValue=0.5471778845160741&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "class=gDlNb0C&" + 
                    "yearFilterPagingRequest=n")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.contrMethod[1]", "EachPattern.yearFilterPagingRequest.contrMethod", "EachPattern.contrMethod[1]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.contrMethod[1]", "contrMethod[1]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("contrMethod[1]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("contrMethod[1]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("contrMethod[1]"))
                .body("'errors'[0].'rejectedValue'", containsString("UMAi_M00u"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("Min.yearFilterPagingRequest.pageNumber", "Min.pageNumber", "Min.java.lang.Integer", "Min"))
                .body("'errors'[1].'arguments'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.pageNumber", "pageNumber"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("pageNumber"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("pageNumber"))
                .body("'errors'[1].'arguments'[1]", numberMatches(0.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be greater than or equal to 0"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("pageNumber"))
                .body("'errors'[1].'rejectedValue'", numberMatches(-267.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("Min"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[2]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[2]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[2]", "notProcuringEntityId[2]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_39849_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 4"))
                .body("'path'", containsString("/api/frequentTenderers"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. GET on path '/api/ocds/organization/buyer/id/{id}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/organization/buyer/id/TJ3OroxR?" + 
                    "password=&" + 
                    "username=_EM_39857_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/awardsByLocation'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/awardsByLocation?" + 
                    "bidTypeId=oDmFcmTmE7&bidTypeId=Fy&bidTypeId=L9bIBz0hT&bidTypeId=oK3T5500VBj99h&" + 
                    "notBidTypeId=2L5r5HO1sp5_Xl&" + 
                    "procuringEntityId=q4aR4ISvey&procuringEntityId=JOgMagBcpRiywLEe&procuringEntityId=ksvnJFazNjvl&procuringEntityId=_EM_39858_XYZ_&" + 
                    "notProcuringEntityId=7o3&notProcuringEntityId=&notProcuringEntityId=jX4NC&" + 
                    "supplierId=_EM_39859_XYZ_&supplierId=_EM_39860_XYZ_&supplierId=q8_3UTqQQW2cpm&" + 
                    "bidSelectionMethod=Jbc36ZHKfJvbGn&" + 
                    "notBidSelectionMethod=LJiZHpU&notBidSelectionMethod=XzvViB&" + 
                    "planningLoc=_EM_40710_XYZ_&planningLoc=2m&planningLoc=kJE2fme&planningLoc=ST0ruJwtLKOXj8C3&" + 
                    "tenderLoc=WwOqC&" + 
                    "procurementMethod=ZLT6AdS20oFX3CwM&procurementMethod=_EM_39863_XYZ_&procurementMethod=3LR&procurementMethod=LJXga&procurementMethod=hdN&" + 
                    "procuringEntityCityId=hzKhymzSdWybDW&procuringEntityCityId=qET6S2XcVaT&" + 
                    "procuringEntityDepartmentId=265&procuringEntityDepartmentId=281567708&procuringEntityDepartmentId=693&procuringEntityDepartmentId=779&" + 
                    "procuringEntityGroupId=116&" + 
                    "month=371&month=327&month=-47236799&month=131216&month=570&" + 
                    "pageSize=594&" + 
                    "minAwardValue=0.2475189679598505&" + 
                    "maxAwardValue=-2.9994878881956355&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "skip=2rKZMRMYV4Ml&" + 
                    "class=_EM_40712_XYZ_&" + 
                    "yearFilterPagingRequest=Zzrh99&" + 
                    "username=_EM_40715_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(3))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(5))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(-4.7236799E7))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(327.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(371.0))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[1]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[1]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[1]", "procuringEntityId[1]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[1]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("procuringEntityId[1]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("procuringEntityId[1]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_39858_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notBidTypeId[0]", "EachPattern.yearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[0]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notBidTypeId[0]", "notBidTypeId[0]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[0]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("notBidTypeId[0]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("notBidTypeId[0]"))
                .body("'errors'[2].'rejectedValue'", containsString("2L5r5HO1sp5_Xl"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 3"))
                .body("'path'", containsString("/api/awardsByLocation"));
    }
}
