package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_1700_test_1700_getOnReleasesReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (200) POST:/api/ocds/location/search
    * 2 - (200) GET:/api/ocds/location/search
    * 3 - (200) POST:/api/ocds/location/all
    * 4 - (400) POST:/api/plannedFundingByLocation
    * 5 - (400) POST:/api/tenderValueInterval
    * 6 - (400) POST:/api/tenderValueInterval
    * 7 - (400) POST:/api/flags/i019/crosstab
    * 8 - (200) POST:/api/flags/i019/crosstab
    * 9 - (400) POST:/api/flags/i077/releases
    * 10 - (400) GET:/api/flags/i077/releases
    * Found 6 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_1700_getOnReleasesReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageNumber=304&" + 
                    "pageSize=78&" + 
                    "password=FiutVWoYK&" + 
                    "textSearchRequest=T5Hn0l9_u&" + 
                    "username=h_9")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageNumber=304&" + 
                    "pageSize=78&" + 
                    "password=Ug71tvSg&" + 
                    "skip=3ua&" + 
                    "class=NLBgacJMY&" + 
                    "textSearchRequest=_EM_35736_XYZ_&" + 
                    "username=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/plannedFundingByLocation'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/plannedFundingByLocation?" + 
                    "notBidTypeId=354YEEQ&" + 
                    "notProcuringEntityId=eq9h&notProcuringEntityId=RmNx6uo3HjQ2&notProcuringEntityId=_EM_35737_XYZ_&notProcuringEntityId=W4XPMgiKuD3&notProcuringEntityId=Y0I&" + 
                    "supplierId=_EM_35738_XYZ_&supplierId=_EM_35739_XYZ_&supplierId=38wmhMisXMxQ&supplierId=_EM_35740_XYZ_&supplierId=_EM_35741_XYZ_&" + 
                    "bidSelectionMethod=wBD5fS&bidSelectionMethod=lv&" + 
                    "notBidSelectionMethod=faNSavwbSz&notBidSelectionMethod=fcGfsz_7vf&notBidSelectionMethod=_EM_35742_XYZ_&notBidSelectionMethod=_EM_35743_XYZ_&notBidSelectionMethod=_EM_35744_XYZ_&" + 
                    "contrMethod=CZZyVAKmSLubo&contrMethod=zC6AMH&" + 
                    "procurementMethod=TGVI199HLK_&procurementMethod=_EM_35748_XYZ_&" + 
                    "minTenderValue=0.12336209628770878&" + 
                    "maxTenderValue=0.21681363669927445&" + 
                    "flagged=true&" + 
                    "yearFilterPagingRequest=6ancYIL")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[3]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[3]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[3]", "notProcuringEntityId[3]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[3]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notProcuringEntityId[3]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notProcuringEntityId[3]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_35737_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/plannedFundingByLocation"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/tenderValueInterval'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/tenderValueInterval?" + 
                    "procuringEntityId=_EM_35749_XYZ_&procuringEntityId=_EM_35750_XYZ_&procuringEntityId=J7GOawp8Zd6fCY&procuringEntityId=_EM_35751_XYZ_&" + 
                    "notProcuringEntityId=eq9h&notProcuringEntityId=RmNx6uo3HjQ2&notProcuringEntityId=qm&notProcuringEntityId=W4XPMgiKuD3&notProcuringEntityId=_EM_35752_XYZ_&" + 
                    "bidSelectionMethod=_EM_35755_XYZ_&bidSelectionMethod=_EM_35756_XYZ_&" + 
                    "contrMethod=CZZyVAKmSLubo&contrMethod=zC6AMH&" + 
                    "planningLoc=_EM_35761_XYZ_&planningLoc=Pw1&planningLoc=er&planningLoc=_EM_35762_XYZ_&" + 
                    "tenderLoc=&" + 
                    "procuringEntityGroupId=261&procuringEntityGroupId=84&procuringEntityGroupId=1712723597&procuringEntityGroupId=27&procuringEntityGroupId=55&" + 
                    "year=722&year=473&year=756&" + 
                    "minTenderValue=0.12336209628770878&" + 
                    "maxAwardValue=0.24586422131468955&" + 
                    "yearFilterPagingRequest=8bZzTc1I0jYJty")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(3))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[2]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[2]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[2]", "notProcuringEntityId[2]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notProcuringEntityId[2]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_35752_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[1]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[1]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[1]", "procuringEntityId[1]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[1]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("procuringEntityId[1]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("procuringEntityId[1]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_35749_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[2].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[2].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[2].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("year"))
                .body("'errors'[2].'rejectedValue'.size()", equalTo(3))
                .body("'errors'[2].'rejectedValue'[0]", numberMatches(473.0))
                .body("'errors'[2].'rejectedValue'[1]", numberMatches(722.0))
                .body("'errors'[2].'rejectedValue'[2]", numberMatches(756.0))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 3"))
                .body("'path'", containsString("/api/tenderValueInterval"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/tenderValueInterval'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/tenderValueInterval?" + 
                    "procuringEntityId=qynju&procuringEntityId=_EM_35768_XYZ_&procuringEntityId=J7GOawp8Zd6fCY&procuringEntityId=rV6Mol&" + 
                    "supplierId=B1gZLv&supplierId=_EM_35772_XYZ_&supplierId=38wmhMisXMxQ&supplierId=0luT1wUAlpMTBRQ&supplierId=1uIPIA82&" + 
                    "bidSelectionMethod=_EM_35773_XYZ_&bidSelectionMethod=lv&" + 
                    "notBidSelectionMethod=_EM_35774_XYZ_&notBidSelectionMethod=fcGfsz_7vf&notBidSelectionMethod=6fU&notBidSelectionMethod=yW9Flt5hFs&notBidSelectionMethod=zZo&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=TGVI199HLK_&procurementMethod=7V3D&" + 
                    "procuringEntityCityId=_EM_35779_XYZ_&procuringEntityCityId=m8Wlu4Klqs&procuringEntityCityId=_EM_35780_XYZ_&procuringEntityCityId=94cEPMf01Y&procuringEntityCityId=jB7&" + 
                    "procuringEntityGroupId=261&procuringEntityGroupId=84&procuringEntityGroupId=1712723597&procuringEntityGroupId=27&procuringEntityGroupId=55&" + 
                    "month=887&month=202&month=151&month=147&" + 
                    "pageNumber=304&" + 
                    "electronicSubmission=true&" + 
                    "skip=3ua&" + 
                    "password=Ug71tvSg&" + 
                    "class=NLBgacJMY&" + 
                    "yearFilterPagingRequest=EmLcf&" + 
                    "username=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.procuringEntityId[1]", "EachPattern.yearFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[1]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.procuringEntityId[1]", "procuringEntityId[1]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[1]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("procuringEntityId[1]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("procuringEntityId[1]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_35768_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[1].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("month"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(4))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(147.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(151.0))
                .body("'errors'[1].'rejectedValue'[2]", numberMatches(202.0))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/tenderValueInterval"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/flags/i019/crosstab'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i019/crosstab?" + 
                    "procuringEntityId=&" + 
                    "supplierId=Px2N0J&" + 
                    "bidSelectionMethod=waI4L&bidSelectionMethod=IeH0K&bidSelectionMethod=991r&" + 
                    "notBidSelectionMethod=&notBidSelectionMethod=IKrhI&notBidSelectionMethod=GzdMkR&" + 
                    "planningLoc=&" + 
                    "tenderLoc=bPeGdGJubwFVic&tenderLoc=L6R9i&" + 
                    "procurementMethod=Dd2B1g67Yikb&procurementMethod=sPC&procurementMethod=k7YRvM6&procurementMethod=_xddMOMmlJPa&" + 
                    "procuringEntityDepartmentId=990&" + 
                    "procuringEntityGroupId=304&procuringEntityGroupId=401&procuringEntityGroupId=344&procuringEntityGroupId=739&procuringEntityGroupId=793&" + 
                    "year=261&" + 
                    "pageSize=920&" + 
                    "minTenderValue=0.9747717948514218&" + 
                    "maxAwardValue=0.7255720056919541&" + 
                    "electronicSubmission=false")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(261.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/flags/i019/crosstab"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i019/crosstab?" + 
                    "notBidTypeId=B8vHiLSKGlj0ZDk0&notBidTypeId=72h&notBidTypeId=c&notBidTypeId=KGIpqTssWAar&notBidTypeId=W2tbKcgqW&" + 
                    "procuringEntityId=&" + 
                    "supplierId=Px2N0J&" + 
                    "planningLoc=&" + 
                    "tenderLoc=bPeGdGJubwFVic&tenderLoc=L6R9i&" + 
                    "procurementMethod=Dd2B1g67Yikb&procurementMethod=sPC&procurementMethod=k7YRvM6&procurementMethod=_xddMOMmlJPa&" + 
                    "procuringEntityDepartmentId=990&" + 
                    "procuringEntityGroupId=304&procuringEntityGroupId=401&procuringEntityGroupId=344&procuringEntityGroupId=739&procuringEntityGroupId=793&" + 
                    "pageSize=920&" + 
                    "maxTenderValue=0.2890033811987358&" + 
                    "maxAwardValue=0.7255720056919541&" + 
                    "electronicSubmission=false&" + 
                    "monthly=false&" + 
                    "EMextraParam123=42&" + 
                    "skip=8&" + 
                    "password=&" + 
                    "class=&" + 
                    "yearFilterPagingRequest=sfFx4ql2se&" + 
                    "username=zAR6BaIJTAcM")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/flags/i077/releases'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i077/releases?" + 
                    "notBidTypeId=354YEEQ&" + 
                    "supplierId=B1gZLv&supplierId=Tz62WLMDzijXBNXO&supplierId=38wmhMisXMxQ&supplierId=_EM_35784_XYZ_&supplierId=1uIPIA82&" + 
                    "contrMethod=CZZyVAKmSLubo&contrMethod=_EM_35786_XYZ_&" + 
                    "planningLoc=EdcZ1X7LOo9eq&planningLoc=_EM_35787_XYZ_&planningLoc=er&planningLoc=_EM_35788_XYZ_&" + 
                    "tenderLoc=&" + 
                    "procuringEntityGroupId=261&procuringEntityGroupId=84&procuringEntityGroupId=1712723597&procuringEntityGroupId=27&procuringEntityGroupId=55&" + 
                    "year=722&year=473&year=756&" + 
                    "minTenderValue=0.12336209628770878&" + 
                    "maxTenderValue=0.21681363669927445&" + 
                    "yearFilterPagingRequest=NoBPi")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(3))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(473.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(722.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(756.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.contrMethod[1]", "EachPattern.yearFilterPagingRequest.contrMethod", "EachPattern.contrMethod[1]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.contrMethod[1]", "contrMethod[1]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("contrMethod[1]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("contrMethod[1]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("contrMethod[1]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_35786_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/flags/i077/releases"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/flags/i077/releases'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i077/releases?" + 
                    "bidTypeId=COLLUSION&bidTypeId=&" + 
                    "bidSelectionMethod=wBD5fS&bidSelectionMethod=_EM_35796_XYZ_&" + 
                    "notBidSelectionMethod=faNSavwbSz&notBidSelectionMethod=fcGfsz_7vf&notBidSelectionMethod=6fU&notBidSelectionMethod=_EM_35797_XYZ_&notBidSelectionMethod=_EM_35798_XYZ_&" + 
                    "planningLoc=EdcZ1X7LOo9eq&planningLoc=Pw1&planningLoc=_EM_35799_XYZ_&planningLoc=_EM_35800_XYZ_&" + 
                    "procurementMethod=TGVI199HLK_&procurementMethod=7V3D&" + 
                    "procuringEntityCityId=RI0r6EgeKFTKp&procuringEntityCityId=m8Wlu4Klqs&procuringEntityCityId=PHXV&procuringEntityCityId=_EM_35801_XYZ_&procuringEntityCityId=jB7&" + 
                    "procuringEntityDepartmentId=580&procuringEntityDepartmentId=310&procuringEntityDepartmentId=1465045354&procuringEntityDepartmentId=830&procuringEntityDepartmentId=42&" + 
                    "year=722&year=473&year=756&" + 
                    "pageNumber=304&" + 
                    "pageSize=78&" + 
                    "maxTenderValue=0.21681363669927445&" + 
                    "minAwardValue=0.419301340964337&" + 
                    "maxAwardValue=0.24586422131468955&" + 
                    "password=Ug71tvSg&" + 
                    "yearFilterPagingRequest=EmLcf&" + 
                    "username=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(3))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(473.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(722.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(756.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/flags/i077/releases"));
    }
}
