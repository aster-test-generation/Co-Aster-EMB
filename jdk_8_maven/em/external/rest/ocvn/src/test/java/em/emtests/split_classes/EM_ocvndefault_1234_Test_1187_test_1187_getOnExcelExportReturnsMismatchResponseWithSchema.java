package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_1187_test_1187_getOnExcelExportReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (400) POST:/api/topTenSuppliers
    * 2 - (400) GET:/api/topTenSuppliers
    * 3 - (302) GET:/api/totalEligibleIndicatorsByIndicatorType
    * 4 - (400) POST:/api/planningByLocation
    * 5 - (400) POST:/api/ocds/excelExport
    * 6 - (400) GET:/api/ocds/excelExport
    * Found 6 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_1187_getOnExcelExportReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/topTenSuppliers'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/topTenSuppliers?" + 
                    "bidTypeId=LUbQKgjNg1P_UAr&bidTypeId=rJFhlh6q&bidTypeId=MT&bidTypeId=C1&" + 
                    "notBidTypeId=hMiXjVSDAL91xm1E&notBidTypeId=Hw&notBidTypeId=TK0gfqCizV9eDCEw&" + 
                    "procuringEntityId=Yx6WsS38J&procuringEntityId=rg30A&procuringEntityId=jceCrq3&procuringEntityId=WJHamdK_sxBtKW1G&procuringEntityId=ocU_KnzytMk2yja&" + 
                    "notProcuringEntityId=2pIdnCzUYRc&notProcuringEntityId=bEraxuhZMun&notProcuringEntityId=jXadNP&notProcuringEntityId=&" + 
                    "procurementMethod=&" + 
                    "procuringEntityCityId=R&procuringEntityCityId=mb8umFbiy&procuringEntityCityId=JLsRzl0&procuringEntityCityId=ZzV9WdisLd&" + 
                    "procuringEntityDepartmentId=820&procuringEntityDepartmentId=65&procuringEntityDepartmentId=242&" + 
                    "year=211&year=65&" + 
                    "month=272&month=469&" + 
                    "pageNumber=239&" + 
                    "minTenderValue=0.7362310293654551&" + 
                    "maxTenderValue=0.8284657636054291&" + 
                    "minAwardValue=0.674347194124429&" + 
                    "skip=WAqRE9&" + 
                    "class=1Hw&" + 
                    "yearFilterPagingRequest=UDg4o0HTQpS")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(2))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(65.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(211.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[1]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[1]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[1]", "bidTypeId[1]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("bidTypeId[1]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("bidTypeId[1]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("bidTypeId[1]"))
                .body("'errors'[1].'rejectedValue'", containsString("LUbQKgjNg1P_UAr"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[2].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[2].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[2].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("month"))
                .body("'errors'[2].'rejectedValue'.size()", equalTo(2))
                .body("'errors'[2].'rejectedValue'[0]", numberMatches(272.0))
                .body("'errors'[2].'rejectedValue'[1]", numberMatches(469.0))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachRange"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 4"))
                .body("'path'", containsString("/api/topTenSuppliers"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/topTenSuppliers'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/topTenSuppliers?" + 
                    "notBidTypeId=hMiXjVSDAL91xm1E&notBidTypeId=Hw&notBidTypeId=TK0gfqCizV9eDCEw&" + 
                    "supplierId=hwMkXD_JQfW&supplierId=zqbqIjB84KtTNF&" + 
                    "bidSelectionMethod=69DTKEDgwxHGpj&bidSelectionMethod=KFHmtOSYSpJLe&bidSelectionMethod=upViozXh&" + 
                    "notBidSelectionMethod=&" + 
                    "contrMethod=&" + 
                    "planningLoc=Fct5&planningLoc=0byeGOJQvgbDx2i4&planningLoc=DZOTC9mTP&" + 
                    "month=272&month=469&" + 
                    "pageNumber=239&" + 
                    "minTenderValue=0.7362310293654551&" + 
                    "electronicSubmission=true&" + 
                    "skip=xD6CbndM&" + 
                    "password=TFYtQpQwmPJ9&" + 
                    "class=rsxoOacXCYW&" + 
                    "yearFilterPagingRequest=4LGgfK&" + 
                    "username=nI")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(2))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(272.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(469.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/topTenSuppliers"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 302 not defined for path '/api/totalEligibleIndicatorsByIndicatorType'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/totalEligibleIndicatorsByIndicatorType?" + 
                    "bidTypeId=_EM_28982_XYZ_&bidTypeId=6mXyr&bidTypeId=EmBcZ8tP&bidTypeId=_EM_28983_XYZ_&bidTypeId=YiShVML28xlvpKvm&" + 
                    "notBidTypeId=_EM_28984_XYZ_&notBidTypeId=FRAUD&notBidTypeId=RIGGING&notBidTypeId=D1tTcOeEeKgyQg&notBidTypeId=COLLUSION&" + 
                    "supplierId=_EM_28986_XYZ_&supplierId=&supplierId=_EM_28987_XYZ_&supplierId=_EM_28988_XYZ_&" + 
                    "contrMethod=&" + 
                    "planningLoc=&" + 
                    "procurementMethod=j&procurementMethod=C_yVvCz2xMR5&" + 
                    "procuringEntityDepartmentId=996&procuringEntityDepartmentId=-256&procuringEntityDepartmentId=616&" + 
                    "procuringEntityGroupId=334&procuringEntityGroupId=466&procuringEntityGroupId=639&procuringEntityGroupId=140&procuringEntityGroupId=354&" + 
                    "year=330&" + 
                    "month=238&" + 
                    "pageNumber=308&" + 
                    "maxTenderValue=0.15272815494644798&" + 
                    "maxAwardValue=0.596347147844543&" + 
                    "flagged=true&" + 
                    "skip=XN9N&" + 
                    "password=_EM_28993_XYZ_&" + 
                    "class=_EM_28994_XYZ_&" + 
                    "yearFilterPagingRequest=_EM_28995_XYZ_&" + 
                    "username=_EM_28996_XYZ_")
                .then()
                .statusCode(302)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/planningByLocation'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/api/planningByLocation?" + 
                    "procuringEntityId=pn&" + 
                    "notProcuringEntityId=f6lp1VXG&notProcuringEntityId=fW5h6KcV7cn9bU&" + 
                    "bidSelectionMethod=xs&bidSelectionMethod=vw&bidSelectionMethod=SwlZjg3k7m&bidSelectionMethod=vdAMt5&bidSelectionMethod=6LarwEKLkSuDLAG&" + 
                    "notBidSelectionMethod=uk4v&notBidSelectionMethod=J&" + 
                    "contrMethod=kQNhPzauxRpP&contrMethod=3vnEB0Y5NA75x6&contrMethod=iGNVCsO96lWrYm&contrMethod=FVUXK5BRZonh072&" + 
                    "tenderLoc=0HyU1O5V13oyi&tenderLoc=qtCOut8j_W&tenderLoc=DWgZV69X&tenderLoc=ztZo0uhA7X&tenderLoc=Y3oSTRF&" + 
                    "procurementMethod=Gf8YEv6PYxO7ldcu&procurementMethod=&procurementMethod=8EbkQVhvr1l_xi3y&procurementMethod=Qe_Q6xIWukY0Wg&" + 
                    "procuringEntityCityId=uwIkTP4&procuringEntityCityId=DIAqPgXy&procuringEntityCityId=q852P0s1l&" + 
                    "procuringEntityDepartmentId=&" + 
                    "year=48&year=819&" + 
                    "maxTenderValue=0.010369092863416363&" + 
                    "maxAwardValue=0.15806896645258217&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "monthly=false")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(2))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(48.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(819.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/planningByLocation"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/excelExport'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/ocds/excelExport?" + 
                    "notBidTypeId=oZ29BsI3&notBidTypeId=Rownlhikk&" + 
                    "procuringEntityId=3moSKn&procuringEntityId=eYj86XEDKOpLF1Iq&procuringEntityId=pkzmkl&procuringEntityId=r&procuringEntityId=KRCud9cz93eYwA&" + 
                    "notProcuringEntityId=QhMor2&notProcuringEntityId=uXFA1Cz4&notProcuringEntityId=auZlhDOCIEOww0u&notProcuringEntityId=Ok&notProcuringEntityId=&" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=&bidSelectionMethod=_ckfo_rU3C&bidSelectionMethod=Z0bSJa8_R7x0_Au8&" + 
                    "notBidSelectionMethod=&" + 
                    "contrMethod=yerW82s0Cep2&contrMethod=LYD9eeWHZURaxU&contrMethod=5liXekpXn&" + 
                    "planningLoc=rlmj0Dy4CC7i&planningLoc=aKR8QIzcNRWO99cT&planningLoc=ZRvzc23OrRr&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=WWaXprN4l8&procurementMethod=oREai4JIauj8L&procurementMethod=uZXFWpsn&procurementMethod=eltVkvPh7aewP&procurementMethod=UyPY6ewUJtBtAA&" + 
                    "procuringEntityCityId=DwkYGO5&" + 
                    "procuringEntityDepartmentId=&" + 
                    "procuringEntityGroupId=692&procuringEntityGroupId=432&procuringEntityGroupId=807&" + 
                    "month=186&" + 
                    "pageNumber=162&" + 
                    "pageSize=416&" + 
                    "flagged=false&" + 
                    "yearFilterPagingRequest=lM118esE")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(186.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/ocds/excelExport"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/excelExport'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ocds/excelExport?" + 
                    "notBidTypeId=oZ29BsI3&notBidTypeId=Rownlhikk&" + 
                    "notProcuringEntityId=QhMor2&notProcuringEntityId=uXFA1Cz4&notProcuringEntityId=auZlhDOCIEOww0u&notProcuringEntityId=Ok&notProcuringEntityId=&" + 
                    "notBidSelectionMethod=&" + 
                    "planningLoc=rlmj0Dy4CC7i&planningLoc=aKR8QIzcNRWO99cT&planningLoc=ZRvzc23OrRr&" + 
                    "procuringEntityCityId=DwkYGO5&" + 
                    "procuringEntityGroupId=692&procuringEntityGroupId=432&procuringEntityGroupId=807&" + 
                    "year=191&year=185&year=27&" + 
                    "month=186&" + 
                    "minTenderValue=0.39309338833242957&" + 
                    "minAwardValue=0.9885349774542951&" + 
                    "maxAwardValue=0.23987847419946462&" + 
                    "skip=8jWgb&" + 
                    "password=TGy2nsJInVWH&" + 
                    "class=zQ350jebjhvu&" + 
                    "yearFilterPagingRequest=QBLfAUDjyd0jm8F&" + 
                    "username=z")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(186.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[1].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("year"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(3))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(27.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(185.0))
                .body("'errors'[1].'rejectedValue'[2]", numberMatches(191.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/ocds/excelExport"));
    }
}
