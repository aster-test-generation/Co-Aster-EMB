package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_86_test_86_postOnFundingByTenderDeliveryLocationShowsFaults_100_101 {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (400) POST:/api/ocds/location/search
    * 2 - (200) POST:/api/ocds/location/all
    * 3 - (200) POST:/api/ocds/location/all
    * 4 - (200) POST:/api/ocds/organization/id/{id}
    * 5 - (200) GET:/api/ocds/organization/id/{id}
    * 6 - (400) POST:/api/frequentTenderers
    * 7 - (200) GET:/api/frequentTenderers
    * 8 - (400) POST:/api/fundingByTenderDeliveryLocation
    * 9 - (500) POST:/api/fundingByTenderDeliveryLocation
    * Found 7 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_86_postOnFundingByTenderDeliveryLocationShowsFaults_100_101() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/location/search'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageNumber=537&" + 
                    "pageSize=-7785&" + 
                    "text=_EM_32397_XYZ_&" + 
                    "password=_EM_42486_XYZ_&" + 
                    "textSearchRequest=hy9I&" + 
                    "username=Rpk1qF")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("Range.textSearchRequest.pageSize", "Range.pageSize", "Range.java.lang.Integer", "Range"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("textSearchRequest.pageSize", "pageSize"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("pageSize"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("pageSize"))
                .body("'errors'[0].'arguments'[1]", numberMatches(1000.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 1000"))
                .body("'errors'[0].'objectName'", containsString("textSearchRequest"))
                .body("'errors'[0].'field'", containsString("pageSize"))
                .body("'errors'[0].'rejectedValue'", numberMatches(-7785.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("Range"))
                .body("'message'", containsString("Validation failed for object='textSearchRequest'. Error count: 1"))
                .body("'path'", containsString("/api/ocds/location/search"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/all?username=_hGr")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. POST on path '/api/ocds/organization/id/{id}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/organization/id/X5JUY_zCSV")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. GET on path '/api/ocds/organization/id/{id}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/organization/id/X5JUY_zCSV?" + 
                    "password=nFUC3hWxnmf6Alm&" + 
                    "username=_hGr")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/frequentTenderers'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/frequentTenderers?" + 
                    "bidTypeId=&" + 
                    "notBidTypeId=JYqnVz0BQLVchx&notBidTypeId=_EM_32398_XYZ_&notBidTypeId=_EM_32399_XYZ_&notBidTypeId=_EM_32400_XYZ_&" + 
                    "supplierId=c783Wh&" + 
                    "notBidSelectionMethod=Cxafbn2O7CgBhc1&notBidSelectionMethod=Z3MLEwt4&notBidSelectionMethod=q7uFY81Tp3Um&" + 
                    "planningLoc=_EM_32408_XYZ_&planningLoc=hfX&planningLoc=_EM_32409_XYZ_&" + 
                    "procuringEntityDepartmentId=261&procuringEntityDepartmentId=902&procuringEntityDepartmentId=4&procuringEntityDepartmentId=33&" + 
                    "procuringEntityGroupId=296&procuringEntityGroupId=587&procuringEntityGroupId=814&procuringEntityGroupId=897&" + 
                    "month=335&" + 
                    "pageNumber=537&" + 
                    "pageSize=-7785&" + 
                    "minTenderValue=0.9237721839701836&" + 
                    "minAwardValue=0.46907224043221407&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "yearFilterPagingRequest=G%3FG")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(3))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[0].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("month"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(335.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("Range.yearFilterPagingRequest.pageSize", "Range.pageSize", "Range.java.lang.Integer", "Range"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.pageSize", "pageSize"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("pageSize"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("pageSize"))
                .body("'errors'[1].'arguments'[1]", numberMatches(1000.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1 and 1000"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("pageSize"))
                .body("'errors'[1].'rejectedValue'", numberMatches(-7785.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("Range"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notBidTypeId[1]", "EachPattern.yearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[1]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notBidTypeId[1]", "notBidTypeId[1]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[1]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("notBidTypeId[1]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("notBidTypeId[1]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_32398_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 3"))
                .body("'path'", containsString("/api/frequentTenderers"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/frequentTenderers?" + 
                    "bidTypeId=&" + 
                    "notBidSelectionMethod=Cxafbn2O7CgBhc1&notBidSelectionMethod=Z3MLEwt4&notBidSelectionMethod=q7uFY81Tp3Um&" + 
                    "planningLoc=tDysMKCc5AES&planningLoc=_EM_32423_XYZ_&planningLoc=_EM_32424_XYZ_&" + 
                    "procurementMethod=Jo8PN7_psb&" + 
                    "procuringEntityDepartmentId=261&procuringEntityDepartmentId=902&procuringEntityDepartmentId=4&procuringEntityDepartmentId=33&" + 
                    "pageNumber=537&" + 
                    "minTenderValue=0.9237721839701836&" + 
                    "maxTenderValue=0.22989200893998252&" + 
                    "minAwardValue=0.46907224043221407&" + 
                    "maxAwardValue=0.23931887895002946&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "skip=713MlwYA2w&" + 
                    "class=xVd&" + 
                    "yearFilterPagingRequest=Jdt8x")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/fundingByTenderDeliveryLocation'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/fundingByTenderDeliveryLocation?" + 
                    "bidTypeId=9yJcj3Cyyr&bidTypeId=wj9&bidTypeId=Da0HXR&bidTypeId=X&bidTypeId=&" + 
                    "procuringEntityId=nYXZ7OZp&procuringEntityId=xQlCKTEE4&procuringEntityId=M1JefrdJz3y&" + 
                    "notProcuringEntityId=&" + 
                    "supplierId=&" + 
                    "procuringEntityDepartmentId=&" + 
                    "year=505&year=675&year=388&" + 
                    "month=722&month=147&" + 
                    "pageSize=680&" + 
                    "minTenderValue=0.9034136260760323&" + 
                    "maxAwardValue=0.5470394241451738&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "skip=td1iR4jvJ&" + 
                    "class=6k7VWUxUSHZ&" + 
                    "yearFilterPagingRequest=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(3))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(388.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(505.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(675.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[1].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("month"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(2))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(147.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(722.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/fundingByTenderDeliveryLocation"));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/rest/controller/GenericOCDSController_353_lambda$getContrMethodFilterCriteria$1.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/fundingByTenderDeliveryLocation'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/fundingByTenderDeliveryLocation?" + 
                    "bidTypeId=9yJcj3Cyyr&bidTypeId=wj9&bidTypeId=Da0HXR&bidTypeId=X&bidTypeId=&" + 
                    "contrMethod=&contrMethod=vLs1o&" + 
                    "planningLoc=B6_FQfqp&planningLoc=fil9pa&" + 
                    "tenderLoc=J&tenderLoc=ymJGNnWEXuwY5eA&tenderLoc=AG&" + 
                    "procuringEntityGroupId=401&procuringEntityGroupId=647&procuringEntityGroupId=840&procuringEntityGroupId=439&" + 
                    "minTenderValue=0.9034136260760323&" + 
                    "maxTenderValue=0.8714994456928195&" + 
                    "electronicSubmission=false&" + 
                    "skip=Wxe2&" + 
                    "password=8tzMkN&" + 
                    "class=&" + 
                    "yearFilterPagingRequest=6vc&" + 
                    "username=")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/rest/controller/GenericOCDSController_353_lambda$getContrMethodFilterCriteria$1
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("invalid hexadecimal representation of an ObjectId: []"))
                .body("'path'", containsString("/api/fundingByTenderDeliveryLocation"));
    }
}
