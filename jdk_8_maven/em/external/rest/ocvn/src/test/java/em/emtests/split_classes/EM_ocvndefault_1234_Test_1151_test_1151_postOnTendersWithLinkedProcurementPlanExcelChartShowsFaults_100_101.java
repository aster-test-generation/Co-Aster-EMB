package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_1151_test_1151_postOnTendersWithLinkedProcurementPlanExcelChartShowsFaults_100_101 {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (302) GET:/api/totalEligibleIndicatorsByIndicatorType
    * 2 - (400) POST:/api/averageNumberOfTenderers
    * 3 - (400) POST:/api/averageNumberOfTenderers
    * 4 - (500) POST:/api/ocds/tendersWithLinkedProcurementPlanExcelChart
    * 5 - (500) POST:/api/ocds/tendersWithLinkedProcurementPlanExcelChart
    * Found 7 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_1151_postOnTendersWithLinkedProcurementPlanExcelChartShowsFaults_100_101() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 302 not defined for path '/api/totalEligibleIndicatorsByIndicatorType'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/totalEligibleIndicatorsByIndicatorType?" + 
                    "bidTypeId=_EM_28982_XYZ_&bidTypeId=6mXyr&bidTypeId=EmBcZ8tP&bidTypeId=_EM_28983_XYZ_&bidTypeId=YiShVML28xlvpKvm&" + 
                    "notBidTypeId=_EM_28984_XYZ_&notBidTypeId=FRAUD&notBidTypeId=RIGGING&notBidTypeId=D1tTcOeEeKgyQg&notBidTypeId=COLLUSION&" + 
                    "supplierId=_EM_28986_XYZ_&supplierId=&supplierId=_EM_28987_XYZ_&supplierId=_EM_28988_XYZ_&" + 
                    "contrMethod=&" + 
                    "planningLoc=&" + 
                    "procurementMethod=j&procurementMethod=C_yVvCz2xMR5&" + 
                    "procuringEntityDepartmentId=996&procuringEntityDepartmentId=-256&procuringEntityDepartmentId=616&" + 
                    "procuringEntityGroupId=334&procuringEntityGroupId=466&procuringEntityGroupId=639&procuringEntityGroupId=140&procuringEntityGroupId=354&" + 
                    "year=330&" + 
                    "month=238&" + 
                    "pageNumber=308&" + 
                    "maxTenderValue=0.15272815494644798&" + 
                    "maxAwardValue=0.596347147844543&" + 
                    "flagged=true&" + 
                    "skip=XN9N&" + 
                    "password=_EM_28993_XYZ_&" + 
                    "class=_EM_28994_XYZ_&" + 
                    "yearFilterPagingRequest=_EM_28995_XYZ_&" + 
                    "username=_EM_28996_XYZ_")
                .then()
                .statusCode(302)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/averageNumberOfTenderers'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_11266_XYZ_")
                .post(baseUrlOfSut + "/api/averageNumberOfTenderers?" + 
                    "bidSelectionMethod=8TWw81PySY&bidSelectionMethod=tytuuWYe&bidSelectionMethod=l9dQYV1rkm&bidSelectionMethod=dMwodBzvN7YeT&bidSelectionMethod=_OmFbwP&" + 
                    "procurementMethod=DD5EY&" + 
                    "procuringEntityGroupId=997&procuringEntityGroupId=1264808370&procuringEntityGroupId=318&procuringEntityGroupId=492&procuringEntityGroupId=976&" + 
                    "year=431&year=934&" + 
                    "pageSize=402&" + 
                    "minTenderValue=0.7464303384719291&" + 
                    "maxTenderValue=0.10667707123382109&" + 
                    "minAwardValue=0.8880439360198817&" + 
                    "maxAwardValue=0.48506573216218063&" + 
                    "flagged=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(2))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(431.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(934.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/averageNumberOfTenderers"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/averageNumberOfTenderers'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/averageNumberOfTenderers?" + 
                    "notProcuringEntityId=B8XmO5YSK5XgKS&notProcuringEntityId=QLfu&notProcuringEntityId=4MShsUA&notProcuringEntityId=&notProcuringEntityId=TSyvMLxiTsPaDV&" + 
                    "supplierId=nP&supplierId=1rDnLyqHbOFm0&supplierId=ApR3OhG1NqR&supplierId=nwsioNouMft&supplierId=zfDu2fzNs1&" + 
                    "contrMethod=Lonv&contrMethod=_UB&contrMethod=LULRAFAaeRUEc&" + 
                    "procuringEntityCityId=VTBYi&" + 
                    "procuringEntityDepartmentId=&" + 
                    "procuringEntityGroupId=997&procuringEntityGroupId=1264808370&procuringEntityGroupId=318&procuringEntityGroupId=492&procuringEntityGroupId=976&" + 
                    "year=431&year=934&" + 
                    "month=803&month=381&month=455&" + 
                    "pageNumber=739&" + 
                    "pageSize=402&" + 
                    "minTenderValue=0.7464303384719291&" + 
                    "maxTenderValue=0.10667707123382109&" + 
                    "maxAwardValue=0.48506573216218063&" + 
                    "flagged=true&" + 
                    "skip=&" + 
                    "password=50Yjr&" + 
                    "class=RK")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(3))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.contrMethod[2]", "EachPattern.yearFilterPagingRequest.contrMethod", "EachPattern.contrMethod[2]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.contrMethod[2]", "contrMethod[2]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("contrMethod[2]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("contrMethod[2]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("contrMethod[2]"))
                .body("'errors'[0].'rejectedValue'", containsString("_UB"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[1].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("year"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(2))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(431.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(934.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[2].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[2].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[2].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("month"))
                .body("'errors'[2].'rejectedValue'.size()", equalTo(3))
                .body("'errors'[2].'rejectedValue'[0]", numberMatches(381.0))
                .body("'errors'[2].'rejectedValue'[1]", numberMatches(455.0))
                .body("'errors'[2].'rejectedValue'[2]", numberMatches(803.0))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 3"))
                .body("'path'", containsString("/api/averageNumberOfTenderers"));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/spring/TranslationService_40_ensureLanguageLoaded.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/ocds/tendersWithLinkedProcurementPlanExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/api/ocds/tendersWithLinkedProcurementPlanExcelChart?" + 
                    "bidTypeId=zJo58l&bidTypeId=TWusqN86O&bidTypeId=DGwf&bidTypeId=TbNrN6wXf&bidTypeId=XkyM&" + 
                    "notProcuringEntityId=IgmVRgbbjFPdqA&notProcuringEntityId=xef&notProcuringEntityId=uHZswwsUP378vB&notProcuringEntityId=drt5awG1tLmZQ&notProcuringEntityId=gr24N&" + 
                    "bidSelectionMethod=lmbH588I&" + 
                    "procurementMethod=iVHhKbbI4&procurementMethod=u8lF9eitntBlpB&" + 
                    "procuringEntityDepartmentId=1194812477&procuringEntityDepartmentId=363&procuringEntityDepartmentId=185&procuringEntityDepartmentId=1163904110&procuringEntityDepartmentId=206&" + 
                    "pageNumber=891&" + 
                    "minTenderValue=0.12209036229904868&" + 
                    "minAwardValue=0.7988335970238092&" + 
                    "maxAwardValue=0.8811593263719397&" + 
                    "flagged=false")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/spring/TranslationService_40_ensureLanguageLoaded
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("Language must not be null!"))
                .body("'path'", containsString("/api/ocds/tendersWithLinkedProcurementPlanExcelChart"));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/spring/TranslationService_40_ensureLanguageLoaded.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/ocds/tendersWithLinkedProcurementPlanExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/api/ocds/tendersWithLinkedProcurementPlanExcelChart?" + 
                    "notProcuringEntityId=IgmVRgbbjFPdqA&notProcuringEntityId=xef&notProcuringEntityId=uHZswwsUP378vB&notProcuringEntityId=drt5awG1tLmZQ&notProcuringEntityId=gr24N&" + 
                    "supplierId=DmKwK8nuDH3Qun&supplierId=8982I3MmWjR&supplierId=Q&supplierId=AGKDn&" + 
                    "bidSelectionMethod=lmbH588I&" + 
                    "planningLoc=U38ow06eYAP&" + 
                    "tenderLoc=TMubGVKPoot&tenderLoc=rEZ9&" + 
                    "procuringEntityDepartmentId=1194812477&procuringEntityDepartmentId=363&procuringEntityDepartmentId=185&procuringEntityDepartmentId=1163904110&procuringEntityDepartmentId=206&" + 
                    "procuringEntityGroupId=271&procuringEntityGroupId=592&procuringEntityGroupId=908&procuringEntityGroupId=431&" + 
                    "pageSize=840&" + 
                    "minTenderValue=0.12209036229904868&" + 
                    "minAwardValue=0.7988335970238092&" + 
                    "maxAwardValue=0.8811593263719397&" + 
                    "electronicSubmission=true&" + 
                    "monthly=false&" + 
                    "EMextraParam123=42&" + 
                    "password=YVdZiWm0&" + 
                    "class=0vc7Mfw7Uw&" + 
                    "langYearFilterPagingRequest=rQV9M")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/spring/TranslationService_40_ensureLanguageLoaded
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("Language must not be null!"))
                .body("'path'", containsString("/api/ocds/tendersWithLinkedProcurementPlanExcelChart"));
    }
}
