package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_138_test_138_getOnAwardsByLocationReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (400) POST:/api/ocds/cancelledFundingExcelChart
    * 2 - (400) POST:/api/costEffectivenessTenderAwardAmount
    * 3 - (400) GET:/api/costEffectivenessTenderAwardAmount
    * 4 - (400) GET:/api/percentTendersWithLinkedProcurementPlan
    * 5 - (400) GET:/api/frequentTenderers
    * 6 - (200) GET:/api/ocds/organization/buyer/id/{id}
    * 7 - (400) GET:/api/awardsByLocation
    * Found 7 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_138_getOnAwardsByLocationReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/cancelledFundingExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/cancelledFundingExcelChart?" + 
                    "bidTypeId=nJpRcoMfrIR&" + 
                    "notBidTypeId=Dl1yTjWOvCQS9H2E&notBidTypeId=_EM_40718_XYZ_&notBidTypeId=Pk_wwF&notBidTypeId=_EM_40719_XYZ_&" + 
                    "procuringEntityId=wA5_EBsXJ&procuringEntityId=LYvI&procuringEntityId=_EM_39811_XYZ_&procuringEntityId=_EM_39812_XYZ_&" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=_EM_39814_XYZ_&bidSelectionMethod=_EM_39815_XYZ_&bidSelectionMethod=_EM_39816_XYZ_&bidSelectionMethod=&bidSelectionMethod=_EM_39817_XYZ_&" + 
                    "notBidSelectionMethod=oBalNC2ncaxPfpz&notBidSelectionMethod=62Y4&" + 
                    "contrMethod=_EM_40723_XYZ_&contrMethod=YIk0K3ZgXu4l.&" + 
                    "tenderLoc=0cmaxYI&" + 
                    "procurementMethod=kPbpj&procurementMethod=_EM_39819_XYZ_&procurementMethod=ApL1fIBMGiSW&procurementMethod=Tbut2i6RIbF0Gwp&" + 
                    "procuringEntityCityId=fNeFV&procuringEntityCityId=An1pXsoqVm&procuringEntityCityId=_EM_39820_XYZ_&" + 
                    "procuringEntityDepartmentId=247&procuringEntityDepartmentId=601&" + 
                    "procuringEntityGroupId=130&" + 
                    "year=343&year=671&year=768&" + 
                    "month=674&month=905&month=66&" + 
                    "pageNumber=0&" + 
                    "pageSize=383&" + 
                    "minTenderValue=-331497.78631035495&" + 
                    "maxTenderValue=0.6630217925723892&" + 
                    "maxAwardValue=0.3384&" + 
                    "electronicSubmission=false&" + 
                    "monthly=false&" + 
                    "language=pQc3mWOyj4D&" + 
                    "password=4Ou7Bqxnik1vH&" + 
                    "langYearFilterPagingRequest=&" + 
                    "username=MHvcMjDrmT8y5d")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(5))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.notBidTypeId[1]", "EachPattern.langYearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[1]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.notBidTypeId[1]", "notBidTypeId[1]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[1]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notBidTypeId[1]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notBidTypeId[1]"))
                .body("'errors'[0].'rejectedValue'", containsString("Pk_wwF"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.langYearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.year", "year"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[1].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[1].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("year"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(3))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(343.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(671.0))
                .body("'errors'[1].'rejectedValue'[2]", numberMatches(768.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("EachRange.langYearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.month", "month"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[2].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[2].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[2].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[2].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("month"))
                .body("'errors'[2].'rejectedValue'.size()", equalTo(3))
                .body("'errors'[2].'rejectedValue'[0]", numberMatches(66.0))
                .body("'errors'[2].'rejectedValue'[1]", numberMatches(674.0))
                .body("'errors'[2].'rejectedValue'[2]", numberMatches(905.0))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachRange"))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 5"))
                .body("'path'", containsString("/api/ocds/cancelledFundingExcelChart"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/costEffectivenessTenderAwardAmount'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/costEffectivenessTenderAwardAmount?" + 
                    "notProcuringEntityId=nUh4kwgmOQPIj&notProcuringEntityId=sQ&notProcuringEntityId=uMmeJCW&notProcuringEntityId=LzIj&notProcuringEntityId=A&" + 
                    "supplierId=9f1lZoEws6CW&supplierId=AUuc6nYDk1OX&supplierId=xo0Cfk4&supplierId=p8y_YSQfTVNmkEWk&" + 
                    "contrMethod=m07YxgTji4hMF7GD&contrMethod=HTuC&contrMethod=qWfz&contrMethod=O0JVPODycnS&" + 
                    "procuringEntityCityId=ck_scb1pxN2&" + 
                    "procuringEntityGroupId=576&procuringEntityGroupId=553&procuringEntityGroupId=177&procuringEntityGroupId=939&procuringEntityGroupId=428&" + 
                    "year=750&" + 
                    "pageNumber=130&" + 
                    "minTenderValue=0.43416260476636814&" + 
                    "minAwardValue=0.9662380142577267&" + 
                    "electronicSubmission=false")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.groupingFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("groupingFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("groupingFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(750.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='groupingFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/costEffectivenessTenderAwardAmount"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/costEffectivenessTenderAwardAmount'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/costEffectivenessTenderAwardAmount?" + 
                    "bidTypeId=8qS3I12VYPs1B1&bidTypeId=n0fBBS8Y&" + 
                    "notBidTypeId=&" + 
                    "procuringEntityId=OfDkHMLf6JIXF&procuringEntityId=KXNd5aH2CIMo9&procuringEntityId=d5QeOYWqUo1Q&procuringEntityId=f6_s2Qzk&procuringEntityId=R3MAFgqjRdq&" + 
                    "contrMethod=m07YxgTji4hMF7GD&contrMethod=HTuC&contrMethod=qWfz&contrMethod=O0JVPODycnS&" + 
                    "procurementMethod=4_nsKSpO2&procurementMethod=2WLn5DvVqsyC&procurementMethod=QOxuMS9yv1eG5eJ2&procurementMethod=PgA6P&procurementMethod=ZKljoU5q3pR&" + 
                    "procuringEntityCityId=ck_scb1pxN2&" + 
                    "procuringEntityDepartmentId=771&procuringEntityDepartmentId=804&" + 
                    "year=750&" + 
                    "month=482&month=633&month=955&month=92&month=715&" + 
                    "pageSize=552&" + 
                    "minTenderValue=0.43416260476636814&" + 
                    "maxAwardValue=0.7828167619755672&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "groupByCategory=00&" + 
                    "password=7lpzMu&" + 
                    "class=xB1P7i7JTS6&" + 
                    "groupingFilterPagingRequest=J&" + 
                    "username=zUwBttQqTR")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(3))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.groupingFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("groupingFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("groupingFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(750.0))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.groupingFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("groupingFilterPagingRequest.month", "month"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[1].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[1].'objectName'", containsString("groupingFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("month"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(5))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(92.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(482.0))
                .body("'errors'[1].'rejectedValue'[2]", numberMatches(633.0))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.groupingFilterPagingRequest.procuringEntityId[4]", "EachPattern.groupingFilterPagingRequest.procuringEntityId", "EachPattern.procuringEntityId[4]", "EachPattern.procuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("groupingFilterPagingRequest.procuringEntityId[4]", "procuringEntityId[4]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("procuringEntityId[4]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("procuringEntityId[4]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("groupingFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("procuringEntityId[4]"))
                .body("'errors'[2].'rejectedValue'", containsString("f6_s2Qzk"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='groupingFilterPagingRequest'. Error count: 3"))
                .body("'path'", containsString("/api/costEffectivenessTenderAwardAmount"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/percentTendersWithLinkedProcurementPlan'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/percentTendersWithLinkedProcurementPlan?" + 
                    "bidTypeId=b6g29S&bidTypeId=_EM_39833_XYZ_&bidTypeId=gu&bidTypeId=jBVP&" + 
                    "notBidTypeId=KKW94L9tDTz&notBidTypeId=_EM_39834_XYZ_&notBidTypeId=_EM_39835_XYZ_&notBidTypeId=BU2E9NLy&notBidTypeId=Cxaz_9gc7vtF&" + 
                    "notProcuringEntityId=Ww0EA6Q&" + 
                    "supplierId=7pFp8Eq5MdC4cnE&supplierId=_EM_39837_XYZ_&supplierId=HTq1uZmu&" + 
                    "notBidSelectionMethod=_Dw4dsk&" + 
                    "contrMethod=ipkAHg1Cdu8&contrMethod=LDi&contrMethod=SVlq&contrMethod=_EM_39839_XYZ_&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=6k&procurementMethod=_EM_39840_XYZ_&procurementMethod=_EM_39841_XYZ_&" + 
                    "procuringEntityCityId=76wzDUk9TvK&procuringEntityCityId=SYS8T0hysCn7&procuringEntityCityId=_EM_39842_XYZ_&procuringEntityCityId=LPwbyKNqQw8qze&procuringEntityCityId=_EM_39843_XYZ_&" + 
                    "procuringEntityDepartmentId=153&procuringEntityDepartmentId=470&" + 
                    "procuringEntityGroupId=&" + 
                    "month=417&" + 
                    "pageNumber=4&" + 
                    "minTenderValue=0.62454253457809&" + 
                    "maxTenderValue=0.7807079620324844&" + 
                    "minAwardValue=0.7811056760492437&" + 
                    "maxAwardValue=0.04416458864961459&" + 
                    "skip=GD6hP6yrM&" + 
                    "yearFilterPagingRequest=_EM_40720_XYZ_&" + 
                    "password=jZamjeW")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notBidTypeId[1]", "EachPattern.yearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[1]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notBidTypeId[1]", "notBidTypeId[1]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[1]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notBidTypeId[1]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notBidTypeId[1]"))
                .body("'errors'[0].'rejectedValue'", containsString("Cxaz_9gc7vtF"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[1].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("month"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(417.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[0]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[0]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[0]", "bidTypeId[0]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("bidTypeId[0]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("bidTypeId[0]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("bidTypeId[0]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_39833_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 4"))
                .body("'path'", containsString("/api/percentTendersWithLinkedProcurementPlan"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/frequentTenderers'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/frequentTenderers?" + 
                    "bidTypeId=_EM_39846_XYZ_&bidTypeId=27XfhDcDdvT_O&bidTypeId=_EM_39847_XYZ_&bidTypeId=m7J61EQ1&bidTypeId=86cNT92Z&" + 
                    "procuringEntityId=&" + 
                    "supplierId=&" + 
                    "notBidSelectionMethod=_EM_39850_XYZ_&notBidSelectionMethod=_EM_39851_XYZ_&" + 
                    "contrMethod=B84Bjn&contrMethod=vYBNagntE5gWo&contrMethod=t7t&contrMethod=UMAi_M00u&contrMethod=zuth4X_1bLMLr&" + 
                    "tenderLoc=qGVKjPOjzx&tenderLoc=3bvcQILV63psV5&tenderLoc=0G3TNyIOFSUrGfxi&" + 
                    "procuringEntityCityId=bIvhWIqqQO6EH3PK&procuringEntityCityId=1zSt8E&procuringEntityCityId=MzDHphlRBQEa_U&procuringEntityCityId=_EM_39854_XYZ_&procuringEntityCityId=73T7&" + 
                    "procuringEntityGroupId=750&procuringEntityGroupId=729&procuringEntityGroupId=563&" + 
                    "year=236&year=292&" + 
                    "pageSize=926&" + 
                    "minTenderValue=31.98152979113114&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "class=gDlNb0%3FN&" + 
                    "yearFilterPagingRequest=n")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(3))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.contrMethod[1]", "EachPattern.yearFilterPagingRequest.contrMethod", "EachPattern.contrMethod[1]", "EachPattern.contrMethod", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.contrMethod[1]", "contrMethod[1]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("contrMethod[1]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("contrMethod[1]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("contrMethod[1]"))
                .body("'errors'[0].'rejectedValue'", containsString("UMAi_M00u"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[1].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("year"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(2))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(236.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(292.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[0]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[0]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[0]", "bidTypeId[0]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("bidTypeId[0]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("bidTypeId[0]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("bidTypeId[0]"))
                .body("'errors'[2].'rejectedValue'", containsString("27XfhDcDdvT_O"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 3"))
                .body("'path'", containsString("/api/frequentTenderers"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. GET on path '/api/ocds/organization/buyer/id/{id}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/organization/buyer/id/x?" + 
                    "password=&" + 
                    "username=x7O")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/awardsByLocation'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/awardsByLocation?" + 
                    "bidTypeId=oDmFcmTmE7&bidTypeId=b9U%5BfsfV4FtD8If&bidTypeId=Fx&bidTypeId=L9bIBz0hT&bidTypeId=oK3T5500VBj99h&" + 
                    "notProcuringEntityId=7o&notProcuringEntityId=_EM_40725_XYZ_&notProcuringEntityId=jX6NC&" + 
                    "supplierId=_EM_39859_XYZ_&supplierId=_EM_39860_XYZ_&supplierId=q8_3UTqQQW2cpm&" + 
                    "bidSelectionMethod=Jbc36ZHKfJvbGn&" + 
                    "notBidSelectionMethod=LJiZHpU&notBidSelectionMethod=XzvViB&" + 
                    "planningLoc=4GPTf4e&planningLoc=2m&planningLoc=_EM_39862_XYZ_&planningLoc=ST0ruJwtLKOXj8C3&" + 
                    "procurementMethod=ZLT6AdS20oFX3CwM&procurementMethod=V&procurementMethod=_EM_39864_XYZ_&procurementMethod=LJXgaT&procurementMethod=_EM_39865_XYZ_&" + 
                    "procuringEntityCityId=hzKhymzSdWybDW&procuringEntityCityId=qET6S2XcVaT&" + 
                    "procuringEntityDepartmentId=265&procuringEntityDepartmentId=281567708&procuringEntityDepartmentId=565&procuringEntityDepartmentId=262923&" + 
                    "procuringEntityGroupId=-239759375&" + 
                    "year=770&" + 
                    "pageNumber=4804&" + 
                    "minTenderValue=8.258491591581025&" + 
                    "maxTenderValue=0.009886060241373729&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "skip=2rKZMRMYV4Ml&" + 
                    "class=oKE0A&" + 
                    "password=AgWtK2&" + 
                    "username=O2hzsILxbIt2xU1W")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(3))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[2]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[2]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[2]", "bidTypeId[2]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("bidTypeId[2]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("bidTypeId[2]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("bidTypeId[2]"))
                .body("'errors'[0].'rejectedValue'", containsString("b9U[fsfV4FtD8If"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[1].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("year"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(1))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(770.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[1]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[1]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[1]", "notProcuringEntityId[1]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_40725_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 3"))
                .body("'path'", containsString("/api/awardsByLocation"));
    }
}
