package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_1144_test_1144_postOnNumberTendersUsingEBidExcelChartShowsFaults_100_101 {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (400) POST:/api/ocds/numberTendersUsingEBidExcelChart
    * 2 - (500) POST:/api/ocds/numberTendersUsingEBidExcelChart
    * Found 3 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_1144_postOnNumberTendersUsingEBidExcelChartShowsFaults_100_101() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/numberTendersUsingEBidExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/numberTendersUsingEBidExcelChart?" + 
                    "bidTypeId=&" + 
                    "notBidTypeId=L3MS4g5jkiXezhZ&notBidTypeId=mwkp8kX&notBidTypeId=6jMoW_ZXDg&notBidTypeId=_EM_27981_XYZ_&" + 
                    "procuringEntityId=vT&procuringEntityId=_EM_27982_XYZ_&" + 
                    "notProcuringEntityId=_EM_27983_XYZ_&notProcuringEntityId=JmOZ1N&notProcuringEntityId=_EM_27984_XYZ_&notProcuringEntityId=_EM_27985_XYZ_&" + 
                    "supplierId=B5uc0zSLS6De4&supplierId=rU&supplierId=_EM_27986_XYZ_&supplierId=m&supplierId=xx&" + 
                    "bidSelectionMethod=EF&" + 
                    "notBidSelectionMethod=YKSh0O9wc&" + 
                    "planningLoc=z3XP&planningLoc=_EM_27988_XYZ_&" + 
                    "tenderLoc=PVK6U5PzMpz_pzSB&tenderLoc=_EM_27989_XYZ_&tenderLoc=eri2aEn&tenderLoc=bt08VbewJ39&" + 
                    "procurementMethod=_EM_27990_XYZ_&procurementMethod=LLayjht9&procurementMethod=_EM_27991_XYZ_&procurementMethod=W8oN1SEB2rSpu&" + 
                    "procuringEntityCityId=_EM_27992_XYZ_&" + 
                    "procuringEntityGroupId=237&" + 
                    "year=934&year=508&year=365&year=297&" + 
                    "pageNumber=263&" + 
                    "minTenderValue=-349.56624625960677&" + 
                    "maxTenderValue=0.7683612614897605&" + 
                    "minAwardValue=0.4913423089890827&" + 
                    "maxAwardValue=0.14731469588455604&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "language=XbX87CEr&" + 
                    "password=6Q_0ReUrpTR&" + 
                    "langYearFilterPagingRequest=MQq1BnJRHQuAVswp&" + 
                    "username=MAJl5FBngrSEL8")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("EachRange.langYearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.year", "year"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[0].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[0].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[0].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("year"))
                .body("'errors'[0].'rejectedValue'.size()", equalTo(4))
                .body("'errors'[0].'rejectedValue'[0]", numberMatches(297.0))
                .body("'errors'[0].'rejectedValue'[1]", numberMatches(365.0))
                .body("'errors'[0].'rejectedValue'[2]", numberMatches(508.0))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachRange"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.notBidTypeId[0]", "EachPattern.langYearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[0]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.notBidTypeId[0]", "notBidTypeId[0]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[0]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("notBidTypeId[0]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("notBidTypeId[0]"))
                .body("'errors'[1].'rejectedValue'", containsString("6jMoW_ZXDg"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.notProcuringEntityId[1]", "EachPattern.langYearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[1]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.notProcuringEntityId[1]", "notProcuringEntityId[1]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_27983_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 4"))
                .body("'path'", containsString("/api/ocds/numberTendersUsingEBidExcelChart"));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/spring/TranslationService_41_ensureLanguageLoaded.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/ocds/numberTendersUsingEBidExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/numberTendersUsingEBidExcelChart?" + 
                    "bidTypeId=&" + 
                    "supplierId=B5uc0zSLS6De4&supplierId=rU&supplierId=_EM_27986_XYZ_&supplierId=m&supplierId=xx&" + 
                    "bidSelectionMethod=EF&" + 
                    "tenderLoc=PVK6U5PzMpz_pzSB&tenderLoc=_EM_28002_XYZ_&tenderLoc=_EM_28003_XYZ_&tenderLoc=bt08VbewJ39&" + 
                    "procurementMethod=_EM_28004_XYZ_&procurementMethod=LLayjht9&procurementMethod=zf6B_g5YLuxgcuBE&procurementMethod=_EM_28005_XYZ_&" + 
                    "procuringEntityDepartmentId=471&" + 
                    "procuringEntityGroupId=237&" + 
                    "pageNumber=263&" + 
                    "pageSize=436&" + 
                    "minTenderValue=-349.56624625960677&" + 
                    "maxTenderValue=0.7683612614897605&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "language=XbX87CEr&" + 
                    "skip=8DMVA5OTJ7i0uP&" + 
                    "password=4Pvfgw")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/spring/TranslationService_41_ensureLanguageLoaded
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("Language string must comply with RFC5646 standard!"))
                .body("'path'", containsString("/api/ocds/numberTendersUsingEBidExcelChart"));
    }
}
