package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_46_test_46_getOnApiTenderPriceByBidSelectionMethodWithQueryParamsAndMonthly {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (400) POST:/api/plannedFundingByLocation
    * 2 - (400) POST:/api/plannedFundingByLocation
    * 3 - (500) POST:/api/percentOfEligibleProjectsFlaggedByYear
    * 4 - (400) POST:/api/ocds/tendersByItemExcelChart
    * 5 - (400) POST:/api/totalEligibleIndicatorsByIndicatorType
    * 6 - (400) POST:/api/totalEligibleIndicatorsByIndicatorType
    * 7 - (400) GET:/api/tenderPriceByBidSelectionMethod
    * Found 8 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_46_getOnApiTenderPriceByBidSelectionMethodWithQueryParamsAndMonthly() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/plannedFundingByLocation'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/plannedFundingByLocation?" + 
                    "bidTypeId=Sx&bidTypeId=_EM_38060_XYZ_&bidTypeId=_EM_38061_XYZ_&bidTypeId=t3AscWn2&bidTypeId=_EM_38062_XYZ_&" + 
                    "notBidTypeId=dK6M3GmH66C6&notBidTypeId=0O8DTX_s4O&notBidTypeId=CuFinBAbqvY0T&" + 
                    "bidSelectionMethod=QlrvS&bidSelectionMethod=&bidSelectionMethod=_EM_38064_XYZ_&" + 
                    "tenderLoc=WJKN_&tenderLoc=68WBY&tenderLoc=_EM_38069_XYZ_&" + 
                    "procuringEntityCityId=XelUw1Fm7bLGPakD&procuringEntityCityId=OwE1jExnBjBLSpm&procuringEntityCityId=_EM_38071_XYZ_&procuringEntityCityId=534HTV&" + 
                    "procuringEntityDepartmentId=539&" + 
                    "procuringEntityGroupId=765&procuringEntityGroupId=221&" + 
                    "month=&" + 
                    "pageNumber=318&" + 
                    "pageSize=77&" + 
                    "minTenderValue=0.23361601628123085&" + 
                    "minAwardValue=0.11484362688669247&" + 
                    "flagged=true")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notBidTypeId[0]", "EachPattern.yearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[0]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notBidTypeId[0]", "notBidTypeId[0]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[0]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notBidTypeId[0]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notBidTypeId[0]"))
                .body("'errors'[0].'rejectedValue'", containsString("0O8DTX_s4O"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(6))
                .body("'errors'[1].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[1]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[1]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[1]", "bidTypeId[1]"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("bidTypeId[1]"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("bidTypeId[1]"))
                .body("'errors'[1].'arguments'[1].size()", equalTo(0))
                .body("'errors'[1].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[1].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("bidTypeId[1]"))
                .body("'errors'[1].'rejectedValue'", containsString("_EM_38060_XYZ_"))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/plannedFundingByLocation"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/plannedFundingByLocation'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/plannedFundingByLocation?" + 
                    "notBidTypeId=_EM_38072_XYZ_&notBidTypeId=0O8DTX_s4O&notBidTypeId=CuFinBAbqvY0T&" + 
                    "procuringEntityId=v6&procuringEntityId=7UK31ozoRfKP&" + 
                    "notProcuringEntityId=&" + 
                    "supplierId=BuN6X&" + 
                    "bidSelectionMethod=QlrvS&bidSelectionMethod=&bidSelectionMethod=Gu&" + 
                    "notBidSelectionMethod=bED6&notBidSelectionMethod=uhIBZP9eOoqt&notBidSelectionMethod=Fk6EwBMrNVm&" + 
                    "tenderLoc=WJKN_&tenderLoc=68WBY&tenderLoc=_EM_38076_XYZ_&" + 
                    "procurementMethod=uXUIy2Rzl&procurementMethod=YqL1_7h9nn&procurementMethod=6eROXr&" + 
                    "procuringEntityCityId=XelUw1Fm7bLGPakD&procuringEntityCityId=_EM_38077_XYZ_&procuringEntityCityId=_EM_38078_XYZ_&procuringEntityCityId=_EM_38079_XYZ_&" + 
                    "procuringEntityDepartmentId=539&" + 
                    "procuringEntityGroupId=765&procuringEntityGroupId=221&" + 
                    "year=37&year=244&year=554&year=777&" + 
                    "month=&" + 
                    "pageSize=77&" + 
                    "maxTenderValue=0.697125484638623&" + 
                    "minAwardValue=0.11484362688669247&" + 
                    "maxAwardValue=0.067268669766128&" + 
                    "electronicSubmission=false&" + 
                    "monthly=true&" + 
                    "class=J10CR3&" + 
                    "yearFilterPagingRequest=_EM_38081_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notBidTypeId[0]", "EachPattern.yearFilterPagingRequest.notBidTypeId", "EachPattern.notBidTypeId[0]", "EachPattern.notBidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notBidTypeId[0]", "notBidTypeId[0]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notBidTypeId[0]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notBidTypeId[0]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notBidTypeId[0]"))
                .body("'errors'[0].'rejectedValue'", containsString("0O8DTX_s4O"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[1].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("year"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(4))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(37.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(244.0))
                .body("'errors'[1].'rejectedValue'[2]", numberMatches(554.0))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/plannedFundingByLocation"));
        
        // Fault100. HTTP Status 500. org/devgateway/ocds/web/rest/controller/GenericOCDSController_353_lambda$getContrMethodFilterCriteria$1.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/percentOfEligibleProjectsFlaggedByYear'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/percentOfEligibleProjectsFlaggedByYear?" + 
                    "procuringEntityId=XPnBTpP&procuringEntityId=lglXy6DARWfn&procuringEntityId=GbvZ8nAU&procuringEntityId=W_7nce7b4w&" + 
                    "notProcuringEntityId=RJesazotXYz&notProcuringEntityId=_EM_38082_XYZ_&" + 
                    "bidSelectionMethod=_EM_38083_XYZ_&bidSelectionMethod=_EM_38084_XYZ_&" + 
                    "contrMethod=ySBPFZGE19aomL&contrMethod=cu5i68mOw6&contrMethod=L82TtN&contrMethod=_EM_38085_XYZ_&contrMethod=VFWiZ6kqTW8E&" + 
                    "planningLoc=_EM_38086_XYZ_&planningLoc=jD&planningLoc=Z4ZPamO&planningLoc=X5OnJHrru6DL&planningLoc=oy_w9&" + 
                    "procurementMethod=A7h0wpkGUIrVW&procurementMethod=_EM_38087_XYZ_&procurementMethod=l365Kv9rqPPH&procurementMethod=Lu&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityGroupId=&" + 
                    "pageNumber=322&" + 
                    "minTenderValue=0.0948325482310668&" + 
                    "maxTenderValue=0.027753269001932646&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "skip=&" + 
                    "username=")
                .then()
                .statusCode(500)// org/devgateway/ocds/web/rest/controller/GenericOCDSController_353_lambda$getContrMethodFilterCriteria$1
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("invalid hexadecimal representation of an ObjectId: [L82TtN]"))
                .body("'path'", containsString("/api/percentOfEligibleProjectsFlaggedByYear"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ocds/tendersByItemExcelChart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/tendersByItemExcelChart?" + 
                    "bidTypeId=_EM_38090_XYZ_&bidTypeId=_EM_38091_XYZ_&bidTypeId=_EM_38092_XYZ_&bidTypeId=wVHxkAuCeZ&bidTypeId=_EM_38093_XYZ_&" + 
                    "notBidTypeId=UHbxFjuLJ&notBidTypeId=218&notBidTypeId=9Oj2lt86wb5Fl5H&notBidTypeId=Uf6VgW&" + 
                    "notProcuringEntityId=x8gkC3hzv&notProcuringEntityId=edlnIvbDRCgs&notProcuringEntityId=ZE1tIKdqPlIoQvG&notProcuringEntityId=RMF76oDvU4Fl&" + 
                    "supplierId=fh4x0JL&supplierId=_EM_38094_XYZ_&" + 
                    "notBidSelectionMethod=_EM_38096_XYZ_&notBidSelectionMethod=_EM_38097_XYZ_&notBidSelectionMethod=_EM_38098_XYZ_&notBidSelectionMethod=PT&notBidSelectionMethod=RSvb_7yxavxak&" + 
                    "planningLoc=5m34&planningLoc=_EM_38101_XYZ_&" + 
                    "procuringEntityDepartmentId=493&procuringEntityDepartmentId=517&procuringEntityDepartmentId=827&procuringEntityDepartmentId=124&procuringEntityDepartmentId=417&" + 
                    "procuringEntityGroupId=935&" + 
                    "month=567&month=831&" + 
                    "minTenderValue=0.14007522783961357&" + 
                    "minAwardValue=0.2085380593555073&" + 
                    "flagged=false&" + 
                    "language=_EM_38104_XYZ_&" + 
                    "skip=6QCj_3M8SwYZY&" + 
                    "langYearFilterPagingRequest=aYjDAks&" + 
                    "username=7vPrisd5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.langYearFilterPagingRequest.bidTypeId[0]", "EachPattern.langYearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[0]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.bidTypeId[0]", "bidTypeId[0]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("bidTypeId[0]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("bidTypeId[0]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("bidTypeId[0]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_38090_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.langYearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("langYearFilterPagingRequest.month", "month"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[1].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[1].'objectName'", containsString("langYearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("month"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(2))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(567.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(831.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'message'", containsString("Validation failed for object='langYearFilterPagingRequest'. Error count: 2"))
                .body("'path'", containsString("/api/ocds/tendersByItemExcelChart"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/totalEligibleIndicatorsByIndicatorType'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/totalEligibleIndicatorsByIndicatorType?" + 
                    "notProcuringEntityId=YIAU0YQtFqp7sPe&notProcuringEntityId=m1hyWB3WUM7&notProcuringEntityId=i&notProcuringEntityId=_EM_38106_XYZ_&notProcuringEntityId=_EM_38107_XYZ_&" + 
                    "supplierId=_EM_38108_XYZ_&" + 
                    "bidSelectionMethod=_EM_38109_XYZ_&bidSelectionMethod=iTP&" + 
                    "planningLoc=_EM_38112_XYZ_&" + 
                    "tenderLoc=QyTpHhiz&tenderLoc=_EM_38113_XYZ_&tenderLoc=XxOyZiY&" + 
                    "procurementMethod=Zn43r&procurementMethod=F4l&procurementMethod=_SLiF9JZm6lFF&procurementMethod=WjbxaEKAUJq7e&procurementMethod=LNnv&" + 
                    "procuringEntityDepartmentId=271&procuringEntityDepartmentId=312&" + 
                    "procuringEntityGroupId=224&procuringEntityGroupId=604&" + 
                    "pageNumber=815&" + 
                    "minTenderValue=0.0897547433834277&" + 
                    "maxTenderValue=0.4160993022714299&" + 
                    "minAwardValue=0.7634293309277668&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "monthly=true")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[1]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[1]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[1]", "notProcuringEntityId[1]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_38106_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 1"))
                .body("'path'", containsString("/api/totalEligibleIndicatorsByIndicatorType"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/totalEligibleIndicatorsByIndicatorType'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/totalEligibleIndicatorsByIndicatorType?" + 
                    "notProcuringEntityId=YIAU0YQtFqp7sPe&notProcuringEntityId=m1hyWB3WUM7&notProcuringEntityId=_EM_38114_XYZ_&notProcuringEntityId=yr6EkTr&notProcuringEntityId=aTwKUzK7YCwqtTs&" + 
                    "supplierId=06jsdU6gpIR8e&" + 
                    "bidSelectionMethod=U2rdjn5CGJyy7w&bidSelectionMethod=iTP&" + 
                    "contrMethod=_EM_38115_XYZ_&contrMethod=ReS&contrMethod=_EM_38116_XYZ_&contrMethod=_EM_38117_XYZ_&" + 
                    "tenderLoc=QyTpHhiz&tenderLoc=_EM_38118_XYZ_&tenderLoc=XxOyZiY&" + 
                    "procuringEntityDepartmentId=271&procuringEntityDepartmentId=312&" + 
                    "year=10&year=979&year=143&year=129&year=962&" + 
                    "month=933&month=424&" + 
                    "maxTenderValue=0.4160993022714299&" + 
                    "minAwardValue=0.7634293309277668&" + 
                    "maxAwardValue=0.12638637347709047&" + 
                    "electronicSubmission=true&" + 
                    "password=j&" + 
                    "username=_EM_38123_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[1]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[1]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[1]", "notProcuringEntityId[1]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notProcuringEntityId[1]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_38114_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.month", "EachRange.month", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.month", "month"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("month"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("month"))
                .body("'errors'[1].'arguments'[1]", numberMatches(12.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1 and 12"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("month"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(2))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(424.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(933.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[2].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[2].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[2].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("year"))
                .body("'errors'[2].'rejectedValue'.size()", equalTo(5))
                .body("'errors'[2].'rejectedValue'[0]", numberMatches(10.0))
                .body("'errors'[2].'rejectedValue'[1]", numberMatches(129.0))
                .body("'errors'[2].'rejectedValue'[2]", numberMatches(143.0))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachRange"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 4"))
                .body("'path'", containsString("/api/totalEligibleIndicatorsByIndicatorType"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/tenderPriceByBidSelectionMethod'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/tenderPriceByBidSelectionMethod?" + 
                    "bidTypeId=_EM_38124_XYZ_&bidTypeId=fNS9hFUJ_h1j&" + 
                    "notBidTypeId=19fi&notBidTypeId=SPZzDc&" + 
                    "procuringEntityId=n9&procuringEntityId=Q2aGdiWm&procuringEntityId=fY9&" + 
                    "notProcuringEntityId=&notProcuringEntityId=&notProcuringEntityId=_EM_38125_XYZ_&notProcuringEntityId=XjDM0RSs&notProcuringEntityId=0&" + 
                    "planningLoc=_EM_38129_XYZ_&planningLoc=JFJ&planningLoc=sa&planningLoc=QYQEYf1JiDrXFEX&" + 
                    "tenderLoc=Is6B&tenderLoc=_EM_38130_XYZ_&" + 
                    "procuringEntityCityId=bRTJUd1U95mSe&" + 
                    "procuringEntityDepartmentId=414&procuringEntityDepartmentId=931&procuringEntityDepartmentId=932&procuringEntityDepartmentId=59&procuringEntityDepartmentId=46&" + 
                    "procuringEntityGroupId=405&" + 
                    "year=616&year=163&" + 
                    "pageNumber=-259155854&" + 
                    "pageSize=43&" + 
                    "maxAwardValue=0.826682211419639&" + 
                    "electronicSubmission=true&" + 
                    "monthly=true&" + 
                    "skip=ICJZ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.validation.BindException"))
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'codes'.size()", equalTo(6))
                .body("'errors'[0].'codes'", hasItems("EachPattern.yearFilterPagingRequest.notProcuringEntityId[3]", "EachPattern.yearFilterPagingRequest.notProcuringEntityId", "EachPattern.notProcuringEntityId[3]", "EachPattern.notProcuringEntityId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[0].'arguments'.size()", equalTo(3))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.notProcuringEntityId[3]", "notProcuringEntityId[3]"))
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("notProcuringEntityId[3]"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("notProcuringEntityId[3]"))
                .body("'errors'[0].'arguments'[1].size()", equalTo(0))
                .body("'errors'[0].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[0].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[0].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[0].'field'", containsString("notProcuringEntityId[3]"))
                .body("'errors'[0].'rejectedValue'", containsString("_EM_38125_XYZ_"))
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("EachPattern"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("EachRange.yearFilterPagingRequest.year", "EachRange.year", "EachRange.java.util.TreeSet", "EachRange"))
                .body("'errors'[1].'arguments'.size()", equalTo(3))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.year", "year"))
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("year"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("year"))
                .body("'errors'[1].'arguments'[1]", numberMatches(2200.0))
                .body("'errors'[1].'arguments'[2]", numberMatches(1900.0))
                .body("'errors'[1].'defaultMessage'", containsString("must be between 1900 and 2200"))
                .body("'errors'[1].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[1].'field'", containsString("year"))
                .body("'errors'[1].'rejectedValue'.size()", equalTo(2))
                .body("'errors'[1].'rejectedValue'[0]", numberMatches(163.0))
                .body("'errors'[1].'rejectedValue'[1]", numberMatches(616.0))
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("EachRange"))
                .body("'errors'[2].'codes'.size()", equalTo(6))
                .body("'errors'[2].'codes'", hasItems("EachPattern.yearFilterPagingRequest.bidTypeId[0]", "EachPattern.yearFilterPagingRequest.bidTypeId", "EachPattern.bidTypeId[0]", "EachPattern.bidTypeId", "EachPattern.java.lang.String", "EachPattern"))
                .body("'errors'[2].'arguments'.size()", equalTo(3))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("yearFilterPagingRequest.bidTypeId[0]", "bidTypeId[0]"))
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("bidTypeId[0]"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("bidTypeId[0]"))
                .body("'errors'[2].'arguments'[1].size()", equalTo(0))
                .body("'errors'[2].'arguments'[2].'codes'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[2].'codes'", hasItems("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'arguments'[2].'defaultMessage'", containsString("^[a-zA-Z0-9]*$"))
                .body("'errors'[2].'defaultMessage'", containsString("must match \"^[a-zA-Z0-9]*$\""))
                .body("'errors'[2].'objectName'", containsString("yearFilterPagingRequest"))
                .body("'errors'[2].'field'", containsString("bidTypeId[0]"))
                .body("'errors'[2].'rejectedValue'", containsString("_EM_38124_XYZ_"))
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("EachPattern"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Validation failed for object='yearFilterPagingRequest'. Error count: 4"))
                .body("'path'", containsString("/api/tenderPriceByBidSelectionMethod"));
    }
}
