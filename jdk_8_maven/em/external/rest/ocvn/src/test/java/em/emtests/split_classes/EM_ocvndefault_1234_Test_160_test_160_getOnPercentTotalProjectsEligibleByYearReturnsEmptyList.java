package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T21:56:23.101-04:00[America/New_York]
 * <br>
*  The generated test suite contains 2398 tests
 * <br>
*  Covered targets: 28479
 * <br>
*  Used time: 1h 14m 59s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  
*/

public class EM_ocvndefault_1234_Test_160_test_160_getOnPercentTotalProjectsEligibleByYearReturnsEmptyList {
    

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/ocvn-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (200) POST:/api/percentTotalProjectsEligibleByYear
    * 2 - (200) GET:/api/percentTotalProjectsEligibleByYear
    */
    @Test @Timeout(60)
    public void test_160_getOnPercentTotalProjectsEligibleByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/percentTotalProjectsEligibleByYear?" + 
                    "bidTypeId=ChKEDZC5dXMTg&bidTypeId=FRAUD&" + 
                    "notProcuringEntityId=_EM_27861_XYZ_&notProcuringEntityId=nLAsgZjnX&notProcuringEntityId=TYVIQwoQ0Wtpisc&notProcuringEntityId=74KKGGu3V&notProcuringEntityId=_EM_27862_XYZ_&" + 
                    "supplierId=lcqL&" + 
                    "planningLoc=w8yKV8OjQVm5Ca&planningLoc=gJxB&" + 
                    "procurementMethod=_EM_27867_XYZ_&procurementMethod=n2l2bhocObVww&procurementMethod=7&procurementMethod=cHBE&" + 
                    "procuringEntityCityId=_EM_27868_XYZ_&procuringEntityCityId=GNU&procuringEntityCityId=r&procuringEntityCityId=8iNP_b&" + 
                    "procuringEntityGroupId=541&procuringEntityGroupId=300&procuringEntityGroupId=690&procuringEntityGroupId=765&procuringEntityGroupId=654&" + 
                    "year=392&year=176&" + 
                    "month=&" + 
                    "minTenderValue=0.14048263788236826&" + 
                    "minAwardValue=0.7995311949179081&" + 
                    "flagged=true&" + 
                    "monthly=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/percentTotalProjectsEligibleByYear?" + 
                    "bidTypeId=ChKEDZC5dXMTg&bidTypeId=sW&" + 
                    "notBidTypeId=LUo8pAAP3&notBidTypeId=GISoMwvdvqmZJD&" + 
                    "procuringEntityId=gY2k74Ho5su&procuringEntityId=_EM_27869_XYZ_&procuringEntityId=7nTBUp&procuringEntityId=QFCvMdr5QeAKLU&procuringEntityId=bcCcsmqOnPccdz&" + 
                    "supplierId=_EM_27872_XYZ_&" + 
                    "bidSelectionMethod=_EM_27873_XYZ_&bidSelectionMethod=dF&bidSelectionMethod=_EM_27874_XYZ_&bidSelectionMethod=KBjM&bidSelectionMethod=9&" + 
                    "notBidSelectionMethod=_EM_27875_XYZ_&notBidSelectionMethod=_EM_27876_XYZ_&notBidSelectionMethod=_EM_27877_XYZ_&notBidSelectionMethod=_EM_27878_XYZ_&" + 
                    "procurementMethod=_EM_27882_XYZ_&procurementMethod=n2l2bhocObVww&procurementMethod=7&procurementMethod=cHBE&" + 
                    "procuringEntityCityId=_EM_27883_XYZ_&procuringEntityCityId=_EM_27884_XYZ_&procuringEntityCityId=r&procuringEntityCityId=_EM_27885_XYZ_&" + 
                    "procuringEntityDepartmentId=&" + 
                    "procuringEntityGroupId=541&procuringEntityGroupId=300&procuringEntityGroupId=690&procuringEntityGroupId=765&procuringEntityGroupId=654&" + 
                    "pageNumber=907&" + 
                    "minAwardValue=0.7995311949179081&" + 
                    "maxAwardValue=0.08921458427062845")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
}
