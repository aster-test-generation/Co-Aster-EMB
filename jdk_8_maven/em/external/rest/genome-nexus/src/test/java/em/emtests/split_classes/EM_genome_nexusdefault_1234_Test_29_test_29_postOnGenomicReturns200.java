package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.mongo.dsl.MongoDsl.mongo;
import  org.evomaster.client.java.controller.api.dto.database.operations.MongoInsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.MongoInsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-04T17:11:05.925-04:00[America/New_York]
 * <br>
*  The generated test suite contains 87 tests
 * <br>
*  Covered targets: 4214
 * <br>
*  Used time: 1h 4m 25s
 * <br>
*  Needed budget for current results: 98%
 * <br>
*  
*/

public class EM_genome_nexusdefault_1234_Test_29_test_29_postOnGenomicReturns200 {
    

    
    private static final SutHandler controller = new em.external.org.cbioportal.genome_nexus.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/genome-nexus-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (200) POST:/annotation/genomic
    */
    @Test @Timeout(60)
    public void test_29_postOnGenomicReturns200() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"6ddP\", " + 
                    " \"start\": 503, " + 
                    " \"end\": 154, " + 
                    " \"referenceAllele\": \"_EM_37_XYZ_\", " + 
                    " \"variantAllele\": \"PUFjDa7Ixen8V2\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"dbAf9w\", " + 
                    " \"start\": 212, " + 
                    " \"end\": 202, " + 
                    " \"referenceAllele\": \"_EM_38_XYZ_\", " + 
                    " \"variantAllele\": \"VmuJZlldbKtmPw\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_39_XYZ_\", " + 
                    " \"start\": 155, " + 
                    " \"end\": 44, " + 
                    " \"referenceAllele\": \"1\", " + 
                    " \"variantAllele\": \"oT\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"_EM_40_XYZ_\", " + 
                    " \"start\": 241, " + 
                    " \"end\": 858, " + 
                    " \"referenceAllele\": \"_EM_41_XYZ_\", " + 
                    " \"variantAllele\": \"_EM_14_XYZ_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=_EM_36_XYZ_&" + 
                    "token=H6nyZ_E_LKDxato&" + 
                    "fields=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'variant'", containsString("6ddP:g.503_154delinsPUFjDa7Ixen8V2"))
                .body("[0].'originalVariantQuery'", containsString("6ddP,503,154,_EM_37_XYZ_,PUFjDa7Ixen8V2"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("dbAf9w:g.212_202delinsVmuJZlldbKtmPw"))
                .body("[1].'originalVariantQuery'", containsString("dbAf9w,212,202,_EM_38_XYZ_,VmuJZlldbKtmPw"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("_EM_39_XYZ_:g.155delinsoT"))
                .body("[2].'originalVariantQuery'", containsString("_EM_39_XYZ_,155,44,1,oT"))
                .body("[2].'successfully_annotated'", equalTo(false))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
    }
}
