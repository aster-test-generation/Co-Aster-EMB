/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-04T04:16:54.751-04:00[America/New_York]
 * <br>
*  The generated test suite contains 60 tests
 * <br>
*  Covered targets: 705
 * <br>
*  Used time: 1h 0m 10s
 * <br>
*  Needed budget for current results: 94%
 * <br>
*  
*/
public class EM_rest_ncsdefault_1234_Test {

    
    private static final SutHandler controller = new em.external.org.restncs.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/rest-ncs-sut.jar");
    private static String baseUrlOfSut;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (200) GET:/v2/api-docs
    */
    @Test @Timeout(60)
    public void test_0_getOnApi_docsReturnsObject() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs")
                .then()
                .statusCode(200);
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/bessj/{n}/{x}
    */
    @Test @Timeout(60)
    public void test_1_getOnBessjReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/bessj/7/-8.0")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(-0.3205890776814248));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/bessj/{n}/{x}
    */
    @Test @Timeout(60)
    public void test_2_getOnBessjReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/bessj/294/-0.04040372250251417?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(0.0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/bessj/{n}/{x}
    */
    @Test @Timeout(60)
    public void test_3_getOnBessjReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/bessj/759/3.6416771067701E8")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(-3.2847999169275366E-5));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/bessj/{n}/{x}
    */
    @Test @Timeout(60)
    public void test_4_getOnBessjReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_412_XYZ_")
                .get(baseUrlOfSut + "/api/bessj/445/0.0?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(0.0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/bessj/{n}/{x}
    */
    @Test @Timeout(60)
    public void test_5_getOnBessjReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/bessj/4/4.0")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(0.28112906637035134));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/expint/{n}/{x}
    */
    @Test @Timeout(60)
    public void test_6_getOnExpintReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/expint/5/1.0?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(0.07045423770598168));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/expint/{n}/{x}
    */
    @Test @Timeout(60)
    public void test_7_getOnExpintReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/expint/12/0.6721252339156002")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(0.043515306205455455));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/expint/{n}/{x}
    */
    @Test @Timeout(60)
    public void test_8_getOnExpintReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/expint/606/0.0?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(0.001652892561983471));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/expint/{n}/{x}
    */
    @Test @Timeout(60)
    public void test_9_getOnExpintReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/expint/0/13.76123231879403")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(7.67212045924929E-8));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/expint/{n}/{x}
    */
    @Test @Timeout(60)
    public void test_10_getOnExpintReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/expint/138/1.8274063481083775?EMextraParam123=_EM_1035_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(0.0011583794085348047));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/expint/{n}/{x}
    */
    @Test @Timeout(60)
    public void test_11_getOnExpintReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/expint/1/0.7529202707157561")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(0.3385078109555525));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/expint/{n}/{x}
    */
    @Test @Timeout(60)
    public void test_12_getOnExpintReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_257_XYZ_")
                .get(baseUrlOfSut + "/api/expint/1295927283/0.8288704665539643?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(3.368569406643074E-10));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/gammq/{a}/{x}
    */
    @Test @Timeout(60)
    public void test_13_getOnGammqReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/gammq/0.04/1.813970809764855?EMextraParam123=_EM_861_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(0.002689595549712153));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/gammq/{a}/{x}
    */
    @Test @Timeout(60)
    public void test_14_getOnGammqReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/gammq/0.038461224518263615/0.5205586068847993?EMextraParam123=_EM_5_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(0.02101963963980702));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/gammq/{a}/{x}
    */
    @Test @Timeout(60)
    public void test_15_getOnGammqReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/gammq/0.5/0.0")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(1.0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/gammq/{a}/{x}
    */
    @Test @Timeout(60)
    public void test_16_getOnGammqReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/gammq/8.988465674311579E307/0.7458520689876")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(1.0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/remainder/{a}/{b}
    */
    @Test @Timeout(60)
    public void test_17_getOnRemaindReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_572_XYZ_")
                .get(baseUrlOfSut + "/api/remainder/953/-511?EMextraParam123=_EM_571_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(442.0))
                .body("'resultAsDouble'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/remainder/{a}/{b}
    */
    @Test @Timeout(60)
    public void test_18_getOnRemaindReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/remainder/-6480/3240")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(0.0))
                .body("'resultAsDouble'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/remainder/{a}/{b}
    */
    @Test @Timeout(60)
    public void test_19_getOnRemaindReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_18_XYZ_")
                .get(baseUrlOfSut + "/api/remainder/923/142?EMextraParam123=_EM_17_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(71.0))
                .body("'resultAsDouble'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/remainder/{a}/{b}
    */
    @Test @Timeout(60)
    public void test_20_getOnRemaindReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/remainder/-960/-6")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(0.0))
                .body("'resultAsDouble'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/remainder/{a}/{b}
    */
    @Test @Timeout(60)
    public void test_21_getOnRemaindReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/remainder/0/9")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(-1.0))
                .body("'resultAsDouble'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/remainder/{a}/{b}
    */
    @Test @Timeout(60)
    public void test_22_getOnRemaindReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/remainder/2/0")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(-1.0))
                .body("'resultAsDouble'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/bessj/{n}/{x}
    */
    @Test @Timeout(60)
    public void test_23_getOnBessjReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/bessj/6/-7.636068045994051")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(0.35296486170512276));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/bessj/{n}/{x}
    */
    @Test @Timeout(60)
    public void test_24_getOnBessjReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/bessj/-261953/0.6683187495252124")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/bessj/{n}/{x}
    */
    @Test @Timeout(60)
    public void test_25_getOnBessjReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/bessj/1230006739/0.847228158597957")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/expint/{n}/{x}
    */
    @Test @Timeout(60)
    public void test_26_getOnExpintReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/expint/1/0.0")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/expint/{n}/{x}
    */
    @Test @Timeout(60)
    public void test_27_getOnExpintReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/expint/-429163590/0.05193084889182731")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/expint/{n}/{x}
    */
    @Test @Timeout(60)
    public void test_28_getOnExpintReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/expint/962/-51.209799917495936?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/gammq/{a}/{x}
    */
    @Test @Timeout(60)
    public void test_29_getOnGammqReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/gammq/-0.7201445959534769/1.115714267131064?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/gammq/{a}/{x}
    */
    @Test @Timeout(60)
    public void test_30_getOnGammqReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/gammq/2.2471164185778946E307/2.2471164185778946E307")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/gammq/{a}/{x}
    */
    @Test @Timeout(60)
    public void test_31_getOnGammqReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/gammq/0.09215474831558501/-39939.9572829623?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/gammq/{a}/{x}
    */
    @Test @Timeout(60)
    public void test_32_getOnGammqReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_663_XYZ_")
                .get(baseUrlOfSut + "/api/gammq/0.0/0.13288400049346472")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/gammq/{a}/{x}
    */
    @Test @Timeout(60)
    public void test_33_getOnGammqReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/gammq/3.370674627866842E307/3.3004522397862826E307")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/remainder/{a}/{b}
    */
    @Test @Timeout(60)
    public void test_34_getOnRemaindReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/remainder/613/-1810714515")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/remainder/{a}/{b}
    */
    @Test @Timeout(60)
    public void test_35_getOnRemaindReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/remainder/1050812180/589")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/remainder/{a}/{b}
    */
    @Test @Timeout(60)
    public void test_36_getOnWithQueryParamReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/remainder/-1183290856/821?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/remainder/{a}/{b}
    */
    @Test @Timeout(60)
    public void test_37_getOnRemaindReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/remainder/274/1039332769")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/expint/{n}/{x}
    */
    @Test @Timeout(60)
    public void test_38_getOnExpintReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/expint/0/0.0?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/fisher/{m}/{n}/{x}
    */
    @Test @Timeout(60)
    public void test_39_getOnFisherReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_11_XYZ_")
                .get(baseUrlOfSut + "/api/fisher/543/674/0.41083012800280616?EMextraParam123=_EM_10_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(0.0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/fisher/{m}/{n}/{x}
    */
    @Test @Timeout(60)
    public void test_40_getOnFisherReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/fisher/829/469/0.296501550149596?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(2.506834758984037E-15));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/fisher/{m}/{n}/{x}
    */
    @Test @Timeout(60)
    public void test_41_getOnFisherReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_332_XYZ_")
                .get(baseUrlOfSut + "/api/fisher/496/415/0.4540638781152093?EMextraParam123=_EM_331_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(2.2139132186220464E-17));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/fisher/{m}/{n}/{x}
    */
    @Test @Timeout(60)
    public void test_42_getOnFisherReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/fisher/952/458/0.3359524025416939")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(4.0513456086436365E-14));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/fisher/{m}/{n}/{x}
    */
    @Test @Timeout(60)
    public void test_43_getOnFisherReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/fisher/-1047957/660/0.6932002126446?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(1.0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/fisher/{m}/{n}/{x}
    */
    @Test @Timeout(60)
    public void test_44_getOnFisherReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_1_XYZ_")
                .get(baseUrlOfSut + "/api/fisher/952/458/-1.5281916521801565E7?EMextraParam123=_EM_0_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(1.0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/triangle/{a}/{b}/{c}
    */
    @Test @Timeout(60)
    public void test_45_getOnTrianglReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_8_XYZ_")
                .get(baseUrlOfSut + "/api/triangle/985/754/517?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(1.0))
                .body("'resultAsDouble'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/triangle/{a}/{b}/{c}
    */
    @Test @Timeout(60)
    public void test_46_getOnTrianglReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/triangle/338/338/1073742987")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(0.0))
                .body("'resultAsDouble'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/triangle/{a}/{b}/{c}
    */
    @Test @Timeout(60)
    public void test_47_getOnTrianglReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/triangle/617/15/69")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(0.0))
                .body("'resultAsDouble'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/triangle/{a}/{b}/{c}
    */
    @Test @Timeout(60)
    public void test_48_getOnTrianglReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/triangle/617/15/-1048507")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(0.0))
                .body("'resultAsDouble'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/triangle/{a}/{b}/{c}
    */
    @Test @Timeout(60)
    public void test_49_getOnTrianglReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/triangle/-799689739/613/863?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(0.0))
                .body("'resultAsDouble'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/triangle/{a}/{b}/{c}
    */
    @Test @Timeout(60)
    public void test_50_getOnTrianglReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_51_XYZ_")
                .get(baseUrlOfSut + "/api/triangle/285/-1047719/-16776770")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(0.0))
                .body("'resultAsDouble'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/triangle/{a}/{b}/{c}
    */
    @Test @Timeout(60)
    public void test_51_getOnTrianglReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/triangle/26/26/48")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(2.0))
                .body("'resultAsDouble'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/triangle/{a}/{b}/{c}
    */
    @Test @Timeout(60)
    public void test_52_getOnTrianglReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/triangle/505/525/525")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(2.0))
                .body("'resultAsDouble'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/triangle/{a}/{b}/{c}
    */
    @Test @Timeout(60)
    public void test_53_getOnTrianglReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/triangle/275/797/540?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(1.0))
                .body("'resultAsDouble'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/triangle/{a}/{b}/{c}
    */
    @Test @Timeout(60)
    public void test_54_getOnTrianglReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/triangle/24/334/289?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(0.0))
                .body("'resultAsDouble'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/triangle/{a}/{b}/{c}
    */
    @Test @Timeout(60)
    public void test_55_getOnTrianglReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/triangle/939/976/939")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(2.0))
                .body("'resultAsDouble'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/fisher/{m}/{n}/{x}
    */
    @Test @Timeout(60)
    public void test_56_getOnFisherReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/fisher/829/-15915/0.296501550149596")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", containsString("NaN"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/triangle/{a}/{b}/{c}
    */
    @Test @Timeout(60)
    public void test_57_getOnTrianglReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/triangle/26/26/26")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(3.0))
                .body("'resultAsDouble'", nullValue());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/fisher/{m}/{n}/{x}
    */
    @Test @Timeout(60)
    public void test_58_getOnFisherReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1_XYZ_")
                .get(baseUrlOfSut + "/api/fisher/-261192/1049034/0.336")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/fisher/{m}/{n}/{x}
    */
    @Test @Timeout(60)
    public void test_59_getOnFisherReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_9_XYZ_")
                .get(baseUrlOfSut + "/api/fisher/1085/469/-544755.7215708072")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
