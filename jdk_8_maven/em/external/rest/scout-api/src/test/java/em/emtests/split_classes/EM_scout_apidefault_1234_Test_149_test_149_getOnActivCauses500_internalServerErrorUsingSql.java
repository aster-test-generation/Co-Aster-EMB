package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-04T17:09:30.705-04:00[America/New_York]
 * <br>
*  The generated test suite contains 311 tests
 * <br>
*  Covered targets: 2708
 * <br>
*  Used time: 1h 3m 13s
 * <br>
*  Needed budget for current results: 97%
 * <br>
*  
*/

public class EM_scout_apidefault_1234_Test_149_test_149_getOnActivCauses500_internalServerErrorUsingSql {
    

    
    private static final SutHandler controller = new em.external.se.devscout.scoutapi.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/scout-api-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("ACTIVITY","ACTIVITY_DERIVED","ACTIVITY_PROPERTIES","ACTIVITY_PROPERTIES_MEDIA_FILE","ACTIVITY_PROPERTIES_TAG","ACTIVITY_RATING","ACTIVITY_RELATION","MEDIA_FILE","MEDIA_FILE_KEYWORDS","SYSTEM_MESSAGE","TAG","TAG_DERIVED","USERS","USER_IDENTITY","activity","activity_properties","activity_properties_media_file","activity_properties_tag","activity_rating","activity_relation","media_file","system_message","tag","user_identity","users"));
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (400) POST:/api/v2/activities
    * 2 - (200) POST:/api/v1/media_files
    * 3 - (200) PUT:/api/v1/media_files/{id}
    * 4 - (200) GET:/api/v1/media_files/{id}
    * 5 - (500) POST:/api/v1/activities
    * 6 - (400) GET:/api/v1/activities
    * 7 - (200) GET:/api/v1/users
    * 8 - (200) GET:/api/v2/activities/{id}
    * Found 1 potential fault of type-code 100
    */
    @Test @Timeout(60)
    public void test_149_getOnActivCauses500_internalServerErrorUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 3249L)
                .d("AUTHOR", "NULL")
                .d("CAPTURE_DATE", "\"2002-04-02 09:11:07\"")
                .d("COPY_RIGHT", "\"i1fAIACAo\"")
                .d("MIME_TYPE", "\"ziM1TtXW1LOj\"")
                .d("NAME", "NULL")
                .d("URI", "\"i\"")
            .and().insertInto("MEDIA_FILE", 3251L)
                .d("URI", "\"\"")
            .and().insertInto("TAG", 3250L)
                .d("GRP", "\"H3jn1wM\"")
                .d("NAME", "\"AkeJXvcP9pjm8VG4\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("ACTIVITY", 3254L)
            .and().insertInto("MEDIA_FILE", 822L)
                .d("AUTHOR", "\"nR\"")
                .d("CAPTURE_DATE", "\"2100-01-11 15:17:12\"")
                .d("COPY_RIGHT", "\"_EM_13628_XYZ_\"")
                .d("MIME_TYPE", "\"seJq2hBPtv\"")
                .d("NAME", "\"3nM1tQgGCzd\"")
                .d("URI", "\"NuKLo3J2IuaWd\"")
            .and().insertInto("USERS", 823L)
                .d("AUTHORIZATION_LEVEL", "609")
                .d("DATE_CREATED", "\"1927-05-10 14:35:01\"")
                .d("EMAIL_ADDRESS", "\"L9FZL5_qd3jiJ\"")
                .d("NAME", "\"wCGd29n\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 699, " + 
                    " \"name\": \"wCGd29n\", " + 
                    " \"date_published\": \"1967-11-01T21:26:40.417+05:45\", " + 
                    " \"date_created\": \"1957-05-17T15:38:27.059+12:20\", " + 
                    " \"description_introduction\": \"EvDz\", " + 
                    " \"description_prepare\": \"ojgg9ynGTrADcg8\", " + 
                    " \"description_safety\": \"fkmMPT63aP3UAy\", " + 
                    " \"description_notes\": \"9\", " + 
                    " \"age_min\": -2147482955, " + 
                    " \"age_max\": -2147482955, " + 
                    " \"participants_min\": 759, " + 
                    " \"time_min\": 822, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 884, " + 
                    " \"group\": \"_ItPUP6jOrM\", " + 
                    " \"name\": \"xb1XxI\" " + 
                    " }, " + 
                    " { " + 
                    " \"group\": \"fLlysvmk6yCF\", " + 
                    " \"name\": \"_EM_13624_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 275, " + 
                    " \"mime_type\": \"_EM_13625_XYZ_\", " + 
                    " \"uri\": \"_EM_13626_XYZ_\", " + 
                    " \"name\": \"INTEGRATION TEST USER\", " + 
                    " \"copy_right\": \"ggc\" " + 
                    " }, " + 
                    " \"activities_count\": 301 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"uri\": \"_EM_13629_XYZ_\", " + 
                    " \"copy_right\": \"jx_6URYO\", " + 
                    " \"author\": \"5\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'uri'", containsString("_EM_13629_XYZ_"))
                .body("'copy_right'", containsString("jx_6URYO"))
                .body("'author'", containsString("5"));
        String 
        location_media_files__304 = "/api/v1/media_files" + "/" + res_1.extract().body().path("id").toString();
        
        given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 699, " + 
                    " \"uri\": \"nLHl0W8g\", " + 
                    " \"author\": \"cGdgzRqqnBP3r9N\" " + 
                    " } ")
                .put(resolveLocation(location_media_files__304, baseUrlOfSut + "/api/v1/media_files/699"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'uri'", containsString("nLHl0W8g"))
                .body("'copy_right'", containsString("jx_6URYO"))
                .body("'author'", containsString("5"));
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/media_files/699")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
        
        // Fault100. HTTP Status 500. se/devscout/scoutapi/dao/TagDao_59_find.
        given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 699, " + 
                    " \"name\": \"wCGd29n\", " + 
                    " \"date_published\": \"1967-11-01T21:26:40.759Z\", " + 
                    " \"description_material\": \"ECkMjL30Qexv\", " + 
                    " \"description_safety\": \"ECkMjL30Qexv\", " + 
                    " \"time_min\": -2147482955, " + 
                    " \"featured\": false, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 884, " + 
                    " \"group\": \"_ItPUP6jOrM\", " + 
                    " \"name\": \"INTEGRATION TEST ADMINISTRATOR\" " + 
                    " }, " + 
                    " { " + 
                    " \"group\": \"hrhNGVUr\", " + 
                    " \"name\": \"\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 275, " + 
                    " \"mime_type\": \"jE5\", " + 
                    " \"uri\": \"\", " + 
                    " \"name\": \"_EM_13634_XYZ_\", " + 
                    " \"copy_right\": \"_EM_13635_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 301 " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities?" + 
                    "ratings_count_min=&" + 
                    "random=4QpgZnWy&" + 
                    "time_1=EwPSMPlnsGoT&" + 
                    "favourites=&" + 
                    "ratings_average_min=ZLNA&" + 
                    "age_2=ZxUjlC1VygoW&" + 
                    "age_1=v3Q_2r5kGK9FNi&" + 
                    "name=LM8HcT2&" + 
                    "categories=sufATGufp&" + 
                    "id=ib4cHeY&" + 
                    "time_2=e8t3E9rLzqrBJQdY&" + 
                    "participants=1Dia")
                .then()
                .statusCode(500)// se/devscout/scoutapi/dao/TagDao_59_find
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities?" + 
                    "name=wCGd29n&" + 
                    "categories=ztsHfNMXQr&" + 
                    "age_1=S7uAXF&" + 
                    "age_2=_EM_13638_XYZ_&" + 
                    "participants=_EM_13639_XYZ_&" + 
                    "time_1=fPii6jFuUcDqoS&" + 
                    "time_2=g7Zpj3p1aZ&" + 
                    "id=699&" + 
                    "ratings_count_min=640&" + 
                    "ratings_average_min=-2.147482955E9&" + 
                    "random=459&" + 
                    "favourites=53")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/users")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'name'", containsString("wCGd29n"))
                .body("[0].'email_address'", containsString("L9FZL5_qd3jiJ"))
                .body("[0].'authorization_level'", numberMatches(609.0))
                .body("[0].'identities'.size()", equalTo(0))
                .body("[1].'name'", containsString("INTEGRATION TEST MODERATOR"))
                .body("[1].'email_address'", nullValue())
                .body("[1].'authorization_level'", numberMatches(10.0))
                .body("[1].'identities'.size()", equalTo(1))
                .body("[1].'identities'[0].'date_created'", numberMatches(9.811764E11))
                .body("[1].'identities'[0].'type'", containsString("API"))
                .body("[1].'identities'[0].'value'", containsString("moderator"))
                .body("[2].'name'", containsString("INTEGRATION TEST USER"))
                .body("[2].'email_address'", nullValue())
                .body("[2].'authorization_level'", numberMatches(0.0))
                .body("[2].'identities'.size()", equalTo(1))
                .body("[2].'identities'[0].'date_created'", numberMatches(9.811764E11))
                .body("[2].'identities'[0].'type'", containsString("API"))
                .body("[2].'identities'[0].'value'", containsString("user"))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities/777?attrs=F56FqvnGO6WYvrJi")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
    }
}
