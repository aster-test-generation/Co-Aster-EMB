package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-04T17:09:30.705-04:00[America/New_York]
 * <br>
*  The generated test suite contains 311 tests
 * <br>
*  Covered targets: 2708
 * <br>
*  Used time: 1h 3m 13s
 * <br>
*  Needed budget for current results: 97%
 * <br>
*  
*/

public class EM_scout_apidefault_1234_Test_54_test_54_getOnFavouritesReturnsEmptyListUsingSql {
    

    
    private static final SutHandler controller = new em.external.se.devscout.scoutapi.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/scout-api-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("ACTIVITY","ACTIVITY_DERIVED","ACTIVITY_PROPERTIES","ACTIVITY_PROPERTIES_MEDIA_FILE","ACTIVITY_PROPERTIES_TAG","ACTIVITY_RATING","ACTIVITY_RELATION","MEDIA_FILE","MEDIA_FILE_KEYWORDS","SYSTEM_MESSAGE","TAG","TAG_DERIVED","USERS","USER_IDENTITY","activity","activity_properties","activity_properties_media_file","activity_properties_tag","activity_rating","activity_relation","media_file","system_message","tag","user_identity","users"));
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (200) POST:/api/v2/tags
    * 2 - (200) PUT:/api/v2/tags/{id}
    * 3 - (200) GET:/api/v2/tags/{id}
    * 4 - (400) POST:/api/v1/media_files
    * 5 - (200) GET:/api/v1/media_files
    * 6 - (400) POST:/api/v2/activities
    * 7 - (400) POST:/api/v2/activities
    * 8 - (403) POST:/api/v1/users
    * 9 - (200) GET:/api/v1/activities/{id}
    * 10 - (204) POST:/api/v1/favourites
    * 11 - (200) GET:/api/v1/favourites
    */
    @Test @Timeout(60)
    public void test_54_getOnFavouritesReturnsEmptyListUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 1679L)
                .d("AUTHOR", "\"CRG_fKQFJF\"")
                .d("CAPTURE_DATE", "NULL")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "\"1HXTsGS6c_\"")
                .d("NAME", "\"k0G\"")
                .d("URI", "\"eTkb\"")
            .and().insertInto("ACTIVITY", 1680L)
            .and().insertInto("ACTIVITY", 1682L)
            .and().insertInto("ACTIVITY_RATING", 1681L)
                .r("ACTIVITY_ID", 1682L)
                .d("USER_ID", "2")
                .d("FAVOURITE", "true")
                .d("RATING", "148")
            .and().insertInto("ACTIVITY", 1742L)
            .and().insertInto("ACTIVITY", 1741L)
            .and().insertInto("ACTIVITY_PROPERTIES", 1740L)
                .d("AGE_MAX", "-722")
                .d("AGE_MIN", "-2147482900")
                .d("DATE_CREATED", "NULL")
                .d("DATE_PUBLISHED", "NULL")
                .d("DATE_UPDATED", "NULL")
                .d("DESCRIPTION_INTRODUCTION", "\"nASZ\"")
                .d("DESCRIPTION_MAIN", "NULL")
                .d("DESCRIPTION_MATERIAL", "\"Q5R7Q\"")
                .d("DESCRIPTION_NOTES", "NULL")
                .d("DESCRIPTION_PREPARE", "NULL")
                .d("DESCRIPTION_SAFETY", "\"3h_PkbySBg0O\"")
                .d("FEATURED", "NULL")
                .d("NAME", "\"u\"")
                .d("PARTICIPANTS_MAX", "572")
                .d("PARTICIPANTS_MIN", "NULL")
                .d("SOURCE", "\"4eUJAcN8m6\"")
                .d("TIME_MAX", "547")
                .d("TIME_MIN", "NULL")
                .r("ACTIVITY_ID", 1682L)
                .d("AUTHOR_ID", "NULL")
                .d("PUBLISHING_ACTIVITY_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 1750L)
                .d("URI", "\"LNowTJEHY\"")
            .and().insertInto("TAG", 1749L)
                .d("GRP", "\"CMxWoQUL\"")
                .d("NAME", "\"CiP1vXZJEhgyfpF\"")
            .and().insertInto("ACTIVITY", 1747L)
            .and().insertInto("ACTIVITY", 1746L)
            .and().insertInto("ACTIVITY_PROPERTIES", 1745L)
                .r("ACTIVITY_ID", 1682L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 1744L)
                .r("ACTIVITY_PROPERTIES_ID", 1745L)
                .r("TAG_ID", 1749L)
            .and().insertInto("MEDIA_FILE", 1756L)
                .d("URI", "\"yOGYoeN45cft0vI\"")
            .and().insertInto("USERS", 1755L)
                .d("AUTHORIZATION_LEVEL", "956")
                .d("NAME", "\"W8KHPnrCFgt0s6eE\"")
            .and().insertInto("ACTIVITY", 1754L)
            .and().insertInto("ACTIVITY", 1753L)
            .and().insertInto("ACTIVITY_PROPERTIES", 1752L)
                .r("ACTIVITY_ID", 1753L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 1751L)
                .r("ACTIVITY_PROPERTIES_ID", 1740L)
                .r("MEDIA_FILE_ID", 1750L)
                .d("FEATURED", "false")
            .and().insertInto("ACTIVITY", 1370L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"1q9LyEK1oV4Av\", " + 
                    " \"name\": \"9kro9rAu3O\", " + 
                    " \"activities_count\": 7749083004410544532 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'group'", containsString("1q9LyEK1oV4Av"))
                .body("'name'", containsString("9kro9rAu3O"))
                .body("'activities_count'", numberMatches(7.7490830044105441E18));
        String 
        location_tags__1276 = "/api/v2/tags" + "/" + res_0.extract().body().path("id").toString();
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"6wLmc6V5\", " + 
                    " \"name\": \"SEBfZAKSe9bvgirF\" " + 
                    " } ")
                .put(resolveLocation(location_tags__1276, baseUrlOfSut + "/api/v2/tags/623?EMextraParam123=42"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'group'", containsString("6wLmc6V5"))
                .body("'name'", containsString("SEBfZAKSe9bvgirF"))
                .body("'activities_count'", numberMatches(0.0));
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v2/tags/623")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 877, " + 
                    " \"mime_type\": \"_EM_18350_XYZ_\", " + 
                    " \"uri\": \"DOyy8rvVBWN\", " + 
                    " \"capture_date\": \"1918-03-25T03:57:29.537+00:09\", " + 
                    " \"copy_right\": \"kpt\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/media_files?uri=DOyy8rvVBWN")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"date_published\": \"1946-11-02T14:02:59Z\", " + 
                    " \"date_created\": \"2086-05-26T02:21:11.862Z\", " + 
                    " \"description_material\": \"_EM_19398_XYZ_\", " + 
                    " \"description_introduction\": \"p\", " + 
                    " \"description_safety\": \"_EM_19398_XYZ_\", " + 
                    " \"age_min\": -2147482931, " + 
                    " \"age_max\": -2147482931, " + 
                    " \"participants_max\": 3, " + 
                    " \"featured\": true, " + 
                    " \"source\": \"PooIN30DM2Dnj\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 1973715816192688054, " + 
                    " \"group\": \"Sj15jO]vqhkeoi\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 423, " + 
                    " \"uri\": \"_EM_18353_XYZ_\", " + 
                    " \"capture_date\": \"1932-09-12T03:28:02.890-02:11\", " + 
                    " \"copy_right\": \"hzDqb62KttulNH\", " + 
                    " \"author\": \"v2\" " + 
                    " } " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"uri\": \"_EM_18354_XYZ_\", " + 
                    " \"name\": \"WC\", " + 
                    " \"capture_date\": \"2076-00-13T10:54:37.687-07:00\", " + 
                    " \"author\": \"vlT7Xempnyx\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"SlNzNHUoRSDZ1\", " + 
                    " \"date_published\": \"1946-11-02T14:59:02.278Z\", " + 
                    " \"date_created\": \"2086-05-26T02:11:21.082+07:42\", " + 
                    " \"description_material\": \"_EM_19398_XYZ_\", " + 
                    " \"description_prepare\": \"Wn\", " + 
                    " \"description_main\": \"Mlz2c3ckqDp9i\", " + 
                    " \"description_safety\": \"_EM_18356_XYZ_\", " + 
                    " \"description_notes\": \"_EM_18357_XYZ_\", " + 
                    " \"time_min\": 509, " + 
                    " \"time_max\": 186, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 1973715816192688054, " + 
                    " \"group\": \"_EM_18358_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 423, " + 
                    " \"uri\": \"Qv9uXWS4\", " + 
                    " \"capture_date\": \"1932-09-12T03:28:02.890-02:11\", " + 
                    " \"copy_right\": \"ggc\", " + 
                    " \"author\": \"v2\" " + 
                    " } " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"name\": \"_EM_18360_XYZ_\", " + 
                    " \"email_address\": \"_EM_18361_XYZ_\", " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 872, " + 
                    " \"date_created\": \"1902-05-27T24:49:34Z\", " + 
                    " \"type\": \"GOOGLE\" " + 
                    " } " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .post(baseUrlOfSut + "/api/v1/users")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities/2")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'properties_revisions'.size()", equalTo(2))
                .body("'properties_revisions'[0].'name'", containsString("u"))
                .body("'properties_revisions'[0].'date_published'", nullValue())
                .body("'properties_revisions'[0].'date_created'", nullValue())
                .body("'properties_revisions'[0].'date_updated'", nullValue())
                .body("'properties_revisions'[0].'description_material'", containsString("Q5R7Q"))
                .body("'properties_revisions'[0].'description_introduction'", containsString("nASZ"))
                .body("'properties_revisions'[0].'description_prepare'", nullValue())
                .body("'properties_revisions'[0].'description_main'", nullValue())
                .body("'properties_revisions'[0].'description_safety'", containsString("3h_PkbySBg0O"))
                .body("'properties_revisions'[0].'description_notes'", nullValue())
                .body("'properties_revisions'[0].'age_min'", numberMatches(-2.1474829E9))
                .body("'properties_revisions'[0].'age_max'", numberMatches(-722.0))
                .body("'properties_revisions'[0].'participants_min'", nullValue())
                .body("'properties_revisions'[0].'participants_max'", numberMatches(572.0))
                .body("'properties_revisions'[0].'time_min'", nullValue())
                .body("'properties_revisions'[0].'time_max'", numberMatches(547.0))
                .body("'properties_revisions'[0].'featured'", nullValue())
                .body("'properties_revisions'[0].'source'", containsString("4eUJAcN8m6"))
                .body("'properties_revisions'[0].'tags'.size()", equalTo(0))
                .body("'properties_revisions'[0].'media_files'.size()", equalTo(1))
                .body("'properties_revisions'[0].'media_files'[0].'mime_type'", nullValue())
                .body("'properties_revisions'[0].'media_files'[0].'uri'", containsString("LNowTJEHY"))
                .body("'properties_revisions'[0].'media_files'[0].'name'", nullValue())
                .body("'properties_revisions'[0].'media_files'[0].'capture_date'", nullValue())
                .body("'properties_revisions'[0].'media_files'[0].'copy_right'", nullValue())
                .body("'properties_revisions'[0].'media_files'[0].'author'", nullValue())
                .body("'properties_revisions'[0].'author'", nullValue())
                .body("'properties_revisions'[1].'name'", nullValue())
                .body("'properties_revisions'[1].'date_published'", nullValue())
                .body("'properties_revisions'[1].'date_created'", nullValue())
                .body("'properties_revisions'[1].'date_updated'", nullValue())
                .body("'properties_revisions'[1].'description_material'", nullValue())
                .body("'properties_revisions'[1].'description_introduction'", nullValue())
                .body("'properties_revisions'[1].'description_prepare'", nullValue())
                .body("'properties_revisions'[1].'description_main'", nullValue())
                .body("'properties_revisions'[1].'description_safety'", nullValue())
                .body("'properties_revisions'[1].'description_notes'", nullValue())
                .body("'properties_revisions'[1].'age_min'", nullValue())
                .body("'properties_revisions'[1].'age_max'", nullValue())
                .body("'properties_revisions'[1].'participants_min'", nullValue())
                .body("'properties_revisions'[1].'participants_max'", nullValue())
                .body("'properties_revisions'[1].'time_min'", nullValue())
                .body("'properties_revisions'[1].'time_max'", nullValue())
                .body("'properties_revisions'[1].'featured'", nullValue())
                .body("'properties_revisions'[1].'source'", nullValue())
                .body("'properties_revisions'[1].'tags'.size()", equalTo(1))
                .body("'properties_revisions'[1].'tags'[0].'group'", containsString("CMxWoQUL"))
                .body("'properties_revisions'[1].'tags'[0].'name'", containsString("CiP1vXZJEhgyfpF"))
                .body("'properties_revisions'[1].'tags'[0].'media_file'", nullValue())
                .body("'properties_revisions'[1].'tags'[0].'activities_count'", numberMatches(0.0))
                .body("'properties_revisions'[1].'media_files'.size()", equalTo(0))
                .body("'properties_revisions'[1].'author'", nullValue())
                .body("'ratings_count'", numberMatches(0.0))
                .body("'ratings_sum'", numberMatches(0.0))
                .body("'favourites_count'", numberMatches(0.0))
                .body("'ratings_average'", numberMatches(-1.0))
                .body("'properties'", nullValue())
                .body("'related'.size()", equalTo(0));
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": [ " + 
                    " 625, " + 
                    " 647, " + 
                    " 745 " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/favourites")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/favourites")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
}
