package em.emtests.single_class;

/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-17T15:37:04.514981-04:00[America/New_York]
 * <br>
*  The generated test suite contains 65 tests
 * <br>
*  Covered targets: 1013
 * <br>
*  Used time: 1h 1m 30s
 * <br>
*  Needed budget for current results: 92%
 * <br>
*  
*/
public class EM_marketdefault_1234_Test {

    
    private static final SutHandler controller = new em.external.market.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/market-sut.jar");
    private static String baseUrlOfSut;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CART","CONTACTS","CUSTOMER_ORDER","PRODUCT","USER_ROLE","cart","cart_item"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (500) GET:/customer
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_0_getOnCustomerShowsFaults_100_101() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CART", 640L)
                .d("TOTAL_ITEMS", "866")
                .d("PRODUCTS_COST", "967")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CUSTOMER_ORDER", 641L)
                .d("ID", "523")
                .d("USER_ACCOUNT_ID", "898")
                .d("DATE_CREATED", "\"1947-07-14\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "33")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "400")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. market/dto/assembler/UserAccountDtoAssembler_16_toModel.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/customer'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "NXfPsba9")
                .get(baseUrlOfSut + "/customer?" + 
                    "name=EIgYQSNZRGOZcqK&" + 
                    "included=_EM_3247_XYZ_")
                .then()
                .statusCode(500)// market/dto/assembler/UserAccountDtoAssembler_16_toModel
                .assertThat()
                .contentType("application/json")
                .body("'message'", nullValue())
                .body("'description'", containsString("uri=/customer"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/products
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_1_getOnProductsShowsFaults_100_101() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CART", 790L)
                .d("TOTAL_ITEMS", "NULL")
                .d("PRODUCTS_COST", "131390")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CONTACTS", 791L)
                .d("PHONE", "\"7NNvFB33fBL2jDkI\"")
                .d("ADDRESS", "NULL")
                .d("CITY_REGION", "\"GGgTnpO\"")
            .and().insertInto("PRODUCT", 511L)
                .d("NAME", "NULL")
                .d("DISTILLERY_ID", "605")
                .d("AGE", "NULL")
                .d("ALCOHOL", "0.7238900930784884")
                .d("VOLUME", "354")
                .d("PRICE", "0.12862279151544354")
                .d("DESCRIPTION", "\"_EM_2539_XYZ_\"")
                .d("AVAILABLE", "true")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. market/service/impl/ProductServiceImpl_35_findAll.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/products'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products")
                .then()
                .statusCode(500)// market/service/impl/ProductServiceImpl_35_findAll
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Unable to find market.domain.Distillery with id 605; nested exception is javax.persistence.EntityNotFoundException: Unable to find market.domain.Distillery with id 605"))
                .body("'description'", containsString("uri=/products"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/register
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_2_postOnRegisterShowsFaults_100_101() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CART", 790L)
                .d("TOTAL_ITEMS", "NULL")
                .d("PRODUCTS_COST", "131390")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CONTACTS", 791L)
                .d("PHONE", "\"7NNvFB33fBL2jDkI\"")
                .d("ADDRESS", "NULL")
                .d("CITY_REGION", "\"GGgTnpO\"")
            .and().insertInto("PRODUCT", 511L)
                .d("NAME", "NULL")
                .d("DISTILLERY_ID", "605")
                .d("AGE", "NULL")
                .d("ALCOHOL", "0.7238900930784884")
                .d("VOLUME", "354")
                .d("PRICE", "0.12862279151544354")
                .d("DESCRIPTION", "\"_EM_2539_XYZ_\"")
                .d("AVAILABLE", "true")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. market/rest/exception/RestErrorResponse_50_getFieldErrors.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/register'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [], " + 
                    " \"address\": \"gzM7lnVra8Nge1T\", " + 
                    " \"email\": \"Q9\", " + 
                    " \"password\": \"nO4\", " + 
                    " \"phone\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/register")
                .then()
                .statusCode(500)// market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.UserDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/register"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/customer
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_3_getOnCustomerWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 639L)
                .d("NAME", "\"EIgYQSNZRGOZcqK\"")
                .d("DISTILLERY_ID", "NULL")
                .d("AGE", "751")
                .d("ALCOHOL", "0.3317912611816942")
                .d("VOLUME", "310")
                .d("PRICE", "0.6032087397300179")
                .d("DESCRIPTION", "NULL")
                .d("AVAILABLE", "true")
            .and().insertInto("CART", 640L)
                .d("TOTAL_ITEMS", "866")
                .d("PRODUCTS_COST", "967")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CUSTOMER_ORDER", 641L)
                .d("ID", "523")
                .d("USER_ACCOUNT_ID", "898")
                .d("DATE_CREATED", "\"1947-07-14\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "33")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "400")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.pattern. [Path '/name'] ECMA 262 regex "^[\pL '-]+$" does not match input string "Ivan Petrov"
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "NXfPsba9")
                .get(baseUrlOfSut + "/customer?" + 
                    "name=EIgYQSNZRGOZcqK&" + 
                    "included=_EM_3247_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'email'", containsString("ivan.petrov@yandex.ru"))
                .body("'password'", containsString("hidden"))
                .body("'name'", containsString("Ivan Petrov"))
                .body("'phone'", containsString("+7 123 456 78 90"))
                .body("'address'", containsString("Riesstrasse 18"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/products
    */
    @Test @Timeout(60)
    public void test_4_getOnProductsReturns11Elements() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products?included=CPqYCZ0Dch")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(11))
                .body("[0].'productId'", numberMatches(1.0))
                .body("[0].'distillery'", containsString("Ardbeg"))
                .body("[0].'name'", containsString("Ten"))
                .body("[0].'price'", numberMatches(4420.0))
                .body("[0].'age'", numberMatches(10.0))
                .body("[0].'volume'", numberMatches(700.0))
                .body("[0].'alcohol'", numberMatches(46.0))
                .body("[0].'description'", containsString("Ten Years Old is the basis of the Ardbeg range. After 10 years of maturation in ex-bourbon casks, the whiskey bottled at 46% ABV without cold filtering. The characteristic peat, although clearly present but in perfect balance with the natural sweetness and not predominant in the taste."))
                .body("[0].'available'", equalTo(false))
                .body("[0].'links'.size()", equalTo(1))
                .body("[0].'links'[0].'rel'", containsString("self"))
                .body("[1].'productId'", numberMatches(2.0))
                .body("[1].'distillery'", containsString("Ardbeg"))
                .body("[1].'name'", containsString("Uigeadail"))
                .body("[1].'price'", numberMatches(7020.0))
                .body("[1].'age'", numberMatches(0.0))
                .body("[1].'volume'", numberMatches(700.0))
                .body("[1].'alcohol'", numberMatches(54.2))
                .body("[1].'description'", containsString("Ardbeg Uigedael is named after Loch Uigedael, the lake in the grounds of the distillery Ardbeg which are the water is an important factor in the distilling process. The Uigedael a vatted malt, bottled at 54.2% ABV without cold filtering. Ardbeg Uigedael has no age indication for the expression consists of various malts of different ages. Malts are used partly matured in ex-bourbon and partly on ex-sherry casks."))
                .body("[1].'available'", equalTo(true))
                .body("[1].'links'.size()", equalTo(1))
                .body("[1].'links'[0].'rel'", containsString("self"))
                .body("[2].'productId'", numberMatches(3.0))
                .body("[2].'distillery'", containsString("Balvenie"))
                .body("[2].'name'", containsString("12 y.o. Doublewood"))
                .body("[2].'price'", numberMatches(5403.0))
                .body("[2].'age'", numberMatches(12.0))
                .body("[2].'volume'", numberMatches(700.0))
                .body("[2].'alcohol'", numberMatches(40.0))
                .body("[2].'description'", containsString("Has clear influences from both bourbon and sherry wood. This malt has only 12 years aged in bourbon casks and then 3 months in young Oloroso casks. The peppery character from the bourbon barrels, penetrates, as it were by the rich and full aroma of Oloroso casks it. The Balvenie Double Wood is therefore a very complex malt."))
                .body("[2].'available'", equalTo(true))
                .body("[2].'links'.size()", equalTo(1))
                .body("[2].'links'[0].'rel'", containsString("self"))
                ; // Skipping assertions on the remaining 8 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/customer
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_5_getOnCustomerReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.pattern. [Path '/name'] ECMA 262 regex "^[\pL '-]+$" does not match input string "Ivan Petrov"
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "pmAVrgV")
                .get(baseUrlOfSut + "/customer")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'email'", containsString("ivan.petrov@yandex.ru"))
                .body("'password'", containsString("hidden"))
                .body("'name'", containsString("Ivan Petrov"))
                .body("'phone'", containsString("+7 123 456 78 90"))
                .body("'address'", containsString("Riesstrasse 18"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/products
    */
    @Test @Timeout(60)
    public void test_6_getOnProductsReturns11Elements() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/products?EMextraParam123=_EM_15_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(11))
                .body("[0].'productId'", numberMatches(1.0))
                .body("[0].'distillery'", containsString("Ardbeg"))
                .body("[0].'name'", containsString("Ten"))
                .body("[0].'price'", numberMatches(4420.0))
                .body("[0].'age'", numberMatches(10.0))
                .body("[0].'volume'", numberMatches(700.0))
                .body("[0].'alcohol'", numberMatches(46.0))
                .body("[0].'description'", containsString("Ten Years Old is the basis of the Ardbeg range. After 10 years of maturation in ex-bourbon casks, the whiskey bottled at 46% ABV without cold filtering. The characteristic peat, although clearly present but in perfect balance with the natural sweetness and not predominant in the taste."))
                .body("[0].'available'", equalTo(false))
                .body("[0].'links'.size()", equalTo(1))
                .body("[0].'links'[0].'rel'", containsString("self"))
                .body("[1].'productId'", numberMatches(2.0))
                .body("[1].'distillery'", containsString("Ardbeg"))
                .body("[1].'name'", containsString("Uigeadail"))
                .body("[1].'price'", numberMatches(7020.0))
                .body("[1].'age'", numberMatches(0.0))
                .body("[1].'volume'", numberMatches(700.0))
                .body("[1].'alcohol'", numberMatches(54.2))
                .body("[1].'description'", containsString("Ardbeg Uigedael is named after Loch Uigedael, the lake in the grounds of the distillery Ardbeg which are the water is an important factor in the distilling process. The Uigedael a vatted malt, bottled at 54.2% ABV without cold filtering. Ardbeg Uigedael has no age indication for the expression consists of various malts of different ages. Malts are used partly matured in ex-bourbon and partly on ex-sherry casks."))
                .body("[1].'available'", equalTo(true))
                .body("[1].'links'.size()", equalTo(1))
                .body("[1].'links'[0].'rel'", containsString("self"))
                .body("[2].'productId'", numberMatches(3.0))
                .body("[2].'distillery'", containsString("Balvenie"))
                .body("[2].'name'", containsString("12 y.o. Doublewood"))
                .body("[2].'price'", numberMatches(5403.0))
                .body("[2].'age'", numberMatches(12.0))
                .body("[2].'volume'", numberMatches(700.0))
                .body("[2].'alcohol'", numberMatches(40.0))
                .body("[2].'description'", containsString("Has clear influences from both bourbon and sherry wood. This malt has only 12 years aged in bourbon casks and then 3 months in young Oloroso casks. The peppery character from the bourbon barrels, penetrates, as it were by the rich and full aroma of Oloroso casks it. The Balvenie Double Wood is therefore a very complex malt."))
                .body("[2].'available'", equalTo(true))
                .body("[2].'links'.size()", equalTo(1))
                .body("[2].'links'[0].'rel'", containsString("self"))
                ; // Skipping assertions on the remaining 8 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/products
    */
    @Test @Timeout(60)
    public void test_7_getOnProductsReturns11Elements() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CART", 724L)
                .d("TOTAL_ITEMS", "NULL")
                .d("PRODUCTS_COST", "83")
                .d("DELIVERY_INCLUDED", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products?included=_EM_3415_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(11))
                .body("[0].'productId'", numberMatches(1.0))
                .body("[0].'distillery'", containsString("Ardbeg"))
                .body("[0].'name'", containsString("Ten"))
                .body("[0].'price'", numberMatches(4420.0))
                .body("[0].'age'", numberMatches(10.0))
                .body("[0].'volume'", numberMatches(700.0))
                .body("[0].'alcohol'", numberMatches(46.0))
                .body("[0].'description'", containsString("Ten Years Old is the basis of the Ardbeg range. After 10 years of maturation in ex-bourbon casks, the whiskey bottled at 46% ABV without cold filtering. The characteristic peat, although clearly present but in perfect balance with the natural sweetness and not predominant in the taste."))
                .body("[0].'available'", equalTo(false))
                .body("[0].'links'.size()", equalTo(1))
                .body("[0].'links'[0].'rel'", containsString("self"))
                .body("[1].'productId'", numberMatches(2.0))
                .body("[1].'distillery'", containsString("Ardbeg"))
                .body("[1].'name'", containsString("Uigeadail"))
                .body("[1].'price'", numberMatches(7020.0))
                .body("[1].'age'", numberMatches(0.0))
                .body("[1].'volume'", numberMatches(700.0))
                .body("[1].'alcohol'", numberMatches(54.2))
                .body("[1].'description'", containsString("Ardbeg Uigedael is named after Loch Uigedael, the lake in the grounds of the distillery Ardbeg which are the water is an important factor in the distilling process. The Uigedael a vatted malt, bottled at 54.2% ABV without cold filtering. Ardbeg Uigedael has no age indication for the expression consists of various malts of different ages. Malts are used partly matured in ex-bourbon and partly on ex-sherry casks."))
                .body("[1].'available'", equalTo(true))
                .body("[1].'links'.size()", equalTo(1))
                .body("[1].'links'[0].'rel'", containsString("self"))
                .body("[2].'productId'", numberMatches(3.0))
                .body("[2].'distillery'", containsString("Balvenie"))
                .body("[2].'name'", containsString("12 y.o. Doublewood"))
                .body("[2].'price'", numberMatches(5403.0))
                .body("[2].'age'", numberMatches(12.0))
                .body("[2].'volume'", numberMatches(700.0))
                .body("[2].'alcohol'", numberMatches(40.0))
                .body("[2].'description'", containsString("Has clear influences from both bourbon and sherry wood. This malt has only 12 years aged in bourbon casks and then 3 months in young Oloroso casks. The peppery character from the bourbon barrels, penetrates, as it were by the rich and full aroma of Oloroso casks it. The Balvenie Double Wood is therefore a very complex malt."))
                .body("[2].'available'", equalTo(true))
                .body("[2].'links'.size()", equalTo(1))
                .body("[2].'links'[0].'rel'", containsString("self"))
                ; // Skipping assertions on the remaining 8 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/products
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_8_getOnProductsReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 929L)
                .d("NAME", "\"\"")
                .d("DISTILLERY_ID", "NULL")
                .d("AGE", "385")
                .d("ALCOHOL", "0.28792669736258747")
                .d("VOLUME", "736")
                .d("PRICE", "0.6647099177173266")
                .d("DESCRIPTION", "NULL")
                .d("AVAILABLE", "false")
            .and().insertInto("CART", 930L)
                .d("TOTAL_ITEMS", "583")
                .d("PRODUCTS_COST", "875")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CUSTOMER_ORDER", 931L)
                .d("ID", "622")
                .d("USER_ACCOUNT_ID", "NULL")
                .d("DATE_CREATED", "NULL")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "864")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "400")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.minimum. [Path '/11/alcohol'] Numeric instance is lower than the required minimum (minimum: 1, found: 0.2879267)
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/11/description'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("Authorization", "Basic dXNlcjJAeWFuZGV4LnJ1Onl1cmlkb2xnb3J1a2k=") // user2
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products?included=GAlj3rE1hpSV")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(12))
                .body("[0].'productId'", numberMatches(1.0))
                .body("[0].'distillery'", containsString("Ardbeg"))
                .body("[0].'name'", containsString("Ten"))
                .body("[0].'price'", numberMatches(4420.0))
                .body("[0].'age'", numberMatches(10.0))
                .body("[0].'volume'", numberMatches(700.0))
                .body("[0].'alcohol'", numberMatches(46.0))
                .body("[0].'description'", containsString("Ten Years Old is the basis of the Ardbeg range. After 10 years of maturation in ex-bourbon casks, the whiskey bottled at 46% ABV without cold filtering. The characteristic peat, although clearly present but in perfect balance with the natural sweetness and not predominant in the taste."))
                .body("[0].'available'", equalTo(false))
                .body("[0].'links'.size()", equalTo(1))
                .body("[0].'links'[0].'rel'", containsString("self"))
                .body("[1].'productId'", numberMatches(2.0))
                .body("[1].'distillery'", containsString("Ardbeg"))
                .body("[1].'name'", containsString("Uigeadail"))
                .body("[1].'price'", numberMatches(7020.0))
                .body("[1].'age'", numberMatches(0.0))
                .body("[1].'volume'", numberMatches(700.0))
                .body("[1].'alcohol'", numberMatches(54.2))
                .body("[1].'description'", containsString("Ardbeg Uigedael is named after Loch Uigedael, the lake in the grounds of the distillery Ardbeg which are the water is an important factor in the distilling process. The Uigedael a vatted malt, bottled at 54.2% ABV without cold filtering. Ardbeg Uigedael has no age indication for the expression consists of various malts of different ages. Malts are used partly matured in ex-bourbon and partly on ex-sherry casks."))
                .body("[1].'available'", equalTo(true))
                .body("[1].'links'.size()", equalTo(1))
                .body("[1].'links'[0].'rel'", containsString("self"))
                .body("[2].'productId'", numberMatches(3.0))
                .body("[2].'distillery'", containsString("Balvenie"))
                .body("[2].'name'", containsString("12 y.o. Doublewood"))
                .body("[2].'price'", numberMatches(5403.0))
                .body("[2].'age'", numberMatches(12.0))
                .body("[2].'volume'", numberMatches(700.0))
                .body("[2].'alcohol'", numberMatches(40.0))
                .body("[2].'description'", containsString("Has clear influences from both bourbon and sherry wood. This malt has only 12 years aged in bourbon casks and then 3 months in young Oloroso casks. The peppery character from the bourbon barrels, penetrates, as it were by the rich and full aroma of Oloroso casks it. The Balvenie Double Wood is therefore a very complex malt."))
                .body("[2].'available'", equalTo(true))
                .body("[2].'links'.size()", equalTo(1))
                .body("[2].'links'[0].'rel'", containsString("self"))
                ; // Skipping assertions on the remaining 9 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/products
    */
    @Test @Timeout(60)
    public void test_9_getOnProductsReturns11Elements() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CART", 756L)
                .d("TOTAL_ITEMS", "1554154701")
                .d("PRODUCTS_COST", "281")
                .d("DELIVERY_INCLUDED", "true")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(11))
                .body("[0].'productId'", numberMatches(1.0))
                .body("[0].'distillery'", containsString("Ardbeg"))
                .body("[0].'name'", containsString("Ten"))
                .body("[0].'price'", numberMatches(4420.0))
                .body("[0].'age'", numberMatches(10.0))
                .body("[0].'volume'", numberMatches(700.0))
                .body("[0].'alcohol'", numberMatches(46.0))
                .body("[0].'description'", containsString("Ten Years Old is the basis of the Ardbeg range. After 10 years of maturation in ex-bourbon casks, the whiskey bottled at 46% ABV without cold filtering. The characteristic peat, although clearly present but in perfect balance with the natural sweetness and not predominant in the taste."))
                .body("[0].'available'", equalTo(false))
                .body("[0].'links'.size()", equalTo(1))
                .body("[0].'links'[0].'rel'", containsString("self"))
                .body("[1].'productId'", numberMatches(2.0))
                .body("[1].'distillery'", containsString("Ardbeg"))
                .body("[1].'name'", containsString("Uigeadail"))
                .body("[1].'price'", numberMatches(7020.0))
                .body("[1].'age'", numberMatches(0.0))
                .body("[1].'volume'", numberMatches(700.0))
                .body("[1].'alcohol'", numberMatches(54.2))
                .body("[1].'description'", containsString("Ardbeg Uigedael is named after Loch Uigedael, the lake in the grounds of the distillery Ardbeg which are the water is an important factor in the distilling process. The Uigedael a vatted malt, bottled at 54.2% ABV without cold filtering. Ardbeg Uigedael has no age indication for the expression consists of various malts of different ages. Malts are used partly matured in ex-bourbon and partly on ex-sherry casks."))
                .body("[1].'available'", equalTo(true))
                .body("[1].'links'.size()", equalTo(1))
                .body("[1].'links'[0].'rel'", containsString("self"))
                .body("[2].'productId'", numberMatches(3.0))
                .body("[2].'distillery'", containsString("Balvenie"))
                .body("[2].'name'", containsString("12 y.o. Doublewood"))
                .body("[2].'price'", numberMatches(5403.0))
                .body("[2].'age'", numberMatches(12.0))
                .body("[2].'volume'", numberMatches(700.0))
                .body("[2].'alcohol'", numberMatches(40.0))
                .body("[2].'description'", containsString("Has clear influences from both bourbon and sherry wood. This malt has only 12 years aged in bourbon casks and then 3 months in young Oloroso casks. The peppery character from the bourbon barrels, penetrates, as it were by the rich and full aroma of Oloroso casks it. The Balvenie Double Wood is therefore a very complex malt."))
                .body("[2].'available'", equalTo(true))
                .body("[2].'links'.size()", equalTo(1))
                .body("[2].'links'[0].'rel'", containsString("self"))
                ; // Skipping assertions on the remaining 8 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/customer
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_10_getOnCustomerReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CART", 790L)
                .d("TOTAL_ITEMS", "NULL")
                .d("PRODUCTS_COST", "131390")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CONTACTS", 791L)
                .d("PHONE", "\"7NNvFB33fBL2jDkI\"")
                .d("ADDRESS", "NULL")
                .d("CITY_REGION", "\"GGgTnpO\"")
            .and().insertInto("PRODUCT", 511L)
                .d("NAME", "NULL")
                .d("DISTILLERY_ID", "605")
                .d("AGE", "NULL")
                .d("ALCOHOL", "0.7238900930784884")
                .d("VOLUME", "354")
                .d("PRICE", "0.12862279151544354")
                .d("DESCRIPTION", "\"_EM_2539_XYZ_\"")
                .d("AVAILABLE", "true")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/address'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.pattern. [Path '/email'] ECMA 262 regex "^[\w-]+(\.[\w-]+)*@([\w-]+\.)+[a-zA-Z]+$" does not match input string "admin"
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer?name=kwH0b8tO")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'email'", containsString("admin"))
                .body("'password'", containsString("hidden"))
                .body("'name'", containsString("Admin"))
                .body("'phone'", containsString("7NNvFB33fBL2jDkI"))
                .body("'address'", nullValue());
    }
    
    
    /**
    * Calls:
    * (401) GET:/customer
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_11_getOnCustomerReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/customer"));
    }
    
    
    /**
    * Calls:
    * (406) POST:/register
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_12_postOnRegisterReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CART", 790L)
                .d("TOTAL_ITEMS", "NULL")
                .d("PRODUCTS_COST", "131390")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CONTACTS", 791L)
                .d("PHONE", "\"7NNvFB33fBL2jDkI\"")
                .d("ADDRESS", "NULL")
                .d("CITY_REGION", "\"GGgTnpO\"")
            .and().insertInto("PRODUCT", 511L)
                .d("NAME", "NULL")
                .d("DISTILLERY_ID", "605")
                .d("AGE", "NULL")
                .d("ALCOHOL", "0.7238900930784884")
                .d("VOLUME", "354")
                .d("PRICE", "0.12862279151544354")
                .d("DESCRIPTION", "\"_EM_2539_XYZ_\"")
                .d("AVAILABLE", "true")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 406 not defined for path '/register'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"gzM7lnVra8Nge1T\", " + 
                    " \"name\": \"ppp\", " + 
                    " \"password\": \"nO4\" " + 
                    " } ")
                .post(baseUrlOfSut + "/register")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/register"))
                .body("'entityName'", containsString("userDTO"))
                .body("'fieldErrors'.size()", equalTo(3))
                .body("'fieldErrors'[0].'field'", containsString("phone"))
                .body("'fieldErrors'[0].'message'", containsString("The value shall not be empty"))
                .body("'fieldErrors'[1].'field'", containsString("password"))
                .body("'fieldErrors'[1].'message'", containsString("Length shall be between 6 and 50 characters"))
                .body("'fieldErrors'[2].'field'", containsString("email"))
                .body("'fieldErrors'[2].'message'", containsString("The value shall not be empty"));
    }
    
    
    /**
    * Calls:
    * (406) POST:/register
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_13_postOnRegisterReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USER_ROLE", 1221L)
                .d("USER_ID", "NULL")
                .d("ROLE_ID", "417")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 406 not defined for path '/register'.
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"0dvbIV2UOfkq254\", " + 
                    " \"email\": \"YCHlmKk6luT\", " + 
                    " \"name\": \"- \" " + 
                    " } ")
                .post(baseUrlOfSut + "/register?EMextraParam123=42")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/register"))
                .body("'entityName'", containsString("userDTO"))
                .body("'fieldErrors'.size()", equalTo(2))
                .body("'fieldErrors'[0].'field'", containsString("email"))
                .body("'fieldErrors'[0].'message'", containsString("The value shall be in the format of an email address"))
                .body("'fieldErrors'[1].'field'", containsString("phone"))
                .body("'fieldErrors'[1].'message'", containsString("The value shall not be empty"));
    }
    
    
    /**
    * Calls:
    * (406) POST:/register
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_14_postOnRegisterReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USER_ROLE", 1287L)
                .d("USER_ID", "-4436167377359276032")
                .d("ROLE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 406 not defined for path '/register'.
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"pfIZfRqdlVa\", " + 
                    " \"password\": \"f\", " + 
                    " \"phone\": \"_postfix\" " + 
                    " } ")
                .post(baseUrlOfSut + "/register")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/register"))
                .body("'entityName'", containsString("userDTO"))
                .body("'fieldErrors'.size()", equalTo(4))
                .body("'fieldErrors'[0].'field'", containsString("password"))
                .body("'fieldErrors'[0].'message'", containsString("Length shall be between 6 and 50 characters"))
                .body("'fieldErrors'[1].'field'", containsString("email"))
                .body("'fieldErrors'[1].'message'", containsString("The value shall not be empty"))
                .body("'fieldErrors'[2].'field'", containsString("name"))
                .body("'fieldErrors'[2].'message'", containsString("The value shall not be empty"))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (406) POST:/register
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_15_postOnRegisterReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTACTS", 1023L)
                .d("PHONE", "NULL")
                .d("ADDRESS", "\"uIwGUjVWe\"")
                .d("CITY_REGION", "\"WZv1z5h\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 406 not defined for path '/register'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"fpS4\", " + 
                    " \"password\": \"N\" " + 
                    " } ")
                .post(baseUrlOfSut + "/register?included=gd")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/register"))
                .body("'entityName'", containsString("userDTO"))
                .body("'fieldErrors'.size()", equalTo(4))
                .body("'fieldErrors'[0].'field'", containsString("password"))
                .body("'fieldErrors'[0].'message'", containsString("Length shall be between 6 and 50 characters"))
                .body("'fieldErrors'[1].'field'", containsString("email"))
                .body("'fieldErrors'[1].'message'", containsString("The value shall not be empty"))
                .body("'fieldErrors'[2].'field'", containsString("name"))
                .body("'fieldErrors'[2].'message'", containsString("The value shall not be empty"))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (500) GET:/customer/contacts
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_16_getOnContactsShowsFaults_100_101() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTACTS", 1290L)
                .d("PHONE", "\"NqhJNCsYbn2Nz\"")
                .d("ADDRESS", "\"sbUFnvk1AwYC\"")
                .d("CITY_REGION", "\"H\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. market/dto/assembler/ContactsDtoAssembler_12_toModel.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/customer/contacts'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/customer/contacts?" + 
                    "name=uzqFuWhCHTt68T&" + 
                    "EMextraParam123=42&" + 
                    "included=5GkxfJSBw66l2wl")
                .then()
                .statusCode(500)// market/dto/assembler/ContactsDtoAssembler_12_toModel
                .assertThat()
                .contentType("application/json")
                .body("'message'", nullValue())
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/customer/contacts
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_17_getOnCustomerContactsShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. market/dto/assembler/ContactsDtoAssembler_12_toModel.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/customer/contacts'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/contacts")
                .then()
                .statusCode(500)// market/dto/assembler/ContactsDtoAssembler_12_toModel
                .assertThat()
                .contentType("application/json")
                .body("'message'", nullValue())
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/customer/contacts
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_18_getOnContactsShowsFaults_100_101() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USER_ROLE", 1221L)
                .d("USER_ID", "NULL")
                .d("ROLE_ID", "417")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. market/dto/assembler/ContactsDtoAssembler_12_toModel.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/customer/contacts'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/contacts?" + 
                    "name=X_E7CV78whS0a1&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(500)// market/dto/assembler/ContactsDtoAssembler_12_toModel
                .assertThat()
                .contentType("application/json")
                .body("'message'", nullValue())
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * 1 - (500) PUT:/customer/contacts
    * 2 - (200) GET:/customer/contacts
    * 3 - (200) GET:/customer/cart
    * Found 3 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_19_getOnCartShowsFaults_100_101() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTACTS", 1290L)
                .d("PHONE", "\"NqhJNCsYbn2Nz\"")
                .d("ADDRESS", "\"sbUFnvk1AwYC\"")
                .d("CITY_REGION", "\"H\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. market/rest/exception/RestErrorResponse_50_getFieldErrors.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/customer/contacts'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"href\": \"px7Z644Al\", " + 
                    " \"profile\": \"uL4P\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"odAOTM\", " + 
                    " \"href\": \"iE9Muo4RtXC\", " + 
                    " \"profile\": \"I7KEUv\", " + 
                    " \"rel\": { " + 
                    " \"EM_tainted_map\": \"_EM_1_XYZ_\" " + 
                    " }, " + 
                    " \"title\": \"JLjaji\" " + 
                    " } " + 
                    " ], " + 
                    " \"address\": \"31ObeVJK4\", " + 
                    " \"phone\": \"\" " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/contacts?EMextraParam123=42")
                .then()
                .statusCode(500)// market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.ContactsDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.pattern. [Path '/phone'] ECMA 262 regex "^\+[1-9][0-9]?[\s]*\(?\d{3}\)?[-\s]?\d{3}[-\s]?\d{2}[-\s]?\d{2}$" does not match input string "NqhJNCsYbn2Nz"
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/customer/contacts?" + 
                    "name=uzqFuWhCHTt68T&" + 
                    "EMextraParam123=42&" + 
                    "included=5GkxfJSBw66l2wl")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'phone'", containsString("NqhJNCsYbn2Nz"))
                .body("'address'", containsString("sbUFnvk1AwYC"));
        
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/cart")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'user'", containsString("admin"))
                .body("'totalItems'", numberMatches(0.0))
                .body("'productsCost'", numberMatches(0.0))
                .body("'deliveryCost'", numberMatches(400.0))
                .body("'deliveryIncluded'", equalTo(true))
                .body("'totalCost'", numberMatches(400.0))
                .body("'cartItems'.size()", equalTo(0))
                .body("'empty'", equalTo(true));
    }
    
    
    /**
    * Calls:
    * 1 - (500) PUT:/customer/contacts
    * 2 - (200) GET:/customer/contacts
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_20_getOnContactsShowsFaults_100_101() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTACTS", 1290L)
                .d("PHONE", "\"NqhJNCsYbn2Nz\"")
                .d("ADDRESS", "\"sbUFnvk1AwYC\"")
                .d("CITY_REGION", "\"H\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. market/rest/exception/RestErrorResponse_50_getFieldErrors.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/customer/contacts'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"href\": \"px7Z644Al\", " + 
                    " \"profile\": \"uL4P\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"odAOTM\", " + 
                    " \"href\": \"iE9Muo4RtXC\", " + 
                    " \"profile\": \"I7KEUv\", " + 
                    " \"rel\": { " + 
                    " \"EM_tainted_map\": \"_EM_1_XYZ_\" " + 
                    " }, " + 
                    " \"title\": \"JLjaji\" " + 
                    " } " + 
                    " ], " + 
                    " \"address\": \"31ObeVJK4\", " + 
                    " \"phone\": \"\" " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/contacts?EMextraParam123=42")
                .then()
                .statusCode(500)// market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.ContactsDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/customer/contacts?" + 
                    "name=uzqFuWhCHTt68T&" + 
                    "EMextraParam123=42&" + 
                    "included=5GkxfJSBw66l2wl")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'phone'", containsString("+7 123 456 78 90"))
                .body("'address'", containsString("Riesstrasse 18"));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/customer/cart
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_21_putOnCartShowsFaults_100_101() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTACTS", 796L)
                .d("PHONE", "NULL")
                .d("ADDRESS", "NULL")
                .d("CITY_REGION", "\"NxRXN0\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. market/rest/exception/RestErrorResponse_50_getFieldErrors.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/customer/cart'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"href\": \"5h1tEQosmh\", " + 
                    " \"rel\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " }, " + 
                    " \"title\": \"K0hhi\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"brS\", " + 
                    " \"media\": \"arjx\", " + 
                    " \"name\": \"bmQVuDfC2u1oy\", " + 
                    " \"profile\": \"Gvm2z0UUxgTzW\", " + 
                    " \"rel\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " }, " + 
                    " \"title\": \"N7dLldgQbCin4gqv\" " + 
                    " } " + 
                    " ], " + 
                    " \"productId\": 326227303, " + 
                    " \"quantity\": -912119469 " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart")
                .then()
                .statusCode(500)// market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.CartItemDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/customer/contacts
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_22_putOnContactsShowsFaults_100_101() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTACTS", 796L)
                .d("PHONE", "NULL")
                .d("ADDRESS", "NULL")
                .d("CITY_REGION", "\"NxRXN0\"")
            .and().insertInto("CART", 1235L)
                .d("TOTAL_ITEMS", "NULL")
                .d("PRODUCTS_COST", "207")
                .d("DELIVERY_INCLUDED", "false")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. market/rest/exception/RestErrorResponse_50_getFieldErrors.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/customer/contacts'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"name\": \"26L7\", " + 
                    " \"type\": \"\" " + 
                    " }, " + 
                    " { " + 
                    " \"href\": \"RE20Mwlhqi7QO\", " + 
                    " \"rel\": { " + 
                    " \"EM_tainted_map\": \"_EM_1_XYZ_\" " + 
                    " }, " + 
                    " \"title\": \"qwrUXa7i3eqAIkq\", " + 
                    " \"type\": \"QY_7WkWJ_2W\" " + 
                    " }, " + 
                    " { " + 
                    " \"href\": \"c1ZWXvOs7oDeCDe_\", " + 
                    " \"profile\": \"FvlzXd4hGz\", " + 
                    " \"type\": \"KV3D\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"I1iV\", " + 
                    " \"href\": \"\", " + 
                    " \"hreflang\": \"LEGbgAv7MRsp\", " + 
                    " \"media\": \"HOyBdrtHD\", " + 
                    " \"name\": \"87iL4R89j\" " + 
                    " } " + 
                    " ], " + 
                    " \"phone\": \"_postfix\" " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/contacts?" + 
                    "name=11Vz3Jp3QM&" + 
                    "included=")
                .then()
                .statusCode(500)// market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.ContactsDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/products/{productId}
    */
    @Test @Timeout(60)
    public void test_23_getOnProductReturnsObject() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/11?included=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'productId'", numberMatches(11.0))
                .body("'distillery'", containsString("Glenkinchie"))
                .body("'name'", containsString("12 y.o."))
                .body("'price'", numberMatches(4547.0))
                .body("'age'", numberMatches(12.0))
                .body("'volume'", numberMatches(700.0))
                .body("'alcohol'", numberMatches(43.0))
                .body("'description'", containsString("A light, delicate whiskey; sweet and creamy with a subtle floral aroma. This subtle, refined Lowland is ideal as an aperitif; try it straight from the fridge or freezer."))
                .body("'available'", equalTo(false));
    }
    
    
    /**
    * Calls:
    * (200) GET:/customer/orders
    */
    @Test @Timeout(60)
    public void test_24_getOnOrdersReturns1Element() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders?included=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'userAccount'", containsString("ivan.petrov@yandex.ru"))
                .body("[0].'billNumber'", numberMatches(2.7132054E8))
                .body("[0].'dateCreated'", containsString("2019-12-27T05:00:00.000+00:00"))
                .body("[0].'productsCost'", numberMatches(8127.0))
                .body("[0].'deliveryCost'", numberMatches(400.0))
                .body("[0].'deliveryIncluded'", equalTo(true))
                .body("[0].'totalCost'", numberMatches(8527.0))
                .body("[0].'payed'", equalTo(true))
                .body("[0].'executed'", equalTo(false))
                .body("[0].'links'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/customer/cart
    */
    @Test @Timeout(60)
    public void test_25_getOnCartReturnsObject() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/cart")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'user'", containsString("ivan.petrov@yandex.ru"))
                .body("'totalItems'", numberMatches(1.0))
                .body("'productsCost'", numberMatches(6517.0))
                .body("'deliveryCost'", numberMatches(400.0))
                .body("'deliveryIncluded'", equalTo(true))
                .body("'totalCost'", numberMatches(6917.0))
                .body("'cartItems'.size()", equalTo(1))
                .body("'cartItems'[0].'productId'", numberMatches(5.0))
                .body("'cartItems'[0].'quantity'", numberMatches(1.0))
                .body("'empty'", equalTo(false));
    }
    
    
    /**
    * Calls:
    * (200) GET:/customer/cart
    */
    @Test @Timeout(60)
    public void test_26_getOnCartReturnsObject() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/cart")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'user'", containsString("admin"))
                .body("'totalItems'", numberMatches(0.0))
                .body("'productsCost'", numberMatches(0.0))
                .body("'deliveryCost'", numberMatches(400.0))
                .body("'deliveryIncluded'", equalTo(true))
                .body("'totalCost'", numberMatches(400.0))
                .body("'cartItems'.size()", equalTo(0))
                .body("'empty'", equalTo(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/customer/contacts
    */
    @Test @Timeout(60)
    public void test_27_getOnCustomerContactsWithQueryParamsReturnsObject() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USER_ROLE", 1221L)
                .d("USER_ID", "NULL")
                .d("ROLE_ID", "417")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/contacts?" + 
                    "name=X_E7CV78whS0a1&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'phone'", containsString("+7 123 456 78 90"))
                .body("'address'", containsString("Riesstrasse 18"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/customer/contacts
    */
    @Test @Timeout(60)
    public void test_28_getOnCustomerContactsWithQueryParamReturnsObject() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "_EM_270_XYZ_")
                .get(baseUrlOfSut + "/customer/contacts?EMextraParam123=_EM_269_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'phone'", containsString("+7 123 456 78 90"))
                .body("'address'", containsString("Riesstrasse 18"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/customer/orders
    */
    @Test @Timeout(60)
    public void test_29_getOnOrdersReturns1Element() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 538L)
                .d("NAME", "\"9AHC_\"")
                .d("DISTILLERY_ID", "NULL")
                .d("AGE", "NULL")
                .d("ALCOHOL", "0.7269613367361826")
                .d("VOLUME", "463")
                .d("PRICE", "0.1586717118519153")
                .d("DESCRIPTION", "\"Smoked ham comes across delicately with citrus and cigar leaves. Fresh and smoky, probably the best part of this whisky. With an almost full body, oil and tar meet subtle smoke. Hints of sweet tastes like honey. Some spices like pepper combined with little sweetness.\"")
                .d("AVAILABLE", "false")
            .and().insertInto("CUSTOMER_ORDER", 539L)
                .d("ID", "73")
                .d("USER_ACCOUNT_ID", "379")
                .d("DATE_CREATED", "NULL")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "1771882494")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "400")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders?name=9AHC_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'userAccount'", containsString("ivan.petrov@yandex.ru"))
                .body("[0].'billNumber'", numberMatches(2.7132054E8))
                .body("[0].'dateCreated'", containsString("2019-12-27T05:00:00.000+00:00"))
                .body("[0].'productsCost'", numberMatches(8127.0))
                .body("[0].'deliveryCost'", numberMatches(400.0))
                .body("[0].'deliveryIncluded'", equalTo(true))
                .body("[0].'totalCost'", numberMatches(8527.0))
                .body("[0].'payed'", equalTo(true))
                .body("[0].'executed'", equalTo(false))
                .body("[0].'links'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/customer/cart
    */
    @Test @Timeout(60)
    public void test_30_getOnCartReturnsObject() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/cart?name=7jn1")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'user'", containsString("ivan.petrov@yandex.ru"))
                .body("'totalItems'", numberMatches(1.0))
                .body("'productsCost'", numberMatches(6517.0))
                .body("'deliveryCost'", numberMatches(400.0))
                .body("'deliveryIncluded'", equalTo(true))
                .body("'totalCost'", numberMatches(6917.0))
                .body("'cartItems'.size()", equalTo(1))
                .body("'cartItems'[0].'productId'", numberMatches(5.0))
                .body("'cartItems'[0].'quantity'", numberMatches(1.0))
                .body("'empty'", equalTo(false));
    }
    
    
    /**
    * Calls:
    * (200) GET:/customer/orders
    */
    @Test @Timeout(60)
    public void test_31_getOnOrdersReturnsEmptyList() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders?included=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/customer/cart
    */
    @Test @Timeout(60)
    public void test_32_getOnCartReturnsObject() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic dXNlcjJAeWFuZGV4LnJ1Onl1cmlkb2xnb3J1a2k=") // user2
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/cart")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'user'", containsString("user2@yandex.ru"))
                .body("'totalItems'", numberMatches(0.0))
                .body("'productsCost'", numberMatches(0.0))
                .body("'deliveryCost'", numberMatches(400.0))
                .body("'deliveryIncluded'", equalTo(true))
                .body("'totalCost'", numberMatches(400.0))
                .body("'cartItems'.size()", equalTo(0))
                .body("'empty'", equalTo(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/customer/orders
    */
    @Test @Timeout(60)
    public void test_33_getOnOrdersReturnsEmptyList() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic dXNlcjJAeWFuZGV4LnJ1Onl1cmlkb2xnb3J1a2k=") // user2
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders?included=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/products/{productId}
    */
    @Test @Timeout(60)
    public void test_34_getOnProductReturnsObject() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic dXNlcjJAeWFuZGV4LnJ1Onl1cmlkb2xnb3J1a2k=") // user2
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/5?included=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'productId'", numberMatches(5.0))
                .body("'distillery'", containsString("Dalwhinnie"))
                .body("'name'", containsString("15 y.o."))
                .body("'price'", numberMatches(6517.0))
                .body("'age'", numberMatches(15.0))
                .body("'volume'", numberMatches(750.0))
                .body("'alcohol'", numberMatches(43.0))
                .body("'description'", containsString("A good introduction to the delights of single malt whisky â elegant, smooth and medium-bodied, with a light, fruity palate and a whiff of heather on the finish. Part of Diageo's Classic Malt range. "))
                .body("'available'", equalTo(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/products/{productId}
    */
    @Test @Timeout(60)
    public void test_35_getOnProductReturnsObject() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/6")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'productId'", numberMatches(6.0))
                .body("'distillery'", containsString("Lagavulin"))
                .body("'name'", containsString("16 y.o."))
                .body("'price'", numberMatches(6620.0))
                .body("'age'", numberMatches(16.0))
                .body("'volume'", numberMatches(750.0))
                .body("'alcohol'", numberMatches(43.0))
                .body("'description'", containsString("The Islay representative in the 'Classic Malts' series is a deep, dry and exceptionally peaty bruiser. Probably the most pungent of all Islay malts, Lagavulin is not for the faint-hearted but inspires fanatical devotion in its many followers."))
                .body("'available'", equalTo(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/customer/cart
    */
    @Test @Timeout(60)
    public void test_36_getOnCartReturnsObject() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTACTS", 796L)
                .d("PHONE", "NULL")
                .d("ADDRESS", "NULL")
                .d("CITY_REGION", "\"NxRXN0\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/cart?included=X_Z")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'user'", containsString("admin"))
                .body("'totalItems'", numberMatches(0.0))
                .body("'productsCost'", numberMatches(0.0))
                .body("'deliveryCost'", numberMatches(400.0))
                .body("'deliveryIncluded'", equalTo(true))
                .body("'totalCost'", numberMatches(400.0))
                .body("'cartItems'.size()", equalTo(0))
                .body("'empty'", equalTo(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/v2/api-docs
    */
    @Test @Timeout(60)
    public void test_37_getOnApi_docsReturnsObject() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs")
                .then()
                .statusCode(200);
    }
    
    
    /**
    * Calls:
    * (200) DELETE:/customer/cart
    */
    @Test @Timeout(60)
    public void test_38_deleteOnCartReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/customer/cart?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'user'", containsString("admin"))
                .body("'totalItems'", numberMatches(0.0))
                .body("'productsCost'", numberMatches(0.0))
                .body("'deliveryCost'", numberMatches(400.0))
                .body("'deliveryIncluded'", equalTo(true))
                .body("'totalCost'", numberMatches(400.0))
                .body("'cartItems'.size()", equalTo(0))
                .body("'empty'", equalTo(true));
    }
    
    
    /**
    * Calls:
    * (200) DELETE:/customer/cart
    */
    @Test @Timeout(60)
    public void test_39_deleteOnCartReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/customer/cart?EMextraParam123=_EM_268_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'user'", containsString("ivan.petrov@yandex.ru"))
                .body("'totalItems'", numberMatches(0.0))
                .body("'productsCost'", numberMatches(0.0))
                .body("'deliveryCost'", numberMatches(400.0))
                .body("'deliveryIncluded'", equalTo(true))
                .body("'totalCost'", numberMatches(400.0))
                .body("'cartItems'.size()", equalTo(0))
                .body("'empty'", equalTo(true));
    }
    
    
    /**
    * Calls:
    * (200) DELETE:/customer/cart
    */
    @Test @Timeout(60)
    public void test_40_deleteOnCustomerCartWithQueryParamsReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/customer/cart?" + 
                    "name=U_rJviRR2pfP_BG&" + 
                    "EMextraParam123=_EM_1048_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'user'", containsString("admin"))
                .body("'totalItems'", numberMatches(0.0))
                .body("'productsCost'", numberMatches(0.0))
                .body("'deliveryCost'", numberMatches(400.0))
                .body("'deliveryIncluded'", equalTo(true))
                .body("'totalCost'", numberMatches(400.0))
                .body("'cartItems'.size()", equalTo(0))
                .body("'empty'", equalTo(true));
    }
    
    
    /**
    * Calls:
    * (200) DELETE:/customer/cart
    */
    @Test @Timeout(60)
    public void test_41_deleteOnCartReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic dXNlcjJAeWFuZGV4LnJ1Onl1cmlkb2xnb3J1a2k=") // user2
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/customer/cart?name=_EM_406_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'user'", containsString("user2@yandex.ru"))
                .body("'totalItems'", numberMatches(0.0))
                .body("'productsCost'", numberMatches(0.0))
                .body("'deliveryCost'", numberMatches(400.0))
                .body("'deliveryIncluded'", equalTo(true))
                .body("'totalCost'", numberMatches(400.0))
                .body("'cartItems'.size()", equalTo(0))
                .body("'empty'", equalTo(true));
    }
    
    
    /**
    * Calls:
    * (401) GET:/customer/cart
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_42_getOnCartReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_6_XYZ_")
                .get(baseUrlOfSut + "/customer/cart?EMextraParam123=_EM_5_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) GET:/customer/contacts
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_43_getOnContactsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/customer/contacts?name=PKy96sBmJbGZi")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) GET:/customer/orders
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_44_getOnOrdersReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders?EMextraParam123=_EM_10_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/orders"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/customer/cart
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_45_putOnCustomerCartReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"productId\": 153, " + 
                    " \"quantity\": 624 " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) DELETE:/customer/cart
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_46_deleteOnCartReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/customer/cart?EMextraParam123=_EM_7_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (404) GET:/products/{productId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_47_getOnProductWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CART", 855L)
                .d("TOTAL_ITEMS", "707")
                .d("PRODUCTS_COST", "944")
                .d("DELIVERY_INCLUDED", "false")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/-1020135923558162420?included=_EM_4034_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/products/-1020135923558162420"))
                .body("'entityName'", containsString("ProductDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/products/{productId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_48_getOnProductReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 797L)
                .d("NAME", "NULL")
                .d("DISTILLERY_ID", "NULL")
                .d("AGE", "NULL")
                .d("ALCOHOL", "0.40305312459803355")
                .d("VOLUME", "354")
                .d("PRICE", "0.10384292050255883")
                .d("DESCRIPTION", "NULL")
                .d("AVAILABLE", "true")
            .and().insertInto("CART", 798L)
                .d("TOTAL_ITEMS", "NULL")
                .d("PRODUCTS_COST", "190")
                .d("DELIVERY_INCLUDED", "true")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic dXNlcjJAeWFuZGV4LnJ1Onl1cmlkb2xnb3J1a2k=") // user2
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/425")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/products/425"))
                .body("'entityName'", containsString("ProductDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
    }
    
    
    /**
    * Calls:
    * (404) PUT:/customer/cart
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_49_putOnCartReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic dXNlcjJAeWFuZGV4LnJ1Onl1cmlkb2xnb3J1a2k=") // user2
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"productId\": 273, " + 
                    " \"quantity\": 72 " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart?" + 
                    "name=_EM_425_XYZ_&" + 
                    "EMextraParam123=_EM_429_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", containsString("Product"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
    }
    
    
    /**
    * Calls:
    * (406) PUT:/customer/contacts
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_50_putOnContactsReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTACTS", 796L)
                .d("PHONE", "NULL")
                .d("ADDRESS", "NULL")
                .d("CITY_REGION", "\"NxRXN0\"")
            .and().insertInto("CART", 1235L)
                .d("TOTAL_ITEMS", "NULL")
                .d("PRODUCTS_COST", "207")
                .d("DELIVERY_INCLUDED", "false")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 406 not defined for path '/customer/contacts'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"lBs3C\" " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/contacts")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", containsString("contactsDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("phone"))
                .body("'fieldErrors'[0].'message'", containsString("The value shall not be empty"));
    }
    
    
    /**
    * Calls:
    * (406) PUT:/customer/cart
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_51_putOnCartReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 406 not defined for path '/customer/cart'.
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"quantity\": 856 " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart?" + 
                    "name=c8unmG4WCX&" + 
                    "included=ZBcUJGP1toPDI")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", containsString("cartItemDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("productId"))
                .body("'fieldErrors'[0].'message'", containsString("Value shall be a positive number"));
    }
    
    
    /**
    * Calls:
    * (406) PUT:/customer/contacts
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_52_putOnContactsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 406 not defined for path '/customer/contacts'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .put(baseUrlOfSut + "/customer/contacts")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", containsString("contactsDTO"))
                .body("'fieldErrors'.size()", equalTo(2))
                .body("'fieldErrors'[0].'field'", containsString("phone"))
                .body("'fieldErrors'[0].'message'", containsString("The value shall not be empty"))
                .body("'fieldErrors'[1].'field'", containsString("address"))
                .body("'fieldErrors'[1].'message'", containsString("The value shall not be empty"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/customer/orders/{orderId}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_53_getOnOrderShowsFaults_100_101() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USER_ROLE", 105L)
                .d("USER_ID", "67109058")
                .d("ROLE_ID", "114")
            .and().insertInto("CUSTOMER_ORDER", 106L)
                .d("ID", "0")
                .d("USER_ACCOUNT_ID", "NULL")
                .d("DATE_CREATED", "NULL")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "-32768")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "426")
            .and().insertInto("CONTACTS", 107L)
                .d("PHONE", "NULL")
                .d("ADDRESS", "\"XA4ZKpoPV\"")
                .d("CITY_REGION", "\"kgENfes8bWD\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. market/dto/assembler/OrderDtoAssembler_17_toModel.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/customer/orders/{orderId}'.
        given().accept("*/*")
                .header("Authorization", "Basic dXNlcjJAeWFuZGV4LnJ1Onl1cmlkb2xnb3J1a2k=") // user2
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders/0?name=_EM_1758_XYZ_")
                .then()
                .statusCode(500)// market/dto/assembler/OrderDtoAssembler_17_toModel
                .assertThat()
                .contentType("application/json")
                .body("'message'", nullValue())
                .body("'description'", containsString("uri=/customer/orders/0"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/customer/cart/delivery
    */
    @Test @Timeout(60)
    public void test_54_putOnCartDeliveryWithQueryParamsReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "42")
                .put(baseUrlOfSut + "/customer/cart/delivery?" + 
                    "included=false&" + 
                    "EMextraParam123=_EM_152_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'user'", containsString("admin"))
                .body("'totalItems'", numberMatches(0.0))
                .body("'productsCost'", numberMatches(0.0))
                .body("'deliveryCost'", numberMatches(400.0))
                .body("'deliveryIncluded'", equalTo(false))
                .body("'totalCost'", numberMatches(400.0))
                .body("'cartItems'.size()", equalTo(0))
                .body("'empty'", equalTo(true));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/customer/cart/delivery
    */
    @Test @Timeout(60)
    public void test_55_putOnDeliveryReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/customer/cart/delivery?" + 
                    "included=true&" + 
                    "name=_EM_284_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'user'", containsString("ivan.petrov@yandex.ru"))
                .body("'totalItems'", numberMatches(1.0))
                .body("'productsCost'", numberMatches(6517.0))
                .body("'deliveryCost'", numberMatches(400.0))
                .body("'deliveryIncluded'", equalTo(true))
                .body("'totalCost'", numberMatches(6917.0))
                .body("'cartItems'.size()", equalTo(1))
                .body("'cartItems'[0].'productId'", numberMatches(5.0))
                .body("'cartItems'[0].'quantity'", numberMatches(1.0))
                .body("'empty'", equalTo(false));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/customer/cart/delivery
    */
    @Test @Timeout(60)
    public void test_56_putOnDeliveryReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic dXNlcjJAeWFuZGV4LnJ1Onl1cmlkb2xnb3J1a2k=") // user2
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/customer/cart/delivery?" + 
                    "included=true&" + 
                    "name=12+y.o.&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'user'", containsString("user2@yandex.ru"))
                .body("'totalItems'", numberMatches(0.0))
                .body("'productsCost'", numberMatches(0.0))
                .body("'deliveryCost'", numberMatches(400.0))
                .body("'deliveryIncluded'", equalTo(true))
                .body("'totalCost'", numberMatches(400.0))
                .body("'cartItems'.size()", equalTo(0))
                .body("'empty'", equalTo(true));
    }
    
    
    /**
    * Calls:
    * (401) GET:/customer/orders/{orderId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_57_getOnCustomerOrderReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders/914434430493077398")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/orders/914434430493077398"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/customer/cart/delivery
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_58_putOnDeliveryReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .put(baseUrlOfSut + "/customer/cart/delivery?" + 
                    "included=false&" + 
                    "name=12+y.o.+Cask+Strength+Batch+6")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/cart/delivery"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (404) GET:/customer/orders/{orderId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_59_getOnOrderReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders/894?name=16+y.o.")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/customer/orders/894"))
                .body("'entityName'", containsString("OrderDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/customer/orders/{orderId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_60_getOnOrderReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/customer/orders/-8441333569987003049?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/customer/orders/-8441333569987003049"))
                .body("'entityName'", containsString("OrderDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/customer/orders/{orderId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_61_getOnCustomerOrderWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 588L)
                .d("NAME", "\"DZgSh\"")
                .d("DISTILLERY_ID", "NULL")
                .d("AGE", "993")
                .d("ALCOHOL", "0.18621541992132518")
                .d("VOLUME", "788")
                .d("PRICE", "0.3683784490204606")
                .d("DESCRIPTION", "NULL")
                .d("AVAILABLE", "false")
            .and().insertInto("CUSTOMER_ORDER", 589L)
                .d("ID", "418")
                .d("USER_ACCOUNT_ID", "682")
                .d("DATE_CREATED", "\"2055-09-15\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "457")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "233")
            .and().insertInto("CART", 590L)
                .d("TOTAL_ITEMS", "NULL")
                .d("PRODUCTS_COST", "NULL")
                .d("DELIVERY_INCLUDED", "true")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders/571?" + 
                    "name=DZgSh&" + 
                    "included=_EM_3013_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/customer/orders/571"))
                .body("'entityName'", containsString("OrderDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
    }
    
    
    /**
    * Calls:
    * (406) POST:/customer/cart/pay
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_62_postOnCartPayReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 406 not defined for path '/customer/cart/pay'.
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/customer/cart/pay")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/cart/pay"))
                .body("'entityName'", containsString("creditCardDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[0].'message'", containsString("The value shall not be empty"));
    }
    
    
    /**
    * Calls:
    * (406) POST:/customer/cart/pay
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_63_postOnPayReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 406 not defined for path '/customer/cart/pay'.
        given().accept("*/*")
                .header("Authorization", "Basic dXNlcjJAeWFuZGV4LnJ1Onl1cmlkb2xnb3J1a2k=") // user2
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/customer/cart/pay?name=1DdTrIKgf1")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/cart/pay"))
                .body("'entityName'", containsString("creditCardDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[0].'message'", containsString("The value shall not be empty"));
    }
    
    
    /**
    * Calls:
    * (406) POST:/customer/cart/pay
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_64_postOnPayReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 406 not defined for path '/customer/cart/pay'.
        given().accept("*/*")
                .header("Authorization", "Basic dXNlcjJAeWFuZGV4LnJ1Onl1cmlkb2xnb3J1a2k=") // user2
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"ccNumber\": \"prefix__postfix\" " + 
                    " } ")
                .post(baseUrlOfSut + "/customer/cart/pay?included=_EM_2416_XYZ_")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/cart/pay"))
                .body("'entityName'", containsString("creditCardDTO"))
                .body("'fieldErrors'.size()", equalTo(2))
                .body("'fieldErrors'[0].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[0].'message'", containsString("Not a valid credit card number"))
                .body("'fieldErrors'[1].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[1].'message'", containsString("Card number shall consist of 13-16 digits"));
    }


}
