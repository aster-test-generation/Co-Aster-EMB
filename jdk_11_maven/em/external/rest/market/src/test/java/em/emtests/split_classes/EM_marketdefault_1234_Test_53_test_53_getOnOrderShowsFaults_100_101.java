package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-17T15:37:04.514981-04:00[America/New_York]
 * <br>
*  The generated test suite contains 65 tests
 * <br>
*  Covered targets: 1013
 * <br>
*  Used time: 1h 1m 30s
 * <br>
*  Needed budget for current results: 92%
 * <br>
*  
*/

public class EM_marketdefault_1234_Test_53_test_53_getOnOrderShowsFaults_100_101 {
    

    
    private static final SutHandler controller = new em.external.market.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/market-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CART","CONTACTS","CUSTOMER_ORDER","PRODUCT","USER_ROLE","cart","cart_item"));
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (500) GET:/customer/orders/{orderId}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_53_getOnOrderShowsFaults_100_101() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USER_ROLE", 105L)
                .d("USER_ID", "67109058")
                .d("ROLE_ID", "114")
            .and().insertInto("CUSTOMER_ORDER", 106L)
                .d("ID", "0")
                .d("USER_ACCOUNT_ID", "NULL")
                .d("DATE_CREATED", "NULL")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "-32768")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "426")
            .and().insertInto("CONTACTS", 107L)
                .d("PHONE", "NULL")
                .d("ADDRESS", "\"XA4ZKpoPV\"")
                .d("CITY_REGION", "\"kgENfes8bWD\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. market/dto/assembler/OrderDtoAssembler_17_toModel.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/customer/orders/{orderId}'.
        given().accept("*/*")
                .header("Authorization", "Basic dXNlcjJAeWFuZGV4LnJ1Onl1cmlkb2xnb3J1a2k=") // user2
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders/0?name=_EM_1758_XYZ_")
                .then()
                .statusCode(500)// market/dto/assembler/OrderDtoAssembler_17_toModel
                .assertThat()
                .contentType("application/json")
                .body("'message'", nullValue())
                .body("'description'", containsString("uri=/customer/orders/0"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
}
