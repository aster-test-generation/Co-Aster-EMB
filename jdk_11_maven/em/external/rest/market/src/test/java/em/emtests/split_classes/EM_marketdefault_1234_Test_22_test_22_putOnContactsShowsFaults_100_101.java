package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-17T15:37:04.514981-04:00[America/New_York]
 * <br>
*  The generated test suite contains 65 tests
 * <br>
*  Covered targets: 1013
 * <br>
*  Used time: 1h 1m 30s
 * <br>
*  Needed budget for current results: 92%
 * <br>
*  
*/

public class EM_marketdefault_1234_Test_22_test_22_putOnContactsShowsFaults_100_101 {
    

    
    private static final SutHandler controller = new em.external.market.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/market-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CART","CONTACTS","CUSTOMER_ORDER","PRODUCT","USER_ROLE","cart","cart_item"));
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (500) PUT:/customer/contacts
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_22_putOnContactsShowsFaults_100_101() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTACTS", 796L)
                .d("PHONE", "NULL")
                .d("ADDRESS", "NULL")
                .d("CITY_REGION", "\"NxRXN0\"")
            .and().insertInto("CART", 1235L)
                .d("TOTAL_ITEMS", "NULL")
                .d("PRODUCTS_COST", "207")
                .d("DELIVERY_INCLUDED", "false")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. market/rest/exception/RestErrorResponse_50_getFieldErrors.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/customer/contacts'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"name\": \"26L7\", " + 
                    " \"type\": \"\" " + 
                    " }, " + 
                    " { " + 
                    " \"href\": \"RE20Mwlhqi7QO\", " + 
                    " \"rel\": { " + 
                    " \"EM_tainted_map\": \"_EM_1_XYZ_\" " + 
                    " }, " + 
                    " \"title\": \"qwrUXa7i3eqAIkq\", " + 
                    " \"type\": \"QY_7WkWJ_2W\" " + 
                    " }, " + 
                    " { " + 
                    " \"href\": \"c1ZWXvOs7oDeCDe_\", " + 
                    " \"profile\": \"FvlzXd4hGz\", " + 
                    " \"type\": \"KV3D\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"I1iV\", " + 
                    " \"href\": \"\", " + 
                    " \"hreflang\": \"LEGbgAv7MRsp\", " + 
                    " \"media\": \"HOyBdrtHD\", " + 
                    " \"name\": \"87iL4R89j\" " + 
                    " } " + 
                    " ], " + 
                    " \"phone\": \"_postfix\" " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/contacts?" + 
                    "name=11Vz3Jp3QM&" + 
                    "included=")
                .then()
                .statusCode(500)// market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.ContactsDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
}
