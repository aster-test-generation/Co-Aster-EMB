package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-17T15:37:04.514981-04:00[America/New_York]
 * <br>
*  The generated test suite contains 65 tests
 * <br>
*  Covered targets: 1013
 * <br>
*  Used time: 1h 1m 30s
 * <br>
*  Needed budget for current results: 92%
 * <br>
*  
*/

public class EM_marketdefault_1234_Test_9_test_9_getOnProductsReturns11Elements {
    

    
    private static final SutHandler controller = new em.external.market.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/market-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CART","CONTACTS","CUSTOMER_ORDER","PRODUCT","USER_ROLE","cart","cart_item"));
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (200) GET:/products
    */
    @Test @Timeout(60)
    public void test_9_getOnProductsReturns11Elements() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CART", 756L)
                .d("TOTAL_ITEMS", "1554154701")
                .d("PRODUCTS_COST", "281")
                .d("DELIVERY_INCLUDED", "true")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(11))
                .body("[0].'productId'", numberMatches(1.0))
                .body("[0].'distillery'", containsString("Ardbeg"))
                .body("[0].'name'", containsString("Ten"))
                .body("[0].'price'", numberMatches(4420.0))
                .body("[0].'age'", numberMatches(10.0))
                .body("[0].'volume'", numberMatches(700.0))
                .body("[0].'alcohol'", numberMatches(46.0))
                .body("[0].'description'", containsString("Ten Years Old is the basis of the Ardbeg range. After 10 years of maturation in ex-bourbon casks, the whiskey bottled at 46% ABV without cold filtering. The characteristic peat, although clearly present but in perfect balance with the natural sweetness and not predominant in the taste."))
                .body("[0].'available'", equalTo(false))
                .body("[0].'links'.size()", equalTo(1))
                .body("[0].'links'[0].'rel'", containsString("self"))
                .body("[1].'productId'", numberMatches(2.0))
                .body("[1].'distillery'", containsString("Ardbeg"))
                .body("[1].'name'", containsString("Uigeadail"))
                .body("[1].'price'", numberMatches(7020.0))
                .body("[1].'age'", numberMatches(0.0))
                .body("[1].'volume'", numberMatches(700.0))
                .body("[1].'alcohol'", numberMatches(54.2))
                .body("[1].'description'", containsString("Ardbeg Uigedael is named after Loch Uigedael, the lake in the grounds of the distillery Ardbeg which are the water is an important factor in the distilling process. The Uigedael a vatted malt, bottled at 54.2% ABV without cold filtering. Ardbeg Uigedael has no age indication for the expression consists of various malts of different ages. Malts are used partly matured in ex-bourbon and partly on ex-sherry casks."))
                .body("[1].'available'", equalTo(true))
                .body("[1].'links'.size()", equalTo(1))
                .body("[1].'links'[0].'rel'", containsString("self"))
                .body("[2].'productId'", numberMatches(3.0))
                .body("[2].'distillery'", containsString("Balvenie"))
                .body("[2].'name'", containsString("12 y.o. Doublewood"))
                .body("[2].'price'", numberMatches(5403.0))
                .body("[2].'age'", numberMatches(12.0))
                .body("[2].'volume'", numberMatches(700.0))
                .body("[2].'alcohol'", numberMatches(40.0))
                .body("[2].'description'", containsString("Has clear influences from both bourbon and sherry wood. This malt has only 12 years aged in bourbon casks and then 3 months in young Oloroso casks. The peppery character from the bourbon barrels, penetrates, as it were by the rich and full aroma of Oloroso casks it. The Balvenie Double Wood is therefore a very complex malt."))
                .body("[2].'available'", equalTo(true))
                .body("[2].'links'.size()", equalTo(1))
                .body("[2].'links'[0].'rel'", containsString("self"))
                ; // Skipping assertions on the remaining 8 elements. This limit of 3 elements can be increased in the configurations
    }
}
