package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T17:17:27.370118-04:00[America/New_York]
 * <br>
*  The generated test suite contains 49 tests
 * <br>
*  Covered targets: 814
 * <br>
*  Used time: 1h 1m 28s
 * <br>
*  Needed budget for current results: 95%
 * <br>
*  
*/

public class EM_cwa_verificationdefault_1234_Test_43_test_43_postOnVerifyReturns404 {
    

    
    private static final SutHandler controller = new em.external.app.coronawarn.verification.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/cwa-verification-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("APP_SESSION","TAN","app_session","tan"));
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (404) POST:/version/v1/tan/verify
    */
    @Test @Timeout(60)
    public void test_43_postOnVerifyReturns404() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 45L)
                .d("VERSION", "131439")
                .d("CREATED_AT", "\"2000-01-09 06:41:22\"")
                .d("UPDATED_AT", "\"1963-10-08 06:29:29\"")
                .d("HASHED_GUID", "\"OUCrhaZ\"")
                .d("REGISTRATION_TOKEN_HASH", "\"fJNLH1Uta8eA8TV\"")
                .d("TELE_TAN_HASH", "\"_EM_1064_XYZ_\"")
                .d("TAN_COUNTER", "-33552861")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_855_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 46L)
                .d("VERSION", "-4390")
                .d("CREATED_AT", "\"1954-05-22 03:40:43\"")
                .d("UPDATED_AT", "\"1995-06-16 22:25:29\"")
                .d("VALID_FROM", "\"1979-05-12 00:00:17\"")
                .d("VALID_UNTIL", "\"2040-12-08 01:00:53\"")
                .d("TAN_HASH", "\"b1bf0476212786e16d9dd05330af526dc6ed82352cd049f0dce998450dbdbba2\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "fpo")
                .header("b3", "foo")
                .header("X-B3-TraceId", "foo")
                .header("cwa-fake", "_EM_853_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"fa501e4b-eb3f-4f42-9ec7-7f79b95e9f2f\", " + 
                    " \"responsePadding\": \"t66\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
}
