package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T17:17:27.370118-04:00[America/New_York]
 * <br>
*  The generated test suite contains 49 tests
 * <br>
*  Covered targets: 814
 * <br>
*  Used time: 1h 1m 28s
 * <br>
*  Needed budget for current results: 95%
 * <br>
*  
*/

public class EM_cwa_verificationdefault_1234_Test_10_test_10_postOnTanReturns201 {
    

    
    private static final SutHandler controller = new em.external.app.coronawarn.verification.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/cwa-verification-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("APP_SESSION","TAN","app_session","tan"));
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (201) POST:/version/v1/tan
    */
    @Test @Timeout(60)
    public void test_10_postOnTanReturns201() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 1L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1965-12-28 14:32:29\"")
                .d("UPDATED_AT", "\"2035-11-11 17:00:46\"")
                .d("HASHED_GUID", "\"V\"")
                .d("REGISTRATION_TOKEN_HASH", "\"e71adafb83e1c4d015441d9643c33ebd4017119a139e850554d84ab3f7f79e71\"")
                .d("TELE_TAN_HASH", "\"True\"")
                .d("TAN_COUNTER", "-34")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_374_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "+U3n")
                .header("b3", "vRd4wsSNCg8X")
                .header("X-B3-Sampled", "True")
                .header("X-B3-TraceId", "ElR2zuFNocHLsmY")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"a0e00644-c41c-4c35-bf33-6addc02822d9\", " + 
                    " \"responsePadding\": \"lCxUPS1trtt9z_gf_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'tan'", containsString("9342a75d-30c6-443e-9175-ad6ca5cd3fc6"));
    }
}
