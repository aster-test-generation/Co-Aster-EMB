package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T17:17:27.370118-04:00[America/New_York]
 * <br>
*  The generated test suite contains 49 tests
 * <br>
*  Covered targets: 814
 * <br>
*  Used time: 1h 1m 28s
 * <br>
*  Needed budget for current results: 95%
 * <br>
*  
*/

public class EM_cwa_verificationdefault_1234_Test_32_test_32_postOnVerifyCauses500_internalServerError {
    

    
    private static final SutHandler controller = new em.external.app.coronawarn.verification.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/cwa-verification-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("APP_SESSION","TAN","app_session","tan"));
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (500) POST:/version/v1/tan/verify
    * Found 1 potential fault of type-code 100
    */
    @Test @Timeout(60)
    public void test_32_postOnVerifyCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 34L)
                .d("VERSION", "-267258712")
                .d("CREATED_AT", "\"2067-06-02 11:29:13\"")
                .d("UPDATED_AT", "\"2088-10-16 16:39:02\"")
                .d("HASHED_GUID", "\"S\"")
                .d("REGISTRATION_TOKEN_HASH", "\"b86f992de54a04d1dfc5516c9317a06028fe33f3382ce43cc78c1c6a57dcf9d2\"")
                .d("TELE_TAN_HASH", "\"U\"")
                .d("TAN_COUNTER", "8192")
                .d("SOT", "\"dK8BZteVGPzqBL3AR\"")
                .d("HASHED_GUID_DOB", "\"ayahcU5\"")
                .d("TELETAN_TYPE", "\"X25wVMLj5i\"")
            .and().insertInto("TAN", 35L)
                .d("VERSION", "-130168")
                .d("CREATED_AT", "\"2049-06-03 09:00:27\"")
                .d("UPDATED_AT", "\"2100-06-16 11:13:17\"")
                .d("VALID_FROM", "\"2053-03-15 13:59:34\"")
                .d("VALID_UNTIL", "\"2000-06-17 01:57:37\"")
                .d("TAN_HASH", "\"e773e4c55fab9900dff207ff505d7fcf1c8f4da1e6508f15644252e1b801a4b6\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. app/coronawarn/verification/config/RequestSizeLimitFilter_60_doFilterInternal.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "QKT_Evnq0Q")
                .header("b3", "mh9RwoKVcOkP")
                .header("X-B3-Sampled", "UÂƒiA9t8FqKg6Nn")
                .header("X-B3-TraceId", "_EM_2363_XYZ")
                .header("cwa-fake", "BLhT3qr4PXoc9")
                .header("X-CWA-TELETAN-TYPE", "c")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"6871ba7c-d1fe-4afb-A3fa-8f4b5ac8a1b2\", " + 
                    " \"responsePadding\": \"_EM_2361_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(500)// app/coronawarn/verification/config/RequestSizeLimitFilter_60_doFilterInternal
                .assertThat()
                .body(isEmptyOrNullString());
    }
}
