package em.emtests.single_class;

/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T17:17:27.370118-04:00[America/New_York]
 * <br>
*  The generated test suite contains 49 tests
 * <br>
*  Covered targets: 814
 * <br>
*  Used time: 1h 1m 28s
 * <br>
*  Needed budget for current results: 95%
 * <br>
*  
*/
public class EM_cwa_verificationdefault_1234_Test {

    
    private static final SutHandler controller = new em.external.app.coronawarn.verification.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/cwa-verification-sut.jar");
    private static String baseUrlOfSut;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("APP_SESSION","TAN","app_session","tan"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (500) POST:/version/v1/tan
    * Found 1 potential fault of type-code 100
    */
    @Test @Timeout(60)
    public void test_0_postOnV1TanWithQueryParamCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 1L)
                .d("VERSION", "64")
                .d("CREATED_AT", "\"1965-12-28 22:32:29\"")
                .d("UPDATED_AT", "\"2035-11-11 13:14:43\"")
                .d("HASHED_GUID", "\"_EM_372_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"e71adafb83e1c4d015441d9643c33ebd4017119a139e850554d84ab3f7f79e71\"")
                .d("TELE_TAN_HASH", "\"_EM_1494_XYZ_\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"_EM_374_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. app/coronawarn/verification/service/TestResultServerService_49_result.
        given().accept("*/*")
                .header("cwa-fake", "")
                .header("x-EMextraHeader123", "_EM_12_XYZ_")
                .header("X-B3-Flags", "+c5n")
                .header("b3", "_EM_370_XYZ_")
                .header("X-B3-Sampled", "_EM_13_XYZ_")
                .header("X-B3-TraceId", "_EM_1493_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"a0e00644-c41c-4c35-bf33-6addc02822d9\", " + 
                    " \"responsePadding\": \"_EM_240_XYZ_J\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan?EMextraParam123=42")
                .then()
                .statusCode(500)// app/coronawarn/verification/service/TestResultServerService_49_result
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (500) POST:/version/v1/testresult
    * Found 1 potential fault of type-code 100
    */
    @Test @Timeout(60)
    public void test_1_postOnTestresultCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 34L)
                .d("VERSION", "-268434776")
                .d("CREATED_AT", "\"2067-06-02 11:36:29\"")
                .d("UPDATED_AT", "\"2088-01-31 16:39:02\"")
                .d("HASHED_GUID", "\"_EM_1556_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"b86f992de54a04d1dfc5516c9317a06028fe33f3382ce43cc78c1c6a57dcf9d2\"")
                .d("TELE_TAN_HASH", "\"i\"")
                .d("TAN_COUNTER", "-268967527")
                .d("SOT", "\"dK8BZteVGPzqBL3A\"")
                .d("HASHED_GUID_DOB", "\"ayalcT\"")
                .d("TELETAN_TYPE", "\"X25wVMDj5i\"")
            .and().insertInto("TAN", 35L)
                .d("VERSION", "-130169")
                .d("CREATED_AT", "\"2000-10-16 23:32:15\"")
                .d("UPDATED_AT", "\"2016-06-16 23:29:17\"")
                .d("VALID_FROM", "\"2021-03-31 13:59:34\"")
                .d("VALID_UNTIL", "\"2000-06-01 03:57:29\"")
                .d("TAN_HASH", "\"U\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. app/coronawarn/verification/service/AppSessionService_157_getAppSessionByToken.
        given().accept("*/*")
                .header("cwa-fake", "")
                .header("x-EMextraHeader123", "42")
                .header("X-B3-Flags", "_EM_1679_XYZ_")
                .header("b3", "13aVpeixQtsu")
                .header("x-b3-traceid", "_EM_1680_XYZ_")
                .header("X-B3-Sampled", "trUe")
                .header("X-B3-TraceId", "")
                .header("x-b3-flags", "_EM_1681_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"e1a91bb6-d2b1-48e6-B0cc-aa057f80ea6e\", " + 
                    " \"responsePadding\": \"KlF2UUpahuksA7L\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(500)// app/coronawarn/verification/service/AppSessionService_157_getAppSessionByToken
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (500) POST:/version/v1/registrationToken
    * Found 1 potential fault of type-code 100
    */
    @Test @Timeout(60)
    public void test_2_postOnRegistrationTokenCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 34L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2067-06-02 19:29:29\"")
                .d("UPDATED_AT", "\"2056-12-08 16:29:02\"")
                .d("HASHED_GUID", "\"UTK\"")
                .d("REGISTRATION_TOKEN_HASH", "\"2ccdbe4d60a51e5f98cd98b6baea7a8b28155f7a9a5b5340d6eff42c404b0368\"")
                .d("TELE_TAN_HASH", "\"qx\"")
                .d("TAN_COUNTER", "-1048576")
                .d("SOT", "\"PdK8BVteVGPzqBL3A\"")
                .d("HASHED_GUID_DOB", "\"cd6DAd4f67EBdEdDa7aEeC3cfbFD4AdAc2Eb6AC2dFF2233dC5E3eFAabD4Dcba2\"")
                .d("TELETAN_TYPE", "\"X25wUMLU4i\"")
            .and().insertInto("TAN", 35L)
                .d("VERSION", "16647056")
                .d("CREATED_AT", "\"2049-06-03 09:00:27\"")
                .d("UPDATED_AT", "\"2100-06-16 11:13:17\"")
                .d("VALID_FROM", "\"2021-01-16 11:59:27\"")
                .d("VALID_UNTIL", "\"2032-01-16 01:57:29\"")
                .d("TAN_HASH", "\"e773e4c55fab9900dff207ff505d7fcf1c8f4da1e6508f15644252e1b801a4b6\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. app/coronawarn/verification/service/AppSessionService_168_checkRegistrationTokenAlreadyExistsForGuid.
        given().accept("*/*")
                .header("cwa-fake", "_EM_4334_XYZ_")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "aRxLxkN")
                .header("b3", "Z")
                .header("x-b3-traceid", "0MwedUU387Hml9G")
                .header("X-B3-Sampled", "aRxLpkN")
                .header("X-B3-TraceId", "_EM_4332_XYZ_")
                .header("x-cwa-teletan-type", "_EM_4333_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"cd6DAd4f67EBdEdDa7aEeC3cfbFD4AdAc2Eb6AC2dFF2233dC5E3eFAabD4Dcba2\", " + 
                    " \"keyDob\": \"aa644ce1a23c1bfc92d193d26ae24f50d11979ff19518e6fa78732d8a8f87395\", " + 
                    " \"keyType\": \"GUID\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(500)// app/coronawarn/verification/service/AppSessionService_168_checkRegistrationTokenAlreadyExistsForGuid
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (500) POST:/version/v1/testresult
    * Found 1 potential fault of type-code 100
    */
    @Test @Timeout(60)
    public void test_3_postOnTestresultCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 34L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2067-06-02 11:36:29\"")
                .d("UPDATED_AT", "\"2088-01-31 16:38:10\"")
                .d("HASHED_GUID", "\"NORqPLmWA3MLr2vO\"")
                .d("REGISTRATION_TOKEN_HASH", "\"dOhnkX\"")
                .d("TELE_TAN_HASH", "\"_EM_862_XYZ_\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"dK8BZteVGPzqBL3A\"")
                .d("HASHED_GUID_DOB", "\"ayalc\"")
                .d("TELETAN_TYPE", "\"X2EwVMDj5i\"")
            .and().insertInto("TAN", 35L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2034-06-15 17:30:15\"")
                .d("UPDATED_AT", "\"2000-08-16 23:29:17\"")
                .d("VALID_FROM", "\"2020-05-31 13:59:34\"")
                .d("VALID_UNTIL", "\"1997-07-01 03:25:06\"")
                .d("TAN_HASH", "\"q\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. app/coronawarn/verification/config/RequestSizeLimitFilter_60_doFilterInternal.
        given().accept("*/*")
                .header("cwa-fake", "xwgj6t1tQyg")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "rUYAJ2tY")
                .header("b3", "13aXpeixQtsu8")
                .header("x-b3-traceid", "_EM_1649_XYZ_")
                .header("X-B3-Sampled", "tRue")
                .header("X-B3-TraceId", "")
                .header("x-b3-flags", "2R{oh0")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"e1a91bb6-d2b1-48e6-B0cc-aa057f80ea6e\", " + 
                    " \"responsePadding\": \"KlF2UUpahuksA7\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(500)// app/coronawarn/verification/config/RequestSizeLimitFilter_60_doFilterInternal
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (500) POST:/version/v1/tan
    * Found 1 potential fault of type-code 100
    */
    @Test @Timeout(60)
    public void test_4_postOnTanCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 34L)
                .d("VERSION", "-268434776")
                .d("CREATED_AT", "\"2067-06-18 11:36:37\"")
                .d("UPDATED_AT", "\"2088-01-16 16:38:02\"")
                .d("HASHED_GUID", "\"_EM_1556_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"b86f992de54a04d1dfc5516c9317a06028fe33f3382ce43cc78c1c6a57dcf9d2\"")
                .d("TELE_TAN_HASH", "\"i\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"dK8BZteVGPzqBL3AW\"")
                .d("HASHED_GUID_DOB", "\"ayalcT\"")
                .d("TELETAN_TYPE", "\"X25wVMDj5\"")
            .and().insertInto("TAN", 35L)
                .d("VERSION", "-132217")
                .d("CREATED_AT", "\"2000-10-16 23:32:15\"")
                .d("UPDATED_AT", "\"2016-06-16 22:00:17\"")
                .d("VALID_FROM", "\"2021-03-31 13:59:34\"")
                .d("VALID_UNTIL", "\"2008-06-01 11:57:25\"")
                .d("TAN_HASH", "\"U\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. app/coronawarn/verification/config/RequestSizeLimitFilter_60_doFilterInternal.
        given().accept("*/*")
                .header("cwa-fake", "6n_LbDf10ewbgX")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"3fd2055f-44a0-4262-a1e8-0728e48fbfa8\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(500)// app/coronawarn/verification/config/RequestSizeLimitFilter_60_doFilterInternal
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (500) POST:/version/v1/registrationToken
    * Found 1 potential fault of type-code 100
    */
    @Test @Timeout(60)
    public void test_5_postOnRegistrationTokenCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 104L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1976-07-12 17:59:18\"")
                .d("UPDATED_AT", "\"2065-06-05 07:55:16\"")
                .d("HASHED_GUID", "\"uvaA8\"")
                .d("REGISTRATION_TOKEN_HASH", "\"\"")
                .d("TELE_TAN_HASH", "\"dU2UEUg\"")
                .d("TAN_COUNTER", "170")
                .d("SOT", "NULL")
                .d("HASHED_GUID_DOB", "NULL")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. app/coronawarn/verification/config/RequestSizeLimitFilter_60_doFilterInternal.
        given().accept("*/*")
                .header("cwa-fake", "QOzOy30")
                .header("x-EMextraHeader123", "")
                .header("x-b3-sampled", "")
                .header("X-B3-Flags", "_EM_2584_XYZ_")
                .header("b3", "TZpnhQy4BioDqhBf")
                .header("x-b3-traceid", "xuL0Bf_gzuLTsgU")
                .header("X-B3-Sampled", "pC")
                .header("X-B3-TraceId", "2NR5Ng")
                .header("x-b3-flags", "SdImi")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"pljkh0rgRscXN\", " + 
                    " \"keyDob\": \"_EM_2583_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(500)// app/coronawarn/verification/config/RequestSizeLimitFilter_60_doFilterInternal
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (500) POST:/version/v1/tan
    * Found 1 potential fault of type-code 100
    */
    @Test @Timeout(60)
    public void test_6_postOnTanCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 1L)
                .d("VERSION", "64")
                .d("CREATED_AT", "\"1965-04-12 14:32:28\"")
                .d("UPDATED_AT", "\"2035-11-11 13:29:43\"")
                .d("HASHED_GUID", "\"_EM_372_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"e71adafb83e1c4d015441d9643c33ebd4017119a139e850554d84ab3f7f79e71\"")
                .d("TELE_TAN_HASH", "\"c2565ec28f904b0be83aaf19df9ee1de1524edf108e4c6163123aedc11e025be\"")
                .d("TAN_COUNTER", "-70144")
                .d("SOT", "NULL")
                .d("HASHED_GUID_DOB", "\"_EM_374_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. app/coronawarn/verification/controller/ExternalTanController_116_generateTan.
        given().accept("*/*")
                .header("cwa-fake", "")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "+@c5nv")
                .header("b3", "dT[WxXT_kcQZxn")
                .header("X-B3-Sampled", "jma6qVfSGsSGHdwT")
                .header("X-B3-TraceId", "EmR2zuFNocHJsmY")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"a0e00644-c41c-4c35-bf33-6addc02822d9\", " + 
                    " \"responsePadding\": \"_EM_6246_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(500)// app/coronawarn/verification/controller/ExternalTanController_116_generateTan
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) POST:/version/v1/testresult
    */
    @Test @Timeout(60)
    public void test_7_postOnTestresultReturns200() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 135L)
                .d("VERSION", "4219")
                .d("CREATED_AT", "\"1949-03-07 20:01:20\"")
                .d("UPDATED_AT", "\"2010-07-24 03:38:28\"")
                .d("HASHED_GUID", "\"BC1\"")
                .d("REGISTRATION_TOKEN_HASH", "\"w1vgzMMTvuyYNv\"")
                .d("TELE_TAN_HASH", "\"wT\"")
                .d("TAN_COUNTER", "1")
                .d("SOT", "NULL")
                .d("HASHED_GUID_DOB", "\"_EM_5936_XYZ_\"")
                .d("TELETAN_TYPE", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("cwa-fake", "1")
                .header("x-EMextraHeader123", "")
                .header("b3", "_EM_5935_XYZ_")
                .header("X-CWA-TELETAN-TYPE", "Wt")
                .header("X-B3-Flags", "_EM_2596_XYZ_")
                .header("x-b3-traceid", "z")
                .header("X-B3-TraceId", "_EM_2597_XYZ_")
                .header("X-Forwarded-For", "fso")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"d5ef7192-c4be-4bae-9eac-4c7ceb17abd7\", " + 
                    " \"responsePadding\": \"QFMukSELxZiEb\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'testResult'", numberMatches(2.0))
                .body("'sc'", numberMatches(1.756919837E9))
                .body("'responsePadding'", containsString("4QbRq00w8flD6kUgoP8wU0pOUu8vMLBFltURtffBcLiQS"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/tan
    */
    @Test @Timeout(60)
    public void test_8_postOnV1TanWithQueryParamReturns201() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 1L)
                .d("VERSION", "64")
                .d("CREATED_AT", "\"1965-12-28 22:32:29\"")
                .d("UPDATED_AT", "\"2035-11-11 13:14:43\"")
                .d("HASHED_GUID", "\"L\"")
                .d("REGISTRATION_TOKEN_HASH", "\"e71adafb83e1c4d015441d9643c33ebd4017119a139e850554d84ab3f7f79e71\"")
                .d("TELE_TAN_HASH", "\"c2565ec28f904b0be83aaf19df9ee1de1524edf108e4c6163123aedc11e025be\"")
                .d("TAN_COUNTER", "-522240")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"065c10133f35c8247a0ac654fe0a51391e2397c62b7aaea2fe46bdc1b249bb3e\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("cwa-fake", "")
                .header("x-EMextraHeader123", "_EM_12_XYZ_")
                .header("X-B3-Flags", "_EM_2601_XYZ_")
                .header("b3", "47t1DIRdwBLiH")
                .header("X-B3-Sampled", "_6uPuF1VoK")
                .header("X-B3-TraceId", "_EM_1493_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"a0e00644-c41c-4c35-bf33-6addc02822d9\", " + 
                    " \"responsePadding\": \"_EM_2600_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan?EMextraParam123=42")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'tan'", containsString("149f7aae-c6ec-41c5-8672-82f190f94581"))
                .body("'responsePadding'", containsString("i5zUnu5fvpQV3f1"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/registrationToken
    */
    @Test @Timeout(60)
    public void test_9_postOnRegistrationTokenReturns201() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 34L)
                .d("VERSION", "-144")
                .d("CREATED_AT", "\"2003-06-12 23:27:29\"")
                .d("UPDATED_AT", "\"2000-06-18 14:55:18\"")
                .d("HASHED_GUID", "\"_EM_5910_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"2ccdbe4d60a51e5f98cd98b6baea7a8b28155f7a9a5b5340d6eff42c404b0368\"")
                .d("TELE_TAN_HASH", "\"_EM_6991_XYZ_\"")
                .d("TAN_COUNTER", "-4162")
                .d("SOT", "\"dK8BZteVGPzqBL3Aw\"")
                .d("HASHED_GUID_DOB", "\"NrUbUUe\"")
                .d("TELETAN_TYPE", "\"X25wVMLj5\"")
            .and().insertInto("TAN", 35L)
                .d("VERSION", "16645008")
                .d("CREATED_AT", "\"2002-09-07 09:16:29\"")
                .d("UPDATED_AT", "\"2100-06-16 11:13:25\"")
                .d("VALID_FROM", "\"2021-01-16 11:59:29\"")
                .d("VALID_UNTIL", "\"1992-06-16 01:58:29\"")
                .d("TAN_HASH", "NULL")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("cwa-fake", "_EM_5820_XYZ_")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "_EM_7427_XYZ_")
                .header("b3", "_EM_3322_XYZ_")
                .header("x-b3-traceid", "0MwedUU387Hmm9Gh")
                .header("X-B3-Sampled", "false")
                .header("X-B3-TraceId", "buUIbvJfeLJueW")
                .header("x-cwa-teletan-type", "_EM_2792_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"dc5DAe5f67DCdFdDa7aEeC3b0baD4AeAc2Eb6AC2dFa2133dC5D3eFAbbD4Ecba1\", " + 
                    " \"keyDob\": \"9E2BaeAaEf357EACDa3A6E1afadCDc7c2A3d19C7faA7b2BCcECf7EBffE2D1bBE\", " + 
                    " \"keyType\": \"GUID\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'registrationToken'", containsString("d7addc76-051b-4e78-81db-c7def6be770a"))
                .body("'responsePadding'", containsString("7"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/tan
    */
    @Test @Timeout(60)
    public void test_10_postOnTanReturns201() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 1L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1965-12-28 14:32:29\"")
                .d("UPDATED_AT", "\"2035-11-11 17:00:46\"")
                .d("HASHED_GUID", "\"V\"")
                .d("REGISTRATION_TOKEN_HASH", "\"e71adafb83e1c4d015441d9643c33ebd4017119a139e850554d84ab3f7f79e71\"")
                .d("TELE_TAN_HASH", "\"True\"")
                .d("TAN_COUNTER", "-34")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_374_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "+U3n")
                .header("b3", "vRd4wsSNCg8X")
                .header("X-B3-Sampled", "True")
                .header("X-B3-TraceId", "ElR2zuFNocHLsmY")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"a0e00644-c41c-4c35-bf33-6addc02822d9\", " + 
                    " \"responsePadding\": \"lCxUPS1trtt9z_gf_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'tan'", containsString("9342a75d-30c6-443e-9175-ad6ca5cd3fc6"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/tan
    */
    @Test @Timeout(60)
    public void test_11_postOnTanReturns201() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 1L)
                .d("VERSION", "64")
                .d("CREATED_AT", "\"1965-12-28 22:32:29\"")
                .d("UPDATED_AT", "\"2035-11-11 13:14:43\"")
                .d("HASHED_GUID", "\"L\"")
                .d("REGISTRATION_TOKEN_HASH", "\"e71adafb83e1c4d015441d9643c33ebd4017119a139e850554d84ab3f7f79e71\"")
                .d("TELE_TAN_HASH", "\"_EM_1494_XYZ_\"")
                .d("TAN_COUNTER", "-522240")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"065c10133f35c8247a0ac654fe0a51391e2397c62b7aaea2fe46bdc1b249bb3e\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("cwa-fake", "1")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "_EM_4555_XYZ_")
                .header("b3", "47t1DIRdwBLiH")
                .header("X-B3-Sampled", "TruE")
                .header("X-B3-TraceId", "_EM_4556_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"a0e00644-c41c-4c35-bf33-6addc02822d9\", " + 
                    " \"responsePadding\": \"_EM_2600_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'tan'", containsString("28d6edf5-91bb-46e0-bf27-a81a685c23ee"))
                .body("'responsePadding'", containsString("Lpx6Go1XVkSFpjd"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/tan
    */
    @Test @Timeout(60)
    public void test_12_postOnTanReturns201() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 190L)
                .d("VERSION", "130")
                .d("CREATED_AT", "\"2051-12-04 23:36:51\"")
                .d("UPDATED_AT", "\"2000-01-18 17:30:50\"")
                .d("HASHED_GUID", "NULL")
                .d("REGISTRATION_TOKEN_HASH", "NULL")
                .d("TELE_TAN_HASH", "\"tAMPNXFiGeN3\"")
                .d("TAN_COUNTER", "330")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"1yAIRyJSo2\"")
                .d("TELETAN_TYPE", "NULL")
            .and().insertInto("TAN", 191L)
                .d("VERSION", "752")
                .d("CREATED_AT", "\"2099-05-27 22:49:15\"")
                .d("UPDATED_AT", "\"2008-08-09 04:17:48\"")
                .d("VALID_FROM", "\"2054-02-03 03:36:50\"")
                .d("VALID_UNTIL", "\"2000-01-31 01:29:29\"")
                .d("TAN_HASH", "NULL")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("cwa-fake", "1")
                .header("x-EMextraHeader123", "")
                .header("b3", "Vtat")
                .header("X-B3-TraceId", "qEzfteC")
                .header("x-b3-flags", "_EM_4709_XYZ_")
                .header("X-CWA-TELETAN-TYPE", "58i_F")
                .header("x-forwarded-for", "Go_nJr5TeL4y")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"d5426b6c-54e7-4c9a-8605-df2a51ab56bb\", " + 
                    " \"responsePadding\": \"tDuF_n\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'tan'", containsString("3e0e512d-d3cd-4f06-abfa-566754f2e579"))
                .body("'responsePadding'", containsString("XvX0gOjEOrulN1W"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/registrationToken
    */
    @Test @Timeout(60)
    public void test_13_postOnRegistrationTokenReturns201() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 34L)
                .d("VERSION", "-128")
                .d("CREATED_AT", "\"2003-10-16 23:29:29\"")
                .d("UPDATED_AT", "\"2000-06-18 14:55:18\"")
                .d("HASHED_GUID", "\"_EM_5910_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"2ccdbe4d60a51e5f98cd98b6baea7a8b28155f7a9a5b5340d6eff42c404b0368\"")
                .d("TELE_TAN_HASH", "\"vDh\"")
                .d("TAN_COUNTER", "-4162")
                .d("SOT", "\"dK8BZteVGPzqBL3Aw\"")
                .d("HASHED_GUID_DOB", "\"NrUbUUe\"")
                .d("TELETAN_TYPE", "\"X25wVMLj5\"")
            .and().insertInto("TAN", 35L)
                .d("VERSION", "16645008")
                .d("CREATED_AT", "\"2000-05-05 09:16:29\"")
                .d("UPDATED_AT", "\"2100-06-16 19:13:57\"")
                .d("VALID_FROM", "\"2021-01-16 11:59:29\"")
                .d("VALID_UNTIL", "\"1984-06-24 01:58:29\"")
                .d("TAN_HASH", "\"e3e82b7d4fd3d60f43235a6256ca5787b5e4c58bd4d8d307d78be90d25f1f05d\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("cwa-fake", "1")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "aRxMpkN")
                .header("x-b3-traceid", "0MwedUU387Hml9Gh")
                .header("X-B3-Sampled", "tRuE")
                .header("X-B3-TraceId", "buUIbvJfeLJueW")
                .header("x-cwa-teletan-type", "Zis")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"dc5DAe5f67DCdFdDa7aEeC3b0baD4AeAc2Eb6AC2dFa2133dC5D3eFAbbD4Ecba1\", " + 
                    " \"keyDob\": \"9E2BaeAaEf357EACDa3A6E1afadCDc7c2A3d19C7faA7b2BCcECf7EBffE2D1bBE\", " + 
                    " \"keyType\": \"GUID\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'registrationToken'", containsString("22e13723-96df-4319-91e0-bcd36be759e3"))
                .body("'responsePadding'", containsString("N"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/registrationToken
    */
    @Test @Timeout(60)
    public void test_14_postOnRegistrationTokenReturns201() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 34L)
                .d("VERSION", "-256")
                .d("CREATED_AT", "\"2067-06-02 19:29:29\"")
                .d("UPDATED_AT", "\"2088-10-16 00:39:02\"")
                .d("HASHED_GUID", "\"MT3\"")
                .d("REGISTRATION_TOKEN_HASH", "\"2ccdbe4d60a51e5f98cd98b6baea7a8b28155f7a9a5b5340d6eff42c404b0368\"")
                .d("TELE_TAN_HASH", "\"q\"")
                .d("TAN_COUNTER", "-4096")
                .d("SOT", "\"dL8BZteVGLzqBL3A\"")
                .d("HASHED_GUID_DOB", "\"_EM_3324_XYZ_\"")
                .d("TELETAN_TYPE", "\"X25wVMLj5i\"")
            .and().insertInto("TAN", 35L)
                .d("VERSION", "-16384")
                .d("CREATED_AT", "\"2000-02-16 09:00:27\"")
                .d("UPDATED_AT", "\"2100-06-16 11:13:33\"")
                .d("VALID_FROM", "\"2021-06-16 13:55:13\"")
                .d("VALID_UNTIL", "\"2000-06-17 01:57:29\"")
                .d("TAN_HASH", "\"_EM_2364_XYZ_\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("cwa-fake", "")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "aRxLvdN")
                .header("b3", "ncirXN2_FZ9rcROU")
                .header("x-b3-traceid", "E1f")
                .header("X-B3-Sampled", "Kd4,_\\E(e|E)(m|M)\\Q_4311_\\E(x|X)(y|Y)(z|Z)\\Q_")
                .header("X-B3-TraceId", "2jPXeu")
                .header("x-cwa-teletan-type", "lQAbHarK44_nnC")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"cc4CAd5f77CCdFdCF7aEfD2cfbaD4AdAc2Fb5AC1eFF2043cC4C2eEAaaE5Ebab1\", " + 
                    " \"keyDob\": \"db18909e12898ccf5c169222407fec993f6c4bbccad8eb72821d1d65dd6d5796\", " + 
                    " \"keyType\": \"GUID\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'registrationToken'", containsString("03a96fcf-13f1-434d-a06c-c457a882762e"))
                .body("'responsePadding'", containsString("z"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/registrationToken
    */
    @Test @Timeout(60)
    public void test_15_postOnRegistrationTokenReturns201() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 34L)
                .d("VERSION", "-4")
                .d("CREATED_AT", "\"2067-10-03 19:31:19\"")
                .d("UPDATED_AT", "\"2000-06-18 14:55:18\"")
                .d("HASHED_GUID", "\"_EM_5910_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"b86f992de54a04d1dfc5516c9317a06028fe33f3382ce43cc78c1c6a57dcf9d2\"")
                .d("TELE_TAN_HASH", "\"o\"")
                .d("TAN_COUNTER", "-4160")
                .d("SOT", "NULL")
                .d("HASHED_GUID_DOB", "\"NjDb8@e\"")
                .d("TELETAN_TYPE", "\"X25wVMLj5i\"")
            .and().insertInto("TAN", 35L)
                .d("VERSION", "16645008")
                .d("CREATED_AT", "\"1921-01-03 09:16:29\"")
                .d("UPDATED_AT", "\"2100-06-16 11:13:17\"")
                .d("VALID_FROM", "\"2021-01-16 11:59:29\"")
                .d("VALID_UNTIL", "\"1992-06-17 01:57:37\"")
                .d("TAN_HASH", "\"e773e4c55fab9900dff207ff505d7fcf1c8f4da1e6508f15644252e1b801a4b6\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "aRxMpkN")
                .header("b3", "_EM_3322_XYZ_")
                .header("x-b3-traceid", "0MwedUU387Hml9Gh")
                .header("X-B3-TraceId", "buUIbvJfeLJueW")
                .header("x-cwa-teletan-type", "_EM_2792_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"dc5DAe5f67DCdFdDa7aEeC3b0baD4AeAc2Eb6AC2dFa2133dC5D3eFAbbD4Ecba1\", " + 
                    " \"keyDob\": \"9E2BaeAaEf357EACDa3A6E1afadCDc7c2A3d19C7faA7b2BCcECf7EBffE2D1bBE\", " + 
                    " \"keyType\": \"GUID\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'registrationToken'", containsString("27422c72-7168-4dee-bdd4-c21dd233b4c5"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/tan
    */
    @Test @Timeout(60)
    public void test_16_postOnV1TanWithQueryParamReturns400() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 1L)
                .d("VERSION", "64")
                .d("CREATED_AT", "\"1965-12-28 22:32:29\"")
                .d("UPDATED_AT", "\"2035-11-11 13:14:43\"")
                .d("HASHED_GUID", "\"_EM_1523_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"e71adafb83e1c4d015441d9643c33ebd4017119a139e850554d84ab3f7f79e71\"")
                .d("TELE_TAN_HASH", "\"_EM_1494_XYZ_\"")
                .d("TAN_COUNTER", "2048")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"_EM_374_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("cwa-fake", "")
                .header("x-EMextraHeader123", "_EM_12_XYZ_")
                .header("X-B3-Flags", "+c5")
                .header("b3", "_EM_370_XYZ_")
                .header("X-B3-Sampled", "_6uPuF1VoK")
                .header("X-B3-TraceId", "_EM_1493_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"a0e00644-c41c-4c35-bf33-6addc02822d9\", " + 
                    " \"responsePadding\": \"_EM_240_XYZ_J\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/testresult
    */
    @Test @Timeout(60)
    public void test_17_postOnTestresultReturns400() throws Exception {
        
        given().accept("*/*")
                .header("cwa-fake", "nQVmvqR2re1Z7x4t")
                .header("x-EMextraHeader123", "")
                .header("b3", "x05asGP2Sl")
                .header("X-B3-Flags", "_EM_2708_XYZ_")
                .header("x-b3-traceid", "rr4JmvgtlYO")
                .header("X-Forwarded-For", "_EM_2709_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"c8dd5b5c-ac34-4abb-9a8a-de0fe965da37\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/testresult
    */
    @Test @Timeout(60)
    public void test_18_postOnTestresultReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"18fc8e0a-22ce-436a-B1b3-67fa1ca59e3e\", " + 
                    " \"responsePadding\": \"_EM_2_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/tan
    */
    @Test @Timeout(60)
    public void test_19_postOnTanReturns400() throws Exception {
        
        given().accept("*/*")
                .header("cwa-fake", "IgBObadkk")
                .header("x-EMextraHeader123", "")
                .header("b3", "")
                .header("x-b3-flags", "_EM_2390_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"e15c4327-00ba-4df1-beb6-f27c4772dad9\", " + 
                    " \"responsePadding\": \"b\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/registrationToken
    */
    @Test @Timeout(60)
    public void test_20_postOnRegistrationTokenReturns400() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 34L)
                .d("VERSION", "-267390292")
                .d("CREATED_AT", "\"2067-06-01 10:37:29\"")
                .d("UPDATED_AT", "\"2088-10-16 16:39:02\"")
                .d("HASHED_GUID", "\"T\"")
                .d("REGISTRATION_TOKEN_HASH", "\"b9d61b469b9c7f6c91830c3d561321065c8318cf2fc7da8678734ad798829eac\"")
                .d("TELE_TAN_HASH", "\"qa\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"_EM_2966_XYZ_\"")
                .d("HASHED_GUID_DOB", "\"eWO7MDBxaTAsplB\"")
                .d("TELETAN_TYPE", "NULL")
            .and().insertInto("TAN", 35L)
                .d("VERSION", "512")
                .d("CREATED_AT", "\"2049-06-03 09:00:27\"")
                .d("UPDATED_AT", "\"2000-06-01 03:13:17\"")
                .d("VALID_FROM", "\"2100-05-17 13:51:34\"")
                .d("VALID_UNTIL", "\"2000-06-17 01:57:37\"")
                .d("TAN_HASH", "\"e3e82b7d4fd3d60f43235a6256ca5787b5e4c58bd4d8d307d78be90d25f1f05d\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("cwa-fake", "_EM_3366_XYZ_")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "aRxLxk")
                .header("b3", "fRhEB")
                .header("x-b3-traceid", "0MwedUU387Hml9G")
                .header("X-B3-Sampled", "tRuE")
                .header("X-B3-TraceId", "_EM_2963_XYZ_")
                .header("x-cwa-teletan-type", "_EM_2964_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"4VREE9GW8F\", " + 
                    " \"keyDob\": \"XF2BaeCaDf366EAEDb4B7F1aeaeCEc6c2A2f09D70aA7d1BBcEEf7ECe0E3D1aAD\", " + 
                    " \"keyType\": \"TELETAN\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/registrationToken
    */
    @Test @Timeout(60)
    public void test_21_postOnRegistrationTokenReturns400() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 34L)
                .d("VERSION", "-267258712")
                .d("CREATED_AT", "\"2067-06-02 11:29:13\"")
                .d("UPDATED_AT", "\"2088-10-16 16:39:02\"")
                .d("HASHED_GUID", "\"S\"")
                .d("REGISTRATION_TOKEN_HASH", "\"b86f992de54a04d1dfc5516c9317a06028fe33f3382ce43cc78c1c6a57dcf9d2\"")
                .d("TELE_TAN_HASH", "\"U\"")
                .d("TAN_COUNTER", "8192")
                .d("SOT", "\"dK8BZteVGPzqBL3AR\"")
                .d("HASHED_GUID_DOB", "\"ayahcU5\"")
                .d("TELETAN_TYPE", "\"X25wVMLj5i\"")
            .and().insertInto("TAN", 35L)
                .d("VERSION", "-130168")
                .d("CREATED_AT", "\"2049-06-03 09:00:27\"")
                .d("UPDATED_AT", "\"2100-06-16 11:13:17\"")
                .d("VALID_FROM", "\"2053-03-15 13:59:34\"")
                .d("VALID_UNTIL", "\"2000-06-17 01:57:37\"")
                .d("TAN_HASH", "\"e773e4c55fab9900dff207ff505d7fcf1c8f4da1e6508f15644252e1b801a4b6\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("cwa-fake", "9yW2SFrgKt")
                .header("x-EMextraHeader123", "")
                .header("b3", "eNXx_Ia5Yg")
                .header("x-b3-traceid", "I?")
                .header("X-B3-Sampled", "PRA1waNTdA2eM_F")
                .header("X-B3-TraceId", "2UF2058rSbdCfQB")
                .header("x-b3-flags", "xi5m")
                .header("X-CWA-TELETAN-TYPE", "UU")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"NhzB3bSu56\", " + 
                    " \"keyDob\": \"GmCDZabQLDEWM6\", " + 
                    " \"keyType\": \"EVOMASTER\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/testresult
    */
    @Test @Timeout(60)
    public void test_22_postOnV1TestresultWithQueryParamReturns400() throws Exception {
        
        given().accept("*/*")
                .header("cwa-fake", "_EM_966_XYZ_")
                .header("x-EMextraHeader123", "_EM_969_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"5daaaa82-e2e6-4cfe-8243-d4ff431f7ee9\", " + 
                    " \"responsePadding\": \"_EM_967_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult?EMextraParam123=_EM_968_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/registrationToken
    */
    @Test @Timeout(60)
    public void test_23_postOnRegistrationTokenReturns400() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 34L)
                .d("VERSION", "-267390292")
                .d("CREATED_AT", "\"2067-06-02 11:36:31\"")
                .d("UPDATED_AT", "\"1960-04-16 15:39:00\"")
                .d("HASHED_GUID", "\"I\"")
                .d("REGISTRATION_TOKEN_HASH", "\"b86f992de54a04d1dfc5516c9317a06028fe33f3382ce43cc78c1c6a57dcf9d2\"")
                .d("TELE_TAN_HASH", "\"h\"")
                .d("TAN_COUNTER", "8192")
                .d("SOT", "\"dK8@ZteVGPzqBL3A\"")
                .d("HASHED_GUID_DOB", "\"_EM_9891_XYZ_\"")
                .d("TELETAN_TYPE", "\"XV4wUTUk3U\"")
            .and().insertInto("TAN", 35L)
                .d("VERSION", "-130160")
                .d("CREATED_AT", "\"2017-06-03 11:29:29\"")
                .d("UPDATED_AT", "\"2068-04-21 07:59:18\"")
                .d("VALID_FROM", "\"2086-03-07 19:27:50\"")
                .d("VALID_UNTIL", "\"2000-06-17 11:57:29\"")
                .d("TAN_HASH", "\"e773e4c55fab9900dff207ff505d7fcf1c8f4da1e6508f15644252e1b801a4b6\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("cwa-fake", "l8vIHJS5hJ")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "_EM_9890_XYZ_")
                .header("b3", "ci")
                .header("x-b3-traceid", "yy3BCfaOFDF5sMg")
                .header("X-B3-Sampled", "GJ4qZ5mOv8J")
                .header("X-B3-TraceId", "9aIjRBoK9zC")
                .header("x-cwa-teletan-type", "_EM_2545_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"keyType\": \"GUID\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/registrationToken
    */
    @Test @Timeout(60)
    public void test_24_postOnV1RegistrationTokenWithQueryParamReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_5_XYZ_")
                .header("X-B3-Flags", "_EM_961_XYZ_")
                .header("b3", "_EM_962_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"x5Olc1\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/registrationToken
    */
    @Test @Timeout(60)
    public void test_25_postOnRegistrationTokenReturns400() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 34L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2067-06-02 19:29:29\"")
                .d("UPDATED_AT", "\"2056-12-08 16:29:02\"")
                .d("HASHED_GUID", "\"UTK\"")
                .d("REGISTRATION_TOKEN_HASH", "\"2ccdbe4d60a51e5f98cd98b6baea7a8b28155f7a9a5b5340d6eff42c404b0368\"")
                .d("TELE_TAN_HASH", "\"qx\"")
                .d("TAN_COUNTER", "-1048576")
                .d("SOT", "\"PdK8BVteVGPzqBL3A\"")
                .d("HASHED_GUID_DOB", "\"cd6DAd4f67EBdEdDa7aEeC3cfbFD4AdAc2Eb6AC2dFF2233dC5E3eFAabD4Dcba2\"")
                .d("TELETAN_TYPE", "\"X25wUMLU4i\"")
            .and().insertInto("TAN", 35L)
                .d("VERSION", "16647056")
                .d("CREATED_AT", "\"2049-06-03 09:00:27\"")
                .d("UPDATED_AT", "\"2100-06-16 11:13:17\"")
                .d("VALID_FROM", "\"2021-01-16 11:59:27\"")
                .d("VALID_UNTIL", "\"2032-01-16 01:57:29\"")
                .d("TAN_HASH", "\"e773e4c55fab9900dff207ff505d7fcf1c8f4da1e6508f15644252e1b801a4b6\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("cwa-fake", "_EM_4334_XYZ_")
                .header("x-EMextraHeader123", "")
                .header("x-b3-sampled", "kd4")
                .header("X-B3-Flags", "_EM_2546_XYZ_")
                .header("b3", "_EM_5731_XYZ_")
                .header("x-b3-traceid", "_D")
                .header("X-B3-Sampled", "PRA1waNTdA2eM_F")
                .header("X-B3-TraceId", "2YF2058rSbdCfQB")
                .header("x-b3-flags", "xi5i")
                .header("X-CWA-TELETAN-TYPE", "UUok")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"_UOUUU23gXYUg\", " + 
                    " \"keyDob\": \"GmCDZabQLDEWM6\", " + 
                    " \"keyType\": \"GUID\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/registrationToken
    */
    @Test @Timeout(60)
    public void test_26_postOnRegistrationTokenReturns400() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 34L)
                .d("VERSION", "-128")
                .d("CREATED_AT", "\"2003-10-16 23:29:29\"")
                .d("UPDATED_AT", "\"2000-06-18 14:55:18\"")
                .d("HASHED_GUID", "\"_EM_5910_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"2ccdbe4d60a51e5f98cd98b6baea7a8b28155f7a9a5b5340d6eff42c404b0368\"")
                .d("TELE_TAN_HASH", "\"_EM_6991_XYZ_\"")
                .d("TAN_COUNTER", "-4162")
                .d("SOT", "NULL")
                .d("HASHED_GUID_DOB", "\"NrUbUUe\"")
                .d("TELETAN_TYPE", "\"X25wVMLj5\"")
            .and().insertInto("TAN", 35L)
                .d("VERSION", "16645008")
                .d("CREATED_AT", "\"2000-05-05 09:16:29\"")
                .d("UPDATED_AT", "\"2100-06-16 11:13:25\"")
                .d("VALID_FROM", "\"2021-01-16 11:59:29\"")
                .d("VALID_UNTIL", "\"1992-06-16 01:58:29\"")
                .d("TAN_HASH", "\"e3e82b7d4fd3d60f43235a6256ca5787b5e4c58bd4d8d307d78be90d25f1f05d\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("cwa-fake", "_EM_5820_XYZ_")
                .header("x-EMextraHeader123", "")
                .header("x-b3-sampled", "kd4")
                .header("X-B3-Flags", "wYJKhp_56H")
                .header("b3", "UwNLb")
                .header("x-b3-traceid", "oV8_OEbX8vyrY1o")
                .header("X-B3-Sampled", "PRA-waNTdA4eM_FW")
                .header("X-B3-TraceId", "2YF2058rSbdCfQI")
                .header("x-b3-flags", "xi5my")
                .header("X-CWA-TELETAN-TYPE", "_EM_5888_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"_EM_3323_XYZ_\", " + 
                    " \"keyDob\": \"GmCDZabQLDEWM5\", " + 
                    " \"keyType\": \"TELETAN\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/tan
    */
    @Test @Timeout(60)
    public void test_27_postOnTanReturns400() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 34L)
                .d("VERSION", "-267390292")
                .d("CREATED_AT", "\"2067-06-01 10:37:29\"")
                .d("UPDATED_AT", "\"2088-10-16 16:39:02\"")
                .d("HASHED_GUID", "\"T\"")
                .d("REGISTRATION_TOKEN_HASH", "\"b9d61b469b9c7f6c91830c3d561321065c8318cf2fc7da8678734ad798829eac\"")
                .d("TELE_TAN_HASH", "\"qa\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"_EM_2966_XYZ_\"")
                .d("HASHED_GUID_DOB", "\"eWO7MDBxaTAsplB\"")
                .d("TELETAN_TYPE", "NULL")
            .and().insertInto("TAN", 35L)
                .d("VERSION", "512")
                .d("CREATED_AT", "\"2049-06-03 09:00:27\"")
                .d("UPDATED_AT", "\"2000-06-01 03:13:17\"")
                .d("VALID_FROM", "\"2100-05-17 13:51:34\"")
                .d("VALID_UNTIL", "\"2000-06-17 01:57:37\"")
                .d("TAN_HASH", "\"e3e82b7d4fd3d60f43235a6256ca5787b5e4c58bd4d8d307d78be90d25f1f05d\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("cwa-fake", "")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"cd58d31d-ac5b-436d-8636-2c85eb854f49\", " + 
                    " \"responsePadding\": \"_EM_2793_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/registrationToken
    */
    @Test @Timeout(60)
    public void test_28_postOnRegistrationTokenReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .header("b3", "_EM_2555_XYZ_")
                .header("x-b3-traceid", "_EM_2556_XYZ_")
                .header("X-B3-TraceId", "CKWMx")
                .header("x-b3-flags", "_EM_2557_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"oj\", " + 
                    " \"keyDob\": \"dH04o_d2JoywRO\", " + 
                    " \"keyType\": \"EVOMASTER\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/testresult
    */
    @Test @Timeout(60)
    public void test_29_postOnTestresultReturns400() throws Exception {
        
        given().accept("*/*")
                .header("cwa-fake", "ITb")
                .header("x-EMextraHeader123", "42")
                .header("b3", "_EM_2785_XYZ_")
                .header("X-CWA-TELETAN-TYPE", "D8mPlU7bOtfuz6")
                .header("x-b3-traceid", "vyg22")
                .header("x-b3-flags", "_EM_2787_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"df0b70d6-bbfa-4be3-9de8-88d5f84db4bf\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/testresult
    */
    @Test @Timeout(60)
    public void test_30_postOnTestresultReturns400() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 61L)
                .d("VERSION", "-1048132")
                .d("CREATED_AT", "\"2099-01-25 19:39:23\"")
                .d("UPDATED_AT", "\"2026-04-23 13:47:59\"")
                .d("HASHED_GUID", "\"wG84y1N\"")
                .d("REGISTRATION_TOKEN_HASH", "\"qeUwWBfXWfUEF\"")
                .d("TELE_TAN_HASH", "\"qE7lpg3Z\"")
                .d("TAN_COUNTER", "32887")
                .d("SOT", "NULL")
                .d("HASHED_GUID_DOB", "\"_EM_1390_XYZ_\"")
                .d("TELETAN_TYPE", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("cwa-fake", "0zD_10D0")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "fo")
                .header("b3", "fo")
                .header("X-B3-Sampled", "foo")
                .header("X-B3-TraceId", "_EM_1389_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"ce3fdde2-3cde-4db3-b0c9-11a9359de69d\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/version/v1/tan/teletan
    * Found 1 potential fault of type-code 100
    */
    @Test @Timeout(60)
    public void test_31_postOnTeletanCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. app/coronawarn/verification/config/RequestSizeLimitFilter_60_doFilterInternal.
        given().accept("*/*")
                .header("Authorization", "{\"token\":\"_EM_2217_XYZ_\"}")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "_EM_2218_XYZ_")
                .header("x-cwa-teletan-type", "_EM_2220_XYZ_")
                .header("x-b3-traceid", "_EM_2221_XYZ_")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(500)// app/coronawarn/verification/config/RequestSizeLimitFilter_60_doFilterInternal
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (500) POST:/version/v1/tan/verify
    * Found 1 potential fault of type-code 100
    */
    @Test @Timeout(60)
    public void test_32_postOnVerifyCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 34L)
                .d("VERSION", "-267258712")
                .d("CREATED_AT", "\"2067-06-02 11:29:13\"")
                .d("UPDATED_AT", "\"2088-10-16 16:39:02\"")
                .d("HASHED_GUID", "\"S\"")
                .d("REGISTRATION_TOKEN_HASH", "\"b86f992de54a04d1dfc5516c9317a06028fe33f3382ce43cc78c1c6a57dcf9d2\"")
                .d("TELE_TAN_HASH", "\"U\"")
                .d("TAN_COUNTER", "8192")
                .d("SOT", "\"dK8BZteVGPzqBL3AR\"")
                .d("HASHED_GUID_DOB", "\"ayahcU5\"")
                .d("TELETAN_TYPE", "\"X25wVMLj5i\"")
            .and().insertInto("TAN", 35L)
                .d("VERSION", "-130168")
                .d("CREATED_AT", "\"2049-06-03 09:00:27\"")
                .d("UPDATED_AT", "\"2100-06-16 11:13:17\"")
                .d("VALID_FROM", "\"2053-03-15 13:59:34\"")
                .d("VALID_UNTIL", "\"2000-06-17 01:57:37\"")
                .d("TAN_HASH", "\"e773e4c55fab9900dff207ff505d7fcf1c8f4da1e6508f15644252e1b801a4b6\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. app/coronawarn/verification/config/RequestSizeLimitFilter_60_doFilterInternal.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "QKT_Evnq0Q")
                .header("b3", "mh9RwoKVcOkP")
                .header("X-B3-Sampled", "UiA9t8FqKg6Nn")
                .header("X-B3-TraceId", "_EM_2363_XYZ")
                .header("cwa-fake", "BLhT3qr4PXoc9")
                .header("X-CWA-TELETAN-TYPE", "c")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"6871ba7c-d1fe-4afb-A3fa-8f4b5ac8a1b2\", " + 
                    " \"responsePadding\": \"_EM_2361_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(500)// app/coronawarn/verification/config/RequestSizeLimitFilter_60_doFilterInternal
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) POST:/version/v1/tan/verify
    */
    @Test @Timeout(60)
    public void test_33_postOnVerifyReturns200() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 45L)
                .d("VERSION", "131439")
                .d("CREATED_AT", "\"2000-01-09 06:41:22\"")
                .d("UPDATED_AT", "\"1963-10-08 06:50:27\"")
                .d("HASHED_GUID", "\"OFArha\"")
                .d("REGISTRATION_TOKEN_HASH", "\"fJNLH1Uta8eA8TV\"")
                .d("TELE_TAN_HASH", "\"_EM_1064_XYZ_\"")
                .d("TAN_COUNTER", "-33553885")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_855_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 46L)
                .d("VERSION", "-286")
                .d("CREATED_AT", "\"1954-05-22 03:36:43\"")
                .d("UPDATED_AT", "\"1995-03-23 23:27:51\"")
                .d("VALID_FROM", "\"1975-05-13 00:00:17\"")
                .d("VALID_UNTIL", "\"2040-12-08 01:00:53\"")
                .d("TAN_HASH", "\"b1bf0476212786e16d9dd05330af526dc6ed82352cd049f0dce998450dbdbba2\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("b3", "foo")
                .header("X-B3-Sampled", "foo")
                .header("X-B3-TraceId", "foo")
                .header("cwa-fake", "_EM_853_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"fa501e4b-eb3f-4f42-9ec7-7f79b95e9f2f\", " + 
                    " \"responsePadding\": \"t66\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/tan/teletan
    */
    @Test @Timeout(60)
    public void test_34_postOnTeletanReturns201() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 45L)
                .d("VERSION", "131439")
                .d("CREATED_AT", "\"2000-01-09 02:39:26\"")
                .d("UPDATED_AT", "\"1963-10-08 06:50:27\"")
                .d("HASHED_GUID", "\"OFArh`\"")
                .d("REGISTRATION_TOKEN_HASH", "\"UYVLQUMUa4UUWUU\"")
                .d("TELE_TAN_HASH", "\"_EM_1816_XYZ_\"")
                .d("TAN_COUNTER", "-33553885")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"_EM_855_XYZ_H\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 46L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1954-01-22 03:36:43\"")
                .d("UPDATED_AT", "\"1999-02-23 21:29:59\"")
                .d("VALID_FROM", "\"2000-06-13 00:00:49\"")
                .d("VALID_UNTIL", "\"2040-12-08 03:15:52\"")
                .d("TAN_HASH", "\"_EM_778_XYZ_\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"TUYUVp\"}")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Sampled", "X`hLJ8mfqFvk")
                .header("X-B3-TraceId", "_EM_220_XYZ_")
                .header("X-CWA-TELETAN-TYPE", "EVENT")
                .post(baseUrlOfSut + "/version/v1/tan/teletan?EMextraParam123=42")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("FATH9STUCF"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/tan/teletan
    */
    @Test @Timeout(60)
    public void test_35_postOnTeletanReturns201() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"_EM_523_XYZ_\"}")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "_EM_525_XYZ_")
                .header("X-B3-TraceId", "U9dIrD")
                .post(baseUrlOfSut + "/version/v1/tan/teletan?EMextraParam123=42")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("4NACCZF5QA"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/tan/teletan
    */
    @Test @Timeout(60)
    public void test_36_postOnTeletanReturns201() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 45L)
                .d("VERSION", "131439")
                .d("CREATED_AT", "\"2000-01-09 06:41:22\"")
                .d("UPDATED_AT", "\"1971-06-08 06:50:27\"")
                .d("HASHED_GUID", "\"_EM_1748_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"fJNLH1Uta8eA8TV\"")
                .d("TELE_TAN_HASH", "\"_EM_1064_XYZ_\"")
                .d("TAN_COUNTER", "-29359581")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"_EM_1746_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 46L)
                .d("VERSION", "-67109150")
                .d("CREATED_AT", "\"1954-05-22 03:36:43\"")
                .d("UPDATED_AT", "\"2059-05-23 23:27:51\"")
                .d("VALID_FROM", "\"1975-05-16 02:00:17\"")
                .d("VALID_UNTIL", "\"2040-12-08 01:00:53\"")
                .d("TAN_HASH", "\"b1bf0476212786e16d9dd05330af526dc6ed82352cd049f0dce998450dbdbba2\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"U;UUUpN\"}")
                .header("x-EMextraHeader123", "42")
                .header("b3", "_EM_1063_XYZ_")
                .header("X-B3-Flags", "boo")
                .header("X-B3-Sampled", "fo")
                .header("X-B3-TraceId", "foo")
                .header("X-CWA-TELETAN-TYPE", "")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("AKTUFRT8X5"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/tan/teletan
    */
    @Test @Timeout(60)
    public void test_37_postOnTeletanReturns201() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 45L)
                .d("VERSION", "131439")
                .d("CREATED_AT", "\"2000-01-09 06:41:22\"")
                .d("UPDATED_AT", "\"1963-10-08 06:29:29\"")
                .d("HASHED_GUID", "\"OUCrhaZ\"")
                .d("REGISTRATION_TOKEN_HASH", "\"fJNLH1Uta8eA8TV\"")
                .d("TELE_TAN_HASH", "\"_EM_1064_XYZ_\"")
                .d("TAN_COUNTER", "-33552861")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_855_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 46L)
                .d("VERSION", "-4390")
                .d("CREATED_AT", "\"1954-05-22 03:40:43\"")
                .d("UPDATED_AT", "\"1995-06-16 22:25:29\"")
                .d("VALID_FROM", "\"1979-05-12 00:00:17\"")
                .d("VALID_UNTIL", "\"2040-12-08 01:00:53\"")
                .d("TAN_HASH", "\"b1bf0476212786e16d9dd05330af526dc6ed82352cd049f0dce998450dbdbba2\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"Br3F\"}")
                .header("x-EMextraHeader123", "")
                .header("b3", "")
                .header("X-B3-Flags", "_EM_1061_XYZ")
                .header("X-B3-Sampled", "foo3")
                .header("X-B3-TraceId", "UUi")
                .header("X-CWA-TELETAN-TYPE", "TEST")
                .header("cwa-fake", "foo")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("6HXMP39TBF"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/tan/teletan
    */
    @Test @Timeout(60)
    public void test_38_postOnTeletanReturns201() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 34L)
                .d("VERSION", "-128")
                .d("CREATED_AT", "\"2003-10-16 23:29:29\"")
                .d("UPDATED_AT", "\"2000-06-18 14:55:18\"")
                .d("HASHED_GUID", "\"_EM_5910_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"2ccdbe4d60a51e5f98cd98b6baea7a8b28155f7a9a5b5340d6eff42c404b0368\"")
                .d("TELE_TAN_HASH", "\"vDh\"")
                .d("TAN_COUNTER", "-4162")
                .d("SOT", "\"dK8BZteVGPzqBL3Aw\"")
                .d("HASHED_GUID_DOB", "\"NrUbUUe\"")
                .d("TELETAN_TYPE", "\"X25wVMLj5\"")
            .and().insertInto("TAN", 35L)
                .d("VERSION", "16645008")
                .d("CREATED_AT", "\"2000-05-05 09:16:29\"")
                .d("UPDATED_AT", "\"2100-06-16 19:13:57\"")
                .d("VALID_FROM", "\"2021-01-16 11:59:29\"")
                .d("VALID_UNTIL", "\"1984-06-24 01:58:29\"")
                .d("TAN_HASH", "\"e3e82b7d4fd3d60f43235a6256ca5787b5e4c58bd4d8d307d78be90d25f1f05d\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"yGbVNSkMQO3t7`W3e5\"}")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "u")
                .header("x-cwa-teletan-type", "")
                .header("x-b3-traceid", "_EM_7337_XYZ_")
                .header("X-B3-TraceId", "_EM_6990_XYZ_")
                .header("cwa-fake", "oNZchqGyDlOJBi5f")
                .header("x-b3-flags", "DjL0Cc4vHuA")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("QX39NRCA92"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/tan/teletan
    */
    @Test @Timeout(60)
    public void test_39_postOnTeletanReturns201() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 34L)
                .d("VERSION", "-128")
                .d("CREATED_AT", "\"2003-10-16 23:29:29\"")
                .d("UPDATED_AT", "\"2000-06-18 14:55:18\"")
                .d("HASHED_GUID", "\"_EM_5910_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"2ccdbe4d60a51e5f98cd98b6baea7a8b28155f7a9a5b5340d6eff42c404b0368\"")
                .d("TELE_TAN_HASH", "\"vDh\"")
                .d("TAN_COUNTER", "-4162")
                .d("SOT", "\"dK8BZteVGPzqBL3Aw\"")
                .d("HASHED_GUID_DOB", "\"NrUbUUe\"")
                .d("TELETAN_TYPE", "\"X25wVMLj5\"")
            .and().insertInto("TAN", 35L)
                .d("VERSION", "16645008")
                .d("CREATED_AT", "\"2000-05-05 09:16:29\"")
                .d("UPDATED_AT", "\"2100-06-16 19:13:57\"")
                .d("VALID_FROM", "\"2021-01-16 11:59:29\"")
                .d("VALID_UNTIL", "\"1984-06-24 01:58:29\"")
                .d("TAN_HASH", "\"e3e82b7d4fd3d60f43235a6256ca5787b5e4c58bd4d8d307d78be90d25f1f05d\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"yGbVNSkMQO3t7`W3e5\"}")
                .header("x-EMextraHeader123", "")
                .header("x-b3-sampled", "foo")
                .header("b3", "_EM_6077_XYZ_")
                .header("x-cwa-teletan-type", "TEST")
                .header("x-b3-traceid", "ks2RR_iG6Lx")
                .header("X-B3-TraceId", "feo")
                .header("x-b3-flags", "_EM_6078_XYZ_")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("Z5GV9NHDE9"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/tan/teletan
    */
    @Test @Timeout(60)
    public void test_40_postOnTeletanReturns201() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 34L)
                .d("VERSION", "-128")
                .d("CREATED_AT", "\"2003-10-16 23:29:29\"")
                .d("UPDATED_AT", "\"2000-04-18 06:55:18\"")
                .d("HASHED_GUID", "\"_EM_5910_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"2ccdbe4d60a51e5f98cd98b6baea7a8b28155f7a9a5b5340d6eff42c404b0368\"")
                .d("TELE_TAN_HASH", "\"vDh\"")
                .d("TAN_COUNTER", "-4162")
                .d("SOT", "\"dK8BZteVGPzqBL3Aw\"")
                .d("HASHED_GUID_DOB", "\"NrUbUUe\"")
                .d("TELETAN_TYPE", "\"X25wVMLj5\"")
            .and().insertInto("TAN", 35L)
                .d("VERSION", "16645008")
                .d("CREATED_AT", "\"2000-05-05 09:16:29\"")
                .d("UPDATED_AT", "\"2100-06-16 19:13:57\"")
                .d("VALID_FROM", "\"2029-09-16 11:59:29\"")
                .d("VALID_UNTIL", "\"1984-06-24 01:58:29\"")
                .d("TAN_HASH", "\"e3e82b7d4fd3d60f43235a6256ca5787b5e4c58bd4d8d307d78be90d25f1f05d\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"_EM_7343_XYZ_\"}")
                .header("x-EMextraHeader123", "")
                .header("x-cwa-teletan-type", "EVENT")
                .header("x-b3-traceid", "_EM_7337_XYZ_")
                .header("X-B3-TraceId", "_EM_6990_XYZ_")
                .header("cwa-fake", "_EM_7344_XYZ_")
                .header("x-b3-flags", "DjL0Ac4vHuA")
                .header("x-b3-spanid", "kHwyZ3HQfkHZUF")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("3HVJFW76K9"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/tan/teletan
    */
    @Test @Timeout(60)
    public void test_41_postOnTeletanReturns201() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"\"}")
                .header("x-EMextraHeader123", "")
                .header("b3", "QTWaGi2")
                .header("x-b3-traceid", "N")
                .header("cwa-fake", "RmFk")
                .header("x-b3-flags", "_EM_6341_XYZ_")
                .header("X-Forwarded-For", "zaIwyp")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("9DPGPAB64F"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/tan/teletan
    */
    @Test @Timeout(60)
    public void test_42_postOnTeletanReturns400() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 175L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2073-09-21 10:07:45\"")
                .d("UPDATED_AT", "\"1915-08-18 02:24:21\"")
                .d("HASHED_GUID", "\"mx\"")
                .d("REGISTRATION_TOKEN_HASH", "\"K05XYQglGpc\"")
                .d("TELE_TAN_HASH", "\"Ay50aAm53D0c\"")
                .d("TAN_COUNTER", "313")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "NULL")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 176L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1975-10-07 21:06:30\"")
                .d("UPDATED_AT", "\"2005-06-16 21:18:23\"")
                .d("VALID_FROM", "\"2084-12-11 05:10:47\"")
                .d("VALID_UNTIL", "\"2020-10-21 19:08:09\"")
                .d("TAN_HASH", "\"_EM_4799_XYZ_\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "{\"token\":\"0Nwq7LyGVwl7\"}")
                .header("x-EMextraHeader123", "")
                .header("b3", "foo")
                .header("X-B3-Sampled", "foo")
                .header("X-B3-TraceId", "_EM_4795_XYZ_")
                .header("X-CWA-TELETAN-TYPE", "foo")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (404) POST:/version/v1/tan/verify
    */
    @Test @Timeout(60)
    public void test_43_postOnVerifyReturns404() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 45L)
                .d("VERSION", "131439")
                .d("CREATED_AT", "\"2000-01-09 06:41:22\"")
                .d("UPDATED_AT", "\"1963-10-08 06:29:29\"")
                .d("HASHED_GUID", "\"OUCrhaZ\"")
                .d("REGISTRATION_TOKEN_HASH", "\"fJNLH1Uta8eA8TV\"")
                .d("TELE_TAN_HASH", "\"_EM_1064_XYZ_\"")
                .d("TAN_COUNTER", "-33552861")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_855_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 46L)
                .d("VERSION", "-4390")
                .d("CREATED_AT", "\"1954-05-22 03:40:43\"")
                .d("UPDATED_AT", "\"1995-06-16 22:25:29\"")
                .d("VALID_FROM", "\"1979-05-12 00:00:17\"")
                .d("VALID_UNTIL", "\"2040-12-08 01:00:53\"")
                .d("TAN_HASH", "\"b1bf0476212786e16d9dd05330af526dc6ed82352cd049f0dce998450dbdbba2\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "fpo")
                .header("b3", "foo")
                .header("X-B3-TraceId", "foo")
                .header("cwa-fake", "_EM_853_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"fa501e4b-eb3f-4f42-9ec7-7f79b95e9f2f\", " + 
                    " \"responsePadding\": \"t66\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) POST:/version/v1/tan/verify
    */
    @Test @Timeout(60)
    public void test_44_postOnVerifyReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .header("X-B3-Flags", "_EM_2443_XYZ_")
                .header("X-B3-TraceId", "qTZg")
                .header("cwa-fake", "_EM_2445_XYZ_")
                .header("X-CWA-TELETAN-TYPE", "_EM_2446_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"06d4dee3-7a6b-4439-a7ff-9f5c29ec9e00\", " + 
                    " \"responsePadding\": \"_EM_2442_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) POST:/version/v1/tan/verify
    */
    @Test @Timeout(60)
    public void test_45_postOnVerifyReturns404() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 34L)
                .d("VERSION", "-267390292")
                .d("CREATED_AT", "\"2067-06-02 11:36:31\"")
                .d("UPDATED_AT", "\"1960-04-16 15:39:00\"")
                .d("HASHED_GUID", "\"I\"")
                .d("REGISTRATION_TOKEN_HASH", "\"b86f992de54a04d1dfc5516c9317a06028fe33f3382ce43cc78c1c6a57dcf9d2\"")
                .d("TELE_TAN_HASH", "\"h\"")
                .d("TAN_COUNTER", "8192")
                .d("SOT", "\"dK8@ZteVGPzqBL3A\"")
                .d("HASHED_GUID_DOB", "\"_EM_9891_XYZ_\"")
                .d("TELETAN_TYPE", "\"XV4wUTUk3U\"")
            .and().insertInto("TAN", 35L)
                .d("VERSION", "-130160")
                .d("CREATED_AT", "\"2017-06-03 11:29:29\"")
                .d("UPDATED_AT", "\"2068-04-21 07:59:18\"")
                .d("VALID_FROM", "\"2086-03-07 19:27:50\"")
                .d("VALID_UNTIL", "\"2000-06-17 11:57:29\"")
                .d("TAN_HASH", "\"e773e4c55fab9900dff207ff505d7fcf1c8f4da1e6508f15644252e1b801a4b6\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"70b525cf-f58c-44aa-bed5-4ac3d727a136\", " + 
                    " \"responsePadding\": \"KpkpNbZXkxiZBR9HQ\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) POST:/version/v1/tan/verify
    */
    @Test @Timeout(60)
    public void test_46_postOnVerifyReturns404() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 34L)
                .d("VERSION", "-267390296")
                .d("CREATED_AT", "\"2067-06-02 11:36:29\"")
                .d("UPDATED_AT", "\"2088-06-16 16:39:02\"")
                .d("HASHED_GUID", "\"G\"")
                .d("REGISTRATION_TOKEN_HASH", "\"b86f992de54a04d1dfc5516c9317a06028fe33f3382ce43cc78c1c6a57dcf9d2\"")
                .d("TELE_TAN_HASH", "\"i\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"dK8BZteVGPzqBL3A\"")
                .d("HASHED_GUID_DOB", "\"ayalcT5\"")
                .d("TELETAN_TYPE", "\"X25wVMLj5i\"")
            .and().insertInto("TAN", 35L)
                .d("VERSION", "-130160")
                .d("CREATED_AT", "\"2017-06-03 11:29:29\"")
                .d("UPDATED_AT", "\"2100-12-20 07:29:18\"")
                .d("VALID_FROM", "\"2021-01-15 13:59:34\"")
                .d("VALID_UNTIL", "\"2000-06-17 01:57:37\"")
                .d("TAN_HASH", "\"e773e4c55fab9900dff207ff505d7fcf1c8f4da1e6508f15644252e1b801a4b6\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"70b525cf-f58c-44aa-bed5-4ac3d727a136\", " + 
                    " \"responsePadding\": \"KpkpNbZXktiZBR9HQ\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) POST:/version/v1/tan/verify
    */
    @Test @Timeout(60)
    public void test_47_postOnVerifyReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("X-B3-TraceId", "ZKpzTxcLon")
                .header("x-b3-flags", "_EM_3057_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"0efe3f4e-655e-45d1-9336-ea852fafdc4c\", " + 
                    " \"responsePadding\": \"FmZxGU03fg1d9v\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) POST:/version/v1/tan/verify
    */
    @Test @Timeout(60)
    public void test_48_postOnVerifyReturns404() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 190L)
                .d("VERSION", "130")
                .d("CREATED_AT", "\"2051-12-04 23:36:51\"")
                .d("UPDATED_AT", "\"2013-01-18 17:30:50\"")
                .d("HASHED_GUID", "NULL")
                .d("REGISTRATION_TOKEN_HASH", "\"NhrXcOJZ\"")
                .d("TELE_TAN_HASH", "\"tAMPNXFiGeN\"")
                .d("TAN_COUNTER", "74")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"UyAHP{JSo2\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 191L)
                .d("VERSION", "752")
                .d("CREATED_AT", "\"2099-05-27 22:49:15\"")
                .d("UPDATED_AT", "\"2008-08-09 04:17:48\"")
                .d("VALID_FROM", "\"2058-02-05 01:36:48\"")
                .d("VALID_UNTIL", "\"1990-10-31 01:55:24\"")
                .d("TAN_HASH", "NULL")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("b3", "d")
                .header("X-CWA-TELETAN-TYPE", "LpkpcGItAEn")
                .header("X-B3-Flags", "zY80oZMWkmu9CV")
                .header("x-forwarded-for", "_EM_4712_XYZ_")
                .header("x-b3-traceid", "_EM_4713_XYZ_")
                .header("X-B3-TraceId", "V5PT3E")
                .header("cwa-fake", "AM")
                .header("x-b3-flags", "fqhNZl8Qvs")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"f30af6dc-3728-49ed-97af-ccdf0583e450\", " + 
                    " \"responsePadding\": \"42\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
