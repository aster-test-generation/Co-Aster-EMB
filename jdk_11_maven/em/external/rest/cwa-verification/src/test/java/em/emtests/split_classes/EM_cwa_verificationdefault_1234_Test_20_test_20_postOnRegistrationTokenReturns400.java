package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T17:17:27.370118-04:00[America/New_York]
 * <br>
*  The generated test suite contains 49 tests
 * <br>
*  Covered targets: 814
 * <br>
*  Used time: 1h 1m 28s
 * <br>
*  Needed budget for current results: 95%
 * <br>
*  
*/

public class EM_cwa_verificationdefault_1234_Test_20_test_20_postOnRegistrationTokenReturns400 {
    

    
    private static final SutHandler controller = new em.external.app.coronawarn.verification.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/cwa-verification-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("APP_SESSION","TAN","app_session","tan"));
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (400) POST:/version/v1/registrationToken
    */
    @Test @Timeout(60)
    public void test_20_postOnRegistrationTokenReturns400() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 34L)
                .d("VERSION", "-267390292")
                .d("CREATED_AT", "\"2067-06-01 10:37:29\"")
                .d("UPDATED_AT", "\"2088-10-16 16:39:02\"")
                .d("HASHED_GUID", "\"T\"")
                .d("REGISTRATION_TOKEN_HASH", "\"b9d61b469b9c7f6c91830c3d561321065c8318cf2fc7da8678734ad798829eac\"")
                .d("TELE_TAN_HASH", "\"qa\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"_EM_2966_XYZ_\"")
                .d("HASHED_GUID_DOB", "\"eWO7MDBxaTAsplB\"")
                .d("TELETAN_TYPE", "NULL")
            .and().insertInto("TAN", 35L)
                .d("VERSION", "512")
                .d("CREATED_AT", "\"2049-06-03 09:00:27\"")
                .d("UPDATED_AT", "\"2000-06-01 03:13:17\"")
                .d("VALID_FROM", "\"2100-05-17 13:51:34\"")
                .d("VALID_UNTIL", "\"2000-06-17 01:57:37\"")
                .d("TAN_HASH", "\"e3e82b7d4fd3d60f43235a6256ca5787b5e4c58bd4d8d307d78be90d25f1f05d\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("cwa-fake", "_EM_3366_XYZ_")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "aRxLxk")
                .header("b3", "fRhEB")
                .header("x-b3-traceid", "0MwedUU387Hml9G")
                .header("X-B3-Sampled", "tRuE")
                .header("X-B3-TraceId", "_EM_2963_XYZ_")
                .header("x-cwa-teletan-type", "_EM_2964_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"4VREE9GW8F\", " + 
                    " \"keyDob\": \"XF2BaeCaDf366EAEDb4B7F1aeaeCEc6c2A2f09D70aA7d1BBcEEf7ECe0E3D1aAD\", " + 
                    " \"keyType\": \"TELETAN\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
}
