package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-03T17:17:27.370118-04:00[America/New_York]
 * <br>
*  The generated test suite contains 49 tests
 * <br>
*  Covered targets: 814
 * <br>
*  Used time: 1h 1m 28s
 * <br>
*  Needed budget for current results: 95%
 * <br>
*  
*/

public class EM_cwa_verificationdefault_1234_Test_12_test_12_postOnTanReturns201 {
    

    
    private static final SutHandler controller = new em.external.app.coronawarn.verification.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/cwa-verification-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("APP_SESSION","TAN","app_session","tan"));
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (201) POST:/version/v1/tan
    */
    @Test @Timeout(60)
    public void test_12_postOnTanReturns201() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 190L)
                .d("VERSION", "130")
                .d("CREATED_AT", "\"2051-12-04 23:36:51\"")
                .d("UPDATED_AT", "\"2000-01-18 17:30:50\"")
                .d("HASHED_GUID", "NULL")
                .d("REGISTRATION_TOKEN_HASH", "NULL")
                .d("TELE_TAN_HASH", "\"tAMPNXFiGeN3\"")
                .d("TAN_COUNTER", "330")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"1yAIRyJSo2\"")
                .d("TELETAN_TYPE", "NULL")
            .and().insertInto("TAN", 191L)
                .d("VERSION", "752")
                .d("CREATED_AT", "\"2099-05-27 22:49:15\"")
                .d("UPDATED_AT", "\"2008-08-09 04:17:48\"")
                .d("VALID_FROM", "\"2054-02-03 03:36:50\"")
                .d("VALID_UNTIL", "\"2000-01-31 01:29:29\"")
                .d("TAN_HASH", "NULL")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("cwa-fake", "1")
                .header("x-EMextraHeader123", "")
                .header("b3", "Vtat")
                .header("X-B3-TraceId", "qEzfteC")
                .header("x-b3-flags", "_EM_4709_XYZ_")
                .header("X-CWA-TELETAN-TYPE", "58i_F")
                .header("x-forwarded-for", "Go_nJr5TeL4y")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"d5426b6c-54e7-4c9a-8605-df2a51ab56bb\", " + 
                    " \"responsePadding\": \"tDuF_n\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'tan'", containsString("3e0e512d-d3cd-4f06-abfa-566754f2e579"))
                .body("'responsePadding'", containsString("XvX0gOjEOrulN1W"));
    }
}
