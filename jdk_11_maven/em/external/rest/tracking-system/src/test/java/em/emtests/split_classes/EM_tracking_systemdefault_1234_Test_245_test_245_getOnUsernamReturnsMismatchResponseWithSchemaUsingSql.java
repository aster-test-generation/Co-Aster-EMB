package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-17T13:43:22.813939-04:00[America/New_York]
 * <br>
*  The generated test suite contains 341 tests
 * <br>
*  Covered targets: 1793
 * <br>
*  Used time: 1h 5m 1s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  
*/

public class EM_tracking_systemdefault_1234_Test_245_test_245_getOnUsernamReturnsMismatchResponseWithSchemaUsingSql {
    

    
    private static final SutHandler controller = new em.external.com.pfa.app.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/tracking-system-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("ASSIGNMENTS","DEPARTMENTS","EMPLOYEES","LOCATIONS","PROJECTS","USER_CREDENTIALS","assignments","departments","employees","locations","projects","user_credentials"));
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (200) GET:/app/api/employees/username/{username}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_245_getOnUsernamReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1207L)
                .d("ADR", "\"Mj_iX\"")
                .d("POSTAL_CODE", "\"pCvxYr09Wt5\"")
                .d("CITY", "\"_EM_5039_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 1206L)
                .d("DEPARTMENT_NAME", "\"wlUrW\"")
            .and().insertInto("EMPLOYEES", 1205L)
                .d("FIRST_NAME", "\"Vk4jylHr33Aw_9\"")
                .d("LAST_NAME", "\"xUG9s\"")
                .d("EMAIL", "\"qUx@IBv.SCp\"")
                .d("PHONE", "\"Gd0T0WabQY\"")
                .d("JOB", "\"_EM_4589_XYZ_\"")
                .d("SALARY", "0.0")
            .and().insertInto("LOCATIONS", 1204L)
                .d("ADR", "\"_EM_5040_XYZ_\"")
                .d("POSTAL_CODE", "\"y4cJ1lODOT\"")
                .d("CITY", "\"ZeLI5LujoR\"")
            .and().insertInto("DEPARTMENTS", 1203L)
                .d("DEPARTMENT_NAME", "\"O5IHaE\"")
            .and().insertInto("EMPLOYEES", 1202L)
                .d("FIRST_NAME", "\"uI\"")
                .d("LAST_NAME", "\"eHBju\"")
                .d("EMAIL", "\"Le@d.ZqR\"")
                .d("PHONE", "\"ufHKnboFeA_LUom1\"")
                .d("JOB", "\"lO\"")
                .d("SALARY", "0.4485495317707172")
            .and().insertInto("LOCATIONS", 1201L)
                .d("ADR", "\"tf7yaKOycAFY\"")
                .d("POSTAL_CODE", "\"3jz5w0d\"")
                .d("CITY", "\"G3H3nDOj\"")
            .and().insertInto("DEPARTMENTS", 1200L)
                .d("DEPARTMENT_NAME", "\"GNDSTHC6VCbtskB\"")
            .and().insertInto("EMPLOYEES", 1199L)
                .d("FIRST_NAME", "\"KpqUW4r46M2\"")
                .d("LAST_NAME", "\"_1rhEHEWLo9\"")
                .d("EMAIL", "\"GjP@PrT.KO\"")
                .d("PHONE", "\"y3\"")
                .d("JOB", "\"RmfYUBxxbTL\"")
                .d("SALARY", "0.0")
            .and().insertInto("USER_CREDENTIALS", 1198L)
                .d("USERNAME", "\"OARU\"")
                .d("PASSWORD", "\"_EM_4592_XYZ_d\"")
                .d("ENABLED", "false")
                .d("ROLE", "\"_EM_5041_XYZ_\"")
                .d("EMPLOYEE_ID", "7")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/hiredate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/employees/username/johndoe?" + 
                    "password=_EM_5038_XYZ_&" + 
                    "username=S")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'employeeId'", numberMatches(9.0))
                .body("'firstName'", containsString("John"))
                .body("'lastName'", containsString("Doe"))
                .body("'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'phone'", containsString("22125144"))
                .body("'hiredate'", nullValue())
                .body("'job'", containsString("Chef service digital"))
                .body("'salary'", numberMatches(6000.0))
                .body("'manager'", nullValue())
                .body("'department'.'departmentId'", numberMatches(5.0))
                .body("'department'.'departmentName'", containsString("Digital"))
                .body("'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'department'.'location'.'postalCode'", containsString("2016"))
                .body("'department'.'location'.'city'", containsString("LAC2"))
                .body("'credential'.'credentialId'", numberMatches(7.0))
                .body("'credential'.'username'", containsString("johndoe"))
                .body("'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'credential'.'enabled'", equalTo(true))
                .body("'credential'.'role'", containsString("ROLE_MGR"));
    }
}
