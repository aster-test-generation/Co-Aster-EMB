package em.emtests.single_class;

/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-17T13:43:22.813939-04:00[America/New_York]
 * <br>
*  The generated test suite contains 341 tests
 * <br>
*  Covered targets: 1793
 * <br>
*  Used time: 1h 5m 1s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  
*/
public class EM_tracking_systemdefault_1234_Test {

    
    private static final SutHandler controller = new em.external.com.pfa.app.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/tracking-system-sut.jar");
    private static String baseUrlOfSut;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("ASSIGNMENTS","DEPARTMENTS","EMPLOYEES","LOCATIONS","PROJECTS","USER_CREDENTIALS","assignments","departments","employees","locations","projects","user_credentials"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (200) GET:/app/api/assignments/
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_0_getOnAssignmentsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/0/commitEmpDesc'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_535_XYZ_")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/assignments/")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(59))
                .body("'collection'[0].'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'projectId'", numberMatches(1.0))
                .body("'collection'[0].'commitDate'", containsString("26-11-202010:50:09"))
                .body("'collection'[0].'commitEmpDesc'", nullValue())
                .body("'collection'[0].'commitMgrDesc'", containsString("init"))
                .body("'collection'[0].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[0].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[0].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[0].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[0].'employee'.'job'", containsString("Billing"))
                .body("'collection'[0].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[0].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[0].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[0].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[0].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[0].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[0].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[0].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[0].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[0].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[0].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[0].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[0].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[0].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[0].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[0].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[0].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[0].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[0].'project'.'status'", containsString("COMPLETED"))
                .body("'collection'[1].'employeeId'", numberMatches(1.0))
                .body("'collection'[1].'projectId'", numberMatches(1.0))
                .body("'collection'[1].'commitDate'", containsString("26-11-202013:14:22"))
                .body("'collection'[1].'commitEmpDesc'", containsString("set up some configs"))
                .body("'collection'[1].'commitMgrDesc'", containsString("you need to implement sec solution"))
                .body("'collection'[1].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[1].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[1].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[1].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[1].'employee'.'job'", containsString("Billing"))
                .body("'collection'[1].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[1].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[1].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[1].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[1].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[1].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[1].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[1].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[1].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[1].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[1].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[1].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[1].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[1].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[1].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[1].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[1].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[1].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[1].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[1].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[1].'project'.'status'", containsString("COMPLETED"))
                .body("'collection'[2].'employeeId'", numberMatches(1.0))
                .body("'collection'[2].'projectId'", numberMatches(1.0))
                .body("'collection'[2].'commitDate'", containsString("12-12-202016:49:42"))
                .body("'collection'[2].'commitEmpDesc'", containsString("implement customer by invoice"))
                .body("'collection'[2].'commitMgrDesc'", nullValue())
                .body("'collection'[2].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[2].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[2].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[2].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[2].'employee'.'job'", containsString("Billing"))
                .body("'collection'[2].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[2].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[2].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[2].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[2].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[2].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[2].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[2].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[2].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[2].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[2].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[2].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[2].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[2].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[2].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[2].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[2].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[2].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[2].'project'.'status'", containsString("COMPLETED"))
                ; // Skipping assertions on the remaining 56 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/locations
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_1_getOnApiLocationsWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 4825L)
                .d("ADR", "NULL")
                .d("POSTAL_CODE", "NULL")
                .d("CITY", "\"R1fOTo\"")
            .and().insertInto("LOCATIONS", 4831L)
                .d("ADR", "\"qc\"")
                .d("POSTAL_CODE", "\"xkHh\"")
                .d("CITY", "\"loJG\"")
            .and().insertInto("DEPARTMENTS", 4830L)
                .d("DEPARTMENT_NAME", "\"nNtgpbjB7Y\"")
                .d("LOCATION_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/2/adr'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/locations?username=M")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(4))
                .body("'collection'[0].'locationId'", numberMatches(1.0))
                .body("'collection'[0].'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'postalCode'", containsString("2016"))
                .body("'collection'[0].'city'", containsString("LAC2"))
                .body("'collection'[1].'locationId'", numberMatches(2.0))
                .body("'collection'[1].'adr'", containsString("RUE DE BLA BLA"))
                .body("'collection'[1].'postalCode'", containsString("2016"))
                .body("'collection'[1].'city'", containsString("CHARGUIA"))
                .body("'collection'[2].'locationId'", numberMatches(3.0))
                .body("'collection'[2].'adr'", nullValue())
                .body("'collection'[2].'postalCode'", nullValue())
                .body("'collection'[2].'city'", containsString("R1fOTo"))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/locations
    */
    @Test @Timeout(60)
    public void test_2_getOnApiLocationsWithQueryParamsReturnsObjectUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/locations?" + 
                    "password=%242a%2410%246pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78%2FcvOprSR3lsZL2&" + 
                    "username=soumayahajjem")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(2))
                .body("'collection'[0].'locationId'", numberMatches(1.0))
                .body("'collection'[0].'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'postalCode'", containsString("2016"))
                .body("'collection'[0].'city'", containsString("LAC2"))
                .body("'collection'[1].'locationId'", numberMatches(2.0))
                .body("'collection'[1].'adr'", containsString("RUE DE BLA BLA"))
                .body("'collection'[1].'postalCode'", containsString("2016"))
                .body("'collection'[1].'city'", containsString("CHARGUIA"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/projects/
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_3_getOnProjectsReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("PROJECTS", 520L)
                .d("TITLE", "\"H\"")
                .d("STATUS", "\"KVoX5Q_5v\"")
            .and().insertInto("LOCATIONS", 519L)
                .d("ADR", "\"w4KGvx0bPGU3\"")
                .d("POSTAL_CODE", "\"64FFiJSubFw\"")
                .d("CITY", "\"KZD3EICr\"")
            .and().insertInto("DEPARTMENTS", 518L)
                .d("DEPARTMENT_NAME", "\"_EungE\"")
            .and().insertInto("EMPLOYEES", 517L)
                .d("FIRST_NAME", "\"LTCUvretdSF\"")
                .d("LAST_NAME", "\"TXqhPzeUKf9hzG1\"")
                .d("EMAIL", "\"lC@T.rWra\"")
                .d("PHONE", "\"0j7vEVM5CT0t3\"")
                .d("JOB", "\"iis6ch5f1PW\"")
                .d("SALARY", "0.3674976848433549")
            .and().insertInto("EMPLOYEES", 514L)
                .d("FIRST_NAME", "\"HVrEkhPz\"")
                .d("LAST_NAME", "\"XKszJskZ5w_9XV0V\"")
                .d("EMAIL", "\"NJew@e.pwtN\"")
                .d("PHONE", "\"FUbSbsGhPZPKoO\"")
                .d("JOB", "\"axow8SUJkn8mPKH\"")
                .d("SALARY", "0.023377774526005757")
            .and().insertInto("ASSIGNMENTS", 510L)
                .r("EMPLOYEE_ID", 517L)
                .r("PROJECT_ID", 520L)
                .d("COMMIT_DATE", "\"1980-03-03 23:50:02\"")
                .d("COMMIT_EMP_DESC", "NULL")
                .d("COMMIT_MGR_DESC", "\"hQRL8\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/9/endDate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/projects/?" + 
                    "EMextraParam123=42&" + 
                    "username=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(10))
                .body("'collection'[0].'projectId'", numberMatches(1.0))
                .body("'collection'[0].'title'", containsString("TRANSBSCS"))
                .body("'collection'[0].'startDate'", containsString("28-09-2020"))
                .body("'collection'[0].'endDate'", containsString("04-11-2020"))
                .body("'collection'[0].'status'", containsString("COMPLETED"))
                .body("'collection'[1].'projectId'", numberMatches(2.0))
                .body("'collection'[1].'title'", containsString("SYNCH_BSCS_IMX"))
                .body("'collection'[1].'startDate'", containsString("26-11-2020"))
                .body("'collection'[1].'endDate'", containsString("25-03-2021"))
                .body("'collection'[1].'status'", containsString("IN_PROGRESS"))
                .body("'collection'[2].'projectId'", numberMatches(3.0))
                .body("'collection'[2].'title'", containsString("TASYI9A LILVIRANDA"))
                .body("'collection'[2].'startDate'", containsString("26-11-2020"))
                .body("'collection'[2].'endDate'", containsString("26-11-2020"))
                .body("'collection'[2].'status'", containsString("COMPLETED"))
                ; // Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/projects/
    */
    @Test @Timeout(60)
    public void test_4_getOnProjectsReturnsObject() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/projects/?password=%242a%2410%246pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78%2FcvOprSR3lsZL2")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(9))
                .body("'collection'[0].'projectId'", numberMatches(1.0))
                .body("'collection'[0].'title'", containsString("TRANSBSCS"))
                .body("'collection'[0].'startDate'", containsString("28-09-2020"))
                .body("'collection'[0].'endDate'", containsString("04-11-2020"))
                .body("'collection'[0].'status'", containsString("COMPLETED"))
                .body("'collection'[1].'projectId'", numberMatches(2.0))
                .body("'collection'[1].'title'", containsString("SYNCH_BSCS_IMX"))
                .body("'collection'[1].'startDate'", containsString("26-11-2020"))
                .body("'collection'[1].'endDate'", containsString("25-03-2021"))
                .body("'collection'[1].'status'", containsString("IN_PROGRESS"))
                .body("'collection'[2].'projectId'", numberMatches(3.0))
                .body("'collection'[2].'title'", containsString("TASYI9A LILVIRANDA"))
                .body("'collection'[2].'startDate'", containsString("26-11-2020"))
                .body("'collection'[2].'endDate'", containsString("26-11-2020"))
                .body("'collection'[2].'status'", containsString("COMPLETED"))
                ; // Skipping assertions on the remaining 6 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/locations/
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_5_getOnLocationsLocationsReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1976L)
            .and().insertInto("DEPARTMENTS", 1975L)
            .and().insertInto("EMPLOYEES", 1974L)
                .d("EMAIL", "\"ykhyyxABAvD\"")
                .d("PHONE", "\"t\"")
            .and().insertInto("LOCATIONS", 1973L)
            .and().insertInto("DEPARTMENTS", 1972L)
            .and().insertInto("EMPLOYEES", 1971L)
                .d("EMAIL", "\"aLcp@jsO.oQH\"")
                .d("PHONE", "\"P7QpMS7S15JGO\"")
            .and().insertInto("LOCATIONS", 1970L)
            .and().insertInto("DEPARTMENTS", 1969L)
            .and().insertInto("EMPLOYEES", 1968L)
                .d("EMAIL", "\"WDx2Z2su\"")
                .d("PHONE", "\"PfXE7RDGm\"")
            .and().insertInto("USER_CREDENTIALS", 1967L)
                .d("USERNAME", "NULL")
                .d("PASSWORD", "\"Uaho8\"")
                .d("ENABLED", "true")
                .d("ROLE", "NULL")
                .d("EMPLOYEE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/2/adr'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/locations/")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(5))
                .body("'collection'[0].'locationId'", numberMatches(1.0))
                .body("'collection'[0].'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'postalCode'", containsString("2016"))
                .body("'collection'[0].'city'", containsString("LAC2"))
                .body("'collection'[1].'locationId'", numberMatches(2.0))
                .body("'collection'[1].'adr'", containsString("RUE DE BLA BLA"))
                .body("'collection'[1].'postalCode'", containsString("2016"))
                .body("'collection'[1].'city'", containsString("CHARGUIA"))
                .body("'collection'[2].'locationId'", numberMatches(3.0))
                .body("'collection'[2].'adr'", nullValue())
                .body("'collection'[2].'postalCode'", nullValue())
                .body("'collection'[2].'city'", nullValue())
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/locations/
    */
    @Test @Timeout(60)
    public void test_6_getOnLocationsReturnsObject() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/locations/?" + 
                    "password=_EM_2732_XYZ_&" + 
                    "username=_EM_2733_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(2))
                .body("'collection'[0].'locationId'", numberMatches(1.0))
                .body("'collection'[0].'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'postalCode'", containsString("2016"))
                .body("'collection'[0].'city'", containsString("LAC2"))
                .body("'collection'[1].'locationId'", numberMatches(2.0))
                .body("'collection'[1].'adr'", containsString("RUE DE BLA BLA"))
                .body("'collection'[1].'postalCode'", containsString("2016"))
                .body("'collection'[1].'city'", containsString("CHARGUIA"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/locations/
    */
    @Test @Timeout(60)
    public void test_7_getOnLocationsReturnsObject() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/locations/?" + 
                    "EMextraParam123=_EM_2014_XYZ_&" + 
                    "username=marwenmejri")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(2))
                .body("'collection'[0].'locationId'", numberMatches(1.0))
                .body("'collection'[0].'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'postalCode'", containsString("2016"))
                .body("'collection'[0].'city'", containsString("LAC2"))
                .body("'collection'[1].'locationId'", numberMatches(2.0))
                .body("'collection'[1].'adr'", containsString("RUE DE BLA BLA"))
                .body("'collection'[1].'postalCode'", containsString("2016"))
                .body("'collection'[1].'city'", containsString("CHARGUIA"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/locations/
    */
    @Test @Timeout(60)
    public void test_8_getOnLocationsReturnsObject() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/app/api/locations/")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(2))
                .body("'collection'[0].'locationId'", numberMatches(1.0))
                .body("'collection'[0].'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'postalCode'", containsString("2016"))
                .body("'collection'[0].'city'", containsString("LAC2"))
                .body("'collection'[1].'locationId'", numberMatches(2.0))
                .body("'collection'[1].'adr'", containsString("RUE DE BLA BLA"))
                .body("'collection'[1].'postalCode'", containsString("2016"))
                .body("'collection'[1].'city'", containsString("CHARGUIA"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/assignments
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_9_getOnAssignmentsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/0/commitEmpDesc'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/assignments")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(59))
                .body("'collection'[0].'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'projectId'", numberMatches(1.0))
                .body("'collection'[0].'commitDate'", containsString("26-11-202010:50:09"))
                .body("'collection'[0].'commitEmpDesc'", nullValue())
                .body("'collection'[0].'commitMgrDesc'", containsString("init"))
                .body("'collection'[0].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[0].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[0].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[0].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[0].'employee'.'job'", containsString("Billing"))
                .body("'collection'[0].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[0].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[0].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[0].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[0].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[0].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[0].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[0].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[0].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[0].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[0].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[0].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[0].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[0].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[0].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[0].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[0].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[0].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[0].'project'.'status'", containsString("COMPLETED"))
                .body("'collection'[1].'employeeId'", numberMatches(1.0))
                .body("'collection'[1].'projectId'", numberMatches(1.0))
                .body("'collection'[1].'commitDate'", containsString("26-11-202013:14:22"))
                .body("'collection'[1].'commitEmpDesc'", containsString("set up some configs"))
                .body("'collection'[1].'commitMgrDesc'", containsString("you need to implement sec solution"))
                .body("'collection'[1].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[1].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[1].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[1].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[1].'employee'.'job'", containsString("Billing"))
                .body("'collection'[1].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[1].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[1].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[1].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[1].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[1].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[1].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[1].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[1].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[1].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[1].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[1].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[1].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[1].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[1].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[1].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[1].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[1].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[1].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[1].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[1].'project'.'status'", containsString("COMPLETED"))
                .body("'collection'[2].'employeeId'", numberMatches(1.0))
                .body("'collection'[2].'projectId'", numberMatches(1.0))
                .body("'collection'[2].'commitDate'", containsString("12-12-202016:49:42"))
                .body("'collection'[2].'commitEmpDesc'", containsString("implement customer by invoice"))
                .body("'collection'[2].'commitMgrDesc'", nullValue())
                .body("'collection'[2].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[2].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[2].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[2].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[2].'employee'.'job'", containsString("Billing"))
                .body("'collection'[2].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[2].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[2].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[2].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[2].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[2].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[2].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[2].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[2].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[2].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[2].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[2].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[2].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[2].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[2].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[2].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[2].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[2].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[2].'project'.'status'", containsString("COMPLETED"))
                ; // Skipping assertions on the remaining 56 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/assignments
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_10_getOnAssignmentsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/0/commitEmpDesc'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/app/api/assignments?EMextraParam123=_EM_48_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(59))
                .body("'collection'[0].'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'projectId'", numberMatches(1.0))
                .body("'collection'[0].'commitDate'", containsString("26-11-202010:50:09"))
                .body("'collection'[0].'commitEmpDesc'", nullValue())
                .body("'collection'[0].'commitMgrDesc'", containsString("init"))
                .body("'collection'[0].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[0].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[0].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[0].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[0].'employee'.'job'", containsString("Billing"))
                .body("'collection'[0].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[0].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[0].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[0].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[0].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[0].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[0].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[0].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[0].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[0].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[0].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[0].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[0].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[0].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[0].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[0].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[0].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[0].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[0].'project'.'status'", containsString("COMPLETED"))
                .body("'collection'[1].'employeeId'", numberMatches(1.0))
                .body("'collection'[1].'projectId'", numberMatches(1.0))
                .body("'collection'[1].'commitDate'", containsString("26-11-202013:14:22"))
                .body("'collection'[1].'commitEmpDesc'", containsString("set up some configs"))
                .body("'collection'[1].'commitMgrDesc'", containsString("you need to implement sec solution"))
                .body("'collection'[1].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[1].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[1].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[1].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[1].'employee'.'job'", containsString("Billing"))
                .body("'collection'[1].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[1].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[1].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[1].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[1].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[1].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[1].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[1].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[1].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[1].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[1].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[1].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[1].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[1].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[1].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[1].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[1].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[1].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[1].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[1].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[1].'project'.'status'", containsString("COMPLETED"))
                .body("'collection'[2].'employeeId'", numberMatches(1.0))
                .body("'collection'[2].'projectId'", numberMatches(1.0))
                .body("'collection'[2].'commitDate'", containsString("12-12-202016:49:42"))
                .body("'collection'[2].'commitEmpDesc'", containsString("implement customer by invoice"))
                .body("'collection'[2].'commitMgrDesc'", nullValue())
                .body("'collection'[2].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[2].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[2].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[2].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[2].'employee'.'job'", containsString("Billing"))
                .body("'collection'[2].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[2].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[2].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[2].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[2].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[2].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[2].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[2].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[2].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[2].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[2].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[2].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[2].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[2].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[2].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[2].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[2].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[2].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[2].'project'.'status'", containsString("COMPLETED"))
                ; // Skipping assertions on the remaining 56 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/assignments/
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_11_getOnAssignmentsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/0/commitEmpDesc'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/app/api/assignments/")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(59))
                .body("'collection'[0].'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'projectId'", numberMatches(1.0))
                .body("'collection'[0].'commitDate'", containsString("26-11-202010:50:09"))
                .body("'collection'[0].'commitEmpDesc'", nullValue())
                .body("'collection'[0].'commitMgrDesc'", containsString("init"))
                .body("'collection'[0].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[0].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[0].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[0].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[0].'employee'.'job'", containsString("Billing"))
                .body("'collection'[0].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[0].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[0].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[0].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[0].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[0].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[0].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[0].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[0].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[0].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[0].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[0].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[0].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[0].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[0].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[0].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[0].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[0].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[0].'project'.'status'", containsString("COMPLETED"))
                .body("'collection'[1].'employeeId'", numberMatches(1.0))
                .body("'collection'[1].'projectId'", numberMatches(1.0))
                .body("'collection'[1].'commitDate'", containsString("26-11-202013:14:22"))
                .body("'collection'[1].'commitEmpDesc'", containsString("set up some configs"))
                .body("'collection'[1].'commitMgrDesc'", containsString("you need to implement sec solution"))
                .body("'collection'[1].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[1].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[1].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[1].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[1].'employee'.'job'", containsString("Billing"))
                .body("'collection'[1].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[1].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[1].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[1].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[1].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[1].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[1].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[1].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[1].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[1].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[1].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[1].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[1].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[1].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[1].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[1].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[1].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[1].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[1].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[1].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[1].'project'.'status'", containsString("COMPLETED"))
                .body("'collection'[2].'employeeId'", numberMatches(1.0))
                .body("'collection'[2].'projectId'", numberMatches(1.0))
                .body("'collection'[2].'commitDate'", containsString("12-12-202016:49:42"))
                .body("'collection'[2].'commitEmpDesc'", containsString("implement customer by invoice"))
                .body("'collection'[2].'commitMgrDesc'", nullValue())
                .body("'collection'[2].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[2].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[2].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[2].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[2].'employee'.'job'", containsString("Billing"))
                .body("'collection'[2].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[2].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[2].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[2].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[2].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[2].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[2].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[2].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[2].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[2].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[2].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[2].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[2].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[2].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[2].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[2].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[2].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[2].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[2].'project'.'status'", containsString("COMPLETED"))
                ; // Skipping assertions on the remaining 56 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/credentials/
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_12_getOnCredentialsReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1620L)
                .d("ADR", "\"S]AbWA\"")
                .d("POSTAL_CODE", "\"y3yhsg7rP2NcRIg\"")
                .d("CITY", "\"_EM_5386_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 1619L)
                .d("DEPARTMENT_NAME", "\"sI23bvEWsb\"")
            .and().insertInto("EMPLOYEES", 1618L)
                .d("FIRST_NAME", "\"XhC0\"")
                .d("LAST_NAME", "\"_EM_5582_XYZ_\"")
                .d("EMAIL", "\"QH@X.UJ\"")
                .d("PHONE", "\"BLt4rDYUnu\"")
                .d("JOB", "\"A5PsX7n5PDw7NTY\"")
                .d("SALARY", "0.6355764862062817")
            .and().insertInto("EMPLOYEES", 1615L)
                .d("FIRST_NAME", "\"ix9W65x_\"")
                .d("LAST_NAME", "\"_EM_5583_XYZ_\"")
                .d("EMAIL", "\"kef@vbv.OU\"")
                .d("PHONE", "\"ogDBdyKl5J\"")
                .d("JOB", "\"m5yD103b\"")
                .d("SALARY", "1.9")
            .and().insertInto("USER_CREDENTIALS", 1611L)
                .d("USERNAME", "\"VzME4R9hjUl\"")
                .d("PASSWORD", "\"_EM_5584_XYZ_\"")
                .d("ENABLED", "false")
                .d("ROLE", "\"_EM_5585_XYZ_\"")
                .d("EMPLOYEE_ID", "NULL")
            .and().insertInto("PROJECTS", 1569L)
                .d("TITLE", "\"Gy9qF14M2i:\"")
                .d("STATUS", "\"qs_7c4\"")
            .and().insertInto("LOCATIONS", 1568L)
                .d("ADR", "\"_EM_5568_XYZ_e\"")
                .d("POSTAL_CODE", "\"G\"")
                .d("CITY", "\"zTMadiK5ej_wNhzl\"")
            .and().insertInto("DEPARTMENTS", 1567L)
                .d("DEPARTMENT_NAME", "\"Billingk\"")
            .and().insertInto("EMPLOYEES", 1566L)
                .d("FIRST_NAME", "\"054Lr8a1UD3cqA\"")
                .d("LAST_NAME", "\"_EM_5388_XYZ_7\"")
                .d("EMAIL", "\"gmWB@yDB.tih\"")
                .d("PHONE", "\"_EM_5339_XYZ_\"")
                .d("JOB", "\"T\"")
                .d("SALARY", "-1836.1717721682587")
            .and().insertInto("EMPLOYEES", 1563L)
                .d("FIRST_NAME", "\"elYS3AXFIqMW\"")
                .d("LAST_NAME", "\"_EM_5341_XYZ_\"")
                .d("EMAIL", "\"KxZ@TEE.EtMC\"")
                .d("PHONE", "\"Tmfqc6uohhk\"")
                .d("JOB", "\"1X4lSi8c\"")
                .d("SALARY", "18889.314188789744")
            .and().insertInto("USER_CREDENTIALS", 1580L)
                .d("USERNAME", "NULL")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "true")
                .d("ROLE", "\"AK9jTW_RweDl_S\"")
                .r("EMPLOYEE_ID", 1566L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/15/password'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/credentials/?" + 
                    "password=_EM_5567_XYZ_&" + 
                    "username=_EM_5383_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(16))
                .body("'collection'[0].'credentialId'", numberMatches(1.0))
                .body("'collection'[0].'username'", containsString("imentouk"))
                .body("'collection'[0].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'enabled'", equalTo(true))
                .body("'collection'[0].'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'credentialId'", numberMatches(2.0))
                .body("'collection'[1].'username'", containsString("badridoudi"))
                .body("'collection'[1].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'enabled'", equalTo(true))
                .body("'collection'[1].'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'credentialId'", numberMatches(3.0))
                .body("'collection'[2].'username'", containsString("selimhorri"))
                .body("'collection'[2].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'enabled'", equalTo(true))
                .body("'collection'[2].'role'", containsString("ROLE_EMP"))
                ; // Skipping assertions on the remaining 13 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/credentials
    */
    @Test @Timeout(60)
    public void test_13_getOnCredentialsReturnsObject() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/credentials")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(14))
                .body("'collection'[0].'credentialId'", numberMatches(1.0))
                .body("'collection'[0].'username'", containsString("imentouk"))
                .body("'collection'[0].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'enabled'", equalTo(true))
                .body("'collection'[0].'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'credentialId'", numberMatches(2.0))
                .body("'collection'[1].'username'", containsString("badridoudi"))
                .body("'collection'[1].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'enabled'", equalTo(true))
                .body("'collection'[1].'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'credentialId'", numberMatches(3.0))
                .body("'collection'[2].'username'", containsString("selimhorri"))
                .body("'collection'[2].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'enabled'", equalTo(true))
                .body("'collection'[2].'role'", containsString("ROLE_EMP"))
                ; // Skipping assertions on the remaining 11 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/credentials
    */
    @Test @Timeout(60)
    public void test_14_getOnCredentialsReturnsObject() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_50_XYZ_")
                .get(baseUrlOfSut + "/app/api/credentials")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(14))
                .body("'collection'[0].'credentialId'", numberMatches(1.0))
                .body("'collection'[0].'username'", containsString("imentouk"))
                .body("'collection'[0].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'enabled'", equalTo(true))
                .body("'collection'[0].'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'credentialId'", numberMatches(2.0))
                .body("'collection'[1].'username'", containsString("badridoudi"))
                .body("'collection'[1].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'enabled'", equalTo(true))
                .body("'collection'[1].'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'credentialId'", numberMatches(3.0))
                .body("'collection'[2].'username'", containsString("selimhorri"))
                .body("'collection'[2].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'enabled'", equalTo(true))
                .body("'collection'[2].'role'", containsString("ROLE_EMP"))
                ; // Skipping assertions on the remaining 11 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/credentials/
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_15_getOnCredentialsCredentialsWithQueryParamUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1620L)
                .d("ADR", "\"SaAbWA\"")
                .d("POSTAL_CODE", "\"y3yhsg7rP2NcSIg\"")
                .d("CITY", "\"OnG\"")
            .and().insertInto("DEPARTMENTS", 1619L)
                .d("DEPARTMENT_NAME", "\"sI23bvEWsb\"")
            .and().insertInto("EMPLOYEES", 1618L)
                .d("FIRST_NAME", "\"WhC0\"")
                .d("LAST_NAME", "\"k\"")
                .d("EMAIL", "\"PH@W.VI\"")
                .d("PHONE", "\"BLt4rDYUou\"")
                .d("JOB", "\"A5PsX7n5PDw7NTY\"")
                .d("SALARY", "0.6355764862062817")
            .and().insertInto("EMPLOYEES", 1615L)
                .d("FIRST_NAME", "\"ix9W65x_\"")
                .d("LAST_NAME", "\"Kg98lSG\"")
                .d("EMAIL", "\"kff@vbv.PT\"")
                .d("PHONE", "\"ogDBdyKl5J\"")
                .d("JOB", "\"m5yD103b\"")
                .d("SALARY", "0.8")
            .and().insertInto("USER_CREDENTIALS", 1611L)
                .d("USERNAME", "\"VzME4R9hjUl\"")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "false")
                .d("ROLE", "\"_EM_5395_XYZ_\"")
                .d("EMPLOYEE_ID", "NULL")
            .and().insertInto("PROJECTS", 1569L)
                .d("TITLE", "\"_EM_5337_XYZ_\"")
                .d("STATUS", "\"qs_7c4\"")
            .and().insertInto("LOCATIONS", 1568L)
                .d("ADR", "\"_EM_3719_XYZ_\"")
                .d("POSTAL_CODE", "\"G\"")
                .d("CITY", "\"CIgoexy1eG0y\"")
            .and().insertInto("DEPARTMENTS", 1567L)
                .d("DEPARTMENT_NAME", "\"Billing\"")
            .and().insertInto("EMPLOYEES", 1566L)
                .d("FIRST_NAME", "\"054Lq8a1UD3cqA\"")
                .d("LAST_NAME", "\"_EM_5388_XYZ_\"")
                .d("EMAIL", "\"gmWB@yDA.tih\"")
                .d("PHONE", "\"_EM_5339_XYZ_\"")
                .d("JOB", "\"P\"")
                .d("SALARY", "0.0")
            .and().insertInto("EMPLOYEES", 1563L)
                .d("FIRST_NAME", "\"_EM_5340_XYZ_\"")
                .d("LAST_NAME", "\"_EM_5341_XYZ_\"")
                .d("EMAIL", "\"Kxa@TFE.EtMC\"")
                .d("PHONE", "\"Tmfqc6uophk\"")
                .d("JOB", "\"_EM_5342_XYZ_\"")
                .d("SALARY", "0.8524167800005203")
            .and().insertInto("USER_CREDENTIALS", 1580L)
                .d("USERNAME", "NULL")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "false")
                .d("ROLE", "\"AK9jTW_RweDl_S\"")
                .r("EMPLOYEE_ID", 1566L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/14/password'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/credentials/?username=9T1%7EK")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(16))
                .body("'collection'[0].'credentialId'", numberMatches(1.0))
                .body("'collection'[0].'username'", containsString("imentouk"))
                .body("'collection'[0].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'enabled'", equalTo(true))
                .body("'collection'[0].'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'credentialId'", numberMatches(2.0))
                .body("'collection'[1].'username'", containsString("badridoudi"))
                .body("'collection'[1].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'enabled'", equalTo(true))
                .body("'collection'[1].'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'credentialId'", numberMatches(3.0))
                .body("'collection'[2].'username'", containsString("selimhorri"))
                .body("'collection'[2].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'enabled'", equalTo(true))
                .body("'collection'[2].'role'", containsString("ROLE_EMP"))
                ; // Skipping assertions on the remaining 13 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/credentials/
    */
    @Test @Timeout(60)
    public void test_16_getOnCredentialsReturnsObjectUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("DEPARTMENTS", 853L)
                .d("DEPARTMENT_NAME", "\"2c6\"")
            .and().insertInto("DEPARTMENTS", 850L)
                .d("DEPARTMENT_NAME", "\"2IYeA\"")
            .and().insertInto("LOCATIONS", 848L)
                .d("ADR", "\"0cMhVAQV4cT\"")
                .d("POSTAL_CODE", "\"o\"")
                .d("CITY", "\"Tc\"")
            .and().insertInto("DEPARTMENTS", 847L)
                .d("DEPARTMENT_NAME", "\"1DXfeEo\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/credentials/?" + 
                    "EMextraParam123=42&" + 
                    "username=RthmFMm")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(14))
                .body("'collection'[0].'credentialId'", numberMatches(1.0))
                .body("'collection'[0].'username'", containsString("imentouk"))
                .body("'collection'[0].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'enabled'", equalTo(true))
                .body("'collection'[0].'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'credentialId'", numberMatches(2.0))
                .body("'collection'[1].'username'", containsString("badridoudi"))
                .body("'collection'[1].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'enabled'", equalTo(true))
                .body("'collection'[1].'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'credentialId'", numberMatches(3.0))
                .body("'collection'[2].'username'", containsString("selimhorri"))
                .body("'collection'[2].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'enabled'", equalTo(true))
                .body("'collection'[2].'role'", containsString("ROLE_EMP"))
                ; // Skipping assertions on the remaining 11 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/credentials/
    */
    @Test @Timeout(60)
    public void test_17_getOnCredentialsReturnsObjectUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1879L)
            .and().insertInto("DEPARTMENTS", 1878L)
            .and().insertInto("EMPLOYEES", 1877L)
                .d("EMAIL", "\"UfZc\"")
                .d("PHONE", "\"SqNQ99wzkQW\"")
            .and().insertInto("EMPLOYEES", 1874L)
                .d("EMAIL", "\"k7nmypenzfQxE\"")
                .d("PHONE", "\"_\"")
            .and().insertInto("ASSIGNMENTS", 1870L)
                .d("EMPLOYEE_ID", "12")
                .d("PROJECT_ID", "2")
                .d("COMMIT_DATE", "\"2039-09-03 12:55:39\"")
                .d("COMMIT_EMP_DESC", "\"0T4eslkXNPc\"")
                .d("COMMIT_MGR_DESC", "\"\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/app/api/credentials/?" + 
                    "EMextraParam123=42&" + 
                    "password=5KhY6CDGj6YsdD5&" + 
                    "username=o")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(14))
                .body("'collection'[0].'credentialId'", numberMatches(1.0))
                .body("'collection'[0].'username'", containsString("imentouk"))
                .body("'collection'[0].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'enabled'", equalTo(true))
                .body("'collection'[0].'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'credentialId'", numberMatches(2.0))
                .body("'collection'[1].'username'", containsString("badridoudi"))
                .body("'collection'[1].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'enabled'", equalTo(true))
                .body("'collection'[1].'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'credentialId'", numberMatches(3.0))
                .body("'collection'[2].'username'", containsString("selimhorri"))
                .body("'collection'[2].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'enabled'", equalTo(true))
                .body("'collection'[2].'role'", containsString("ROLE_EMP"))
                ; // Skipping assertions on the remaining 11 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/departments/
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_18_getOnDepartmentsReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("PROJECTS", 170L)
                .d("TITLE", "\"FY2MGkX\"")
                .d("STATUS", "\"8s0KId5S9zJCZdi\"")
            .and().insertInto("LOCATIONS", 169L)
                .d("ADR", "\"NnSyFUCck\"")
                .d("POSTAL_CODE", "\"ePHlwJt2IQlu\"")
                .d("CITY", "\"JkAXPnZyNKovk\"")
            .and().insertInto("DEPARTMENTS", 168L)
                .d("DEPARTMENT_NAME", "\"mpxZJMIC3\"")
            .and().insertInto("EMPLOYEES", 167L)
                .d("FIRST_NAME", "\"shnPRzXcCTxW\"")
                .d("LAST_NAME", "\"QVOT\"")
                .d("EMAIL", "\"NqpT@Ze.iQ\"")
                .d("PHONE", "\"D64LZ\"")
                .d("JOB", "\"cfohytEPs\"")
                .d("SALARY", "0.19409175516553356")
            .and().insertInto("LOCATIONS", 166L)
                .d("ADR", "\"RClltXFKBZPh\"")
                .d("POSTAL_CODE", "\"AtzhMpqBTHDOB\"")
                .d("CITY", "\"Wk_\"")
            .and().insertInto("DEPARTMENTS", 165L)
                .d("DEPARTMENT_NAME", "\"7_WOIFFmdGWuE\"")
            .and().insertInto("EMPLOYEES", 164L)
                .d("FIRST_NAME", "\"p\"")
                .d("LAST_NAME", "\"vljOvdfCXa\"")
                .d("EMAIL", "\"xvja@DaV.JtL\"")
                .d("PHONE", "\"xbHqJfsIy\"")
                .d("JOB", "\"Fc6lq3g\"")
                .d("SALARY", "0.8533293413097808")
            .and().insertInto("LOCATIONS", 163L)
                .d("ADR", "\"lKRXhZ2mi_9bdDA\"")
                .d("POSTAL_CODE", "\"eUsK\"")
                .d("CITY", "\"wmf\"")
            .and().insertInto("DEPARTMENTS", 162L)
                .d("DEPARTMENT_NAME", "\"OXc\"")
            .and().insertInto("EMPLOYEES", 161L)
                .d("FIRST_NAME", "\"lqawObaCh_t0Q\"")
                .d("LAST_NAME", "\"5S6etiTxqFj\"")
                .d("EMAIL", "\"ib@U.iU\"")
                .d("PHONE", "\"_OpJIUOH\"")
                .d("JOB", "\"bkefKgbRjRGqB\"")
                .d("SALARY", "0.07952904538163086")
            .and().insertInto("ASSIGNMENTS", 160L)
                .d("EMPLOYEE_ID", "13")
                .d("PROJECT_ID", "9")
                .d("COMMIT_DATE", "\"2071-05-31 00:07:36\"")
                .d("COMMIT_EMP_DESC", "\"xA_ZoWjTg0XqYBR\"")
                .d("COMMIT_MGR_DESC", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/3/location'] Instance type (null) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/departments/")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(6))
                .body("'collection'[0].'departmentId'", numberMatches(4.0))
                .body("'collection'[0].'departmentName'", containsString("DWH"))
                .body("'collection'[0].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'departmentName'", containsString("Digital"))
                .body("'collection'[1].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'departmentName'", containsString("Billing"))
                .body("'collection'[2].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'location'.'city'", containsString("LAC2"))
                ; // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/departments
    */
    @Test @Timeout(60)
    public void test_19_getOnApiDepartmentsReturnsObject() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/departments")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(3))
                .body("'collection'[0].'departmentId'", numberMatches(4.0))
                .body("'collection'[0].'departmentName'", containsString("DWH"))
                .body("'collection'[0].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'departmentName'", containsString("Digital"))
                .body("'collection'[1].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'departmentName'", containsString("Billing"))
                .body("'collection'[2].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'location'.'city'", containsString("LAC2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/departments
    */
    @Test @Timeout(60)
    public void test_20_getOnDepartmentsReturnsObject() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_53_XYZ_")
                .get(baseUrlOfSut + "/app/api/departments?EMextraParam123=_EM_52_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(3))
                .body("'collection'[0].'departmentId'", numberMatches(4.0))
                .body("'collection'[0].'departmentName'", containsString("DWH"))
                .body("'collection'[0].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'departmentName'", containsString("Digital"))
                .body("'collection'[1].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'departmentName'", containsString("Billing"))
                .body("'collection'[2].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'location'.'city'", containsString("LAC2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/departments/
    */
    @Test @Timeout(60)
    public void test_21_getOnDepartmentsReturnsObject() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/app/api/departments/")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(3))
                .body("'collection'[0].'departmentId'", numberMatches(4.0))
                .body("'collection'[0].'departmentName'", containsString("DWH"))
                .body("'collection'[0].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'departmentName'", containsString("Digital"))
                .body("'collection'[1].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'departmentName'", containsString("Billing"))
                .body("'collection'[2].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'location'.'city'", containsString("LAC2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/employees
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_22_getOnEmployeesReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/0/manager/hiredate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(14))
                .body("'collection'[0].'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'firstName'", containsString("Selim"))
                .body("'collection'[0].'lastName'", containsString("Horri"))
                .body("'collection'[0].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'phone'", containsString("22125144"))
                .body("'collection'[0].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[0].'job'", containsString("Billing"))
                .body("'collection'[0].'salary'", numberMatches(5000.0))
                .body("'collection'[0].'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[0].'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[0].'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[0].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[0].'manager'.'hiredate'", nullValue())
                .body("'collection'[0].'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[0].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[0].'manager'.'manager'", nullValue())
                .body("'collection'[0].'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[0].'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[0].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[0].'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[0].'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[0].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'employeeId'", numberMatches(2.0))
                .body("'collection'[1].'firstName'", containsString("Badr"))
                .body("'collection'[1].'lastName'", containsString("Idoudi"))
                .body("'collection'[1].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'phone'", containsString("22125144"))
                .body("'collection'[1].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[1].'job'", containsString("Digital"))
                .body("'collection'[1].'salary'", numberMatches(5000.0))
                .body("'collection'[1].'manager'.'employeeId'", numberMatches(9.0))
                .body("'collection'[1].'manager'.'firstName'", containsString("John"))
                .body("'collection'[1].'manager'.'lastName'", containsString("Doe"))
                .body("'collection'[1].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[1].'manager'.'hiredate'", nullValue())
                .body("'collection'[1].'manager'.'job'", containsString("Chef service digital"))
                .body("'collection'[1].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[1].'manager'.'manager'", nullValue())
                .body("'collection'[1].'manager'.'department'.'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'manager'.'department'.'departmentName'", containsString("Digital"))
                .body("'collection'[1].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'manager'.'credential'.'credentialId'", numberMatches(7.0))
                .body("'collection'[1].'manager'.'credential'.'username'", containsString("johndoe"))
                .body("'collection'[1].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[1].'department'.'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'department'.'departmentName'", containsString("Digital"))
                .body("'collection'[1].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'credential'.'credentialId'", numberMatches(2.0))
                .body("'collection'[1].'credential'.'username'", containsString("badridoudi"))
                .body("'collection'[1].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'employeeId'", numberMatches(3.0))
                .body("'collection'[2].'firstName'", containsString("Imen"))
                .body("'collection'[2].'lastName'", containsString("Touk"))
                .body("'collection'[2].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'phone'", containsString("22125144"))
                .body("'collection'[2].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[2].'job'", containsString("Data Warehouse"))
                .body("'collection'[2].'salary'", numberMatches(5000.0))
                .body("'collection'[2].'manager'.'employeeId'", numberMatches(5.0))
                .body("'collection'[2].'manager'.'firstName'", containsString("Nour"))
                .body("'collection'[2].'manager'.'lastName'", containsString("Larguech"))
                .body("'collection'[2].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[2].'manager'.'hiredate'", nullValue())
                .body("'collection'[2].'manager'.'job'", containsString("Chef service Data Warehouse"))
                .body("'collection'[2].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[2].'manager'.'manager'", nullValue())
                .body("'collection'[2].'manager'.'department'.'departmentId'", numberMatches(4.0))
                .body("'collection'[2].'manager'.'department'.'departmentName'", containsString("DWH"))
                .body("'collection'[2].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'manager'.'credential'.'credentialId'", numberMatches(6.0))
                .body("'collection'[2].'manager'.'credential'.'username'", containsString("nourlarguech"))
                .body("'collection'[2].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[2].'department'.'departmentId'", numberMatches(4.0))
                .body("'collection'[2].'department'.'departmentName'", containsString("DWH"))
                .body("'collection'[2].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'credential'.'credentialId'", numberMatches(1.0))
                .body("'collection'[2].'credential'.'username'", containsString("imentouk"))
                .body("'collection'[2].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'credential'.'role'", containsString("ROLE_EMP"))
                ; // Skipping assertions on the remaining 11 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/employees/
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_23_getOnEmployeesReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/0/manager/hiredate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/employees/?EMextraParam123=_EM_539_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(14))
                .body("'collection'[0].'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'firstName'", containsString("Selim"))
                .body("'collection'[0].'lastName'", containsString("Horri"))
                .body("'collection'[0].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'phone'", containsString("22125144"))
                .body("'collection'[0].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[0].'job'", containsString("Billing"))
                .body("'collection'[0].'salary'", numberMatches(5000.0))
                .body("'collection'[0].'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[0].'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[0].'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[0].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[0].'manager'.'hiredate'", nullValue())
                .body("'collection'[0].'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[0].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[0].'manager'.'manager'", nullValue())
                .body("'collection'[0].'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[0].'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[0].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[0].'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[0].'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[0].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'employeeId'", numberMatches(2.0))
                .body("'collection'[1].'firstName'", containsString("Badr"))
                .body("'collection'[1].'lastName'", containsString("Idoudi"))
                .body("'collection'[1].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'phone'", containsString("22125144"))
                .body("'collection'[1].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[1].'job'", containsString("Digital"))
                .body("'collection'[1].'salary'", numberMatches(5000.0))
                .body("'collection'[1].'manager'.'employeeId'", numberMatches(9.0))
                .body("'collection'[1].'manager'.'firstName'", containsString("John"))
                .body("'collection'[1].'manager'.'lastName'", containsString("Doe"))
                .body("'collection'[1].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[1].'manager'.'hiredate'", nullValue())
                .body("'collection'[1].'manager'.'job'", containsString("Chef service digital"))
                .body("'collection'[1].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[1].'manager'.'manager'", nullValue())
                .body("'collection'[1].'manager'.'department'.'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'manager'.'department'.'departmentName'", containsString("Digital"))
                .body("'collection'[1].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'manager'.'credential'.'credentialId'", numberMatches(7.0))
                .body("'collection'[1].'manager'.'credential'.'username'", containsString("johndoe"))
                .body("'collection'[1].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[1].'department'.'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'department'.'departmentName'", containsString("Digital"))
                .body("'collection'[1].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'credential'.'credentialId'", numberMatches(2.0))
                .body("'collection'[1].'credential'.'username'", containsString("badridoudi"))
                .body("'collection'[1].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'employeeId'", numberMatches(3.0))
                .body("'collection'[2].'firstName'", containsString("Imen"))
                .body("'collection'[2].'lastName'", containsString("Touk"))
                .body("'collection'[2].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'phone'", containsString("22125144"))
                .body("'collection'[2].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[2].'job'", containsString("Data Warehouse"))
                .body("'collection'[2].'salary'", numberMatches(5000.0))
                .body("'collection'[2].'manager'.'employeeId'", numberMatches(5.0))
                .body("'collection'[2].'manager'.'firstName'", containsString("Nour"))
                .body("'collection'[2].'manager'.'lastName'", containsString("Larguech"))
                .body("'collection'[2].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[2].'manager'.'hiredate'", nullValue())
                .body("'collection'[2].'manager'.'job'", containsString("Chef service Data Warehouse"))
                .body("'collection'[2].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[2].'manager'.'manager'", nullValue())
                .body("'collection'[2].'manager'.'department'.'departmentId'", numberMatches(4.0))
                .body("'collection'[2].'manager'.'department'.'departmentName'", containsString("DWH"))
                .body("'collection'[2].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'manager'.'credential'.'credentialId'", numberMatches(6.0))
                .body("'collection'[2].'manager'.'credential'.'username'", containsString("nourlarguech"))
                .body("'collection'[2].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[2].'department'.'departmentId'", numberMatches(4.0))
                .body("'collection'[2].'department'.'departmentName'", containsString("DWH"))
                .body("'collection'[2].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'credential'.'credentialId'", numberMatches(1.0))
                .body("'collection'[2].'credential'.'username'", containsString("imentouk"))
                .body("'collection'[2].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'credential'.'role'", containsString("ROLE_EMP"))
                ; // Skipping assertions on the remaining 11 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/employees
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_24_getOnEmployeesReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/0/manager/hiredate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/app/api/employees?EMextraParam123=_EM_56_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(14))
                .body("'collection'[0].'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'firstName'", containsString("Selim"))
                .body("'collection'[0].'lastName'", containsString("Horri"))
                .body("'collection'[0].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'phone'", containsString("22125144"))
                .body("'collection'[0].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[0].'job'", containsString("Billing"))
                .body("'collection'[0].'salary'", numberMatches(5000.0))
                .body("'collection'[0].'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[0].'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[0].'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[0].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[0].'manager'.'hiredate'", nullValue())
                .body("'collection'[0].'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[0].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[0].'manager'.'manager'", nullValue())
                .body("'collection'[0].'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[0].'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[0].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[0].'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[0].'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[0].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'employeeId'", numberMatches(2.0))
                .body("'collection'[1].'firstName'", containsString("Badr"))
                .body("'collection'[1].'lastName'", containsString("Idoudi"))
                .body("'collection'[1].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'phone'", containsString("22125144"))
                .body("'collection'[1].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[1].'job'", containsString("Digital"))
                .body("'collection'[1].'salary'", numberMatches(5000.0))
                .body("'collection'[1].'manager'.'employeeId'", numberMatches(9.0))
                .body("'collection'[1].'manager'.'firstName'", containsString("John"))
                .body("'collection'[1].'manager'.'lastName'", containsString("Doe"))
                .body("'collection'[1].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[1].'manager'.'hiredate'", nullValue())
                .body("'collection'[1].'manager'.'job'", containsString("Chef service digital"))
                .body("'collection'[1].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[1].'manager'.'manager'", nullValue())
                .body("'collection'[1].'manager'.'department'.'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'manager'.'department'.'departmentName'", containsString("Digital"))
                .body("'collection'[1].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'manager'.'credential'.'credentialId'", numberMatches(7.0))
                .body("'collection'[1].'manager'.'credential'.'username'", containsString("johndoe"))
                .body("'collection'[1].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[1].'department'.'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'department'.'departmentName'", containsString("Digital"))
                .body("'collection'[1].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'credential'.'credentialId'", numberMatches(2.0))
                .body("'collection'[1].'credential'.'username'", containsString("badridoudi"))
                .body("'collection'[1].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'employeeId'", numberMatches(3.0))
                .body("'collection'[2].'firstName'", containsString("Imen"))
                .body("'collection'[2].'lastName'", containsString("Touk"))
                .body("'collection'[2].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'phone'", containsString("22125144"))
                .body("'collection'[2].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[2].'job'", containsString("Data Warehouse"))
                .body("'collection'[2].'salary'", numberMatches(5000.0))
                .body("'collection'[2].'manager'.'employeeId'", numberMatches(5.0))
                .body("'collection'[2].'manager'.'firstName'", containsString("Nour"))
                .body("'collection'[2].'manager'.'lastName'", containsString("Larguech"))
                .body("'collection'[2].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[2].'manager'.'hiredate'", nullValue())
                .body("'collection'[2].'manager'.'job'", containsString("Chef service Data Warehouse"))
                .body("'collection'[2].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[2].'manager'.'manager'", nullValue())
                .body("'collection'[2].'manager'.'department'.'departmentId'", numberMatches(4.0))
                .body("'collection'[2].'manager'.'department'.'departmentName'", containsString("DWH"))
                .body("'collection'[2].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'manager'.'credential'.'credentialId'", numberMatches(6.0))
                .body("'collection'[2].'manager'.'credential'.'username'", containsString("nourlarguech"))
                .body("'collection'[2].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[2].'department'.'departmentId'", numberMatches(4.0))
                .body("'collection'[2].'department'.'departmentName'", containsString("DWH"))
                .body("'collection'[2].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'credential'.'credentialId'", numberMatches(1.0))
                .body("'collection'[2].'credential'.'username'", containsString("imentouk"))
                .body("'collection'[2].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'credential'.'role'", containsString("ROLE_EMP"))
                ; // Skipping assertions on the remaining 11 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/employees/
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_25_getOnEmployeesReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PROJECTS", 423L)
                .d("TITLE", "\"o\"")
                .d("STATUS", "\"_EM_2847_XYZ_\"")
            .and().insertInto("LOCATIONS", 422L)
                .d("ADR", "\"Swh50aTt\"")
                .d("POSTAL_CODE", "\"k\"")
                .d("CITY", "\"hkUO\"")
            .and().insertInto("DEPARTMENTS", 421L)
                .d("DEPARTMENT_NAME", "\"_EM_2848_XYZ_\"")
            .and().insertInto("EMPLOYEES", 420L)
                .d("FIRST_NAME", "\"lm\"")
                .d("LAST_NAME", "\"_EM_2849_XYZ_\"")
                .d("EMAIL", "\"uDP@Nm.nSs\"")
                .d("PHONE", "\"Yh4l0Kg\"")
                .d("JOB", "\"qoqwt\"")
                .d("SALARY", "0.4646124824477387")
            .and().insertInto("EMPLOYEES", 417L)
                .d("FIRST_NAME", "\"kSps3\"")
                .d("LAST_NAME", "\"_EM_2850_XYZ_\"")
                .d("EMAIL", "\"UKM@IG.PE\"")
                .d("PHONE", "\"3c\"")
                .d("JOB", "\"pw|HLLEc6\"")
                .d("SALARY", "0.0")
            .and().insertInto("ASSIGNMENTS", 413L)
                .d("EMPLOYEE_ID", "13")
                .r("PROJECT_ID", 423L)
                .d("COMMIT_DATE", "\"1966-06-01 23:02:27\"")
                .d("COMMIT_EMP_DESC", "\"dHnChPP9F\"")
                .d("COMMIT_MGR_DESC", "\"adx-d\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/0/manager/hiredate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/app/api/employees/?EMextraParam123=_EM_539_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(16))
                .body("'collection'[0].'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'firstName'", containsString("Selim"))
                .body("'collection'[0].'lastName'", containsString("Horri"))
                .body("'collection'[0].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'phone'", containsString("22125144"))
                .body("'collection'[0].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[0].'job'", containsString("Billing"))
                .body("'collection'[0].'salary'", numberMatches(5000.0))
                .body("'collection'[0].'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[0].'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[0].'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[0].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[0].'manager'.'hiredate'", nullValue())
                .body("'collection'[0].'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[0].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[0].'manager'.'manager'", nullValue())
                .body("'collection'[0].'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[0].'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[0].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[0].'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[0].'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[0].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'employeeId'", numberMatches(2.0))
                .body("'collection'[1].'firstName'", containsString("Badr"))
                .body("'collection'[1].'lastName'", containsString("Idoudi"))
                .body("'collection'[1].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'phone'", containsString("22125144"))
                .body("'collection'[1].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[1].'job'", containsString("Digital"))
                .body("'collection'[1].'salary'", numberMatches(5000.0))
                .body("'collection'[1].'manager'.'employeeId'", numberMatches(9.0))
                .body("'collection'[1].'manager'.'firstName'", containsString("John"))
                .body("'collection'[1].'manager'.'lastName'", containsString("Doe"))
                .body("'collection'[1].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[1].'manager'.'hiredate'", nullValue())
                .body("'collection'[1].'manager'.'job'", containsString("Chef service digital"))
                .body("'collection'[1].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[1].'manager'.'manager'", nullValue())
                .body("'collection'[1].'manager'.'department'.'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'manager'.'department'.'departmentName'", containsString("Digital"))
                .body("'collection'[1].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'manager'.'credential'.'credentialId'", numberMatches(7.0))
                .body("'collection'[1].'manager'.'credential'.'username'", containsString("johndoe"))
                .body("'collection'[1].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[1].'department'.'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'department'.'departmentName'", containsString("Digital"))
                .body("'collection'[1].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'credential'.'credentialId'", numberMatches(2.0))
                .body("'collection'[1].'credential'.'username'", containsString("badridoudi"))
                .body("'collection'[1].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'employeeId'", numberMatches(3.0))
                .body("'collection'[2].'firstName'", containsString("Imen"))
                .body("'collection'[2].'lastName'", containsString("Touk"))
                .body("'collection'[2].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'phone'", containsString("22125144"))
                .body("'collection'[2].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[2].'job'", containsString("Data Warehouse"))
                .body("'collection'[2].'salary'", numberMatches(5000.0))
                .body("'collection'[2].'manager'.'employeeId'", numberMatches(5.0))
                .body("'collection'[2].'manager'.'firstName'", containsString("Nour"))
                .body("'collection'[2].'manager'.'lastName'", containsString("Larguech"))
                .body("'collection'[2].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[2].'manager'.'hiredate'", nullValue())
                .body("'collection'[2].'manager'.'job'", containsString("Chef service Data Warehouse"))
                .body("'collection'[2].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[2].'manager'.'manager'", nullValue())
                .body("'collection'[2].'manager'.'department'.'departmentId'", numberMatches(4.0))
                .body("'collection'[2].'manager'.'department'.'departmentName'", containsString("DWH"))
                .body("'collection'[2].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'manager'.'credential'.'credentialId'", numberMatches(6.0))
                .body("'collection'[2].'manager'.'credential'.'username'", containsString("nourlarguech"))
                .body("'collection'[2].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[2].'department'.'departmentId'", numberMatches(4.0))
                .body("'collection'[2].'department'.'departmentName'", containsString("DWH"))
                .body("'collection'[2].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'credential'.'credentialId'", numberMatches(1.0))
                .body("'collection'[2].'credential'.'username'", containsString("imentouk"))
                .body("'collection'[2].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'credential'.'role'", containsString("ROLE_EMP"))
                ; // Skipping assertions on the remaining 13 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/locations
    */
    @Test @Timeout(60)
    public void test_26_getOnApiLocationsReturnsObject() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/app/api/locations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(2))
                .body("'collection'[0].'locationId'", numberMatches(1.0))
                .body("'collection'[0].'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'postalCode'", containsString("2016"))
                .body("'collection'[0].'city'", containsString("LAC2"))
                .body("'collection'[1].'locationId'", numberMatches(2.0))
                .body("'collection'[1].'adr'", containsString("RUE DE BLA BLA"))
                .body("'collection'[1].'postalCode'", containsString("2016"))
                .body("'collection'[1].'city'", containsString("CHARGUIA"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/locations/
    */
    @Test @Timeout(60)
    public void test_27_getOnLocationsLocationsWithQueryParamReturnsObject() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/locations/?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(2))
                .body("'collection'[0].'locationId'", numberMatches(1.0))
                .body("'collection'[0].'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'postalCode'", containsString("2016"))
                .body("'collection'[0].'city'", containsString("LAC2"))
                .body("'collection'[1].'locationId'", numberMatches(2.0))
                .body("'collection'[1].'adr'", containsString("RUE DE BLA BLA"))
                .body("'collection'[1].'postalCode'", containsString("2016"))
                .body("'collection'[1].'city'", containsString("CHARGUIA"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/projects
    */
    @Test @Timeout(60)
    public void test_28_getOnProjectsReturnsObject() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/projects?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(9))
                .body("'collection'[0].'projectId'", numberMatches(1.0))
                .body("'collection'[0].'title'", containsString("TRANSBSCS"))
                .body("'collection'[0].'startDate'", containsString("28-09-2020"))
                .body("'collection'[0].'endDate'", containsString("04-11-2020"))
                .body("'collection'[0].'status'", containsString("COMPLETED"))
                .body("'collection'[1].'projectId'", numberMatches(2.0))
                .body("'collection'[1].'title'", containsString("SYNCH_BSCS_IMX"))
                .body("'collection'[1].'startDate'", containsString("26-11-2020"))
                .body("'collection'[1].'endDate'", containsString("25-03-2021"))
                .body("'collection'[1].'status'", containsString("IN_PROGRESS"))
                .body("'collection'[2].'projectId'", numberMatches(3.0))
                .body("'collection'[2].'title'", containsString("TASYI9A LILVIRANDA"))
                .body("'collection'[2].'startDate'", containsString("26-11-2020"))
                .body("'collection'[2].'endDate'", containsString("26-11-2020"))
                .body("'collection'[2].'status'", containsString("COMPLETED"))
                ; // Skipping assertions on the remaining 6 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/projects
    */
    @Test @Timeout(60)
    public void test_29_getOnApiProjectsReturnsObject() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/app/api/projects")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(9))
                .body("'collection'[0].'projectId'", numberMatches(1.0))
                .body("'collection'[0].'title'", containsString("TRANSBSCS"))
                .body("'collection'[0].'startDate'", containsString("28-09-2020"))
                .body("'collection'[0].'endDate'", containsString("04-11-2020"))
                .body("'collection'[0].'status'", containsString("COMPLETED"))
                .body("'collection'[1].'projectId'", numberMatches(2.0))
                .body("'collection'[1].'title'", containsString("SYNCH_BSCS_IMX"))
                .body("'collection'[1].'startDate'", containsString("26-11-2020"))
                .body("'collection'[1].'endDate'", containsString("25-03-2021"))
                .body("'collection'[1].'status'", containsString("IN_PROGRESS"))
                .body("'collection'[2].'projectId'", numberMatches(3.0))
                .body("'collection'[2].'title'", containsString("TASYI9A LILVIRANDA"))
                .body("'collection'[2].'startDate'", containsString("26-11-2020"))
                .body("'collection'[2].'endDate'", containsString("26-11-2020"))
                .body("'collection'[2].'status'", containsString("COMPLETED"))
                ; // Skipping assertions on the remaining 6 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/projects/
    */
    @Test @Timeout(60)
    public void test_30_getOnProjectsReturnsObject() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_60_XYZ_")
                .get(baseUrlOfSut + "/app/api/projects/?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(9))
                .body("'collection'[0].'projectId'", numberMatches(1.0))
                .body("'collection'[0].'title'", containsString("TRANSBSCS"))
                .body("'collection'[0].'startDate'", containsString("28-09-2020"))
                .body("'collection'[0].'endDate'", containsString("04-11-2020"))
                .body("'collection'[0].'status'", containsString("COMPLETED"))
                .body("'collection'[1].'projectId'", numberMatches(2.0))
                .body("'collection'[1].'title'", containsString("SYNCH_BSCS_IMX"))
                .body("'collection'[1].'startDate'", containsString("26-11-2020"))
                .body("'collection'[1].'endDate'", containsString("25-03-2021"))
                .body("'collection'[1].'status'", containsString("IN_PROGRESS"))
                .body("'collection'[2].'projectId'", numberMatches(3.0))
                .body("'collection'[2].'title'", containsString("TASYI9A LILVIRANDA"))
                .body("'collection'[2].'startDate'", containsString("26-11-2020"))
                .body("'collection'[2].'endDate'", containsString("26-11-2020"))
                .body("'collection'[2].'status'", containsString("COMPLETED"))
                ; // Skipping assertions on the remaining 6 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/locations
    */
    @Test @Timeout(60)
    public void test_31_getOnLocationsReturnsObject() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_540_XYZ_")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/locations?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(2))
                .body("'collection'[0].'locationId'", numberMatches(1.0))
                .body("'collection'[0].'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'postalCode'", containsString("2016"))
                .body("'collection'[0].'city'", containsString("LAC2"))
                .body("'collection'[1].'locationId'", numberMatches(2.0))
                .body("'collection'[1].'adr'", containsString("RUE DE BLA BLA"))
                .body("'collection'[1].'postalCode'", containsString("2016"))
                .body("'collection'[1].'city'", containsString("CHARGUIA"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/credentials/
    */
    @Test @Timeout(60)
    public void test_32_getOnCredentialsCredentialsWithQueryParamReturnsObject() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/credentials/?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(14))
                .body("'collection'[0].'credentialId'", numberMatches(1.0))
                .body("'collection'[0].'username'", containsString("imentouk"))
                .body("'collection'[0].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'enabled'", equalTo(true))
                .body("'collection'[0].'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'credentialId'", numberMatches(2.0))
                .body("'collection'[1].'username'", containsString("badridoudi"))
                .body("'collection'[1].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'enabled'", equalTo(true))
                .body("'collection'[1].'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'credentialId'", numberMatches(3.0))
                .body("'collection'[2].'username'", containsString("selimhorri"))
                .body("'collection'[2].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'enabled'", equalTo(true))
                .body("'collection'[2].'role'", containsString("ROLE_EMP"))
                ; // Skipping assertions on the remaining 11 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/departments/
    */
    @Test @Timeout(60)
    public void test_33_getOnDepartmentsReturnsObject() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/departments/")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(3))
                .body("'collection'[0].'departmentId'", numberMatches(4.0))
                .body("'collection'[0].'departmentName'", containsString("DWH"))
                .body("'collection'[0].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'departmentName'", containsString("Digital"))
                .body("'collection'[1].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'departmentName'", containsString("Billing"))
                .body("'collection'[2].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'location'.'city'", containsString("LAC2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/projects/
    */
    @Test @Timeout(60)
    public void test_34_getOnProjectsReturnsObject() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/projects/?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(9))
                .body("'collection'[0].'projectId'", numberMatches(1.0))
                .body("'collection'[0].'title'", containsString("TRANSBSCS"))
                .body("'collection'[0].'startDate'", containsString("28-09-2020"))
                .body("'collection'[0].'endDate'", containsString("04-11-2020"))
                .body("'collection'[0].'status'", containsString("COMPLETED"))
                .body("'collection'[1].'projectId'", numberMatches(2.0))
                .body("'collection'[1].'title'", containsString("SYNCH_BSCS_IMX"))
                .body("'collection'[1].'startDate'", containsString("26-11-2020"))
                .body("'collection'[1].'endDate'", containsString("25-03-2021"))
                .body("'collection'[1].'status'", containsString("IN_PROGRESS"))
                .body("'collection'[2].'projectId'", numberMatches(3.0))
                .body("'collection'[2].'title'", containsString("TASYI9A LILVIRANDA"))
                .body("'collection'[2].'startDate'", containsString("26-11-2020"))
                .body("'collection'[2].'endDate'", containsString("26-11-2020"))
                .body("'collection'[2].'status'", containsString("COMPLETED"))
                ; // Skipping assertions on the remaining 6 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/assignments
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_35_getOnAssignmentsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/0/commitEmpDesc'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_995_XYZ_")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/assignments")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(59))
                .body("'collection'[0].'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'projectId'", numberMatches(1.0))
                .body("'collection'[0].'commitDate'", containsString("26-11-202010:50:09"))
                .body("'collection'[0].'commitEmpDesc'", nullValue())
                .body("'collection'[0].'commitMgrDesc'", containsString("init"))
                .body("'collection'[0].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[0].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[0].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[0].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[0].'employee'.'job'", containsString("Billing"))
                .body("'collection'[0].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[0].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[0].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[0].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[0].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[0].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[0].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[0].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[0].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[0].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[0].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[0].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[0].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[0].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[0].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[0].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[0].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[0].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[0].'project'.'status'", containsString("COMPLETED"))
                .body("'collection'[1].'employeeId'", numberMatches(1.0))
                .body("'collection'[1].'projectId'", numberMatches(1.0))
                .body("'collection'[1].'commitDate'", containsString("26-11-202013:14:22"))
                .body("'collection'[1].'commitEmpDesc'", containsString("set up some configs"))
                .body("'collection'[1].'commitMgrDesc'", containsString("you need to implement sec solution"))
                .body("'collection'[1].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[1].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[1].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[1].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[1].'employee'.'job'", containsString("Billing"))
                .body("'collection'[1].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[1].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[1].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[1].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[1].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[1].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[1].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[1].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[1].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[1].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[1].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[1].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[1].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[1].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[1].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[1].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[1].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[1].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[1].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[1].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[1].'project'.'status'", containsString("COMPLETED"))
                .body("'collection'[2].'employeeId'", numberMatches(1.0))
                .body("'collection'[2].'projectId'", numberMatches(1.0))
                .body("'collection'[2].'commitDate'", containsString("12-12-202016:49:42"))
                .body("'collection'[2].'commitEmpDesc'", containsString("implement customer by invoice"))
                .body("'collection'[2].'commitMgrDesc'", nullValue())
                .body("'collection'[2].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[2].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[2].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[2].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[2].'employee'.'job'", containsString("Billing"))
                .body("'collection'[2].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[2].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[2].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[2].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[2].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[2].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[2].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[2].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[2].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[2].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[2].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[2].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[2].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[2].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[2].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[2].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[2].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[2].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[2].'project'.'status'", containsString("COMPLETED"))
                ; // Skipping assertions on the remaining 56 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/assignments/
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_36_getOnAssignmentsAssignmentsWithQueryParam() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/0/commitEmpDesc'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/assignments/?EMextraParam123=_EM_996_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(59))
                .body("'collection'[0].'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'projectId'", numberMatches(1.0))
                .body("'collection'[0].'commitDate'", containsString("26-11-202010:50:09"))
                .body("'collection'[0].'commitEmpDesc'", nullValue())
                .body("'collection'[0].'commitMgrDesc'", containsString("init"))
                .body("'collection'[0].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[0].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[0].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[0].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[0].'employee'.'job'", containsString("Billing"))
                .body("'collection'[0].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[0].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[0].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[0].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[0].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[0].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[0].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[0].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[0].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[0].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[0].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[0].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[0].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[0].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[0].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[0].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[0].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[0].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[0].'project'.'status'", containsString("COMPLETED"))
                .body("'collection'[1].'employeeId'", numberMatches(1.0))
                .body("'collection'[1].'projectId'", numberMatches(1.0))
                .body("'collection'[1].'commitDate'", containsString("26-11-202013:14:22"))
                .body("'collection'[1].'commitEmpDesc'", containsString("set up some configs"))
                .body("'collection'[1].'commitMgrDesc'", containsString("you need to implement sec solution"))
                .body("'collection'[1].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[1].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[1].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[1].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[1].'employee'.'job'", containsString("Billing"))
                .body("'collection'[1].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[1].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[1].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[1].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[1].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[1].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[1].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[1].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[1].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[1].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[1].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[1].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[1].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[1].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[1].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[1].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[1].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[1].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[1].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[1].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[1].'project'.'status'", containsString("COMPLETED"))
                .body("'collection'[2].'employeeId'", numberMatches(1.0))
                .body("'collection'[2].'projectId'", numberMatches(1.0))
                .body("'collection'[2].'commitDate'", containsString("12-12-202016:49:42"))
                .body("'collection'[2].'commitEmpDesc'", containsString("implement customer by invoice"))
                .body("'collection'[2].'commitMgrDesc'", nullValue())
                .body("'collection'[2].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[2].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[2].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[2].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[2].'employee'.'job'", containsString("Billing"))
                .body("'collection'[2].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[2].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[2].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[2].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[2].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[2].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[2].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[2].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[2].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[2].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[2].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[2].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[2].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[2].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[2].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[2].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[2].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[2].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[2].'project'.'status'", containsString("COMPLETED"))
                ; // Skipping assertions on the remaining 56 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/credentials
    */
    @Test @Timeout(60)
    public void test_37_getOnCredentialsReturnsObject() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/credentials?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(14))
                .body("'collection'[0].'credentialId'", numberMatches(1.0))
                .body("'collection'[0].'username'", containsString("imentouk"))
                .body("'collection'[0].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'enabled'", equalTo(true))
                .body("'collection'[0].'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'credentialId'", numberMatches(2.0))
                .body("'collection'[1].'username'", containsString("badridoudi"))
                .body("'collection'[1].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'enabled'", equalTo(true))
                .body("'collection'[1].'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'credentialId'", numberMatches(3.0))
                .body("'collection'[2].'username'", containsString("selimhorri"))
                .body("'collection'[2].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'enabled'", equalTo(true))
                .body("'collection'[2].'role'", containsString("ROLE_EMP"))
                ; // Skipping assertions on the remaining 11 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/credentials/
    */
    @Test @Timeout(60)
    public void test_38_getOnCredentialsCredentialsWithQueryParamsReturnsObject() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/credentials/?" + 
                    "password=U&" + 
                    "username=_EM_8891_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(14))
                .body("'collection'[0].'credentialId'", numberMatches(1.0))
                .body("'collection'[0].'username'", containsString("imentouk"))
                .body("'collection'[0].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'enabled'", equalTo(true))
                .body("'collection'[0].'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'credentialId'", numberMatches(2.0))
                .body("'collection'[1].'username'", containsString("badridoudi"))
                .body("'collection'[1].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'enabled'", equalTo(true))
                .body("'collection'[1].'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'credentialId'", numberMatches(3.0))
                .body("'collection'[2].'username'", containsString("selimhorri"))
                .body("'collection'[2].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'enabled'", equalTo(true))
                .body("'collection'[2].'role'", containsString("ROLE_EMP"))
                ; // Skipping assertions on the remaining 11 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/departments
    */
    @Test @Timeout(60)
    public void test_39_getOnDepartmentsReturnsObject() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_999_XYZ_")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/departments?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(3))
                .body("'collection'[0].'departmentId'", numberMatches(4.0))
                .body("'collection'[0].'departmentName'", containsString("DWH"))
                .body("'collection'[0].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'departmentName'", containsString("Digital"))
                .body("'collection'[1].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'departmentName'", containsString("Billing"))
                .body("'collection'[2].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'location'.'city'", containsString("LAC2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/employees
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_40_getOnEmployeesReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/0/manager/hiredate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(14))
                .body("'collection'[0].'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'firstName'", containsString("Selim"))
                .body("'collection'[0].'lastName'", containsString("Horri"))
                .body("'collection'[0].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'phone'", containsString("22125144"))
                .body("'collection'[0].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[0].'job'", containsString("Billing"))
                .body("'collection'[0].'salary'", numberMatches(5000.0))
                .body("'collection'[0].'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[0].'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[0].'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[0].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[0].'manager'.'hiredate'", nullValue())
                .body("'collection'[0].'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[0].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[0].'manager'.'manager'", nullValue())
                .body("'collection'[0].'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[0].'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[0].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[0].'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[0].'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[0].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'employeeId'", numberMatches(2.0))
                .body("'collection'[1].'firstName'", containsString("Badr"))
                .body("'collection'[1].'lastName'", containsString("Idoudi"))
                .body("'collection'[1].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'phone'", containsString("22125144"))
                .body("'collection'[1].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[1].'job'", containsString("Digital"))
                .body("'collection'[1].'salary'", numberMatches(5000.0))
                .body("'collection'[1].'manager'.'employeeId'", numberMatches(9.0))
                .body("'collection'[1].'manager'.'firstName'", containsString("John"))
                .body("'collection'[1].'manager'.'lastName'", containsString("Doe"))
                .body("'collection'[1].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[1].'manager'.'hiredate'", nullValue())
                .body("'collection'[1].'manager'.'job'", containsString("Chef service digital"))
                .body("'collection'[1].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[1].'manager'.'manager'", nullValue())
                .body("'collection'[1].'manager'.'department'.'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'manager'.'department'.'departmentName'", containsString("Digital"))
                .body("'collection'[1].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'manager'.'credential'.'credentialId'", numberMatches(7.0))
                .body("'collection'[1].'manager'.'credential'.'username'", containsString("johndoe"))
                .body("'collection'[1].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[1].'department'.'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'department'.'departmentName'", containsString("Digital"))
                .body("'collection'[1].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'credential'.'credentialId'", numberMatches(2.0))
                .body("'collection'[1].'credential'.'username'", containsString("badridoudi"))
                .body("'collection'[1].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'employeeId'", numberMatches(3.0))
                .body("'collection'[2].'firstName'", containsString("Imen"))
                .body("'collection'[2].'lastName'", containsString("Touk"))
                .body("'collection'[2].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'phone'", containsString("22125144"))
                .body("'collection'[2].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[2].'job'", containsString("Data Warehouse"))
                .body("'collection'[2].'salary'", numberMatches(5000.0))
                .body("'collection'[2].'manager'.'employeeId'", numberMatches(5.0))
                .body("'collection'[2].'manager'.'firstName'", containsString("Nour"))
                .body("'collection'[2].'manager'.'lastName'", containsString("Larguech"))
                .body("'collection'[2].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[2].'manager'.'hiredate'", nullValue())
                .body("'collection'[2].'manager'.'job'", containsString("Chef service Data Warehouse"))
                .body("'collection'[2].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[2].'manager'.'manager'", nullValue())
                .body("'collection'[2].'manager'.'department'.'departmentId'", numberMatches(4.0))
                .body("'collection'[2].'manager'.'department'.'departmentName'", containsString("DWH"))
                .body("'collection'[2].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'manager'.'credential'.'credentialId'", numberMatches(6.0))
                .body("'collection'[2].'manager'.'credential'.'username'", containsString("nourlarguech"))
                .body("'collection'[2].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[2].'department'.'departmentId'", numberMatches(4.0))
                .body("'collection'[2].'department'.'departmentName'", containsString("DWH"))
                .body("'collection'[2].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'credential'.'credentialId'", numberMatches(1.0))
                .body("'collection'[2].'credential'.'username'", containsString("imentouk"))
                .body("'collection'[2].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'credential'.'role'", containsString("ROLE_EMP"))
                ; // Skipping assertions on the remaining 11 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/employees/
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_41_getOnEmployeesEmployeesReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/0/manager/hiredate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/employees/")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(14))
                .body("'collection'[0].'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'firstName'", containsString("Selim"))
                .body("'collection'[0].'lastName'", containsString("Horri"))
                .body("'collection'[0].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'phone'", containsString("22125144"))
                .body("'collection'[0].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[0].'job'", containsString("Billing"))
                .body("'collection'[0].'salary'", numberMatches(5000.0))
                .body("'collection'[0].'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[0].'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[0].'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[0].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[0].'manager'.'hiredate'", nullValue())
                .body("'collection'[0].'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[0].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[0].'manager'.'manager'", nullValue())
                .body("'collection'[0].'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[0].'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[0].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[0].'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[0].'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[0].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'employeeId'", numberMatches(2.0))
                .body("'collection'[1].'firstName'", containsString("Badr"))
                .body("'collection'[1].'lastName'", containsString("Idoudi"))
                .body("'collection'[1].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'phone'", containsString("22125144"))
                .body("'collection'[1].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[1].'job'", containsString("Digital"))
                .body("'collection'[1].'salary'", numberMatches(5000.0))
                .body("'collection'[1].'manager'.'employeeId'", numberMatches(9.0))
                .body("'collection'[1].'manager'.'firstName'", containsString("John"))
                .body("'collection'[1].'manager'.'lastName'", containsString("Doe"))
                .body("'collection'[1].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[1].'manager'.'hiredate'", nullValue())
                .body("'collection'[1].'manager'.'job'", containsString("Chef service digital"))
                .body("'collection'[1].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[1].'manager'.'manager'", nullValue())
                .body("'collection'[1].'manager'.'department'.'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'manager'.'department'.'departmentName'", containsString("Digital"))
                .body("'collection'[1].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'manager'.'credential'.'credentialId'", numberMatches(7.0))
                .body("'collection'[1].'manager'.'credential'.'username'", containsString("johndoe"))
                .body("'collection'[1].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[1].'department'.'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'department'.'departmentName'", containsString("Digital"))
                .body("'collection'[1].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'credential'.'credentialId'", numberMatches(2.0))
                .body("'collection'[1].'credential'.'username'", containsString("badridoudi"))
                .body("'collection'[1].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'employeeId'", numberMatches(3.0))
                .body("'collection'[2].'firstName'", containsString("Imen"))
                .body("'collection'[2].'lastName'", containsString("Touk"))
                .body("'collection'[2].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'phone'", containsString("22125144"))
                .body("'collection'[2].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[2].'job'", containsString("Data Warehouse"))
                .body("'collection'[2].'salary'", numberMatches(5000.0))
                .body("'collection'[2].'manager'.'employeeId'", numberMatches(5.0))
                .body("'collection'[2].'manager'.'firstName'", containsString("Nour"))
                .body("'collection'[2].'manager'.'lastName'", containsString("Larguech"))
                .body("'collection'[2].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[2].'manager'.'hiredate'", nullValue())
                .body("'collection'[2].'manager'.'job'", containsString("Chef service Data Warehouse"))
                .body("'collection'[2].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[2].'manager'.'manager'", nullValue())
                .body("'collection'[2].'manager'.'department'.'departmentId'", numberMatches(4.0))
                .body("'collection'[2].'manager'.'department'.'departmentName'", containsString("DWH"))
                .body("'collection'[2].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'manager'.'credential'.'credentialId'", numberMatches(6.0))
                .body("'collection'[2].'manager'.'credential'.'username'", containsString("nourlarguech"))
                .body("'collection'[2].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[2].'department'.'departmentId'", numberMatches(4.0))
                .body("'collection'[2].'department'.'departmentName'", containsString("DWH"))
                .body("'collection'[2].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'credential'.'credentialId'", numberMatches(1.0))
                .body("'collection'[2].'credential'.'username'", containsString("imentouk"))
                .body("'collection'[2].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'credential'.'role'", containsString("ROLE_EMP"))
                ; // Skipping assertions on the remaining 11 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/locations
    */
    @Test @Timeout(60)
    public void test_42_getOnLocationsReturnsObject() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/locations?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(2))
                .body("'collection'[0].'locationId'", numberMatches(1.0))
                .body("'collection'[0].'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'postalCode'", containsString("2016"))
                .body("'collection'[0].'city'", containsString("LAC2"))
                .body("'collection'[1].'locationId'", numberMatches(2.0))
                .body("'collection'[1].'adr'", containsString("RUE DE BLA BLA"))
                .body("'collection'[1].'postalCode'", containsString("2016"))
                .body("'collection'[1].'city'", containsString("CHARGUIA"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/projects
    */
    @Test @Timeout(60)
    public void test_43_getOnProjectsReturnsObject() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/projects?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(9))
                .body("'collection'[0].'projectId'", numberMatches(1.0))
                .body("'collection'[0].'title'", containsString("TRANSBSCS"))
                .body("'collection'[0].'startDate'", containsString("28-09-2020"))
                .body("'collection'[0].'endDate'", containsString("04-11-2020"))
                .body("'collection'[0].'status'", containsString("COMPLETED"))
                .body("'collection'[1].'projectId'", numberMatches(2.0))
                .body("'collection'[1].'title'", containsString("SYNCH_BSCS_IMX"))
                .body("'collection'[1].'startDate'", containsString("26-11-2020"))
                .body("'collection'[1].'endDate'", containsString("25-03-2021"))
                .body("'collection'[1].'status'", containsString("IN_PROGRESS"))
                .body("'collection'[2].'projectId'", numberMatches(3.0))
                .body("'collection'[2].'title'", containsString("TASYI9A LILVIRANDA"))
                .body("'collection'[2].'startDate'", containsString("26-11-2020"))
                .body("'collection'[2].'endDate'", containsString("26-11-2020"))
                .body("'collection'[2].'status'", containsString("COMPLETED"))
                ; // Skipping assertions on the remaining 6 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/assignments
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_44_getOnAssignmentsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/0/commitEmpDesc'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/assignments")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(59))
                .body("'collection'[0].'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'projectId'", numberMatches(1.0))
                .body("'collection'[0].'commitDate'", containsString("26-11-202010:50:09"))
                .body("'collection'[0].'commitEmpDesc'", nullValue())
                .body("'collection'[0].'commitMgrDesc'", containsString("init"))
                .body("'collection'[0].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[0].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[0].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[0].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[0].'employee'.'job'", containsString("Billing"))
                .body("'collection'[0].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[0].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[0].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[0].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[0].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[0].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[0].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[0].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[0].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[0].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[0].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[0].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[0].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[0].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[0].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[0].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[0].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[0].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[0].'project'.'status'", containsString("COMPLETED"))
                .body("'collection'[1].'employeeId'", numberMatches(1.0))
                .body("'collection'[1].'projectId'", numberMatches(1.0))
                .body("'collection'[1].'commitDate'", containsString("26-11-202013:14:22"))
                .body("'collection'[1].'commitEmpDesc'", containsString("set up some configs"))
                .body("'collection'[1].'commitMgrDesc'", containsString("you need to implement sec solution"))
                .body("'collection'[1].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[1].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[1].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[1].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[1].'employee'.'job'", containsString("Billing"))
                .body("'collection'[1].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[1].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[1].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[1].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[1].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[1].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[1].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[1].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[1].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[1].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[1].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[1].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[1].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[1].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[1].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[1].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[1].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[1].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[1].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[1].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[1].'project'.'status'", containsString("COMPLETED"))
                .body("'collection'[2].'employeeId'", numberMatches(1.0))
                .body("'collection'[2].'projectId'", numberMatches(1.0))
                .body("'collection'[2].'commitDate'", containsString("12-12-202016:49:42"))
                .body("'collection'[2].'commitEmpDesc'", containsString("implement customer by invoice"))
                .body("'collection'[2].'commitMgrDesc'", nullValue())
                .body("'collection'[2].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[2].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[2].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[2].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[2].'employee'.'job'", containsString("Billing"))
                .body("'collection'[2].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[2].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[2].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[2].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[2].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[2].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[2].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[2].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[2].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[2].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[2].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[2].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[2].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[2].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[2].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[2].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[2].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[2].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[2].'project'.'status'", containsString("COMPLETED"))
                ; // Skipping assertions on the remaining 56 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/assignments/
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_45_getOnAssignmentsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/0/commitEmpDesc'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1411_XYZ_")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/assignments/")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(59))
                .body("'collection'[0].'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'projectId'", numberMatches(1.0))
                .body("'collection'[0].'commitDate'", containsString("26-11-202010:50:09"))
                .body("'collection'[0].'commitEmpDesc'", nullValue())
                .body("'collection'[0].'commitMgrDesc'", containsString("init"))
                .body("'collection'[0].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[0].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[0].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[0].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[0].'employee'.'job'", containsString("Billing"))
                .body("'collection'[0].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[0].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[0].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[0].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[0].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[0].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[0].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[0].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[0].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[0].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[0].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[0].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[0].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[0].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[0].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[0].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[0].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[0].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[0].'project'.'status'", containsString("COMPLETED"))
                .body("'collection'[1].'employeeId'", numberMatches(1.0))
                .body("'collection'[1].'projectId'", numberMatches(1.0))
                .body("'collection'[1].'commitDate'", containsString("26-11-202013:14:22"))
                .body("'collection'[1].'commitEmpDesc'", containsString("set up some configs"))
                .body("'collection'[1].'commitMgrDesc'", containsString("you need to implement sec solution"))
                .body("'collection'[1].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[1].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[1].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[1].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[1].'employee'.'job'", containsString("Billing"))
                .body("'collection'[1].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[1].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[1].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[1].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[1].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[1].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[1].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[1].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[1].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[1].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[1].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[1].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[1].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[1].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[1].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[1].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[1].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[1].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[1].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[1].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[1].'project'.'status'", containsString("COMPLETED"))
                .body("'collection'[2].'employeeId'", numberMatches(1.0))
                .body("'collection'[2].'projectId'", numberMatches(1.0))
                .body("'collection'[2].'commitDate'", containsString("12-12-202016:49:42"))
                .body("'collection'[2].'commitEmpDesc'", containsString("implement customer by invoice"))
                .body("'collection'[2].'commitMgrDesc'", nullValue())
                .body("'collection'[2].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[2].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[2].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[2].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[2].'employee'.'job'", containsString("Billing"))
                .body("'collection'[2].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[2].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[2].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[2].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[2].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[2].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[2].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[2].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[2].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[2].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[2].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[2].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[2].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[2].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[2].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[2].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[2].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[2].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[2].'project'.'status'", containsString("COMPLETED"))
                ; // Skipping assertions on the remaining 56 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/credentials
    */
    @Test @Timeout(60)
    public void test_46_getOnCredentialsReturnsObject() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/credentials?EMextraParam123=_EM_1412_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(14))
                .body("'collection'[0].'credentialId'", numberMatches(1.0))
                .body("'collection'[0].'username'", containsString("imentouk"))
                .body("'collection'[0].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'enabled'", equalTo(true))
                .body("'collection'[0].'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'credentialId'", numberMatches(2.0))
                .body("'collection'[1].'username'", containsString("badridoudi"))
                .body("'collection'[1].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'enabled'", equalTo(true))
                .body("'collection'[1].'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'credentialId'", numberMatches(3.0))
                .body("'collection'[2].'username'", containsString("selimhorri"))
                .body("'collection'[2].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'enabled'", equalTo(true))
                .body("'collection'[2].'role'", containsString("ROLE_EMP"))
                ; // Skipping assertions on the remaining 11 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/departments
    */
    @Test @Timeout(60)
    public void test_47_getOnDepartmentsReturnsObject() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/departments?EMextraParam123=_EM_1414_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(3))
                .body("'collection'[0].'departmentId'", numberMatches(4.0))
                .body("'collection'[0].'departmentName'", containsString("DWH"))
                .body("'collection'[0].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'departmentName'", containsString("Digital"))
                .body("'collection'[1].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'departmentName'", containsString("Billing"))
                .body("'collection'[2].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'location'.'city'", containsString("LAC2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/departments/
    */
    @Test @Timeout(60)
    public void test_48_getOnDepartmentsReturnsObject() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1416_XYZ_")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/departments/")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(3))
                .body("'collection'[0].'departmentId'", numberMatches(4.0))
                .body("'collection'[0].'departmentName'", containsString("DWH"))
                .body("'collection'[0].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'departmentName'", containsString("Digital"))
                .body("'collection'[1].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'departmentName'", containsString("Billing"))
                .body("'collection'[2].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'location'.'city'", containsString("LAC2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/employees
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_49_getOnEmployeesReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/0/manager/hiredate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/employees?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(14))
                .body("'collection'[0].'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'firstName'", containsString("Selim"))
                .body("'collection'[0].'lastName'", containsString("Horri"))
                .body("'collection'[0].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'phone'", containsString("22125144"))
                .body("'collection'[0].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[0].'job'", containsString("Billing"))
                .body("'collection'[0].'salary'", numberMatches(5000.0))
                .body("'collection'[0].'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[0].'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[0].'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[0].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[0].'manager'.'hiredate'", nullValue())
                .body("'collection'[0].'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[0].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[0].'manager'.'manager'", nullValue())
                .body("'collection'[0].'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[0].'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[0].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[0].'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[0].'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[0].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'employeeId'", numberMatches(2.0))
                .body("'collection'[1].'firstName'", containsString("Badr"))
                .body("'collection'[1].'lastName'", containsString("Idoudi"))
                .body("'collection'[1].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'phone'", containsString("22125144"))
                .body("'collection'[1].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[1].'job'", containsString("Digital"))
                .body("'collection'[1].'salary'", numberMatches(5000.0))
                .body("'collection'[1].'manager'.'employeeId'", numberMatches(9.0))
                .body("'collection'[1].'manager'.'firstName'", containsString("John"))
                .body("'collection'[1].'manager'.'lastName'", containsString("Doe"))
                .body("'collection'[1].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[1].'manager'.'hiredate'", nullValue())
                .body("'collection'[1].'manager'.'job'", containsString("Chef service digital"))
                .body("'collection'[1].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[1].'manager'.'manager'", nullValue())
                .body("'collection'[1].'manager'.'department'.'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'manager'.'department'.'departmentName'", containsString("Digital"))
                .body("'collection'[1].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'manager'.'credential'.'credentialId'", numberMatches(7.0))
                .body("'collection'[1].'manager'.'credential'.'username'", containsString("johndoe"))
                .body("'collection'[1].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[1].'department'.'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'department'.'departmentName'", containsString("Digital"))
                .body("'collection'[1].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'credential'.'credentialId'", numberMatches(2.0))
                .body("'collection'[1].'credential'.'username'", containsString("badridoudi"))
                .body("'collection'[1].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'employeeId'", numberMatches(3.0))
                .body("'collection'[2].'firstName'", containsString("Imen"))
                .body("'collection'[2].'lastName'", containsString("Touk"))
                .body("'collection'[2].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'phone'", containsString("22125144"))
                .body("'collection'[2].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[2].'job'", containsString("Data Warehouse"))
                .body("'collection'[2].'salary'", numberMatches(5000.0))
                .body("'collection'[2].'manager'.'employeeId'", numberMatches(5.0))
                .body("'collection'[2].'manager'.'firstName'", containsString("Nour"))
                .body("'collection'[2].'manager'.'lastName'", containsString("Larguech"))
                .body("'collection'[2].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[2].'manager'.'hiredate'", nullValue())
                .body("'collection'[2].'manager'.'job'", containsString("Chef service Data Warehouse"))
                .body("'collection'[2].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[2].'manager'.'manager'", nullValue())
                .body("'collection'[2].'manager'.'department'.'departmentId'", numberMatches(4.0))
                .body("'collection'[2].'manager'.'department'.'departmentName'", containsString("DWH"))
                .body("'collection'[2].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'manager'.'credential'.'credentialId'", numberMatches(6.0))
                .body("'collection'[2].'manager'.'credential'.'username'", containsString("nourlarguech"))
                .body("'collection'[2].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[2].'department'.'departmentId'", numberMatches(4.0))
                .body("'collection'[2].'department'.'departmentName'", containsString("DWH"))
                .body("'collection'[2].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'credential'.'credentialId'", numberMatches(1.0))
                .body("'collection'[2].'credential'.'username'", containsString("imentouk"))
                .body("'collection'[2].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'credential'.'role'", containsString("ROLE_EMP"))
                ; // Skipping assertions on the remaining 11 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/employees/
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_50_getOnEmployeesReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/0/manager/hiredate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/employees/?EMextraParam123=_EM_1417_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(14))
                .body("'collection'[0].'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'firstName'", containsString("Selim"))
                .body("'collection'[0].'lastName'", containsString("Horri"))
                .body("'collection'[0].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'phone'", containsString("22125144"))
                .body("'collection'[0].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[0].'job'", containsString("Billing"))
                .body("'collection'[0].'salary'", numberMatches(5000.0))
                .body("'collection'[0].'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[0].'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[0].'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[0].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[0].'manager'.'hiredate'", nullValue())
                .body("'collection'[0].'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[0].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[0].'manager'.'manager'", nullValue())
                .body("'collection'[0].'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[0].'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[0].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[0].'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[0].'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[0].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'employeeId'", numberMatches(2.0))
                .body("'collection'[1].'firstName'", containsString("Badr"))
                .body("'collection'[1].'lastName'", containsString("Idoudi"))
                .body("'collection'[1].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'phone'", containsString("22125144"))
                .body("'collection'[1].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[1].'job'", containsString("Digital"))
                .body("'collection'[1].'salary'", numberMatches(5000.0))
                .body("'collection'[1].'manager'.'employeeId'", numberMatches(9.0))
                .body("'collection'[1].'manager'.'firstName'", containsString("John"))
                .body("'collection'[1].'manager'.'lastName'", containsString("Doe"))
                .body("'collection'[1].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[1].'manager'.'hiredate'", nullValue())
                .body("'collection'[1].'manager'.'job'", containsString("Chef service digital"))
                .body("'collection'[1].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[1].'manager'.'manager'", nullValue())
                .body("'collection'[1].'manager'.'department'.'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'manager'.'department'.'departmentName'", containsString("Digital"))
                .body("'collection'[1].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'manager'.'credential'.'credentialId'", numberMatches(7.0))
                .body("'collection'[1].'manager'.'credential'.'username'", containsString("johndoe"))
                .body("'collection'[1].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[1].'department'.'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'department'.'departmentName'", containsString("Digital"))
                .body("'collection'[1].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'credential'.'credentialId'", numberMatches(2.0))
                .body("'collection'[1].'credential'.'username'", containsString("badridoudi"))
                .body("'collection'[1].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'employeeId'", numberMatches(3.0))
                .body("'collection'[2].'firstName'", containsString("Imen"))
                .body("'collection'[2].'lastName'", containsString("Touk"))
                .body("'collection'[2].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'phone'", containsString("22125144"))
                .body("'collection'[2].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[2].'job'", containsString("Data Warehouse"))
                .body("'collection'[2].'salary'", numberMatches(5000.0))
                .body("'collection'[2].'manager'.'employeeId'", numberMatches(5.0))
                .body("'collection'[2].'manager'.'firstName'", containsString("Nour"))
                .body("'collection'[2].'manager'.'lastName'", containsString("Larguech"))
                .body("'collection'[2].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[2].'manager'.'hiredate'", nullValue())
                .body("'collection'[2].'manager'.'job'", containsString("Chef service Data Warehouse"))
                .body("'collection'[2].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[2].'manager'.'manager'", nullValue())
                .body("'collection'[2].'manager'.'department'.'departmentId'", numberMatches(4.0))
                .body("'collection'[2].'manager'.'department'.'departmentName'", containsString("DWH"))
                .body("'collection'[2].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'manager'.'credential'.'credentialId'", numberMatches(6.0))
                .body("'collection'[2].'manager'.'credential'.'username'", containsString("nourlarguech"))
                .body("'collection'[2].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[2].'department'.'departmentId'", numberMatches(4.0))
                .body("'collection'[2].'department'.'departmentName'", containsString("DWH"))
                .body("'collection'[2].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'credential'.'credentialId'", numberMatches(1.0))
                .body("'collection'[2].'credential'.'username'", containsString("imentouk"))
                .body("'collection'[2].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'credential'.'role'", containsString("ROLE_EMP"))
                ; // Skipping assertions on the remaining 11 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/locations/
    */
    @Test @Timeout(60)
    public void test_51_getOnLocationsReturnsObject() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/locations/")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(2))
                .body("'collection'[0].'locationId'", numberMatches(1.0))
                .body("'collection'[0].'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'postalCode'", containsString("2016"))
                .body("'collection'[0].'city'", containsString("LAC2"))
                .body("'collection'[1].'locationId'", numberMatches(2.0))
                .body("'collection'[1].'adr'", containsString("RUE DE BLA BLA"))
                .body("'collection'[1].'postalCode'", containsString("2016"))
                .body("'collection'[1].'city'", containsString("CHARGUIA"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/projects
    */
    @Test @Timeout(60)
    public void test_52_getOnProjectsReturnsObject() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/projects?EMextraParam123=_EM_1420_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(9))
                .body("'collection'[0].'projectId'", numberMatches(1.0))
                .body("'collection'[0].'title'", containsString("TRANSBSCS"))
                .body("'collection'[0].'startDate'", containsString("28-09-2020"))
                .body("'collection'[0].'endDate'", containsString("04-11-2020"))
                .body("'collection'[0].'status'", containsString("COMPLETED"))
                .body("'collection'[1].'projectId'", numberMatches(2.0))
                .body("'collection'[1].'title'", containsString("SYNCH_BSCS_IMX"))
                .body("'collection'[1].'startDate'", containsString("26-11-2020"))
                .body("'collection'[1].'endDate'", containsString("25-03-2021"))
                .body("'collection'[1].'status'", containsString("IN_PROGRESS"))
                .body("'collection'[2].'projectId'", numberMatches(3.0))
                .body("'collection'[2].'title'", containsString("TASYI9A LILVIRANDA"))
                .body("'collection'[2].'startDate'", containsString("26-11-2020"))
                .body("'collection'[2].'endDate'", containsString("26-11-2020"))
                .body("'collection'[2].'status'", containsString("COMPLETED"))
                ; // Skipping assertions on the remaining 6 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/projects/
    */
    @Test @Timeout(60)
    public void test_53_getOnProjectsProjectsReturnsObject() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/projects/")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(9))
                .body("'collection'[0].'projectId'", numberMatches(1.0))
                .body("'collection'[0].'title'", containsString("TRANSBSCS"))
                .body("'collection'[0].'startDate'", containsString("28-09-2020"))
                .body("'collection'[0].'endDate'", containsString("04-11-2020"))
                .body("'collection'[0].'status'", containsString("COMPLETED"))
                .body("'collection'[1].'projectId'", numberMatches(2.0))
                .body("'collection'[1].'title'", containsString("SYNCH_BSCS_IMX"))
                .body("'collection'[1].'startDate'", containsString("26-11-2020"))
                .body("'collection'[1].'endDate'", containsString("25-03-2021"))
                .body("'collection'[1].'status'", containsString("IN_PROGRESS"))
                .body("'collection'[2].'projectId'", numberMatches(3.0))
                .body("'collection'[2].'title'", containsString("TASYI9A LILVIRANDA"))
                .body("'collection'[2].'startDate'", containsString("26-11-2020"))
                .body("'collection'[2].'endDate'", containsString("26-11-2020"))
                .body("'collection'[2].'status'", containsString("COMPLETED"))
                ; // Skipping assertions on the remaining 6 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/departments
    */
    @Test @Timeout(60)
    public void test_54_getOnApiDepartmentsWithQueryParamsEmptyUsernameReturnsObject() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/departments?" + 
                    "password=OaW08EjpYHsojzcJ&" + 
                    "username=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(3))
                .body("'collection'[0].'departmentId'", numberMatches(4.0))
                .body("'collection'[0].'departmentName'", containsString("DWH"))
                .body("'collection'[0].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'departmentName'", containsString("Digital"))
                .body("'collection'[1].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'departmentName'", containsString("Billing"))
                .body("'collection'[2].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'location'.'city'", containsString("LAC2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/departments/
    */
    @Test @Timeout(60)
    public void test_55_getOnDepartmentsReturnsObjectUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/departments/?" + 
                    "EMextraParam123=42&" + 
                    "password=%242a%2410%246pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78%2FcvOprSR3lsZL2")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(3))
                .body("'collection'[0].'departmentId'", numberMatches(4.0))
                .body("'collection'[0].'departmentName'", containsString("DWH"))
                .body("'collection'[0].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'departmentName'", containsString("Digital"))
                .body("'collection'[1].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'departmentName'", containsString("Billing"))
                .body("'collection'[2].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'location'.'city'", containsString("LAC2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/projects
    */
    @Test @Timeout(60)
    public void test_56_getOnProjectsReturnsObjectUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("DEPARTMENTS", 145L)
            .and().insertInto("DEPARTMENTS", 142L)
            .and().insertInto("LOCATIONS", 140L)
            .and().insertInto("DEPARTMENTS", 139L)
            .and().insertInto("USER_CREDENTIALS", 137L)
                .d("USERNAME", "NULL")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "false")
                .d("ROLE", "\"aewrOwvEaHviXFX\"")
                .d("EMPLOYEE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/projects?" + 
                    "EMextraParam123=_EM_1916_XYZ_&" + 
                    "username=uCGXeRuKyhxVig")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(9))
                .body("'collection'[0].'projectId'", numberMatches(1.0))
                .body("'collection'[0].'title'", containsString("TRANSBSCS"))
                .body("'collection'[0].'startDate'", containsString("28-09-2020"))
                .body("'collection'[0].'endDate'", containsString("04-11-2020"))
                .body("'collection'[0].'status'", containsString("COMPLETED"))
                .body("'collection'[1].'projectId'", numberMatches(2.0))
                .body("'collection'[1].'title'", containsString("SYNCH_BSCS_IMX"))
                .body("'collection'[1].'startDate'", containsString("26-11-2020"))
                .body("'collection'[1].'endDate'", containsString("25-03-2021"))
                .body("'collection'[1].'status'", containsString("IN_PROGRESS"))
                .body("'collection'[2].'projectId'", numberMatches(3.0))
                .body("'collection'[2].'title'", containsString("TASYI9A LILVIRANDA"))
                .body("'collection'[2].'startDate'", containsString("26-11-2020"))
                .body("'collection'[2].'endDate'", containsString("26-11-2020"))
                .body("'collection'[2].'status'", containsString("COMPLETED"))
                ; // Skipping assertions on the remaining 6 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/assignments
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_57_getOnAssignmentsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/0/commitEmpDesc'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/assignments?password=EQ0xixDia_yZf")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(59))
                .body("'collection'[0].'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'projectId'", numberMatches(1.0))
                .body("'collection'[0].'commitDate'", containsString("26-11-202010:50:09"))
                .body("'collection'[0].'commitEmpDesc'", nullValue())
                .body("'collection'[0].'commitMgrDesc'", containsString("init"))
                .body("'collection'[0].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[0].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[0].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[0].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[0].'employee'.'job'", containsString("Billing"))
                .body("'collection'[0].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[0].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[0].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[0].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[0].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[0].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[0].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[0].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[0].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[0].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[0].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[0].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[0].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[0].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[0].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[0].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[0].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[0].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[0].'project'.'status'", containsString("COMPLETED"))
                .body("'collection'[1].'employeeId'", numberMatches(1.0))
                .body("'collection'[1].'projectId'", numberMatches(1.0))
                .body("'collection'[1].'commitDate'", containsString("26-11-202013:14:22"))
                .body("'collection'[1].'commitEmpDesc'", containsString("set up some configs"))
                .body("'collection'[1].'commitMgrDesc'", containsString("you need to implement sec solution"))
                .body("'collection'[1].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[1].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[1].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[1].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[1].'employee'.'job'", containsString("Billing"))
                .body("'collection'[1].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[1].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[1].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[1].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[1].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[1].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[1].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[1].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[1].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[1].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[1].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[1].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[1].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[1].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[1].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[1].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[1].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[1].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[1].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[1].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[1].'project'.'status'", containsString("COMPLETED"))
                .body("'collection'[2].'employeeId'", numberMatches(1.0))
                .body("'collection'[2].'projectId'", numberMatches(1.0))
                .body("'collection'[2].'commitDate'", containsString("12-12-202016:49:42"))
                .body("'collection'[2].'commitEmpDesc'", containsString("implement customer by invoice"))
                .body("'collection'[2].'commitMgrDesc'", nullValue())
                .body("'collection'[2].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[2].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[2].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[2].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[2].'employee'.'job'", containsString("Billing"))
                .body("'collection'[2].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[2].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[2].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[2].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[2].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[2].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[2].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[2].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[2].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[2].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[2].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[2].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[2].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[2].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[2].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[2].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[2].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[2].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[2].'project'.'status'", containsString("COMPLETED"))
                ; // Skipping assertions on the remaining 56 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/assignments/
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_58_getOnAssignmentsAssignmentsWithQueryParams() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/0/commitEmpDesc'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/assignments/?" + 
                    "EMextraParam123=42&" + 
                    "password=_EM_1238_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(59))
                .body("'collection'[0].'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'projectId'", numberMatches(1.0))
                .body("'collection'[0].'commitDate'", containsString("26-11-202010:50:09"))
                .body("'collection'[0].'commitEmpDesc'", nullValue())
                .body("'collection'[0].'commitMgrDesc'", containsString("init"))
                .body("'collection'[0].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[0].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[0].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[0].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[0].'employee'.'job'", containsString("Billing"))
                .body("'collection'[0].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[0].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[0].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[0].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[0].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[0].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[0].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[0].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[0].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[0].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[0].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[0].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[0].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[0].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[0].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[0].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[0].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[0].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[0].'project'.'status'", containsString("COMPLETED"))
                .body("'collection'[1].'employeeId'", numberMatches(1.0))
                .body("'collection'[1].'projectId'", numberMatches(1.0))
                .body("'collection'[1].'commitDate'", containsString("26-11-202013:14:22"))
                .body("'collection'[1].'commitEmpDesc'", containsString("set up some configs"))
                .body("'collection'[1].'commitMgrDesc'", containsString("you need to implement sec solution"))
                .body("'collection'[1].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[1].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[1].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[1].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[1].'employee'.'job'", containsString("Billing"))
                .body("'collection'[1].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[1].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[1].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[1].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[1].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[1].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[1].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[1].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[1].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[1].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[1].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[1].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[1].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[1].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[1].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[1].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[1].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[1].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[1].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[1].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[1].'project'.'status'", containsString("COMPLETED"))
                .body("'collection'[2].'employeeId'", numberMatches(1.0))
                .body("'collection'[2].'projectId'", numberMatches(1.0))
                .body("'collection'[2].'commitDate'", containsString("12-12-202016:49:42"))
                .body("'collection'[2].'commitEmpDesc'", containsString("implement customer by invoice"))
                .body("'collection'[2].'commitMgrDesc'", nullValue())
                .body("'collection'[2].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[2].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[2].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[2].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[2].'employee'.'job'", containsString("Billing"))
                .body("'collection'[2].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[2].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[2].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[2].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[2].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[2].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[2].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[2].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[2].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[2].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[2].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[2].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[2].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[2].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[2].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[2].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[2].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[2].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[2].'project'.'status'", containsString("COMPLETED"))
                ; // Skipping assertions on the remaining 56 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/departments/
    */
    @Test @Timeout(60)
    public void test_59_getOnDepartmentsReturnsObjectUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2166_XYZ_")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/departments/?" + 
                    "EMextraParam123=42&" + 
                    "username=marwenmejri")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(3))
                .body("'collection'[0].'departmentId'", numberMatches(4.0))
                .body("'collection'[0].'departmentName'", containsString("DWH"))
                .body("'collection'[0].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'departmentName'", containsString("Digital"))
                .body("'collection'[1].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'departmentName'", containsString("Billing"))
                .body("'collection'[2].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'location'.'city'", containsString("LAC2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/employees/
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_60_getOnEmployeesReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/0/manager/hiredate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/employees/?username=U")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(14))
                .body("'collection'[0].'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'firstName'", containsString("Selim"))
                .body("'collection'[0].'lastName'", containsString("Horri"))
                .body("'collection'[0].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'phone'", containsString("22125144"))
                .body("'collection'[0].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[0].'job'", containsString("Billing"))
                .body("'collection'[0].'salary'", numberMatches(5000.0))
                .body("'collection'[0].'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[0].'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[0].'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[0].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[0].'manager'.'hiredate'", nullValue())
                .body("'collection'[0].'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[0].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[0].'manager'.'manager'", nullValue())
                .body("'collection'[0].'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[0].'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[0].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[0].'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[0].'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[0].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'employeeId'", numberMatches(2.0))
                .body("'collection'[1].'firstName'", containsString("Badr"))
                .body("'collection'[1].'lastName'", containsString("Idoudi"))
                .body("'collection'[1].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'phone'", containsString("22125144"))
                .body("'collection'[1].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[1].'job'", containsString("Digital"))
                .body("'collection'[1].'salary'", numberMatches(5000.0))
                .body("'collection'[1].'manager'.'employeeId'", numberMatches(9.0))
                .body("'collection'[1].'manager'.'firstName'", containsString("John"))
                .body("'collection'[1].'manager'.'lastName'", containsString("Doe"))
                .body("'collection'[1].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[1].'manager'.'hiredate'", nullValue())
                .body("'collection'[1].'manager'.'job'", containsString("Chef service digital"))
                .body("'collection'[1].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[1].'manager'.'manager'", nullValue())
                .body("'collection'[1].'manager'.'department'.'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'manager'.'department'.'departmentName'", containsString("Digital"))
                .body("'collection'[1].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'manager'.'credential'.'credentialId'", numberMatches(7.0))
                .body("'collection'[1].'manager'.'credential'.'username'", containsString("johndoe"))
                .body("'collection'[1].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[1].'department'.'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'department'.'departmentName'", containsString("Digital"))
                .body("'collection'[1].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'credential'.'credentialId'", numberMatches(2.0))
                .body("'collection'[1].'credential'.'username'", containsString("badridoudi"))
                .body("'collection'[1].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'employeeId'", numberMatches(3.0))
                .body("'collection'[2].'firstName'", containsString("Imen"))
                .body("'collection'[2].'lastName'", containsString("Touk"))
                .body("'collection'[2].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'phone'", containsString("22125144"))
                .body("'collection'[2].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[2].'job'", containsString("Data Warehouse"))
                .body("'collection'[2].'salary'", numberMatches(5000.0))
                .body("'collection'[2].'manager'.'employeeId'", numberMatches(5.0))
                .body("'collection'[2].'manager'.'firstName'", containsString("Nour"))
                .body("'collection'[2].'manager'.'lastName'", containsString("Larguech"))
                .body("'collection'[2].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[2].'manager'.'hiredate'", nullValue())
                .body("'collection'[2].'manager'.'job'", containsString("Chef service Data Warehouse"))
                .body("'collection'[2].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[2].'manager'.'manager'", nullValue())
                .body("'collection'[2].'manager'.'department'.'departmentId'", numberMatches(4.0))
                .body("'collection'[2].'manager'.'department'.'departmentName'", containsString("DWH"))
                .body("'collection'[2].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'manager'.'credential'.'credentialId'", numberMatches(6.0))
                .body("'collection'[2].'manager'.'credential'.'username'", containsString("nourlarguech"))
                .body("'collection'[2].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[2].'department'.'departmentId'", numberMatches(4.0))
                .body("'collection'[2].'department'.'departmentName'", containsString("DWH"))
                .body("'collection'[2].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'credential'.'credentialId'", numberMatches(1.0))
                .body("'collection'[2].'credential'.'username'", containsString("imentouk"))
                .body("'collection'[2].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'credential'.'role'", containsString("ROLE_EMP"))
                ; // Skipping assertions on the remaining 11 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/employees
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_61_getOnApiEmployeesWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/0/manager/hiredate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "K")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/employees?" + 
                    "EMextraParam123=_EM_537_XYZ_&" + 
                    "password=%242a%2410%246pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78%2FcvOprSR3lsZL2")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(14))
                .body("'collection'[0].'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'firstName'", containsString("Selim"))
                .body("'collection'[0].'lastName'", containsString("Horri"))
                .body("'collection'[0].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'phone'", containsString("22125144"))
                .body("'collection'[0].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[0].'job'", containsString("Billing"))
                .body("'collection'[0].'salary'", numberMatches(5000.0))
                .body("'collection'[0].'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[0].'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[0].'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[0].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[0].'manager'.'hiredate'", nullValue())
                .body("'collection'[0].'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[0].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[0].'manager'.'manager'", nullValue())
                .body("'collection'[0].'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[0].'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[0].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[0].'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[0].'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[0].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'employeeId'", numberMatches(2.0))
                .body("'collection'[1].'firstName'", containsString("Badr"))
                .body("'collection'[1].'lastName'", containsString("Idoudi"))
                .body("'collection'[1].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'phone'", containsString("22125144"))
                .body("'collection'[1].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[1].'job'", containsString("Digital"))
                .body("'collection'[1].'salary'", numberMatches(5000.0))
                .body("'collection'[1].'manager'.'employeeId'", numberMatches(9.0))
                .body("'collection'[1].'manager'.'firstName'", containsString("John"))
                .body("'collection'[1].'manager'.'lastName'", containsString("Doe"))
                .body("'collection'[1].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[1].'manager'.'hiredate'", nullValue())
                .body("'collection'[1].'manager'.'job'", containsString("Chef service digital"))
                .body("'collection'[1].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[1].'manager'.'manager'", nullValue())
                .body("'collection'[1].'manager'.'department'.'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'manager'.'department'.'departmentName'", containsString("Digital"))
                .body("'collection'[1].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'manager'.'credential'.'credentialId'", numberMatches(7.0))
                .body("'collection'[1].'manager'.'credential'.'username'", containsString("johndoe"))
                .body("'collection'[1].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[1].'department'.'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'department'.'departmentName'", containsString("Digital"))
                .body("'collection'[1].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'credential'.'credentialId'", numberMatches(2.0))
                .body("'collection'[1].'credential'.'username'", containsString("badridoudi"))
                .body("'collection'[1].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'employeeId'", numberMatches(3.0))
                .body("'collection'[2].'firstName'", containsString("Imen"))
                .body("'collection'[2].'lastName'", containsString("Touk"))
                .body("'collection'[2].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'phone'", containsString("22125144"))
                .body("'collection'[2].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[2].'job'", containsString("Data Warehouse"))
                .body("'collection'[2].'salary'", numberMatches(5000.0))
                .body("'collection'[2].'manager'.'employeeId'", numberMatches(5.0))
                .body("'collection'[2].'manager'.'firstName'", containsString("Nour"))
                .body("'collection'[2].'manager'.'lastName'", containsString("Larguech"))
                .body("'collection'[2].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[2].'manager'.'hiredate'", nullValue())
                .body("'collection'[2].'manager'.'job'", containsString("Chef service Data Warehouse"))
                .body("'collection'[2].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[2].'manager'.'manager'", nullValue())
                .body("'collection'[2].'manager'.'department'.'departmentId'", numberMatches(4.0))
                .body("'collection'[2].'manager'.'department'.'departmentName'", containsString("DWH"))
                .body("'collection'[2].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'manager'.'credential'.'credentialId'", numberMatches(6.0))
                .body("'collection'[2].'manager'.'credential'.'username'", containsString("nourlarguech"))
                .body("'collection'[2].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[2].'department'.'departmentId'", numberMatches(4.0))
                .body("'collection'[2].'department'.'departmentName'", containsString("DWH"))
                .body("'collection'[2].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'credential'.'credentialId'", numberMatches(1.0))
                .body("'collection'[2].'credential'.'username'", containsString("imentouk"))
                .body("'collection'[2].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'credential'.'role'", containsString("ROLE_EMP"))
                ; // Skipping assertions on the remaining 11 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/employees
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_62_getOnEmployeesReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/0/manager/hiredate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_538_XYZ_")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/employees?username=c")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(14))
                .body("'collection'[0].'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'firstName'", containsString("Selim"))
                .body("'collection'[0].'lastName'", containsString("Horri"))
                .body("'collection'[0].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'phone'", containsString("22125144"))
                .body("'collection'[0].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[0].'job'", containsString("Billing"))
                .body("'collection'[0].'salary'", numberMatches(5000.0))
                .body("'collection'[0].'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[0].'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[0].'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[0].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[0].'manager'.'hiredate'", nullValue())
                .body("'collection'[0].'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[0].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[0].'manager'.'manager'", nullValue())
                .body("'collection'[0].'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[0].'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[0].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[0].'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[0].'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[0].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'employeeId'", numberMatches(2.0))
                .body("'collection'[1].'firstName'", containsString("Badr"))
                .body("'collection'[1].'lastName'", containsString("Idoudi"))
                .body("'collection'[1].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'phone'", containsString("22125144"))
                .body("'collection'[1].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[1].'job'", containsString("Digital"))
                .body("'collection'[1].'salary'", numberMatches(5000.0))
                .body("'collection'[1].'manager'.'employeeId'", numberMatches(9.0))
                .body("'collection'[1].'manager'.'firstName'", containsString("John"))
                .body("'collection'[1].'manager'.'lastName'", containsString("Doe"))
                .body("'collection'[1].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[1].'manager'.'hiredate'", nullValue())
                .body("'collection'[1].'manager'.'job'", containsString("Chef service digital"))
                .body("'collection'[1].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[1].'manager'.'manager'", nullValue())
                .body("'collection'[1].'manager'.'department'.'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'manager'.'department'.'departmentName'", containsString("Digital"))
                .body("'collection'[1].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'manager'.'credential'.'credentialId'", numberMatches(7.0))
                .body("'collection'[1].'manager'.'credential'.'username'", containsString("johndoe"))
                .body("'collection'[1].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[1].'department'.'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'department'.'departmentName'", containsString("Digital"))
                .body("'collection'[1].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'credential'.'credentialId'", numberMatches(2.0))
                .body("'collection'[1].'credential'.'username'", containsString("badridoudi"))
                .body("'collection'[1].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'employeeId'", numberMatches(3.0))
                .body("'collection'[2].'firstName'", containsString("Imen"))
                .body("'collection'[2].'lastName'", containsString("Touk"))
                .body("'collection'[2].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'phone'", containsString("22125144"))
                .body("'collection'[2].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[2].'job'", containsString("Data Warehouse"))
                .body("'collection'[2].'salary'", numberMatches(5000.0))
                .body("'collection'[2].'manager'.'employeeId'", numberMatches(5.0))
                .body("'collection'[2].'manager'.'firstName'", containsString("Nour"))
                .body("'collection'[2].'manager'.'lastName'", containsString("Larguech"))
                .body("'collection'[2].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[2].'manager'.'hiredate'", nullValue())
                .body("'collection'[2].'manager'.'job'", containsString("Chef service Data Warehouse"))
                .body("'collection'[2].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[2].'manager'.'manager'", nullValue())
                .body("'collection'[2].'manager'.'department'.'departmentId'", numberMatches(4.0))
                .body("'collection'[2].'manager'.'department'.'departmentName'", containsString("DWH"))
                .body("'collection'[2].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'manager'.'credential'.'credentialId'", numberMatches(6.0))
                .body("'collection'[2].'manager'.'credential'.'username'", containsString("nourlarguech"))
                .body("'collection'[2].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[2].'department'.'departmentId'", numberMatches(4.0))
                .body("'collection'[2].'department'.'departmentName'", containsString("DWH"))
                .body("'collection'[2].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'credential'.'credentialId'", numberMatches(1.0))
                .body("'collection'[2].'credential'.'username'", containsString("imentouk"))
                .body("'collection'[2].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'credential'.'role'", containsString("ROLE_EMP"))
                ; // Skipping assertions on the remaining 11 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/assignments/
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_63_getOnAssignmentsAssignmentsWithQueryParamUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/0/commitEmpDesc'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/assignments/?username=johndoe")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(59))
                .body("'collection'[0].'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'projectId'", numberMatches(1.0))
                .body("'collection'[0].'commitDate'", containsString("26-11-202010:50:09"))
                .body("'collection'[0].'commitEmpDesc'", nullValue())
                .body("'collection'[0].'commitMgrDesc'", containsString("init"))
                .body("'collection'[0].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[0].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[0].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[0].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[0].'employee'.'job'", containsString("Billing"))
                .body("'collection'[0].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[0].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[0].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[0].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[0].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[0].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[0].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[0].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[0].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[0].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[0].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[0].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[0].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[0].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[0].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[0].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[0].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[0].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[0].'project'.'status'", containsString("COMPLETED"))
                .body("'collection'[1].'employeeId'", numberMatches(1.0))
                .body("'collection'[1].'projectId'", numberMatches(1.0))
                .body("'collection'[1].'commitDate'", containsString("26-11-202013:14:22"))
                .body("'collection'[1].'commitEmpDesc'", containsString("set up some configs"))
                .body("'collection'[1].'commitMgrDesc'", containsString("you need to implement sec solution"))
                .body("'collection'[1].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[1].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[1].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[1].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[1].'employee'.'job'", containsString("Billing"))
                .body("'collection'[1].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[1].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[1].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[1].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[1].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[1].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[1].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[1].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[1].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[1].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[1].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[1].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[1].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[1].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[1].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[1].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[1].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[1].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[1].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[1].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[1].'project'.'status'", containsString("COMPLETED"))
                .body("'collection'[2].'employeeId'", numberMatches(1.0))
                .body("'collection'[2].'projectId'", numberMatches(1.0))
                .body("'collection'[2].'commitDate'", containsString("12-12-202016:49:42"))
                .body("'collection'[2].'commitEmpDesc'", containsString("implement customer by invoice"))
                .body("'collection'[2].'commitMgrDesc'", nullValue())
                .body("'collection'[2].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[2].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[2].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[2].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[2].'employee'.'job'", containsString("Billing"))
                .body("'collection'[2].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[2].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[2].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[2].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[2].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[2].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[2].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[2].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[2].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[2].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[2].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[2].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[2].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[2].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[2].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[2].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[2].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[2].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[2].'project'.'status'", containsString("COMPLETED"))
                ; // Skipping assertions on the remaining 56 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/employees/
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_64_getOnEmployeesReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("DEPARTMENTS", 400L)
                .d("DEPARTMENT_NAME", "\"V9iniSU\"")
                .d("LOCATION_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/0/manager/hiredate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/employees/?password=SdhFee0N5Oz_vKe")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(14))
                .body("'collection'[0].'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'firstName'", containsString("Selim"))
                .body("'collection'[0].'lastName'", containsString("Horri"))
                .body("'collection'[0].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'phone'", containsString("22125144"))
                .body("'collection'[0].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[0].'job'", containsString("Billing"))
                .body("'collection'[0].'salary'", numberMatches(5000.0))
                .body("'collection'[0].'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[0].'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[0].'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[0].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[0].'manager'.'hiredate'", nullValue())
                .body("'collection'[0].'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[0].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[0].'manager'.'manager'", nullValue())
                .body("'collection'[0].'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[0].'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[0].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[0].'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[0].'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[0].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'employeeId'", numberMatches(2.0))
                .body("'collection'[1].'firstName'", containsString("Badr"))
                .body("'collection'[1].'lastName'", containsString("Idoudi"))
                .body("'collection'[1].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'phone'", containsString("22125144"))
                .body("'collection'[1].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[1].'job'", containsString("Digital"))
                .body("'collection'[1].'salary'", numberMatches(5000.0))
                .body("'collection'[1].'manager'.'employeeId'", numberMatches(9.0))
                .body("'collection'[1].'manager'.'firstName'", containsString("John"))
                .body("'collection'[1].'manager'.'lastName'", containsString("Doe"))
                .body("'collection'[1].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[1].'manager'.'hiredate'", nullValue())
                .body("'collection'[1].'manager'.'job'", containsString("Chef service digital"))
                .body("'collection'[1].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[1].'manager'.'manager'", nullValue())
                .body("'collection'[1].'manager'.'department'.'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'manager'.'department'.'departmentName'", containsString("Digital"))
                .body("'collection'[1].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'manager'.'credential'.'credentialId'", numberMatches(7.0))
                .body("'collection'[1].'manager'.'credential'.'username'", containsString("johndoe"))
                .body("'collection'[1].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[1].'department'.'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'department'.'departmentName'", containsString("Digital"))
                .body("'collection'[1].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'credential'.'credentialId'", numberMatches(2.0))
                .body("'collection'[1].'credential'.'username'", containsString("badridoudi"))
                .body("'collection'[1].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'employeeId'", numberMatches(3.0))
                .body("'collection'[2].'firstName'", containsString("Imen"))
                .body("'collection'[2].'lastName'", containsString("Touk"))
                .body("'collection'[2].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'phone'", containsString("22125144"))
                .body("'collection'[2].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[2].'job'", containsString("Data Warehouse"))
                .body("'collection'[2].'salary'", numberMatches(5000.0))
                .body("'collection'[2].'manager'.'employeeId'", numberMatches(5.0))
                .body("'collection'[2].'manager'.'firstName'", containsString("Nour"))
                .body("'collection'[2].'manager'.'lastName'", containsString("Larguech"))
                .body("'collection'[2].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[2].'manager'.'hiredate'", nullValue())
                .body("'collection'[2].'manager'.'job'", containsString("Chef service Data Warehouse"))
                .body("'collection'[2].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[2].'manager'.'manager'", nullValue())
                .body("'collection'[2].'manager'.'department'.'departmentId'", numberMatches(4.0))
                .body("'collection'[2].'manager'.'department'.'departmentName'", containsString("DWH"))
                .body("'collection'[2].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'manager'.'credential'.'credentialId'", numberMatches(6.0))
                .body("'collection'[2].'manager'.'credential'.'username'", containsString("nourlarguech"))
                .body("'collection'[2].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[2].'department'.'departmentId'", numberMatches(4.0))
                .body("'collection'[2].'department'.'departmentName'", containsString("DWH"))
                .body("'collection'[2].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'credential'.'credentialId'", numberMatches(1.0))
                .body("'collection'[2].'credential'.'username'", containsString("imentouk"))
                .body("'collection'[2].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'credential'.'role'", containsString("ROLE_EMP"))
                ; // Skipping assertions on the remaining 11 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/credentials
    */
    @Test @Timeout(60)
    public void test_65_getOnApiCredentialsWithQueryParamReturnsObjectUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/credentials?username=admin")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(14))
                .body("'collection'[0].'credentialId'", numberMatches(1.0))
                .body("'collection'[0].'username'", containsString("imentouk"))
                .body("'collection'[0].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'enabled'", equalTo(true))
                .body("'collection'[0].'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'credentialId'", numberMatches(2.0))
                .body("'collection'[1].'username'", containsString("badridoudi"))
                .body("'collection'[1].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'enabled'", equalTo(true))
                .body("'collection'[1].'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'credentialId'", numberMatches(3.0))
                .body("'collection'[2].'username'", containsString("selimhorri"))
                .body("'collection'[2].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'enabled'", equalTo(true))
                .body("'collection'[2].'role'", containsString("ROLE_EMP"))
                ; // Skipping assertions on the remaining 11 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/credentials
    */
    @Test @Timeout(60)
    public void test_66_getOnApiCredentialsWithQueryParamsReturnsObjectUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/credentials?" + 
                    "password=%242a%2410%246pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78%2FcvOprSR3lsZL2&" + 
                    "username=kbenghachame")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(14))
                .body("'collection'[0].'credentialId'", numberMatches(1.0))
                .body("'collection'[0].'username'", containsString("imentouk"))
                .body("'collection'[0].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'enabled'", equalTo(true))
                .body("'collection'[0].'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'credentialId'", numberMatches(2.0))
                .body("'collection'[1].'username'", containsString("badridoudi"))
                .body("'collection'[1].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'enabled'", equalTo(true))
                .body("'collection'[1].'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'credentialId'", numberMatches(3.0))
                .body("'collection'[2].'username'", containsString("selimhorri"))
                .body("'collection'[2].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'enabled'", equalTo(true))
                .body("'collection'[2].'role'", containsString("ROLE_EMP"))
                ; // Skipping assertions on the remaining 11 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/assignments
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_67_getOnApiAssignmentsWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 433L)
                .d("ADR", "\"FUj\"")
                .d("POSTAL_CODE", "\"5Ry6SXLGj10_F\"")
                .d("CITY", "\"vCerPyosV\"")
            .and().insertInto("DEPARTMENTS", 432L)
                .d("DEPARTMENT_NAME", "\"_EM_2926_XYZ_\"")
            .and().insertInto("EMPLOYEES", 431L)
                .d("FIRST_NAME", "\"VJ7WPyI3E\"")
                .d("LAST_NAME", "\"_EM_2927_XYZ_\"")
                .d("EMAIL", "\"Xcie@dEc.Lg\"")
                .d("PHONE", "\"aCfxosy3Bbpnl1sz8C\"")
                .d("JOB", "\"84MZbrNfDTKANVI\"")
                .d("SALARY", "2.0456238030939173E7")
            .and().insertInto("LOCATIONS", 430L)
                .d("ADR", "\"_EM_2928_XYZ_\"")
                .d("POSTAL_CODE", "\"_EM_2919_XYZ_\"")
                .d("CITY", "\"_EM_2929_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 429L)
                .d("DEPARTMENT_NAME", "\"oLX\"")
            .and().insertInto("EMPLOYEES", 428L)
                .d("FIRST_NAME", "\"eT\"")
                .d("LAST_NAME", "\"cYkcJrT4u4wPL\"")
                .d("EMAIL", "\"wV@a.QcK\"")
                .d("PHONE", "\"vka6JsGPZXQFQWj6\"")
                .d("JOB", "\"TTSyld4pk6\"")
                .d("SALARY", "248841.80574051364")
            .and().insertInto("LOCATIONS", 427L)
                .d("ADR", "\"MXjZ6K1oEp\"")
                .d("POSTAL_CODE", "\"6\"")
                .d("CITY", "\"_EM_2907_XYZ_T\"")
            .and().insertInto("DEPARTMENTS", 426L)
                .d("DEPARTMENT_NAME", "\"42\"")
            .and().insertInto("EMPLOYEES", 425L)
                .d("FIRST_NAME", "\"_EM_2920_XYZ_\"")
                .d("LAST_NAME", "\"bXBxIxUPO\"")
                .d("EMAIL", "\"uw@u.NEQ\"")
                .d("PHONE", "\"nISDX0lC\"")
                .d("HIREDATE", "\"2070-01-30\"")
                .d("JOB", "\"QHGg\"")
                .d("SALARY", "-82.33424015697916")
                .d("MANAGER_ID", "14")
                .d("DEPARTMENT_ID", "5")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/0/commitEmpDesc'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/assignments?username=drm_GX80Q")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(59))
                .body("'collection'[0].'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'projectId'", numberMatches(1.0))
                .body("'collection'[0].'commitDate'", containsString("26-11-202010:50:09"))
                .body("'collection'[0].'commitEmpDesc'", nullValue())
                .body("'collection'[0].'commitMgrDesc'", containsString("init"))
                .body("'collection'[0].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[0].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[0].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[0].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[0].'employee'.'job'", containsString("Billing"))
                .body("'collection'[0].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[0].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[0].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[0].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[0].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[0].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[0].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[0].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[0].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[0].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[0].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[0].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[0].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[0].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[0].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[0].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[0].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[0].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[0].'project'.'status'", containsString("COMPLETED"))
                .body("'collection'[1].'employeeId'", numberMatches(1.0))
                .body("'collection'[1].'projectId'", numberMatches(1.0))
                .body("'collection'[1].'commitDate'", containsString("26-11-202013:14:22"))
                .body("'collection'[1].'commitEmpDesc'", containsString("set up some configs"))
                .body("'collection'[1].'commitMgrDesc'", containsString("you need to implement sec solution"))
                .body("'collection'[1].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[1].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[1].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[1].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[1].'employee'.'job'", containsString("Billing"))
                .body("'collection'[1].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[1].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[1].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[1].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[1].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[1].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[1].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[1].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[1].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[1].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[1].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[1].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[1].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[1].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[1].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[1].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[1].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[1].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[1].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[1].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[1].'project'.'status'", containsString("COMPLETED"))
                .body("'collection'[2].'employeeId'", numberMatches(1.0))
                .body("'collection'[2].'projectId'", numberMatches(1.0))
                .body("'collection'[2].'commitDate'", containsString("12-12-202016:49:42"))
                .body("'collection'[2].'commitEmpDesc'", containsString("implement customer by invoice"))
                .body("'collection'[2].'commitMgrDesc'", nullValue())
                .body("'collection'[2].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[2].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[2].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[2].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[2].'employee'.'job'", containsString("Billing"))
                .body("'collection'[2].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[2].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[2].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[2].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[2].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[2].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[2].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[2].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[2].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[2].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[2].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[2].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[2].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[2].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[2].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[2].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[2].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[2].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[2].'project'.'status'", containsString("COMPLETED"))
                ; // Skipping assertions on the remaining 56 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/projects
    */
    @Test @Timeout(60)
    public void test_68_getOnApiProjectsWithQueryParamsReturnsObject() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/projects?" + 
                    "password=_EM_7434_XYZ_&" + 
                    "username=tqUEY5")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(9))
                .body("'collection'[0].'projectId'", numberMatches(1.0))
                .body("'collection'[0].'title'", containsString("TRANSBSCS"))
                .body("'collection'[0].'startDate'", containsString("28-09-2020"))
                .body("'collection'[0].'endDate'", containsString("04-11-2020"))
                .body("'collection'[0].'status'", containsString("COMPLETED"))
                .body("'collection'[1].'projectId'", numberMatches(2.0))
                .body("'collection'[1].'title'", containsString("SYNCH_BSCS_IMX"))
                .body("'collection'[1].'startDate'", containsString("26-11-2020"))
                .body("'collection'[1].'endDate'", containsString("25-03-2021"))
                .body("'collection'[1].'status'", containsString("IN_PROGRESS"))
                .body("'collection'[2].'projectId'", numberMatches(3.0))
                .body("'collection'[2].'title'", containsString("TASYI9A LILVIRANDA"))
                .body("'collection'[2].'startDate'", containsString("26-11-2020"))
                .body("'collection'[2].'endDate'", containsString("26-11-2020"))
                .body("'collection'[2].'status'", containsString("COMPLETED"))
                ; // Skipping assertions on the remaining 6 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * 1 - (200) PUT:/app/api/locations
    * 2 - (200) GET:/app/api/locations
    */
    @Test @Timeout(60)
    public void test_69_getOnApiLocationsWithQueryParamEmptyPasswordReturnsObjectUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 2571L)
                .d("ADR", "\"BLw01RmLy6tsCm\"")
                .d("POSTAL_CODE", "\"7VZ_DPpFbq\"")
                .d("CITY", "\"knpo\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"adr\": \"0CE9WCCaE\", " + 
                    " \"city\": \"NN3oxZFHZcJq\", " + 
                    " \"locationId\": -934755803, " + 
                    " \"postalCode\": \"jUWriBQol9oLG0\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/locations?" + 
                    "password=kCfxY4PEEolcNm4L&" + 
                    "username=_EM_7276_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'locationId'", numberMatches(4.0))
                .body("'adr'", containsString("0CE9WCCaE"))
                .body("'postalCode'", containsString("jUWriBQol9oLG0"))
                .body("'city'", containsString("NN3oxZFHZcJq"));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/locations?password=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(4))
                .body("'collection'[0].'locationId'", numberMatches(1.0))
                .body("'collection'[0].'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'postalCode'", containsString("2016"))
                .body("'collection'[0].'city'", containsString("LAC2"))
                .body("'collection'[1].'locationId'", numberMatches(2.0))
                .body("'collection'[1].'adr'", containsString("RUE DE BLA BLA"))
                .body("'collection'[1].'postalCode'", containsString("2016"))
                .body("'collection'[1].'city'", containsString("CHARGUIA"))
                .body("'collection'[2].'locationId'", numberMatches(3.0))
                .body("'collection'[2].'adr'", containsString("BLw01RmLy6tsCm"))
                .body("'collection'[2].'postalCode'", containsString("7VZ_DPpFbq"))
                .body("'collection'[2].'city'", containsString("knpo"))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * 1 - (400) PUT:/app/api/projects/update
    * 2 - (400) PUT:/app/api/projects/update
    * 3 - (200) POST:/app/api/credentials
    * 4 - (200) GET:/app/api/credentials/
    * Found 3 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_70_getOnCredentialsReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 5248L)
                .d("ADR", "\"OhgTZQMUZ\"")
                .d("POSTAL_CODE", "\"1kjSnJ\"")
                .d("CITY", "\"o\"")
            .and().insertInto("DEPARTMENTS", 5247L)
                .d("DEPARTMENT_NAME", "\"cfrb\"")
            .and().insertInto("EMPLOYEES", 5246L)
                .d("FIRST_NAME", "\"qHm5RX\"")
                .d("LAST_NAME", "\"gpBNlSMOfaTmBT\"")
                .d("EMAIL", "\"fSSB@tRB.mu\"")
                .d("PHONE", "\"6w\"")
                .d("JOB", "\"A8Y2\"")
                .d("SALARY", "0.29448291604020016")
            .and().insertInto("EMPLOYEES", 5243L)
                .d("FIRST_NAME", "\"IP5Um_ynD\"")
                .d("LAST_NAME", "\"QnC9zklcnm\"")
                .d("EMAIL", "\"wj@f.Sgj\"")
                .d("PHONE", "\"Pa7bk_PMfgvC5tgX\"")
                .d("JOB", "\"DARkoDgMqwWqO\"")
                .d("SALARY", "0.3483772277232007")
            .and().insertInto("EMPLOYEES", 5240L)
                .d("FIRST_NAME", "\"HPyuTqnkCWDr\"")
                .d("LAST_NAME", "\"RfnNa96ls\"")
                .d("EMAIL", "\"hy@q.VqLs\"")
                .d("PHONE", "\"RX084Blo\"")
                .d("HIREDATE", "\"2005-12-14\"")
                .d("JOB", "\"UZGfljp3zd8\"")
                .d("SALARY", "0.9857939412248721")
                .d("MANAGER_ID", "NULL")
                .d("DEPARTMENT_ID", "NULL")
            .and().insertInto("LOCATIONS", 5258L)
                .d("ADR", "\"rElZN6PsXNgZq6WC\"")
                .d("POSTAL_CODE", "\"z1GeYsHDUz8WOHv\"")
                .d("CITY", "\"_o\"")
            .and().insertInto("DEPARTMENTS", 5257L)
                .d("DEPARTMENT_NAME", "\"L4\"")
            .and().insertInto("EMPLOYEES", 5256L)
                .d("FIRST_NAME", "\"YReB19Q\"")
                .d("LAST_NAME", "\"vCV_XCsIMK5\"")
                .d("EMAIL", "\"Cqh@bgb.wwM\"")
                .d("PHONE", "\"We\"")
                .d("JOB", "\"Xjia4Jk\"")
                .d("SALARY", "0.3383180473170083")
            .and().insertInto("EMPLOYEES", 5253L)
                .d("FIRST_NAME", "\"Irfpmc\"")
                .d("LAST_NAME", "\"0nkVTx7l\"")
                .d("EMAIL", "\"tEJ@Arx.tZsf\"")
                .d("PHONE", "\"TDhVghOz1czc0\"")
                .d("JOB", "\"xm92WiSWa\"")
                .d("SALARY", "0.20986144252087247")
            .and().insertInto("ASSIGNMENTS", 5249L)
                .d("EMPLOYEE_ID", "13")
                .d("PROJECT_ID", "5")
                .d("COMMIT_DATE", "\"2100-12-15 05:27:22\"")
                .d("COMMIT_EMP_DESC", "\"\"")
                .d("COMMIT_MGR_DESC", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"title\": \"S00KD1oqVJbI9lj\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/projects/update")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Validation failed for classes [com.pfa.app.model.entity.Project] during persist time for groups [javax.validation.groups.Default, ]\nList of constraint violations:[\n\tConstraintViolationImpl{interpolatedMessage='Must not blank*', propertyPath=status, rootBeanClass=class com.pfa.app.model.entity.Project, messageTemplate='Must not blank*'}\n]"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"endDate\": \"vB\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/projects/update?" + 
                    "password=CfpSM9&" + 
                    "username=XeU")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"vB\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'vB' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"vB\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'vB' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 12] (through reference chain: com.pfa.app.model.entity.Project[\"endDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/username'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 462, " + 
                    " \"enabled\": false, " + 
                    " \"password\": \"_EM_9789_XYZ_\", " + 
                    " \"role\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/credentials")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(15.0))
                .body("'username'", nullValue())
                .body("'password'", containsString("_EM_9789_XYZ_"))
                .body("'enabled'", equalTo(false))
                .body("'role'", containsString(""));
        String 
        location_credentials__944 = "/app/api/credentials" + "/" + res_2.extract().body().path("credentialId").toString();
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(resolveLocation(location_credentials__944, baseUrlOfSut + "/app/api/credentials/?password=_EM_9789_XYZ_&username=nP2SbLbbLgMq"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(15.0))
                .body("'username'", nullValue())
                .body("'password'", containsString("_EM_9789_XYZ_"))
                .body("'enabled'", equalTo(false))
                .body("'role'", containsString(""));
    }
    
    
    /**
    * Calls:
    * 1 - (200) GET:/app/api/assignments/data/project-commit/{projectId}
    * 2 - (400) POST:/app/api/authenticate
    * 3 - (400) PUT:/app/api/employees/update
    * 4 - (400) PUT:/app/api/employees/update
    * 5 - (400) POST:/app/api/employees/save
    * 6 - (400) POST:/app/api/employees/save
    * 7 - (400) POST:/app/api/projects/save
    * 8 - (400) POST:/app/api/projects/save
    * 9 - (400) POST:/app/api/authenticate/
    * 10 - (200) GET:/app/api/credentials/
    * Found 10 potential faults of type-code 101
    * Using 1 example:
    *   dd-MM-yyyy
    */
    @Test @Timeout(60)
    public void test_71_getOnCredentialsReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 6032L)
                .d("ADR", "\"_iIBe14\"")
                .d("POSTAL_CODE", "\"gD1g_H5GrjWK3Sqk\"")
                .d("CITY", "\"0lGZ\"")
            .and().insertInto("DEPARTMENTS", 6031L)
                .d("DEPARTMENT_NAME", "\"rrdMxT\"")
            .and().insertInto("EMPLOYEES", 6030L)
                .d("FIRST_NAME", "\"rW20ceRMqpjmxG9\"")
                .d("LAST_NAME", "\"Ir5dtw5M\"")
                .d("EMAIL", "\"jaI@xt.hbRY\"")
                .d("PHONE", "\"pVx7D\"")
                .d("JOB", "\"0amtTECKtdwrVo\"")
                .d("SALARY", "0.6562852262682769")
            .and().insertInto("EMPLOYEES", 6027L)
                .d("FIRST_NAME", "\"tiz5LBypG\"")
                .d("LAST_NAME", "\"Xa\"")
                .d("EMAIL", "\"ht@zy.PlpC\"")
                .d("PHONE", "\"\"")
                .d("JOB", "\"P19i8i\"")
                .d("SALARY", "0.5076913498638168")
            .and().insertInto("USER_CREDENTIALS", 6023L)
                .d("USERNAME", "\"kiXy\"")
                .d("PASSWORD", "\"CxCmGFdnUpUPucF\"")
                .d("ENABLED", "true")
                .d("ROLE", "NULL")
                .d("EMPLOYEE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.format.date-time. [Path '/collection/0/commitDate'] String "2020-12-19T12:05:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_498_XYZ_")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/assignments/data/project-commit/2?password=EtC")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(10))
                .body("'collection'[0].'commitDate'", containsString("2020-12-19T12:05:23"))
                .body("'collection'[0].'commitEmpDesc'", containsString("Generate new XML file for CRMIMX2"))
                .body("'collection'[0].'commitMgrDesc'", containsString("-"))
                .body("'collection'[0].'lastName'", containsString("Horri"))
                .body("'collection'[0].'firstName'", containsString("Selim"))
                .body("'collection'[0].'projectId'", numberMatches(2.0))
                .body("'collection'[0].'employeeId'", numberMatches(1.0))
                .body("'collection'[1].'commitDate'", containsString("2020-12-17T19:29:17"))
                .body("'collection'[1].'commitEmpDesc'", containsString("take it easy with Spring Boot***********"))
                .body("'collection'[1].'commitMgrDesc'", containsString("-"))
                .body("'collection'[1].'lastName'", containsString("Horri"))
                .body("'collection'[1].'firstName'", containsString("Selim"))
                .body("'collection'[1].'projectId'", numberMatches(2.0))
                .body("'collection'[1].'employeeId'", numberMatches(1.0))
                .body("'collection'[2].'commitDate'", containsString("2020-12-12T16:43:48"))
                .body("'collection'[2].'commitEmpDesc'", containsString("synchronize xml and Java file"))
                .body("'collection'[2].'commitMgrDesc'", containsString("-"))
                .body("'collection'[2].'lastName'", containsString("Horri"))
                .body("'collection'[2].'firstName'", containsString("Selim"))
                .body("'collection'[2].'projectId'", numberMatches(2.0))
                .body("'collection'[2].'employeeId'", numberMatches(1.0))
                ; // Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/authenticate'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/app/api/authenticate")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Bad credentials"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_643_XYZ_")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"firstName\": \"HqDjLcZxTfi5w\", " + 
                    " \"hiredate\": \"7D6c9\", " + 
                    " \"job\": \"S99tyM0HHdLSO\", " + 
                    " \"lastName\": \"wNoq\", " + 
                    " \"phone\": \"\", " + 
                    " \"salary\": 0.6295954051071319 " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/employees/update")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"7D6c9\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text '7D6c9' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"7D6c9\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text '7D6c9' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 42] (through reference chain: com.pfa.app.model.entity.Employee[\"hiredate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"credential\": { " + 
                    " \"credentialId\": 499, " + 
                    " \"password\": \"0vS\", " + 
                    " \"role\": \"F\", " + 
                    " \"username\": \"9L\" " + 
                    " }, " + 
                    " \"email\": \"lrM\", " + 
                    " \"employeeId\": 471, " + 
                    " \"firstName\": \"LCZ\", " + 
                    " \"hiredate\": \"kh\", " + 
                    " \"job\": \"OJ3L\", " + 
                    " \"lastName\": \"Pb\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/employees/update?" + 
                    "EMextraParam123=_EM_642_XYZ_&" + 
                    "password=xceVlPPK0&" + 
                    "username=fI")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"kh\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'kh' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"kh\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'kh' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 147] (through reference chain: com.pfa.app.model.entity.Employee[\"hiredate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/save'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"employeeId\": 799, " + 
                    " \"hiredate\": \"7D6c9\", " + 
                    " \"lastName\": \"HqDjLcZxTfi5w\", " + 
                    " \"phone\": \"\", " + 
                    " \"salary\": 0.6295954051071319 " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/employees/save")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"7D6c9\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text '7D6c9' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"7D6c9\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text '7D6c9' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 31] (through reference chain: com.pfa.app.model.entity.Employee[\"hiredate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/save'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_643_XYZ_")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"email\": \"Ui63iWS3cD16MT\", " + 
                    " \"employeeId\": 799, " + 
                    " \"lastName\": \"HqDjLcZxTfi5w\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/employees/save?" + 
                    "password=xceVlPPK0&" + 
                    "username=fI")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", nullValue())
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/save'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"startDate\": \"Y8rLx7yCFL9\", " + 
                    " \"title\": \"QCeL1KWkAH\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/projects/save?EMextraParam123=_EM_642_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"Y8rLx7yCFL9\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'Y8rLx7yCFL9' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"Y8rLx7yCFL9\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'Y8rLx7yCFL9' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 14] (through reference chain: com.pfa.app.model.entity.Project[\"startDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/save'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_643_XYZ_")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"startDate\": \"dd-MM-yyyy\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/projects/save?username=fI")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 14] (through reference chain: com.pfa.app.model.entity.Project[\"startDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/authenticate/'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"password\": \"WeTzJx\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/authenticate/?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Bad credentials"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/14/role'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/credentials/?" + 
                    "EMextraParam123=42&" + 
                    "password=J&" + 
                    "username=mX0IPz")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(15))
                .body("'collection'[0].'credentialId'", numberMatches(1.0))
                .body("'collection'[0].'username'", containsString("imentouk"))
                .body("'collection'[0].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'enabled'", equalTo(true))
                .body("'collection'[0].'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'credentialId'", numberMatches(2.0))
                .body("'collection'[1].'username'", containsString("badridoudi"))
                .body("'collection'[1].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'enabled'", equalTo(true))
                .body("'collection'[1].'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'credentialId'", numberMatches(3.0))
                .body("'collection'[2].'username'", containsString("selimhorri"))
                .body("'collection'[2].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'enabled'", equalTo(true))
                .body("'collection'[2].'role'", containsString("ROLE_EMP"))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/v2/api-docs
    */
    @Test @Timeout(60)
    public void test_72_getOnApi_docsReturnsObject() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/app/v2/api-docs")
                .then()
                .statusCode(200);
    }
    
    
    /**
    * Calls:
    * (200) POST:/app/api/credentials
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_73_postOnCredentialsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/password'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 468, " + 
                    " \"enabled\": true, " + 
                    " \"role\": \"YtkXa0sDqC\", " + 
                    " \"username\": \"mayssahassine\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/credentials?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(15.0))
                .body("'username'", containsString("mayssahassine"))
                .body("'password'", nullValue())
                .body("'enabled'", equalTo(true))
                .body("'role'", containsString("YtkXa0sDqC"));
        String location_credentials__2 = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_credentials__2));
    }
    
    
    /**
    * Calls:
    * (200) POST:/app/api/credentials
    */
    @Test @Timeout(60)
    public void test_74_postOnApiCredentialsWithQueryParamReturns200() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1458_XYZ_")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 586, " + 
                    " \"enabled\": true, " + 
                    " \"password\": \"n5kdZtlc\", " + 
                    " \"role\": \"asT5GSfosF\", " + 
                    " \"username\": \"_EM_1457_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/credentials?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(15.0))
                .body("'username'", containsString("_EM_1457_XYZ_"))
                .body("'password'", containsString("n5kdZtlc"))
                .body("'enabled'", equalTo(true))
                .body("'role'", containsString("asT5GSfosF"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/app/api/credentials
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_75_postOnApiCredentialsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/password'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 603, " + 
                    " \"enabled\": true " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/credentials")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(15.0))
                .body("'username'", nullValue())
                .body("'password'", nullValue())
                .body("'enabled'", equalTo(true))
                .body("'role'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) POST:/app/api/locations
    */
    @Test @Timeout(60)
    public void test_76_postOnApiLocationsWithQueryParamsReturns200() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"adr\": \"fMVtw\", " + 
                    " \"city\": \"ArPi3wVS4NAqYosx\", " + 
                    " \"locationId\": 2, " + 
                    " \"postalCode\": \"2016\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/locations?" + 
                    "password=GeFN1jKdX&" + 
                    "username=_EM_9620_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'locationId'", numberMatches(2.0))
                .body("'adr'", containsString("fMVtw"))
                .body("'postalCode'", containsString("2016"))
                .body("'city'", containsString("ArPi3wVS4NAqYosx"));
        String location_locations__2 = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_locations__2));
    }
    
    
    /**
    * Calls:
    * (200) POST:/app/api/locations
    */
    @Test @Timeout(60)
    public void test_77_postOnApiLocationsReturns200() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"adr\": \"hjN8zmF\", " + 
                    " \"city\": \"_EM_478_XYZ_\", " + 
                    " \"postalCode\": \"WOi1wVC\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/locations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'locationId'", numberMatches(3.0))
                .body("'adr'", containsString("hjN8zmF"))
                .body("'postalCode'", containsString("WOi1wVC"))
                .body("'city'", containsString("_EM_478_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/app/api/credentials
    */
    @Test @Timeout(60)
    public void test_78_postOnApiCredentialsReturns200() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 755, " + 
                    " \"enabled\": true, " + 
                    " \"password\": \"_EM_1238_XYZ_\", " + 
                    " \"role\": \"_EM_1239_XYZ_\", " + 
                    " \"username\": \"admin\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/credentials")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(15.0))
                .body("'username'", containsString("admin"))
                .body("'password'", containsString("_EM_1238_XYZ_"))
                .body("'enabled'", equalTo(true))
                .body("'role'", containsString("_EM_1239_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/app/api/credentials
    */
    @Test @Timeout(60)
    public void test_79_postOnApiCredentialsWithQueryParamsReturns200() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 596, " + 
                    " \"enabled\": false, " + 
                    " \"password\": \"U\", " + 
                    " \"role\": \"W9W\", " + 
                    " \"username\": \"_EM_8891_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/credentials?" + 
                    "password=lMLex&" + 
                    "username=dmQAp")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(15.0))
                .body("'username'", containsString("_EM_8891_XYZ_"))
                .body("'password'", containsString("U"))
                .body("'enabled'", equalTo(false))
                .body("'role'", containsString("W9W"));
    }
    
    
    /**
    * Calls:
    * 1 - (400) POST:/app/api/departments
    * 2 - (400) DELETE:/app/api/assignments/delete/{employeeId}/{projectId}/{commitDate}
    * 3 - (200) POST:/app/api/credentials
    * 4 - (200) GET:/app/api/credentials/
    * 5 - (200) GET:/app/api/credentials/username/{username}
    * 6 - (400) POST:/app/api/employees
    * Found 3 potential faults of type-code 101
    * Using 1 example:
    *   dd-MM-yyyy
    */
    @Test @Timeout(60)
    public void test_80_postOnEmployeesReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1620L)
                .d("ADR", "\"S]AbWA\"")
                .d("POSTAL_CODE", "\"y3yhsg7rP2NcRIg\"")
                .d("CITY", "\"_EM_5386_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 1619L)
                .d("DEPARTMENT_NAME", "\"sI23bvEWsb\"")
            .and().insertInto("EMPLOYEES", 1618L)
                .d("FIRST_NAME", "\"XhC0\"")
                .d("LAST_NAME", "\"_EM_5582_XYZ_\"")
                .d("EMAIL", "\"QH@X.UJ\"")
                .d("PHONE", "\"BLt4rDYUnu\"")
                .d("JOB", "\"A5PsX7n5PDw7NTY\"")
                .d("SALARY", "0.6355764862062817")
            .and().insertInto("EMPLOYEES", 1615L)
                .d("FIRST_NAME", "\"ix9W65x_\"")
                .d("LAST_NAME", "\"_EM_5583_XYZ_\"")
                .d("EMAIL", "\"kef@vbv.OU\"")
                .d("PHONE", "\"ogDBdyKl5J\"")
                .d("JOB", "\"m5yD103b\"")
                .d("SALARY", "1.9")
            .and().insertInto("USER_CREDENTIALS", 1611L)
                .d("USERNAME", "\"VzME4R9hjUl\"")
                .d("PASSWORD", "\"_EM_5584_XYZ_\"")
                .d("ENABLED", "false")
                .d("ROLE", "\"_EM_5585_XYZ_\"")
                .d("EMPLOYEE_ID", "NULL")
            .and().insertInto("PROJECTS", 1569L)
                .d("TITLE", "\"Gy9qF14M2i:\"")
                .d("STATUS", "\"qs_7c4\"")
            .and().insertInto("LOCATIONS", 1568L)
                .d("ADR", "\"_EM_5568_XYZ_e\"")
                .d("POSTAL_CODE", "\"G\"")
                .d("CITY", "\"zTMadiK5ej_wNhzl\"")
            .and().insertInto("DEPARTMENTS", 1567L)
                .d("DEPARTMENT_NAME", "\"Billingk\"")
            .and().insertInto("EMPLOYEES", 1566L)
                .d("FIRST_NAME", "\"054Lr8a1UD3cqA\"")
                .d("LAST_NAME", "\"_EM_5388_XYZ_7\"")
                .d("EMAIL", "\"gmWB@yDB.tih\"")
                .d("PHONE", "\"_EM_5339_XYZ_\"")
                .d("JOB", "\"T\"")
                .d("SALARY", "-1836.1717721682587")
            .and().insertInto("EMPLOYEES", 1563L)
                .d("FIRST_NAME", "\"elYS3AXFIqMW\"")
                .d("LAST_NAME", "\"_EM_5341_XYZ_\"")
                .d("EMAIL", "\"KxZ@TEE.EtMC\"")
                .d("PHONE", "\"Tmfqc6uohhk\"")
                .d("JOB", "\"1X4lSi8c\"")
                .d("SALARY", "18889.314188789744")
            .and().insertInto("USER_CREDENTIALS", 1580L)
                .d("USERNAME", "NULL")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "true")
                .d("ROLE", "\"AK9jTW_RweDl_S\"")
                .r("EMPLOYEE_ID", 1566L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/departments'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"departmentName\": \"\", " + 
                    " \"location\": { " + 
                    " \"adr\": \"_EM_5336_XYZ_\", " + 
                    " \"city\": \"keKkCXJX\", " + 
                    " \"locationId\": 81, " + 
                    " \"postalCode\": \"\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/departments?" + 
                    "password=&" + 
                    "username=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Validation failed for classes [com.pfa.app.model.entity.Department] during persist time for groups [javax.validation.groups.Default, ]\nList of constraint violations:[\n\tConstraintViolationImpl{interpolatedMessage='*Must not blank**', propertyPath=departmentName, rootBeanClass=class com.pfa.app.model.entity.Department, messageTemplate='*Must not blank**'}\n]"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/delete/{employeeId}/{projectId}/{commitDate}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .delete(baseUrlOfSut + "/app/api/assignments/delete/_EM_5384_XYZ_/bpQNYk9WSun/_EM_5566_XYZ_?" + 
                    "password=_EM_5567_XYZ_&" + 
                    "username=_EM_5383_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"_EM_5384_XYZ_\""))
                .body("'status'", containsString("BAD_REQUEST"));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 465, " + 
                    " \"enabled\": false, " + 
                    " \"password\": \"_EM_5567_XYZ_\", " + 
                    " \"role\": \"8Z0ldSa7M\", " + 
                    " \"username\": \"_EM_5383_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/credentials")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(17.0))
                .body("'username'", containsString("_EM_5383_XYZ_"))
                .body("'password'", containsString("_EM_5567_XYZ_"))
                .body("'enabled'", equalTo(false))
                .body("'role'", containsString("8Z0ldSa7M"));
        String 
        location_credentials__120 = "/app/api/credentials" + "/" + res_2.extract().body().path("credentialId").toString();
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(resolveLocation(location_credentials__120, baseUrlOfSut + "/app/api/credentials/?password=_EM_5567_XYZ_&username=_EM_5383_XYZ_"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(17.0))
                .body("'username'", containsString("_EM_5383_XYZ_"))
                .body("'password'", containsString("_EM_5567_XYZ_"))
                .body("'enabled'", equalTo(false))
                .body("'role'", containsString("8Z0ldSa7M"));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/credentials/username/_EM_5383_XYZ_?password=_EM_5567_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(17.0))
                .body("'username'", containsString("_EM_5383_XYZ_"))
                .body("'password'", containsString("_EM_5567_XYZ_"))
                .body("'enabled'", equalTo(false))
                .body("'role'", containsString("8Z0ldSa7M"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"department\": { " + 
                    " \"departmentId\": 631, " + 
                    " \"departmentName\": \"q\", " + 
                    " \"location\": { " + 
                    " \"locationId\": 566, " + 
                    " \"postalCode\": \"Vm\" " + 
                    " } " + 
                    " }, " + 
                    " \"email\": \"OS@czg.ib\", " + 
                    " \"employeeId\": 521, " + 
                    " \"firstName\": \"_EM_5346_XYZ_\", " + 
                    " \"hiredate\": \"Weo67\", " + 
                    " \"job\": \"RH\", " + 
                    " \"salary\": 0.7142280752997343 " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/employees")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"Weo67\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'Weo67' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"Weo67\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'Weo67' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 188] (through reference chain: com.pfa.app.model.entity.Employee[\"hiredate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * 1 - (400) POST:/app/api/departments
    * 2 - (400) DELETE:/app/api/assignments/delete/{employeeId}/{projectId}/{commitDate}
    * 3 - (200) POST:/app/api/credentials
    * 4 - (200) GET:/app/api/credentials/
    * 5 - (200) GET:/app/api/credentials/username/{username}
    * 6 - (400) POST:/app/api/employees
    * Found 3 potential faults of type-code 101
    * Using 2 examples:
    *   dd-MM-yyyy
    *   dd-MM-yyyyHH:mm:ss
    */
    @Test @Timeout(60)
    public void test_81_postOnEmployeesReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1620L)
                .d("ADR", "\"SaAbWA\"")
                .d("POSTAL_CODE", "\"y3yhsg7rP2NcSIg\"")
                .d("CITY", "\"OnG\"")
            .and().insertInto("DEPARTMENTS", 1619L)
                .d("DEPARTMENT_NAME", "\"sI23bvEWsb\"")
            .and().insertInto("EMPLOYEES", 1618L)
                .d("FIRST_NAME", "\"WhC0\"")
                .d("LAST_NAME", "\"k\"")
                .d("EMAIL", "\"PH@W.VI\"")
                .d("PHONE", "\"BLt4rDYUou\"")
                .d("JOB", "\"A5PsX7n5PDw7NTY\"")
                .d("SALARY", "0.6355764862062817")
            .and().insertInto("EMPLOYEES", 1615L)
                .d("FIRST_NAME", "\"ix9W65x_\"")
                .d("LAST_NAME", "\"Kg98lSG\"")
                .d("EMAIL", "\"kff@vbv.PT\"")
                .d("PHONE", "\"ogDBdyKl5J\"")
                .d("JOB", "\"m5yD103b\"")
                .d("SALARY", "0.8")
            .and().insertInto("USER_CREDENTIALS", 1611L)
                .d("USERNAME", "\"VzME4R9hjUl\"")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "false")
                .d("ROLE", "\"_EM_5395_XYZ_\"")
                .d("EMPLOYEE_ID", "NULL")
            .and().insertInto("LOCATIONS", 1568L)
                .d("ADR", "\"_EM_3719_XYZ_\"")
                .d("POSTAL_CODE", "\"G\"")
                .d("CITY", "\"CIgoexy1eG0y\"")
            .and().insertInto("DEPARTMENTS", 1567L)
                .d("DEPARTMENT_NAME", "\"Billing\"")
            .and().insertInto("EMPLOYEES", 1566L)
                .d("FIRST_NAME", "\"054Lq8a1UD3cqA\"")
                .d("LAST_NAME", "\"_EM_5388_XYZ_\"")
                .d("EMAIL", "\"gmWB@yDA.tih\"")
                .d("PHONE", "\"_EM_5339_XYZ_\"")
                .d("JOB", "\"P\"")
                .d("SALARY", "0.0")
            .and().insertInto("EMPLOYEES", 1563L)
                .d("FIRST_NAME", "\"_EM_5340_XYZ_\"")
                .d("LAST_NAME", "\"_EM_5341_XYZ_\"")
                .d("EMAIL", "\"Kxa@TFE.EtMC\"")
                .d("PHONE", "\"Tmfqc6uophk\"")
                .d("JOB", "\"_EM_5342_XYZ_\"")
                .d("SALARY", "0.8524167800005203")
            .and().insertInto("USER_CREDENTIALS", 1580L)
                .d("USERNAME", "NULL")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "false")
                .d("ROLE", "\"AK9jTW_RweDl_S\"")
                .r("EMPLOYEE_ID", 1566L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/departments'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"departmentName\": \"\", " + 
                    " \"location\": { " + 
                    " \"adr\": \"_EM_5336_XYZ_\", " + 
                    " \"city\": \"keKkCXJX\", " + 
                    " \"locationId\": 81, " + 
                    " \"postalCode\": \"\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/departments?" + 
                    "password=&" + 
                    "username=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Validation failed for classes [com.pfa.app.model.entity.Department] during persist time for groups [javax.validation.groups.Default, ]\nList of constraint violations:[\n\tConstraintViolationImpl{interpolatedMessage='*Must not blank**', propertyPath=departmentName, rootBeanClass=class com.pfa.app.model.entity.Department, messageTemplate='*Must not blank**'}\n]"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/delete/{employeeId}/{projectId}/{commitDate}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .delete(baseUrlOfSut + "/app/api/assignments/delete/827/bpQNYk9WSun/vhi70ilFFp28ye_7?username=9T1%7EK")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"bpQNYk9WSun\""))
                .body("'status'", containsString("BAD_REQUEST"));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 465, " + 
                    " \"enabled\": false, " + 
                    " \"password\": \"\", " + 
                    " \"role\": \"8Z0ldSa7M\", " + 
                    " \"username\": \"9T1~K\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/credentials")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(17.0))
                .body("'username'", containsString("9T1~K"))
                .body("'password'", containsString(""))
                .body("'enabled'", equalTo(false))
                .body("'role'", containsString("8Z0ldSa7M"));
        String 
        location_credentials__120 = "/app/api/credentials" + "/" + res_2.extract().body().path("credentialId").toString();
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(resolveLocation(location_credentials__120, baseUrlOfSut + "/app/api/credentials/?username=9T1%7EK"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(17.0))
                .body("'username'", containsString("9T1~K"))
                .body("'password'", containsString(""))
                .body("'enabled'", equalTo(false))
                .body("'role'", containsString("8Z0ldSa7M"));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/credentials/username/9T1~K?" + 
                    "password=&" + 
                    "username=9T1%7EK")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(17.0))
                .body("'username'", containsString("9T1~K"))
                .body("'password'", containsString(""))
                .body("'enabled'", equalTo(false))
                .body("'role'", containsString("8Z0ldSa7M"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"department\": { " + 
                    " \"departmentName\": \"q\" " + 
                    " }, " + 
                    " \"email\": \"OS@czg.ib\", " + 
                    " \"employeeId\": 1049097, " + 
                    " \"firstName\": \"_EM_5346_XYZ_\", " + 
                    " \"hiredate\": \"Weg67\", " + 
                    " \"salary\": 0.7142280752997343 " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/employees")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"Weg67\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'Weg67' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"Weg67\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'Weg67' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 122] (through reference chain: com.pfa.app.model.entity.Employee[\"hiredate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/app/api/locations
    */
    @Test @Timeout(60)
    public void test_82_postOnApiLocationsWithQueryParamReturns200() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"adr\": \"jiNqNHdh6nMJ\", " + 
                    " \"city\": \"yEAbozYkVYRd\", " + 
                    " \"postalCode\": \"vxN2KShDtCl7\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/locations?EMextraParam123=_EM_515_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'locationId'", numberMatches(3.0))
                .body("'adr'", containsString("jiNqNHdh6nMJ"))
                .body("'postalCode'", containsString("vxN2KShDtCl7"))
                .body("'city'", containsString("yEAbozYkVYRd"));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/app/api/locations
    */
    @Test @Timeout(60)
    public void test_83_putOnLocationsReturns200UsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("DEPARTMENTS", 4830L)
                .d("DEPARTMENT_NAME", "\"nNtgpbjB7Y\"")
                .d("LOCATION_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"adr\": \"m10AXO7PRtYRWJ\", " + 
                    " \"city\": \"_EM_7639_XYZ_\", " + 
                    " \"locationId\": 573, " + 
                    " \"postalCode\": \"_EM_7640_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/locations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'locationId'", numberMatches(3.0))
                .body("'adr'", containsString("m10AXO7PRtYRWJ"))
                .body("'postalCode'", containsString("_EM_7640_XYZ_"))
                .body("'city'", containsString("_EM_7639_XYZ_"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/app/api/projects
    * 2 - (400) PUT:/app/api/projects
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_84_putOnProjectsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/endDate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"startDate\": \"\", " + 
                    " \"status\": \"RtMlFw6xFQxy\", " + 
                    " \"title\": \"u\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/projects?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'projectId'", numberMatches(10.0))
                .body("'title'", containsString("u"))
                .body("'startDate'", nullValue())
                .body("'endDate'", nullValue())
                .body("'status'", containsString("RtMlFw6xFQxy"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"endDate\": \"g5oD\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/projects?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"g5oD\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'g5oD' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"g5oD\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'g5oD' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 12] (through reference chain: com.pfa.app.model.entity.Project[\"endDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/app/api/projects
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_85_putOnApiProjectsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/endDate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"status\": \"_EM_2313_XYZ_\", " + 
                    " \"title\": \"_EM_2314_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/projects")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'projectId'", numberMatches(10.0))
                .body("'title'", containsString("_EM_2314_XYZ_"))
                .body("'startDate'", nullValue())
                .body("'endDate'", nullValue())
                .body("'status'", containsString("_EM_2313_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/app/api/credentials
    */
    @Test @Timeout(60)
    public void test_86_putOnCredentialsReturns200() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 466, " + 
                    " \"enabled\": false, " + 
                    " \"password\": \"mhEWLr17Df3T1\", " + 
                    " \"role\": \"Sx8Z9am\", " + 
                    " \"username\": \"azj8CV_4LRdcu\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/credentials")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(15.0))
                .body("'username'", containsString("azj8CV_4LRdcu"))
                .body("'password'", containsString("$2a$10$SDsUVLAeEYmKWA6.Ye6vWeuhA/8vi8P0kwKR.ZMPx6aCHMdgo.mE6"))
                .body("'enabled'", equalTo(false))
                .body("'role'", containsString("Sx8Z9am"));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/app/api/credentials
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_87_putOnCredentialsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/role'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 208, " + 
                    " \"enabled\": false, " + 
                    " \"password\": \"bJQ\", " + 
                    " \"username\": \"sanasaanouni\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/credentials")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(15.0))
                .body("'username'", containsString("sanasaanouni"))
                .body("'password'", containsString("$2a$10$hVUXQMu3Ts1Y3r8/T//bxek4AOVtGpNR7D0DdhZicx.rD6KErp31G"))
                .body("'enabled'", equalTo(false))
                .body("'role'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) PUT:/app/api/credentials
    */
    @Test @Timeout(60)
    public void test_88_putOnCredentialsReturns200UsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 2455L)
                .d("ADR", "\"_EM_7136_XYZ_\"")
                .d("POSTAL_CODE", "\"muv\"")
                .d("CITY", "\"9KfR3JPzRL7Io\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 297, " + 
                    " \"enabled\": false, " + 
                    " \"password\": \"JDRi31bIE6hzHsc\", " + 
                    " \"role\": \"ueUnmT7ae\", " + 
                    " \"username\": \"5OWSxKJvSDEDB\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/credentials?" + 
                    "password=JDRi31bIE6hzHsc&" + 
                    "username=5OWSxKJvSDEDB")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(15.0))
                .body("'username'", containsString("5OWSxKJvSDEDB"))
                .body("'password'", containsString("$2a$10$D7zsa..cNqxQ5Jf/zzjZauuGhnaSvhzpmUmKtwyLibdy/TZemFCuG"))
                .body("'enabled'", equalTo(false))
                .body("'role'", containsString("ueUnmT7ae"));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/app/api/locations
    */
    @Test @Timeout(60)
    public void test_89_putOnLocationsReturns200() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"adr\": \"N_tzBdveLc\", " + 
                    " \"city\": \"Fnz8kdIyiv\", " + 
                    " \"locationId\": 912, " + 
                    " \"postalCode\": \"ThEGHKDdgMfviq\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/locations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'locationId'", numberMatches(3.0))
                .body("'adr'", containsString("N_tzBdveLc"))
                .body("'postalCode'", containsString("ThEGHKDdgMfviq"))
                .body("'city'", containsString("Fnz8kdIyiv"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/app/api/projects
    * 2 - (200) GET:/app/api/projects
    * 3 - (400) DELETE:/app/api/credentials/{id}
    * 4 - (400) PUT:/app/api/assignments
    * Found 4 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_90_putOnApiAssignmentsWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("DEPARTMENTS", 1417L)
                .d("DEPARTMENT_NAME", "\"wklfI_318yVQmp\"")
            .and().insertInto("DEPARTMENTS", 1414L)
                .d("DEPARTMENT_NAME", "\"gbqgYj7cv5AFevw\"")
            .and().insertInto("LOCATIONS", 1412L)
                .d("ADR", "\"N\"")
                .d("POSTAL_CODE", "\"MSMYiPEWv3inV\"")
                .d("CITY", "\"WK0\"")
            .and().insertInto("DEPARTMENTS", 1411L)
                .d("DEPARTMENT_NAME", "\"uK\"")
            .and().insertInto("LOCATIONS", 180L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/endDate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"status\": \"IX0nRWhdp5le\", " + 
                    " \"title\": \"nc9XMmYyi\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/projects?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'projectId'", numberMatches(10.0))
                .body("'title'", containsString("nc9XMmYyi"))
                .body("'startDate'", nullValue())
                .body("'endDate'", nullValue())
                .body("'status'", containsString("IX0nRWhdp5le"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/9/endDate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/projects?" + 
                    "EMextraParam123=42&" + 
                    "username=vi0Dve1RQzM9I")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(10))
                .body("'collection'[0].'projectId'", numberMatches(1.0))
                .body("'collection'[0].'title'", containsString("TRANSBSCS"))
                .body("'collection'[0].'startDate'", containsString("28-09-2020"))
                .body("'collection'[0].'endDate'", containsString("04-11-2020"))
                .body("'collection'[0].'status'", containsString("COMPLETED"))
                .body("'collection'[1].'projectId'", numberMatches(2.0))
                .body("'collection'[1].'title'", containsString("SYNCH_BSCS_IMX"))
                .body("'collection'[1].'startDate'", containsString("26-11-2020"))
                .body("'collection'[1].'endDate'", containsString("25-03-2021"))
                .body("'collection'[1].'status'", containsString("IN_PROGRESS"))
                .body("'collection'[2].'projectId'", numberMatches(3.0))
                .body("'collection'[2].'title'", containsString("TASYI9A LILVIRANDA"))
                .body("'collection'[2].'startDate'", containsString("26-11-2020"))
                .body("'collection'[2].'endDate'", containsString("26-11-2020"))
                .body("'collection'[2].'status'", containsString("COMPLETED"))
                ; // Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/credentials/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .delete(baseUrlOfSut + "/app/api/credentials/-1")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Credential object FOUND! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"commitDate\": \"ED9ZUSX\", " + 
                    " \"commitMgrDesc\": \"P9Q7\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/assignments?EMextraParam123=_EM_491_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDateTime` from String \"ED9ZUSX\": Failed to deserialize java.time.LocalDateTime: (java.time.format.DateTimeParseException) Text 'ED9ZUSX' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDateTime` from String \"ED9ZUSX\": Failed to deserialize java.time.LocalDateTime: (java.time.format.DateTimeParseException) Text 'ED9ZUSX' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 15] (through reference chain: com.pfa.app.model.entity.Assignment[\"commitDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/app/api/projects
    * 2 - (400) GET:/app/api/projects/{id}
    * 3 - (400) PUT:/app/api/projects
    * Found 3 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_91_putOnProjectsReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("PROJECTS", 2989L)
                .d("TITLE", "\"l2\"")
                .d("START_DATE", "\"2066-01-02\"")
                .d("END_DATE", "\"1960-01-15\"")
                .d("STATUS", "\"tl\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/endDate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"projectId\": 611, " + 
                    " \"startDate\": \"\", " + 
                    " \"status\": \"KeF\", " + 
                    " \"title\": \"YNzjBMl0\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/projects?" + 
                    "password=g8bZs9UPrnshbk3&" + 
                    "username=zRx7X")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'projectId'", numberMatches(11.0))
                .body("'title'", containsString("YNzjBMl0"))
                .body("'startDate'", nullValue())
                .body("'endDate'", nullValue())
                .body("'status'", containsString("KeF"));
        String 
        location_projects__21 = "/app/api/projects" + "/" + res_0.extract().body().path("projectId").toString();
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(resolveLocation(location_projects__21, baseUrlOfSut + "/app/api/projects/wdE7jRFl?password=s9&username=_EM_7798_XYZ_"))
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"wdE7jRFl\""))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"endDate\": \"IUx0vo\", " + 
                    " \"projectId\": 562 " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/projects?" + 
                    "password=vBOYNTV&" + 
                    "username=aFSx9BoVJ2q")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"IUx0vo\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'IUx0vo' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"IUx0vo\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'IUx0vo' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 12] (through reference chain: com.pfa.app.model.entity.Project[\"endDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/app/api/locations
    * 2 - (200) PUT:/app/api/locations
    */
    @Test @Timeout(60)
    public void test_92_putOnLocationsReturns200UsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1207L)
                .d("ADR", "\"Mj_iX\"")
                .d("POSTAL_CODE", "\"pCvxYr09Wt5\"")
                .d("CITY", "\"Pvx9\"")
            .and().insertInto("DEPARTMENTS", 1206L)
                .d("DEPARTMENT_NAME", "\"mnUrU\"")
            .and().insertInto("EMPLOYEES", 1205L)
                .d("FIRST_NAME", "\"Vk4jylHr33Aw_9\"")
                .d("LAST_NAME", "\"xUG9s\"")
                .d("EMAIL", "\"qV@IBw.SDp\"")
                .d("PHONE", "\"Gd0T0WabMY\"")
                .d("JOB", "\"_EM_4589_XYZ_\"")
                .d("SALARY", "0.7925956449954059")
            .and().insertInto("LOCATIONS", 1204L)
                .d("ADR", "\"O7ZQhDMUL\"")
                .d("POSTAL_CODE", "\"y4cJ1lODOT\"")
                .d("CITY", "\"_EM_8162_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 1203L)
                .d("DEPARTMENT_NAME", "\"_EM_8167_XYZ_\"")
            .and().insertInto("EMPLOYEES", 1202L)
                .d("FIRST_NAME", "\"_xjIKQZeF\"")
                .d("LAST_NAME", "\"_EM_8168_XYZ_\"")
                .d("EMAIL", "\"Lf@e.ZrS\"")
                .d("PHONE", "\"2YjY5ury2Q2vKg\"")
                .d("JOB", "\"l\"")
                .d("SALARY", "0.927245961162857")
            .and().insertInto("LOCATIONS", 1201L)
                .d("ADR", "\"td5yaUUycUJY\"")
                .d("POSTAL_CODE", "\"3jz5w0\"")
                .d("CITY", "\"G3H3nDOj\"")
            .and().insertInto("DEPARTMENTS", 1200L)
                .d("DEPARTMENT_NAME", "\"jh\"")
            .and().insertInto("EMPLOYEES", 1199L)
                .d("FIRST_NAME", "\"KpqUW4r46M2\"")
                .d("LAST_NAME", "\"_1rhEHEWLk\"")
                .d("EMAIL", "\"GjP@PrT.KO\"")
                .d("PHONE", "\"x\"")
                .d("JOB", "\"RmfWUBxxbT\"")
                .d("SALARY", "-1739.2678717739777")
            .and().insertInto("USER_CREDENTIALS", 1198L)
                .d("USERNAME", "\"OARU\"")
                .d("PASSWORD", "\"_\"")
                .d("ENABLED", "false")
                .d("ROLE", "\"SjGtn3whr0g2f\"")
                .r("EMPLOYEE_ID", 1205L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"adr\": \"dBXOpwjNW66ej2\", " + 
                    " \"city\": \"8d45Qtf8vfZ\", " + 
                    " \"postalCode\": \"_EM_8161_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/locations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'locationId'", numberMatches(6.0))
                .body("'adr'", containsString("dBXOpwjNW66ej2"))
                .body("'postalCode'", containsString("_EM_8161_XYZ_"))
                .body("'city'", containsString("8d45Qtf8vfZ"));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"adr\": \"36\", " + 
                    " \"city\": \"IRkbtPJF9Ttkj\", " + 
                    " \"locationId\": 911, " + 
                    " \"postalCode\": \"VIDik8I1mf94bZZ\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/locations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'locationId'", numberMatches(7.0))
                .body("'adr'", containsString("36"))
                .body("'postalCode'", containsString("VIDik8I1mf94bZZ"))
                .body("'city'", containsString("IRkbtPJF9Ttkj"));
    }
    
    
    /**
    * Calls:
    * 1 - (400) POST:/app/api/departments
    * 2 - (200) GET:/app/api/departments
    * 3 - (400) PUT:/app/api/locations
    * Found 3 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_93_putOnLocationsReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 5185L)
                .d("ADR", "\"dkJswJqO\"")
                .d("POSTAL_CODE", "\"Q1JDSgS\"")
                .d("CITY", "\"8XPV2PHMm7a\"")
            .and().insertInto("LOCATIONS", 5189L)
                .d("ADR", "\"Iqgi4B\"")
                .d("POSTAL_CODE", "\"f2UoDWtzM\"")
                .d("CITY", "\"B_aIcP0r66wh\"")
            .and().insertInto("DEPARTMENTS", 5188L)
                .d("DEPARTMENT_NAME", "\"OItgYLdEqZbWehn\"")
                .d("LOCATION_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/departments'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"departmentId\": 782, " + 
                    " \"departmentName\": \"szHtvE\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/departments?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Validation failed for classes [com.pfa.app.model.entity.Department] during persist time for groups [javax.validation.groups.Default, ]\nList of constraint violations:[\n\tConstraintViolationImpl{interpolatedMessage='*Must not NULL**', propertyPath=location, rootBeanClass=class com.pfa.app.model.entity.Department, messageTemplate='*Must not NULL**'}\n]"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/3/location'] Instance type (null) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/departments?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(4))
                .body("'collection'[0].'departmentId'", numberMatches(4.0))
                .body("'collection'[0].'departmentName'", containsString("DWH"))
                .body("'collection'[0].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'departmentName'", containsString("Digital"))
                .body("'collection'[1].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'departmentName'", containsString("Billing"))
                .body("'collection'[2].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'location'.'city'", containsString("LAC2"))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/locations'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_528_XYZ_")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"city\": \"wVQ_Icx5t\", " + 
                    " \"locationId\": -1075002874, " + 
                    " \"postalCode\": \"bFIiw\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/locations")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Validation failed for classes [com.pfa.app.model.entity.Location] during persist time for groups [javax.validation.groups.Default, ]\nList of constraint violations:[\n\tConstraintViolationImpl{interpolatedMessage='*Must Not blank**', propertyPath=adr, rootBeanClass=class com.pfa.app.model.entity.Location, messageTemplate='*Must Not blank**'}\n]"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/credentials
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_94_getOnApiCredentialsWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1978L)
                .d("ADR", "\"w4cpjfqa\"")
                .d("POSTAL_CODE", "\"co3AEcB\"")
                .d("CITY", "\"_EM_6309_XYZ_\"")
            .and().insertInto("LOCATIONS", 1988L)
                .d("ADR", "\"fZYK4Tph7E5c\"")
                .d("POSTAL_CODE", "\"B5uM2kZBBH\"")
                .d("CITY", "\"5\"")
            .and().insertInto("DEPARTMENTS", 1987L)
                .d("DEPARTMENT_NAME", "\"bj5eu_fNW7VP\"")
            .and().insertInto("EMPLOYEES", 1986L)
                .d("FIRST_NAME", "\"Gpxo\"")
                .d("LAST_NAME", "\"gO1PVc1ghX9hITxY\"")
                .d("EMAIL", "\"IfE@v.CdDN\"")
                .d("PHONE", "\"3XyxU\"")
                .d("JOB", "\"nnocIXrnPFY6jl\"")
                .d("SALARY", "0.07096331271826117")
            .and().insertInto("LOCATIONS", 1985L)
                .d("ADR", "\"PCojfUGq\"")
                .d("POSTAL_CODE", "\"yn\"")
                .d("CITY", "\"6rpNZEvE\"")
            .and().insertInto("DEPARTMENTS", 1984L)
                .d("DEPARTMENT_NAME", "\"Ou\"")
            .and().insertInto("EMPLOYEES", 1983L)
                .d("FIRST_NAME", "\"D34xZTJ2codo\"")
                .d("LAST_NAME", "\"uJDe\"")
                .d("EMAIL", "\"GORh@S.DQfe\"")
                .d("PHONE", "\"chr49aY5\"")
                .d("JOB", "\"Z\"")
                .d("SALARY", "0.8458945193183893")
            .and().insertInto("LOCATIONS", 1982L)
                .d("ADR", "\"m\"")
                .d("POSTAL_CODE", "\"5EEPrSeqHi36PxR0\"")
                .d("CITY", "\"d4_OX__BNrP9g\"")
            .and().insertInto("DEPARTMENTS", 1981L)
                .d("DEPARTMENT_NAME", "\"4Pew0W_rmUQryjp\"")
            .and().insertInto("EMPLOYEES", 1980L)
                .d("FIRST_NAME", "\"_w\"")
                .d("LAST_NAME", "\"4UJbsu4IJf\"")
                .d("EMAIL", "\"LtBK@gT.bNB\"")
                .d("PHONE", "\"h5\"")
                .d("JOB", "\"ocNtu\"")
                .d("SALARY", "0.7686763838916022")
            .and().insertInto("USER_CREDENTIALS", 1979L)
                .d("USERNAME", "\"E@vVu6\"")
                .d("PASSWORD", "\"B2MP\"")
                .d("ENABLED", "true")
                .d("ROLE", "\"rYvXjEu9IrF_JPJu\"")
                .d("EMPLOYEE_ID", "10")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/credentials'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/credentials?" + 
                    "password=AgyPJnLCuHcJh&" + 
                    "username=d8UotRADu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("More than one row with the given identifier was found: 10, for class: com.pfa.app.model.entity.Credential; nested exception is org.hibernate.HibernateException: More than one row with the given identifier was found: 10, for class: com.pfa.app.model.entity.Credential"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/employees/
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_95_getOnEmployeesEmployeesWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1207L)
                .d("ADR", "\"Mj_iXD\"")
                .d("POSTAL_CODE", "\"pCvxYr09Wt5\"")
                .d("CITY", "\"_EM_8140_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 1206L)
                .d("DEPARTMENT_NAME", "\"mnUrU\"")
            .and().insertInto("EMPLOYEES", 1205L)
                .d("FIRST_NAME", "\"Vk4jylHr33Aw_9\"")
                .d("LAST_NAME", "\"xUG9s\"")
                .d("EMAIL", "\"pV@IBv.SBq\"")
                .d("PHONE", "\"Gd0T0WabQY\"")
                .d("JOB", "\"_EM_4589_XYZ_\"")
                .d("SALARY", "0.7925956449954059")
            .and().insertInto("LOCATIONS", 1204L)
                .d("ADR", "\"8N8NWbokx0K\"")
                .d("POSTAL_CODE", "\"y4cJ1lODOT\"")
                .d("CITY", "\"ZeLI5LujoR\"")
            .and().insertInto("DEPARTMENTS", 1203L)
                .d("DEPARTMENT_NAME", "\"O5IHaE\"")
            .and().insertInto("EMPLOYEES", 1202L)
                .d("FIRST_NAME", "\"42\"")
                .d("LAST_NAME", "\"_EM_8141_XYZ_\"")
                .d("EMAIL", "\"Lf@d.aqS\"")
                .d("PHONE", "\"2YjY5ury2Q2vKgF\"")
                .d("JOB", "\"_EM_8142_XYZ_\"")
                .d("SALARY", "0.4485495317707172")
            .and().insertInto("LOCATIONS", 1201L)
                .d("ADR", "\"_EM_8135_XYZ_\"")
                .d("POSTAL_CODE", "\"3jz5w0d\"")
                .d("CITY", "\"G3H3nDOj\"")
            .and().insertInto("DEPARTMENTS", 1200L)
                .d("DEPARTMENT_NAME", "\"_EM_4591_XYZ_\"")
            .and().insertInto("EMPLOYEES", 1199L)
                .d("FIRST_NAME", "\"KpqUW4r46M2\"")
                .d("LAST_NAME", "\"_EM_8136_XYZ_\"")
                .d("EMAIL", "\"GjP@PrS.KO\"")
                .d("PHONE", "\"yb\"")
                .d("JOB", "\"RmfWUBxxbT\"")
                .d("SALARY", "-1739.2678717739777")
            .and().insertInto("USER_CREDENTIALS", 1198L)
                .d("USERNAME", "\"OARU\"")
                .d("PASSWORD", "\"3\"")
                .d("ENABLED", "false")
                .d("ROLE", "\"SjGtn3whr0g2\"")
                .d("EMPLOYEE_ID", "12")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/employees/?" + 
                    "password=_RhkIU6CB_rQ&" + 
                    "username=sghWRNTQkCbE")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("More than one row with the given identifier was found: 12, for class: com.pfa.app.model.entity.Credential; nested exception is org.hibernate.HibernateException: More than one row with the given identifier was found: 12, for class: com.pfa.app.model.entity.Credential"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/departments
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_96_postOnDepartmentsReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1620L)
                .d("ADR", "\"S]AbWA\"")
                .d("POSTAL_CODE", "\"y3yhsg7rP2NcRIg\"")
                .d("CITY", "\"_EM_5386_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 1619L)
                .d("DEPARTMENT_NAME", "\"sI23bvEWsb\"")
            .and().insertInto("EMPLOYEES", 1618L)
                .d("FIRST_NAME", "\"XhC0\"")
                .d("LAST_NAME", "\"_EM_5582_XYZ_\"")
                .d("EMAIL", "\"QH@X.UJ\"")
                .d("PHONE", "\"BLt4rDYUnu\"")
                .d("JOB", "\"A5PsX7n5PDw7NTY\"")
                .d("SALARY", "0.6355764862062817")
            .and().insertInto("EMPLOYEES", 1615L)
                .d("FIRST_NAME", "\"ix9W65x_\"")
                .d("LAST_NAME", "\"_EM_5583_XYZ_\"")
                .d("EMAIL", "\"kef@vbv.OU\"")
                .d("PHONE", "\"ogDBdyKl5J\"")
                .d("JOB", "\"m5yD103b\"")
                .d("SALARY", "1.9")
            .and().insertInto("USER_CREDENTIALS", 1611L)
                .d("USERNAME", "\"VzME4R9hjUl\"")
                .d("PASSWORD", "\"_EM_5584_XYZ_\"")
                .d("ENABLED", "false")
                .d("ROLE", "\"_EM_5585_XYZ_\"")
                .d("EMPLOYEE_ID", "NULL")
            .and().insertInto("LOCATIONS", 1568L)
                .d("ADR", "\"_EM_5568_XYZ_e\"")
                .d("POSTAL_CODE", "\"G\"")
                .d("CITY", "\"zTMadiK5ej_wNhzl\"")
            .and().insertInto("DEPARTMENTS", 1567L)
                .d("DEPARTMENT_NAME", "\"Billingk\"")
            .and().insertInto("EMPLOYEES", 1566L)
                .d("FIRST_NAME", "\"054Lr8a1UD3cqA\"")
                .d("LAST_NAME", "\"_EM_5388_XYZ_7\"")
                .d("EMAIL", "\"gmWB@yDB.tih\"")
                .d("PHONE", "\"_EM_5339_XYZ_\"")
                .d("JOB", "\"T\"")
                .d("SALARY", "-1836.1717721682587")
            .and().insertInto("EMPLOYEES", 1563L)
                .d("FIRST_NAME", "\"elYS3AXFIqMW\"")
                .d("LAST_NAME", "\"_EM_5341_XYZ_\"")
                .d("EMAIL", "\"KxZ@TEE.EtMC\"")
                .d("PHONE", "\"Tmfqc6uohhk\"")
                .d("JOB", "\"1X4lSi8c\"")
                .d("SALARY", "18889.314188789744")
            .and().insertInto("USER_CREDENTIALS", 1580L)
                .d("USERNAME", "NULL")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "true")
                .d("ROLE", "\"AK9jTW_RweDl_S\"")
                .r("EMPLOYEE_ID", 1566L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/departments'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"departmentName\": \"\", " + 
                    " \"location\": { " + 
                    " \"adr\": \"_EM_5336_XYZ_\", " + 
                    " \"city\": \"keKkCXJX\", " + 
                    " \"locationId\": 81, " + 
                    " \"postalCode\": \"\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/departments?" + 
                    "password=&" + 
                    "username=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Validation failed for classes [com.pfa.app.model.entity.Department] during persist time for groups [javax.validation.groups.Default, ]\nList of constraint violations:[\n\tConstraintViolationImpl{interpolatedMessage='*Must not blank**', propertyPath=departmentName, rootBeanClass=class com.pfa.app.model.entity.Department, messageTemplate='*Must not blank**'}\n]"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/authenticate
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_97_postOnApiAuthenticateWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/authenticate'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"password\": \"OuPL3g\", " + 
                    " \"username\": \"imentouk\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/authenticate?EMextraParam123=_EM_577_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Bad credentials"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/authenticate/
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_98_postOnAuthenticateAuthenticateWithQueryParamsUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 156L)
                .d("ADR", "\"hUcAgUUNUU4UCb4=\"")
                .d("POSTAL_CODE", "\"EMwlSimJnDdW\"")
                .d("CITY", "\"doCgALAuV_lrPG\"")
            .and().insertInto("DEPARTMENTS", 155L)
                .d("DEPARTMENT_NAME", "\"oHjetpzU4kP\"")
            .and().insertInto("EMPLOYEES", 154L)
                .d("FIRST_NAME", "\"_EM_1930_XYZ_\"")
                .d("LAST_NAME", "\"jSWMwKyZ\"")
                .d("EMAIL", "\"PR@Xc.nDK\"")
                .d("PHONE", "\"\"")
                .d("JOB", "\"8n\"")
                .d("SALARY", "0.2603131236037638")
            .and().insertInto("LOCATIONS", 153L)
                .d("ADR", "\"lQXdHmtCOyd\"")
                .d("POSTAL_CODE", "\"_EM_1931_XYZ_\"")
                .d("CITY", "\"8d8jCc2ibhmd3jD\"")
            .and().insertInto("DEPARTMENTS", 152L)
                .d("DEPARTMENT_NAME", "\"Jxf_W15\"")
            .and().insertInto("EMPLOYEES", 151L)
                .d("FIRST_NAME", "\"_EM_1932_XYZ_\"")
                .d("LAST_NAME", "\"loHahCrJ\"")
                .d("EMAIL", "\"Ph@n.ZM\"")
                .d("PHONE", "\"iNh\"")
                .d("JOB", "\"syqcwwUKHPsx\"")
                .d("SALARY", "0.3553077")
            .and().insertInto("LOCATIONS", 150L)
                .d("ADR", "\"A85koenJl7vq\"")
                .d("POSTAL_CODE", "\"Cxo6\"")
                .d("CITY", "\"_EM_1933_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 149L)
                .d("DEPARTMENT_NAME", "\"GICrhmNx\"")
            .and().insertInto("EMPLOYEES", 148L)
                .d("FIRST_NAME", "\"_EM_1934_XYZ_\"")
                .d("LAST_NAME", "\"ADBqptNulop\"")
                .d("EMAIL", "\"oSk@lp.Ajb\"")
                .d("PHONE", "\"ryq329fkb\"")
                .d("JOB", "\"zVl9qIieQbdK0ZWC\"")
                .d("SALARY", "0.568298619817461")
            .and().insertInto("USER_CREDENTIALS", 147L)
                .d("USERNAME", "\"V2tlV2zdlZnPD\"")
                .d("PASSWORD", "\"ncsfDrRgW\"")
                .d("ENABLED", "true")
                .d("ROLE", "\"jg8rttYFacg\"")
                .d("EMPLOYEE_ID", "7")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/authenticate/'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_582_XYZ_")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"password\": \"JpY9xvqZ\", " + 
                    " \"username\": \"7Qhn6Tz6fhDLL\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/authenticate/?" + 
                    "EMextraParam123=_EM_581_XYZ_&" + 
                    "password=JpY9xvqZ&" + 
                    "username=_EM_1927_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Bad credentials"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/assignments
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_99_postOnAssignmentsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"commitEmpDesc\": \"_EM_602_XYZ_\", " + 
                    " \"employee\": { " + 
                    " \"credential\": { " + 
                    " \"credentialId\": 482 " + 
                    " }, " + 
                    " \"department\": { " + 
                    " \"departmentId\": 151 " + 
                    " }, " + 
                    " \"employeeId\": 455, " + 
                    " \"job\": \"_EM_609_XYZ_\", " + 
                    " \"lastName\": \"sfQvxt153fK\", " + 
                    " \"salary\": 0.482665877685303 " + 
                    " }, " + 
                    " \"project\": { " + 
                    " \"projectId\": 707, " + 
                    " \"status\": \"h5MjB\", " + 
                    " \"title\": \"Ji_pR18d8\" " + 
                    " }, " + 
                    " \"projectId\": 359 " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/assignments")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Unable to find com.pfa.app.model.entity.Employee with id 455; nested exception is javax.persistence.EntityNotFoundException: Unable to find com.pfa.app.model.entity.Employee with id 455"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/departments
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_100_postOnDepartmentsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/departments'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1460_XYZ_")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"departmentName\": \"DWH\", " + 
                    " \"location\": { " + 
                    " \"city\": \"_EM_1459_XYZ_\", " + 
                    " \"locationId\": 229, " + 
                    " \"postalCode\": \"_EM_479_XYZ_\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/departments")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("could not execute statement; SQL [n/a]; constraint [FK1_DEPT]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/authenticate
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_101_postOnApiAuthenticateWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 2987L)
            .and().insertInto("DEPARTMENTS", 2986L)
            .and().insertInto("EMPLOYEES", 2985L)
                .d("EMAIL", "\"r25\"")
                .d("PHONE", "\"4TDsr02AlZH2\"")
            .and().insertInto("EMPLOYEES", 2982L)
                .d("EMAIL", "\"42\"")
                .d("PHONE", "\"[7i\"")
            .and().insertInto("USER_CREDENTIALS", 2978L)
                .d("USERNAME", "\"lEti\"")
                .d("PASSWORD", "\"_EM_7790_XYZ_\"")
                .d("ENABLED", "true")
                .d("ROLE", "\"MUDcCy\"")
                .d("EMPLOYEE_ID", "NULL")
            .and().insertInto("PROJECTS", 2988L)
                .d("TITLE", "\"xHSbOAAa05m\"")
                .d("START_DATE", "NULL")
                .d("END_DATE", "NULL")
                .d("STATUS", "\"kjV3vn2eo70l\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/authenticate'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"password\": \"_EM_1238_XYZ_\", " + 
                    " \"username\": \"MmWDu\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/authenticate?" + 
                    "password=650LTVr5h4a1WpMg&" + 
                    "username=_EM_7467_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Bad credentials"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/credentials
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_102_postOnCredentialsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/credentials'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 597, " + 
                    " \"password\": \"OmSf6uJ\", " + 
                    " \"role\": \"OJ3II0jr4N\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/credentials?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/employees
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_103_postOnApiEmployeesWithQueryParamsEmptyPassword() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"credential\": { " + 
                    " \"credentialId\": 215, " + 
                    " \"enabled\": true, " + 
                    " \"role\": \"iOhmxJYo\" " + 
                    " }, " + 
                    " \"department\": { " + 
                    " \"departmentName\": \"JqZyLER\" " + 
                    " }, " + 
                    " \"email\": \"dt\", " + 
                    " \"employeeId\": 551, " + 
                    " \"firstName\": \"5Q2xZJ3ht\", " + 
                    " \"lastName\": \"\", " + 
                    " \"salary\": 0.16958537863 " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/employees?" + 
                    "password=&" + 
                    "username=NDRQ71oOVe")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", nullValue())
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/assignments
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_104_postOnAssignmentsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"commitEmpDesc\": \"pmT8oh5M5U\", " + 
                    " \"employee\": { " + 
                    " \"credential\": { " + 
                    " \"credentialId\": 20, " + 
                    " \"enabled\": false, " + 
                    " \"password\": \"Louin\", " + 
                    " \"role\": \"4\", " + 
                    " \"username\": \"nhoHNQfsjp44\" " + 
                    " }, " + 
                    " \"department\": { " + 
                    " \"departmentId\": 908131359, " + 
                    " \"departmentName\": \"MuP35x\" " + 
                    " }, " + 
                    " \"employeeId\": 92, " + 
                    " \"firstName\": \"_EM_3926_XYZ_\", " + 
                    " \"hiredate\": \"\", " + 
                    " \"job\": \"ZuZkM\", " + 
                    " \"lastName\": \"Mrwl4pc0fImr4b\", " + 
                    " \"phone\": \"cDuPcW_sqmUwB\", " + 
                    " \"salary\": 0.762562954627988 " + 
                    " }, " + 
                    " \"project\": { " + 
                    " \"endDate\": \"MsNzcFtx\", " + 
                    " \"projectId\": 2102140655 " + 
                    " }, " + 
                    " \"projectId\": 500 " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/assignments")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"MsNzcFtx\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'MsNzcFtx' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"MsNzcFtx\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'MsNzcFtx' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 402] (through reference chain: com.pfa.app.model.entity.Assignment[\"project\"]->com.pfa.app.model.entity.Project[\"endDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/locations
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_105_postOnLocationsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/locations'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"locationId\": 2 " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/locations")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Could not commit JPA transaction; nested exception is javax.persistence.RollbackException: Error while committing the transaction"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/locations
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_106_postOnLocationsReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/locations'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_528_XYZ_")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"adr\": \"y6vKPa1YGZGqG\", " + 
                    " \"city\": \"huUNUIZw_ow\", " + 
                    " \"postalCode\": \"D6\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/locations")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("could not execute statement; SQL [n/a]; constraint [\"PRIMARY KEY ON PUBLIC.LOCATIONS(LOCATION_ID) [2, 'RUE DE BLA BLA', '2016', 'CHARGUIA']\"; SQL statement:\n/* insert com.pfa.app.model.entity.Location */ insert into locations (location_id, adr, city, postal_code) values (null, ?, ?, ?) [23505-200]]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/projects
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_107_postOnProjectsReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"projectId\": 611, " + 
                    " \"startDate\": \"\", " + 
                    " \"status\": \"KeF\", " + 
                    " \"title\": \"YNzjBMl0\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/projects?" + 
                    "password=g8bZs9UPrnshbk3&" + 
                    "username=zRx7X")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("could not execute statement; SQL [n/a]; constraint [\"PRIMARY KEY ON PUBLIC.PROJECTS(PROJECT_ID) [2, 'SYNCH_BSCS_IMX', DATE '2020-11-26', DATE '2021-03-25', 'IN_PROGRESS']\"; SQL statement:\n/* insert com.pfa.app.model.entity.Project */ insert into projects (project_id, end_date, start_date, status, title) values (null, ?, ?, ?, ?) [23505-200]]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/projects
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_108_postOnProjectsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"projectId\": 961, " + 
                    " \"status\": \"gEI6tjNnejb\", " + 
                    " \"title\": \"MyOoredoo\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/projects")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("could not execute statement; SQL [n/a]; constraint [\"PRIMARY KEY ON PUBLIC.PROJECTS(PROJECT_ID) [1, 'TRANSBSCS', DATE '2020-09-28', DATE '2020-11-04', 'COMPLETED']\"; SQL statement:\n/* insert com.pfa.app.model.entity.Project */ insert into projects (project_id, end_date, start_date, status, title) values (null, ?, ?, ?, ?) [23505-200]]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/assignments
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   dd-MM-yyyyHH:mm:ss
    */
    @Test @Timeout(60)
    public void test_109_postOnApiAssignmentsWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"commitDate\": \"dd-MM-yyyyHH:mm:ss\", " + 
                    " \"commitEmpDesc\": \"_EM_1021_XYZ_\", " + 
                    " \"commitMgrDesc\": \"_EM_1022_XYZ_\", " + 
                    " \"employee\": { " + 
                    " \"credential\": { " + 
                    " \"credentialId\": 650, " + 
                    " \"password\": \"5lsc6ZGMR_ZbPt6_\", " + 
                    " \"role\": \"gooaInO421OF\", " + 
                    " \"username\": \"_EM_1023_XYZ_\" " + 
                    " }, " + 
                    " \"lastName\": \"_EM_1026_XYZ_\" " + 
                    " }, " + 
                    " \"employeeId\": 333, " + 
                    " \"projectId\": 915 " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/assignments?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDateTime` from String \"dd-MM-yyyyHH:mm:ss\": Failed to deserialize java.time.LocalDateTime: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyyHH:mm:ss' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDateTime` from String \"dd-MM-yyyyHH:mm:ss\": Failed to deserialize java.time.LocalDateTime: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyyHH:mm:ss' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 15] (through reference chain: com.pfa.app.model.entity.Assignment[\"commitDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/authenticate/
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_110_postOnAuthenticateAuthenticateReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/authenticate/'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"password\": \"6fVai7A\", " + 
                    " \"username\": \"JoF_Zr\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/authenticate/")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Bad credentials"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/projects
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_111_postOnApiProjectsWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"projectId\": 339 " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/projects?username=aX3OPbV")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Validation failed for classes [com.pfa.app.model.entity.Project] during persist time for groups [javax.validation.groups.Default, ]\nList of constraint violations:[\n\tConstraintViolationImpl{interpolatedMessage='Must not blank*', propertyPath=status, rootBeanClass=class com.pfa.app.model.entity.Project, messageTemplate='Must not blank*'}\n\tConstraintViolationImpl{interpolatedMessage='Must not blank*', propertyPath=title, rootBeanClass=class com.pfa.app.model.entity.Project, messageTemplate='Must not blank*'}\n]"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/projects
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   dd-MM-yyyy
    */
    @Test @Timeout(60)
    public void test_112_postOnProjectsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"projectId\": 999752493, " + 
                    " \"startDate\": \"dd-MM-yyyy\", " + 
                    " \"status\": \"NOT_STARTED\", " + 
                    " \"title\": \"_EM_1046_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/projects")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 37] (through reference chain: com.pfa.app.model.entity.Project[\"startDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/assignments
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   dd-MM-yyyyHH:mm:ss
    */
    @Test @Timeout(60)
    public void test_113_postOnApiAssignmentsWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"commitDate\": \"dd-MM-yyyyHH:mm:ss\", " + 
                    " \"employeeId\": 637, " + 
                    " \"projectId\": 507 " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/assignments?" + 
                    "password=wyUmUQouOCga&" + 
                    "username=oIaXP")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDateTime` from String \"dd-MM-yyyyHH:mm:ss\": Failed to deserialize java.time.LocalDateTime: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyyHH:mm:ss' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDateTime` from String \"dd-MM-yyyyHH:mm:ss\": Failed to deserialize java.time.LocalDateTime: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyyHH:mm:ss' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 15] (through reference chain: com.pfa.app.model.entity.Assignment[\"commitDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/assignments
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   dd-MM-yyyy
    */
    @Test @Timeout(60)
    public void test_114_postOnAssignmentsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"commitMgrDesc\": \"acn9lb\", " + 
                    " \"employeeId\": 638, " + 
                    " \"project\": { " + 
                    " \"projectId\": 417, " + 
                    " \"startDate\": \"dd-MM-yyyy\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/assignments")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 86] (through reference chain: com.pfa.app.model.entity.Assignment[\"project\"]->com.pfa.app.model.entity.Project[\"startDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/employees
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_115_postOnApiEmployeesReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"credential\": {}, " + 
                    " \"employeeId\": 763, " + 
                    " \"lastName\": \"_EM_621_XYZ_\", " + 
                    " \"phone\": \"\", " + 
                    " \"salary\": 0.8218160599550508 " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/employees")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", nullValue())
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/employees
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   dd-MM-yyyy
    */
    @Test @Timeout(60)
    public void test_116_postOnEmployeesReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("DEPARTMENTS", 432L)
                .d("DEPARTMENT_NAME", "\"_EM_2926_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 429L)
                .d("DEPARTMENT_NAME", "\"oLX\"")
            .and().insertInto("LOCATIONS", 427L)
                .d("ADR", "\"MXjZ6K1oEp\"")
                .d("POSTAL_CODE", "\"6\"")
                .d("CITY", "\"_EM_2907_XYZ_T\"")
            .and().insertInto("DEPARTMENTS", 426L)
                .d("DEPARTMENT_NAME", "\"42\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"credential\": { " + 
                    " \"enabled\": true, " + 
                    " \"role\": \"BICd\", " + 
                    " \"username\": \"Hja6XQyLn\" " + 
                    " }, " + 
                    " \"department\": { " + 
                    " \"departmentName\": \"s16ki7ntc\", " + 
                    " \"location\": { " + 
                    " \"postalCode\": \"nCDOpsNzcA60406s\" " + 
                    " } " + 
                    " }, " + 
                    " \"email\": \"2HaDvExR3\", " + 
                    " \"employeeId\": 525151, " + 
                    " \"hiredate\": \"dd-MM-yyyy\", " + 
                    " \"job\": \"_EM_2924_XYZ_\", " + 
                    " \"lastName\": \"pF\", " + 
                    " \"phone\": \"zlPGdCT1BTm887\", " + 
                    " \"salary\": 302.8006886359459 " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/employees")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 216] (through reference chain: com.pfa.app.model.entity.Employee[\"hiredate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/assignments
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   dd-MM-yyyy
    */
    @Test @Timeout(60)
    public void test_117_postOnAssignmentsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"commitMgrDesc\": \"_EM_674_XYZ_\", " + 
                    " \"employee\": { " + 
                    " \"credential\": { " + 
                    " \"credentialId\": 4, " + 
                    " \"enabled\": true, " + 
                    " \"role\": \"_EM_675_XYZ_\", " + 
                    " \"username\": \"\" " + 
                    " }, " + 
                    " \"job\": \"S7Ptw0Hz9\" " + 
                    " }, " + 
                    " \"project\": { " + 
                    " \"endDate\": \"dd-MM-yyyy\", " + 
                    " \"title\": \"Kwr\" " + 
                    " }, " + 
                    " \"projectId\": 270 " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/assignments")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 174] (through reference chain: com.pfa.app.model.entity.Assignment[\"project\"]->com.pfa.app.model.entity.Project[\"endDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/assignments
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   dd-MM-yyyy
    */
    @Test @Timeout(60)
    public void test_118_postOnAssignmentsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"commitMgrDesc\": \"iRTeZu\", " + 
                    " \"employee\": { " + 
                    " \"credential\": { " + 
                    " \"enabled\": true, " + 
                    " \"role\": \"1hMEHIilFv\" " + 
                    " }, " + 
                    " \"employeeId\": 397, " + 
                    " \"hiredate\": \"dd-MM-yyyy\", " + 
                    " \"lastName\": \"_EM_1738_XYZ_\", " + 
                    " \"phone\": \"HE6xdGXizGjEPtCv\" " + 
                    " }, " + 
                    " \"employeeId\": 837, " + 
                    " \"project\": { " + 
                    " \"projectId\": 7, " + 
                    " \"startDate\": \"q\", " + 
                    " \"status\": \"_EM_1739_XYZ_\" " + 
                    " }, " + 
                    " \"projectId\": 237 " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/assignments")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 121] (through reference chain: com.pfa.app.model.entity.Assignment[\"employee\"]->com.pfa.app.model.entity.Employee[\"hiredate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/projects
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   dd-MM-yyyy
    */
    @Test @Timeout(60)
    public void test_119_postOnProjectsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1474_XYZ_")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"endDate\": \"dd-MM-yyyy\", " + 
                    " \"projectId\": 7, " + 
                    " \"startDate\": \"_UzJyylJmlmd\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/projects")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 12] (through reference chain: com.pfa.app.model.entity.Project[\"endDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * 1 - (400) DELETE:/app/api/employees/{id}
    * 2 - (400) PUT:/app/api/departments/update
    * 3 - (400) DELETE:/app/api/projects/delete/{id}
    * 4 - (400) DELETE:/app/api/projects/{id}
    * 5 - (400) POST:/app/api/authenticate
    * 6 - (400) DELETE:/app/api/locations/delete/{id}
    * 7 - (400) DELETE:/app/api/credentials/delete/{id}
    * 8 - (400) POST:/app/api/employees
    * Found 8 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_120_postOnEmployeesReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 2987L)
            .and().insertInto("DEPARTMENTS", 2986L)
            .and().insertInto("EMPLOYEES", 2985L)
                .d("EMAIL", "\"r25\"")
                .d("PHONE", "\"4TDsr02AlZH2\"")
            .and().insertInto("EMPLOYEES", 2982L)
                .d("EMAIL", "\"42\"")
                .d("PHONE", "\"[7i\"")
            .and().insertInto("USER_CREDENTIALS", 2978L)
                .d("USERNAME", "\"lEti\"")
                .d("PASSWORD", "\"_EM_7787_XYZ_\"")
                .d("ENABLED", "true")
                .d("ROLE", "\"MUDcCy\"")
                .d("EMPLOYEE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .delete(baseUrlOfSut + "/app/api/employees/ARmc%5C5S7=0?" + 
                    "password=4FS0FQYZ&" + 
                    "username=_EM_7783_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/departments/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"departmentId\": 736, " + 
                    " \"location\": { " + 
                    " \"locationId\": 240, " + 
                    " \"postalCode\": \"_EM_4402_XYZ_\" " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/departments/update?" + 
                    "password=7&" + 
                    "username=7_86s0DFY")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Unable to find com.pfa.app.model.entity.Location with id 240; nested exception is javax.persistence.EntityNotFoundException: Unable to find com.pfa.app.model.entity.Location with id 240"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/delete/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .delete(baseUrlOfSut + "/app/api/projects/delete/871?password=_EM_7463_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Project object FOUND! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/app/api/projects/251?" + 
                    "password=_EM_8757_XYZ_&" + 
                    "username=_EM_7785_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Project object FOUND! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/authenticate'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"password\": \"_EM_1238_XYZ_\", " + 
                    " \"username\": \"MmWDu\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/authenticate?" + 
                    "password=650LTVr5h4a1WpOg&" + 
                    "username=_EM_7467_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Bad credentials"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/locations/delete/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .delete(baseUrlOfSut + "/app/api/locations/delete/RcurPH0G3us1?password=_EM_8758_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"RcurPH0G3us1\""))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/credentials/delete/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/app/api/credentials/delete/951?" + 
                    "password=DXW4_QyEuZfhxDKp&" + 
                    "username=PyRlssvzHgPbLzu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Credential object FOUND! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"department\": { " + 
                    " \"departmentName\": \"qd_d\" " + 
                    " }, " + 
                    " \"email\": \"Tj@t.NcsO\", " + 
                    " \"lastName\": \"rteQoU8ErWijME\", " + 
                    " \"phone\": \"HKLitz\", " + 
                    " \"salary\": 0.6445297104829252 " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/employees")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", nullValue())
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/assignments
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_121_putOnApiAssignmentsWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"commitDate\": \"19-12-202011:37:11\", " + 
                    " \"commitMgrDesc\": \"VbkS5CH3ElQr\", " + 
                    " \"employee\": { " + 
                    " \"credential\": { " + 
                    " \"credentialId\": 70, " + 
                    " \"enabled\": true, " + 
                    " \"username\": \"WCN_4a9Xl\" " + 
                    " }, " + 
                    " \"department\": {}, " + 
                    " \"email\": \"GjP@PrS.KO\", " + 
                    " \"firstName\": \"_xjIKQZeF\", " + 
                    " \"job\": \"_EM_5170_XYZ_\" " + 
                    " }, " + 
                    " \"projectId\": 8 " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/assignments?" + 
                    "password=rlqoi0NiiqmZ&" + 
                    "username=_EM_5173_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("org.hibernate.TransientPropertyValueException: Not-null property references a transient value - transient instance must be saved before current operation : com.pfa.app.model.entity.Assignment.employee -> com.pfa.app.model.entity.Employee; nested exception is java.lang.IllegalStateException: org.hibernate.TransientPropertyValueException: Not-null property references a transient value - transient instance must be saved before current operation : com.pfa.app.model.entity.Assignment.employee -> com.pfa.app.model.entity.Employee"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/locations
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_122_putOnLocationsReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/locations'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"adr\": \"m10AXO7PRtYRWJ\", " + 
                    " \"city\": \"_EM_7639_XYZ_\", " + 
                    " \"locationId\": 573, " + 
                    " \"postalCode\": \"_EM_7640_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/locations")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("could not execute statement; SQL [n/a]; constraint [\"PRIMARY KEY ON PUBLIC.LOCATIONS(LOCATION_ID) [2, 'RUE DE BLA BLA', '2016', 'CHARGUIA']\"; SQL statement:\n/* insert com.pfa.app.model.entity.Location */ insert into locations (location_id, adr, city, postal_code) values (null, ?, ?, ?) [23505-200]]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/locations
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_123_putOnLocationsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/locations'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"adr\": \"4osp\", " + 
                    " \"postalCode\": \"_EM_479_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/locations")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Validation failed for classes [com.pfa.app.model.entity.Location] during persist time for groups [javax.validation.groups.Default, ]\nList of constraint violations:[\n\tConstraintViolationImpl{interpolatedMessage='*Must Not blank**', propertyPath=city, rootBeanClass=class com.pfa.app.model.entity.Location, messageTemplate='*Must Not blank**'}\n]"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/employees
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_124_putOnEmployeesReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1365L)
                .d("ADR", "\"G\"")
                .d("POSTAL_CODE", "\"_EM_4912_XYZ_\"")
                .d("CITY", "\"_EM_4913_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 1364L)
                .d("DEPARTMENT_NAME", "\"rhPQJ\"")
            .and().insertInto("EMPLOYEES", 1363L)
                .d("FIRST_NAME", "\"AWLcbN8a93a\"")
                .d("LAST_NAME", "\"Fv0HY6\"")
                .d("EMAIL", "\"We@CNj.EdtL\"")
                .d("PHONE", "\"_EM_4903_XYZ_A\"")
                .d("JOB", "\"4vmuQIXfT\"")
                .d("SALARY", "3.1408761041252378")
            .and().insertInto("EMPLOYEES", 1360L)
                .d("FIRST_NAME", "\"0uD4GBNbW1L\"")
                .d("LAST_NAME", "\"CXgBl2W83Jt~wpq\"")
                .d("EMAIL", "\"bo@V.EzBv\"")
                .d("PHONE", "\"DkMaU3UUKj9U\"")
                .d("JOB", "\"7IgAuNKu\"")
                .d("SALARY", "1.502423678474481")
            .and().insertInto("USER_CREDENTIALS", 1356L)
                .d("USERNAME", "\"az7hlbDAk\"")
                .d("PASSWORD", "\"cEvXEpfosjOA2mn2\"")
                .d("ENABLED", "false")
                .d("ROLE", "\"d\"")
                .r("EMPLOYEE_ID", 1363L)
            .and().insertInto("PROJECTS", 1376L)
            .and().insertInto("LOCATIONS", 1375L)
            .and().insertInto("DEPARTMENTS", 1374L)
            .and().insertInto("EMPLOYEES", 1373L)
                .d("EMAIL", "\"yPQIdjFGG8XT8\"")
                .d("PHONE", "\"72q4P0qRAL6S_\"")
            .and().insertInto("LOCATIONS", 1372L)
            .and().insertInto("DEPARTMENTS", 1371L)
            .and().insertInto("EMPLOYEES", 1370L)
                .d("EMAIL", "\"TweURZ4jzC\"")
                .d("PHONE", "\"_EM_8467_XYZ_\"")
            .and().insertInto("LOCATIONS", 1369L)
            .and().insertInto("DEPARTMENTS", 1368L)
            .and().insertInto("EMPLOYEES", 1367L)
                .d("EMAIL", "\"92NlJZQnbiH\"")
                .d("PHONE", "\"itPugrjnUUZPDrtO1\"")
            .and().insertInto("ASSIGNMENTS", 1366L)
                .d("EMPLOYEE_ID", "8")
                .d("PROJECT_ID", "9")
                .d("COMMIT_DATE", "\"1941-12-27 05:15:46\"")
                .d("COMMIT_EMP_DESC", "\"DDwNHXhsUpb\"")
                .d("COMMIT_MGR_DESC", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"credential\": { " + 
                    " \"credentialId\": 18, " + 
                    " \"password\": \"diF\", " + 
                    " \"role\": \"of\", " + 
                    " \"username\": \"Pjipypn\" " + 
                    " }, " + 
                    " \"employeeId\": 588, " + 
                    " \"job\": \"2tO\", " + 
                    " \"salary\": 0.2523191466263136 " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/employees?" + 
                    "password=7c5CdIs&" + 
                    "username=AZz")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", nullValue())
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/projects
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   dd-MM-yyyy
    */
    @Test @Timeout(60)
    public void test_125_putOnProjectsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"endDate\": \"02-03-2021\", " + 
                    " \"projectId\": 632, " + 
                    " \"startDate\": \"dd-MM-yyyy\", " + 
                    " \"status\": \"Ho\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/projects?EMextraParam123=_EM_1120_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 55] (through reference chain: com.pfa.app.model.entity.Project[\"startDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/projects
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_126_putOnApiProjectsWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" {} ")
                .put(baseUrlOfSut + "/app/api/projects?" + 
                    "password=RVEJdC&" + 
                    "username=maryemtlemseni")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Validation failed for classes [com.pfa.app.model.entity.Project] during persist time for groups [javax.validation.groups.Default, ]\nList of constraint violations:[\n\tConstraintViolationImpl{interpolatedMessage='Must not blank*', propertyPath=status, rootBeanClass=class com.pfa.app.model.entity.Project, messageTemplate='Must not blank*'}\n\tConstraintViolationImpl{interpolatedMessage='Must not blank*', propertyPath=title, rootBeanClass=class com.pfa.app.model.entity.Project, messageTemplate='Must not blank*'}\n]"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/assignments
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_127_putOnAssignmentsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"commitMgrDesc\": \"SH8KycGfVeottX\", " + 
                    " \"employeeId\": 865, " + 
                    " \"projectId\": 938 " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/assignments")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("could not execute statement; SQL [n/a]; constraint [FK1_ASSIGN]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/credentials
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_128_putOnCredentialsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/credentials'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 224, " + 
                    " \"password\": \"_EM_1058_XYZ_\", " + 
                    " \"role\": \"Qpv\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/credentials")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/departments
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_129_putOnApiDepartmentsWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/departments'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"departmentId\": 939, " + 
                    " \"departmentName\": \"xqCMm\", " + 
                    " \"location\": { " + 
                    " \"adr\": \"g6_AfnyKgiNiV\", " + 
                    " \"city\": \"_EM_2348_XYZ_\", " + 
                    " \"locationId\": 426, " + 
                    " \"postalCode\": \"iSkDEqiOVMU\" " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/departments?" + 
                    "password=ulhd&" + 
                    "username=_EM_2349_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Unable to find com.pfa.app.model.entity.Location with id 426; nested exception is javax.persistence.EntityNotFoundException: Unable to find com.pfa.app.model.entity.Location with id 426"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/assignments
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   dd-MM-yyyy
    */
    @Test @Timeout(60)
    public void test_130_putOnAssignmentsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"commitDate\": \"TRH6lilgKkQ\", " + 
                    " \"commitMgrDesc\": \"0IvsO6KC5mo3bu\", " + 
                    " \"employee\": { " + 
                    " \"firstName\": \"_EM_3747_XYZ_\", " + 
                    " \"hiredate\": \"dd-MM-yyyy\", " + 
                    " \"job\": \"knb51_v7kb\", " + 
                    " \"phone\": \"_EM_3749_XYZ_\" " + 
                    " }, " + 
                    " \"project\": { " + 
                    " \"endDate\": \"dd-MM-yyyy\" " + 
                    " }, " + 
                    " \"projectId\": 679 " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/assignments")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDateTime` from String \"TRH6lilgKkQ\": Failed to deserialize java.time.LocalDateTime: (java.time.format.DateTimeParseException) Text 'TRH6lilgKkQ' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDateTime` from String \"TRH6lilgKkQ\": Failed to deserialize java.time.LocalDateTime: (java.time.format.DateTimeParseException) Text 'TRH6lilgKkQ' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 15] (through reference chain: com.pfa.app.model.entity.Assignment[\"commitDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/departments
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_131_putOnDepartmentsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/departments'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1525_XYZ_")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"departmentName\": \"r44N_lFXO0RL\", " + 
                    " \"location\": { " + 
                    " \"locationId\": 940, " + 
                    " \"postalCode\": \"ZhYSv9Ho_0kKtJ\" " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/departments?EMextraParam123=_EM_1524_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("could not execute statement; SQL [n/a]; constraint [FK1_DEPT]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/departments
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_132_putOnDepartmentsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/departments'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"departmentName\": \"TXskQzPq9WMhj\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/departments?username=Hd")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Validation failed for classes [com.pfa.app.model.entity.Department] during persist time for groups [javax.validation.groups.Default, ]\nList of constraint violations:[\n\tConstraintViolationImpl{interpolatedMessage='*Must not NULL**', propertyPath=location, rootBeanClass=class com.pfa.app.model.entity.Department, messageTemplate='*Must not NULL**'}\n]"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/employees
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_133_putOnApiEmployeesWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"department\": { " + 
                    " \"departmentId\": 856, " + 
                    " \"location\": { " + 
                    " \"city\": \"ED7\" " + 
                    " } " + 
                    " }, " + 
                    " \"employeeId\": 682, " + 
                    " \"firstName\": \"Khdija\", " + 
                    " \"hiredate\": \"lQyQ1n3ZZ4b\", " + 
                    " \"job\": \"_EM_2454_XYZ_\", " + 
                    " \"lastName\": \"g\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/employees?username=_EM_2456_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"lQyQ1n3ZZ4b\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'lQyQ1n3ZZ4b' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"lQyQ1n3ZZ4b\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'lQyQ1n3ZZ4b' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 115] (through reference chain: com.pfa.app.model.entity.Employee[\"hiredate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/employees
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   dd-MM-yyyy
    */
    @Test @Timeout(60)
    public void test_134_putOnApiEmployeesReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"firstName\": \"OikgdbL7LWnFx\", " + 
                    " \"hiredate\": \"dd-MM-yyyy\", " + 
                    " \"job\": \"\", " + 
                    " \"lastName\": \"_EM_1485_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/employees")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 42] (through reference chain: com.pfa.app.model.entity.Employee[\"hiredate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/assignments
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   dd-MM-yyyyHH:mm:ss
    */
    @Test @Timeout(60)
    public void test_135_putOnAssignmentsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"commitDate\": \"dd-MM-yyyyHH:mm:ss\", " + 
                    " \"commitEmpDesc\": \"0CGfgy6b0fvrpy\", " + 
                    " \"commitMgrDesc\": \"_EM_417_XYZ_\", " + 
                    " \"projectId\": 250 " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/assignments?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDateTime` from String \"dd-MM-yyyyHH:mm:ss\": Failed to deserialize java.time.LocalDateTime: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyyHH:mm:ss' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDateTime` from String \"dd-MM-yyyyHH:mm:ss\": Failed to deserialize java.time.LocalDateTime: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyyHH:mm:ss' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 15] (through reference chain: com.pfa.app.model.entity.Assignment[\"commitDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/projects
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   dd-MM-yyyy
    */
    @Test @Timeout(60)
    public void test_136_putOnProjectsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"endDate\": \"dd-MM-yyyy\", " + 
                    " \"startDate\": \"01-08-2018\", " + 
                    " \"title\": \"SYNCH_BSCS_IMX\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/projects?username=selimhorri")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 12] (through reference chain: com.pfa.app.model.entity.Project[\"endDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/assignments
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   dd-MM-yyyy
    */
    @Test @Timeout(60)
    public void test_137_putOnAssignmentsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"project\": { " + 
                    " \"endDate\": \"Qk0bi2RDyX\", " + 
                    " \"startDate\": \"dd-MM-yyyy\", " + 
                    " \"status\": \"HnerdtvdgV3\" " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/assignments?EMextraParam123=_EM_504_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"Qk0bi2RDyX\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'Qk0bi2RDyX' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"Qk0bi2RDyX\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'Qk0bi2RDyX' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 23] (through reference chain: com.pfa.app.model.entity.Assignment[\"project\"]->com.pfa.app.model.entity.Project[\"endDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/credentials
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_138_putOnCredentialsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/credentials'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 566, " + 
                    " \"password\": \"Mk7aWMK3D\", " + 
                    " \"username\": \"vE32pXgPR\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/credentials?username=A19mEByk")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/locations
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_139_putOnApiLocationsWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/locations'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"adr\": \"0CE9WCCaE\", " + 
                    " \"city\": \"NN3oxZFHZcJq\", " + 
                    " \"locationId\": -934755803, " + 
                    " \"postalCode\": \"jUWriBQol9oLG0\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/locations?" + 
                    "password=kCfxY4PEEolcNm4L&" + 
                    "username=_EM_7276_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("could not execute statement; SQL [n/a]; constraint [\"PRIMARY KEY ON PUBLIC.LOCATIONS(LOCATION_ID) [2, 'RUE DE BLA BLA', '2016', 'CHARGUIA']\"; SQL statement:\n/* insert com.pfa.app.model.entity.Location */ insert into locations (location_id, adr, city, postal_code) values (null, ?, ?, ?) [23505-200]]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/credentials
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_140_putOnCredentialsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/credentials'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 19, " + 
                    " \"password\": \"_EM_2662_XYZ_\", " + 
                    " \"username\": \"SnDyqcHFiC1VPHf\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/credentials?password=_EM_2664_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * 1 - (400) DELETE:/app/api/employees/username/{username}
    * 2 - (400) PUT:/app/api/departments
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_141_putOnDepartmentsReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1386L)
                .d("ADR", "\"0XSKo28\"")
                .d("POSTAL_CODE", "\"jQaTLs\"")
                .d("CITY", "\"VDL2CHcl4Kg\"")
            .and().insertInto("DEPARTMENTS", 1385L)
                .d("DEPARTMENT_NAME", "\"Wp6\"")
            .and().insertInto("EMPLOYEES", 1384L)
                .d("FIRST_NAME", "\"_EM_4932_XYZ_\"")
                .d("LAST_NAME", "\"BrYJ3Y\"")
                .d("EMAIL", "\"oU@Zd.qd\"")
                .d("PHONE", "\"MLF\"")
                .d("JOB", "\"3lggOcmu\"")
                .d("SALARY", "0.9")
            .and().insertInto("EMPLOYEES", 1381L)
                .d("FIRST_NAME", "\"J28n\"")
                .d("LAST_NAME", "\"LzFF\"")
                .d("EMAIL", "\"kHb@PM.lx\"")
                .d("PHONE", "\"hdP\"")
                .d("JOB", "\"JwdrFw1\"")
                .d("SALARY", "0.2473508824159686")
            .and().insertInto("USER_CREDENTIALS", 1377L)
                .d("USERNAME", "\"aIjNprng9\"")
                .d("PASSWORD", "\"2mHStbk4LfTdTqko\"")
                .d("ENABLED", "true")
                .d("ROLE", "NULL")
                .d("EMPLOYEE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/username/{username}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .delete(baseUrlOfSut + "/app/api/employees/username/_EM_983_XYZ_?" + 
                    "password=XCJ1H&" + 
                    "username=UsgCAEvJx")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Credential object FOUND with username: _EM_983_XYZ_ ! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/departments'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_523_XYZ_")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" {} ")
                .put(baseUrlOfSut + "/app/api/departments?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Validation failed for classes [com.pfa.app.model.entity.Department] during persist time for groups [javax.validation.groups.Default, ]\nList of constraint violations:[\n\tConstraintViolationImpl{interpolatedMessage='*Must not blank**', propertyPath=departmentName, rootBeanClass=class com.pfa.app.model.entity.Department, messageTemplate='*Must not blank**'}\n\tConstraintViolationImpl{interpolatedMessage='*Must not NULL**', propertyPath=location, rootBeanClass=class com.pfa.app.model.entity.Department, messageTemplate='*Must not NULL**'}\n]"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * 1 - (400) POST:/app/api/authenticate
    * 2 - (400) PUT:/app/api/projects
    * 3 - (400) POST:/app/api/projects
    * 4 - (400) PUT:/app/api/employees
    * 5 - (400) GET:/app/api/employees
    * 6 - (400) GET:/app/api/assignments/{employeeId}/{projectId}
    * 7 - (400) PUT:/app/api/assignments
    * Found 7 potential faults of type-code 101
    * Using 1 example:
    *   dd-MM-yyyy
    */
    @Test @Timeout(60)
    public void test_142_putOnAssignmentsReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 3785L)
                .d("ADR", "\"Q6d\"")
                .d("POSTAL_CODE", "\"Vmqz_bQ3KI2X8da\"")
                .d("CITY", "\"IT\"")
            .and().insertInto("DEPARTMENTS", 3784L)
                .d("DEPARTMENT_NAME", "\"cIIf5\"")
            .and().insertInto("EMPLOYEES", 3783L)
                .d("FIRST_NAME", "\"Owrwg3Q4NIP\"")
                .d("LAST_NAME", "\"1kHscx2ZdyN4N2Qy\"")
                .d("EMAIL", "\"JTb@OgE.beA\"")
                .d("PHONE", "\"j9Tit_RMn6uJ\"")
                .d("JOB", "\"ofmcKH\"")
                .d("SALARY", "0.49519748586239365")
            .and().insertInto("LOCATIONS", 3782L)
                .d("ADR", "\"_pbfoL8YhGAmVbwm\"")
                .d("POSTAL_CODE", "\"j00qmlzUW1Noj\"")
                .d("CITY", "\"UE_\"")
            .and().insertInto("DEPARTMENTS", 3781L)
                .d("DEPARTMENT_NAME", "\"7eXs\"")
            .and().insertInto("EMPLOYEES", 3780L)
                .d("FIRST_NAME", "\"wnPy3\"")
                .d("LAST_NAME", "\"PLk6TRrOIsQVmt\"")
                .d("EMAIL", "\"rXT@Xt.VsHd\"")
                .d("PHONE", "\"HcSKVq8H\"")
                .d("JOB", "\"6\"")
                .d("SALARY", "1.0")
            .and().insertInto("LOCATIONS", 3779L)
                .d("ADR", "\"IILq7vq6\"")
                .d("POSTAL_CODE", "\"CGnoDjY3Hp5wS2\"")
                .d("CITY", "\"cV2UIe0oWhq\"")
            .and().insertInto("DEPARTMENTS", 3778L)
                .d("DEPARTMENT_NAME", "\"ELWlv8eK1ySti\"")
            .and().insertInto("EMPLOYEES", 3777L)
                .d("FIRST_NAME", "\"Koi1\"")
                .d("LAST_NAME", "\"dpVBbLAQngQT73\"")
                .d("EMAIL", "\"SnBY@gN.vn\"")
                .d("PHONE", "\"r6u50J\"")
                .d("JOB", "\"mWQ\"")
                .d("SALARY", "0.9433006213436259")
            .and().insertInto("USER_CREDENTIALS", 3776L)
                .d("USERNAME", "\"gZPYLepzx5l\"")
                .d("PASSWORD", "\"0Q\"")
                .d("ENABLED", "true")
                .d("ROLE", "\"OJcQ_0\"")
                .d("EMPLOYEE_ID", "13")
            .and().insertInto("PROJECTS", 3818L)
                .d("TITLE", "\"RnDm\"")
                .d("STATUS", "\"N\"")
            .and().insertInto("LOCATIONS", 3817L)
                .d("ADR", "\"ySdf4UtDlvZg622q\"")
                .d("POSTAL_CODE", "\"8\"")
                .d("CITY", "\"8sJON0cVS2Z\"")
            .and().insertInto("DEPARTMENTS", 3816L)
                .d("DEPARTMENT_NAME", "\"r5GjFVx0k\"")
            .and().insertInto("EMPLOYEES", 3815L)
                .d("FIRST_NAME", "\"sKOoqYJnT5T31G\"")
                .d("LAST_NAME", "\"WcqI\"")
                .d("EMAIL", "\"aLCD@jOi.ElYv\"")
                .d("PHONE", "\"tzTwLm6c\"")
                .d("JOB", "\"NL\"")
                .d("SALARY", "0.6135943404447206")
            .and().insertInto("LOCATIONS", 3814L)
                .d("ADR", "\"xF7Gx9ot4Fs_d\"")
                .d("POSTAL_CODE", "\"cUn1\"")
                .d("CITY", "\"_6Cyq3s6VSTt16a\"")
            .and().insertInto("DEPARTMENTS", 3813L)
                .d("DEPARTMENT_NAME", "\"5MlFYUR\"")
            .and().insertInto("EMPLOYEES", 3812L)
                .d("FIRST_NAME", "\"O9bfzhghL\"")
                .d("LAST_NAME", "\"l4o_V\"")
                .d("EMAIL", "\"dm@xL.mArA\"")
                .d("PHONE", "\"cgZA64yAtrMk\"")
                .d("JOB", "\"008AiSeZttgYKoQX\"")
                .d("SALARY", "0.13056614314995")
            .and().insertInto("LOCATIONS", 3811L)
                .d("ADR", "\"jeuyrkPECQpiS\"")
                .d("POSTAL_CODE", "\"L\"")
                .d("CITY", "\"b\"")
            .and().insertInto("DEPARTMENTS", 3810L)
                .d("DEPARTMENT_NAME", "\"bQUmhYX\"")
            .and().insertInto("EMPLOYEES", 3809L)
                .d("FIRST_NAME", "\"_EM_9284_XYZ_\"")
                .d("LAST_NAME", "\"YMYQzn_\"")
                .d("EMAIL", "\"nTb@B.OW\"")
                .d("PHONE", "\"1WG8iFpqAn4RR11\"")
                .d("JOB", "\"uPUAEPy\"")
                .d("SALARY", "0.25214385930519434")
            .and().insertInto("ASSIGNMENTS", 3808L)
                .d("EMPLOYEE_ID", "2")
                .d("PROJECT_ID", "8")
                .d("COMMIT_DATE", "\"2051-07-22 22:24:14\"")
                .d("COMMIT_EMP_DESC", "\"nYwlraiqbLi2\"")
                .d("COMMIT_MGR_DESC", "\"rGgz1m50C\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/authenticate'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"password\": \"DigbgYanG0\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/authenticate?" + 
                    "password=DigbgYanG0&" + 
                    "username=_EM_8132_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Bad credentials"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"endDate\": \"dd-MM-yyyy\", " + 
                    " \"status\": \"hEBC13b6dNno\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/projects")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 12] (through reference chain: com.pfa.app.model.entity.Project[\"endDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"endDate\": \"dd-MM-yyyy\", " + 
                    " \"projectId\": 549, " + 
                    " \"title\": \"6tKQARVGB90V0xz\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/projects?" + 
                    "password=Sp9l&" + 
                    "username=21KI")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 12] (through reference chain: com.pfa.app.model.entity.Project[\"endDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"credential\": { " + 
                    " \"role\": \"QXkO1\", " + 
                    " \"username\": \"rc1PD\" " + 
                    " }, " + 
                    " \"department\": { " + 
                    " \"departmentName\": \"hwJdp_oE77K8kL8\" " + 
                    " }, " + 
                    " \"firstName\": \"09zlQQ22\", " + 
                    " \"hiredate\": \"QgILB\", " + 
                    " \"job\": \"OUnAA_6ZpU\", " + 
                    " \"lastName\": \"\", " + 
                    " \"phone\": \"T3ha\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/employees")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"QgILB\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'QgILB' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"QgILB\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'QgILB' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 139] (through reference chain: com.pfa.app.model.entity.Employee[\"hiredate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/employees?" + 
                    "password=DLsTAP16ne6s&" + 
                    "username=Er3qb36HPGlF")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("More than one row with the given identifier was found: 13, for class: com.pfa.app.model.entity.Credential; nested exception is org.hibernate.HibernateException: More than one row with the given identifier was found: 13, for class: com.pfa.app.model.entity.Credential"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/{employeeId}/{projectId}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/assignments/p/gctK0lIVEB?" + 
                    "password=KR&" + 
                    "username=i0HLJ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("HttpStatus must not be null"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"commitMgrDesc\": \"T\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/assignments")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * 1 - (400) PUT:/app/api/employees/update
    * 2 - (400) PUT:/app/api/employees/update
    * 3 - (400) POST:/app/api/authenticate
    * 4 - (400) GET:/app/api/credentials/
    * 5 - (400) POST:/app/api/employees/save
    * 6 - (400) POST:/app/api/employees/save
    * 7 - (400) POST:/app/api/projects/save
    * 8 - (400) POST:/app/api/projects/save
    * 9 - (400) POST:/app/api/authenticate/
    * 10 - (400) PUT:/app/api/assignments
    * Found 10 potential faults of type-code 101
    * Using 1 example:
    *   dd-MM-yyyy
    */
    @Test @Timeout(60)
    public void test_143_putOnAssignmentsReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 6032L)
                .d("ADR", "\"_iIBe14\"")
                .d("POSTAL_CODE", "\"gD1g_H5GrjWK3Sqk\"")
                .d("CITY", "\"0lGZ\"")
            .and().insertInto("DEPARTMENTS", 6031L)
                .d("DEPARTMENT_NAME", "\"rrdMxT\"")
            .and().insertInto("EMPLOYEES", 6030L)
                .d("FIRST_NAME", "\"rW20ceRMqpjmxG9\"")
                .d("LAST_NAME", "\"Ir5dtw5M\"")
                .d("EMAIL", "\"jaI@xt.hbRY\"")
                .d("PHONE", "\"pVx7D\"")
                .d("JOB", "\"0amtTECKtdwrVo\"")
                .d("SALARY", "0.6562852262682769")
            .and().insertInto("EMPLOYEES", 6027L)
                .d("FIRST_NAME", "\"tiz5LBypG\"")
                .d("LAST_NAME", "\"Xa\"")
                .d("EMAIL", "\"ht@zy.PlpC\"")
                .d("PHONE", "\"\"")
                .d("JOB", "\"P19i8i\"")
                .d("SALARY", "0.5076913498638168")
            .and().insertInto("USER_CREDENTIALS", 6023L)
                .d("USERNAME", "\"kiXy\"")
                .d("PASSWORD", "\"CxCmGFdnUpUPucF\"")
                .d("ENABLED", "true")
                .d("ROLE", "NULL")
                .d("EMPLOYEE_ID", "6")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"firstName\": \"HqDjLcZxTfi5w\", " + 
                    " \"hiredate\": \"7D6c9\", " + 
                    " \"job\": \"S99tyM0HHdLSO\", " + 
                    " \"lastName\": \"wNoq\", " + 
                    " \"phone\": \"\", " + 
                    " \"salary\": 0.6295954051071319 " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/employees/update")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"7D6c9\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text '7D6c9' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"7D6c9\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text '7D6c9' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 42] (through reference chain: com.pfa.app.model.entity.Employee[\"hiredate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"credential\": { " + 
                    " \"credentialId\": 499, " + 
                    " \"password\": \"0vS\", " + 
                    " \"role\": \"F\", " + 
                    " \"username\": \"9L\" " + 
                    " }, " + 
                    " \"email\": \"lrM\", " + 
                    " \"employeeId\": 471, " + 
                    " \"firstName\": \"LCZ\", " + 
                    " \"hiredate\": \"kh\", " + 
                    " \"job\": \"OJ3L\", " + 
                    " \"lastName\": \"Pb\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/employees/update?" + 
                    "password=xceVlPPK0&" + 
                    "username=fI")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"kh\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'kh' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"kh\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'kh' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 147] (through reference chain: com.pfa.app.model.entity.Employee[\"hiredate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/authenticate'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/app/api/authenticate")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Bad credentials"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/credentials/'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/credentials/?" + 
                    "password=J&" + 
                    "username=mX0IPz")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("More than one row with the given identifier was found: 6, for class: com.pfa.app.model.entity.Credential; nested exception is org.hibernate.HibernateException: More than one row with the given identifier was found: 6, for class: com.pfa.app.model.entity.Credential"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/save'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"employeeId\": 799, " + 
                    " \"hiredate\": \"7D6c9\", " + 
                    " \"lastName\": \"HqDjLcZxTfi5w\", " + 
                    " \"phone\": \"\", " + 
                    " \"salary\": 0.6295954051071319 " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/employees/save")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"7D6c9\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text '7D6c9' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"7D6c9\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text '7D6c9' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 31] (through reference chain: com.pfa.app.model.entity.Employee[\"hiredate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/save'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"email\": \"Ui63iWS3cD16MT\", " + 
                    " \"employeeId\": 799, " + 
                    " \"lastName\": \"HqDjLcZxTfi5w\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/employees/save?" + 
                    "password=xceVlPPK0&" + 
                    "username=fI")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", nullValue())
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/save'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"startDate\": \"Y8rLx7yCFL9\", " + 
                    " \"title\": \"QCeL1KWkAH\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/projects/save")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"Y8rLx7yCFL9\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'Y8rLx7yCFL9' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"Y8rLx7yCFL9\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'Y8rLx7yCFL9' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 14] (through reference chain: com.pfa.app.model.entity.Project[\"startDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/save'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"startDate\": \"dd-MM-yyyy\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/projects/save?" + 
                    "password=xceVlPPK0&" + 
                    "username=fI")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 14] (through reference chain: com.pfa.app.model.entity.Project[\"startDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/authenticate/'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"password\": \"WeTzJx\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/authenticate/")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Bad credentials"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"commitDate\": \"5scq8\", " + 
                    " \"commitMgrDesc\": \"dxff8cQ\", " + 
                    " \"employee\": { " + 
                    " \"employeeId\": 946, " + 
                    " \"job\": \"TZ\", " + 
                    " \"lastName\": \"M0Jy1uc4\", " + 
                    " \"phone\": \"rlpwhKeamddTrOga\", " + 
                    " \"salary\": 0.3917851022028078 " + 
                    " }, " + 
                    " \"employeeId\": 528, " + 
                    " \"project\": { " + 
                    " \"projectId\": 702, " + 
                    " \"startDate\": \"44_2yxJStQFZ\", " + 
                    " \"status\": \"ZJJHV2aoTN8gmo\", " + 
                    " \"title\": \"FlhWvUlo\" " + 
                    " }, " + 
                    " \"projectId\": 592 " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/assignments")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDateTime` from String \"5scq8\": Failed to deserialize java.time.LocalDateTime: (java.time.format.DateTimeParseException) Text '5scq8' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDateTime` from String \"5scq8\": Failed to deserialize java.time.LocalDateTime: (java.time.format.DateTimeParseException) Text '5scq8' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 15] (through reference chain: com.pfa.app.model.entity.Assignment[\"commitDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/app/api/departments/{id}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_144_getOnDepartShowsFaults_100_101() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault100. HTTP Status 500. com/pfa/app/security/UserDetailsImpl_29_getUsername.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/departments/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/departments/_UU_4;59UXQZ_?password=rx")
                .then()
                .statusCode(500)// com/pfa/app/security/UserDetailsImpl_29_getUsername
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/departments/{id}
    */
    @Test @Timeout(60)
    public void test_145_getOnApiDepartReturnsObjectUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/departments/5")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'departmentId'", numberMatches(5.0))
                .body("'departmentName'", containsString("Digital"))
                .body("'location'.'locationId'", numberMatches(1.0))
                .body("'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'location'.'postalCode'", containsString("2016"))
                .body("'location'.'city'", containsString("LAC2"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/app/api/credentials
    * 2 - (200) GET:/app/api/credentials/{id}
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_146_getOnCredentiReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/role'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"enabled\": true, " + 
                    " \"password\": \"bJQ\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/credentials")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(15.0))
                .body("'username'", nullValue())
                .body("'password'", containsString("bJQ"))
                .body("'enabled'", equalTo(true))
                .body("'role'", nullValue());
        String 
        location_credentials__2 = "/app/api/credentials" + "/" + res_0.extract().body().path("credentialId").toString();
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/role'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(resolveLocation(location_credentials__2, baseUrlOfSut + "/app/api/credentials/_EM_332_XYZ_"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(15.0))
                .body("'username'", nullValue())
                .body("'password'", containsString("bJQ"))
                .body("'enabled'", equalTo(true))
                .body("'role'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/credentials/{id}
    */
    @Test @Timeout(60)
    public void test_147_getOnApiCredentiWithQueryParamReturnsObjectUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/credentials/1?username=selimhorri")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(1.0))
                .body("'username'", containsString("imentouk"))
                .body("'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'enabled'", equalTo(true))
                .body("'role'", containsString("ROLE_EMP"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/credentials/{id}
    */
    @Test @Timeout(60)
    public void test_148_getOnApiCredentiWithQueryParamsReturnsObjectUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/credentials/3?" + 
                    "password=%242a%2410%246pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78%2FcvOprSR3lsZL2&" + 
                    "username=imentouk")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(3.0))
                .body("'username'", containsString("selimhorri"))
                .body("'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'enabled'", equalTo(true))
                .body("'role'", containsString("ROLE_EMP"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) PUT:/app/api/credentials
    * 2 - (405) DELETE:/app/api/credentials/delete/{id}
    * 3 - (200) POST:/app/api/credentials
    * 4 - (200) GET:/app/api/credentials/{id}
    * Found 3 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_149_getOnApiCredentiWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 466, " + 
                    " \"enabled\": false, " + 
                    " \"password\": \"mhEWLr17Df3T1\", " + 
                    " \"role\": \"Sx8Z9am\", " + 
                    " \"username\": \"azj8CV_4LRdcu\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/credentials")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(15.0))
                .body("'username'", containsString("azj8CV_4LRdcu"))
                .body("'password'", containsString("$2a$10$cQ/YxeluHEmaXU44kWCNHeB3mvIYfe4IsNXy0KoWuxeP9hxZNoR92"))
                .body("'enabled'", equalTo(false))
                .body("'role'", containsString("Sx8Z9am"));
        String 
        location_credentials__2 = "/app/api/credentials" + "/" + res_0.extract().body().path("credentialId").toString();
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 405 not defined for path '/api/credentials/delete/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .delete(resolveLocation(location_credentials__2, baseUrlOfSut + "/app/api/credentials/delete/SBZ14mjru?username=azj8CV_4LRdcu"))
                .then()
                .statusCode(405)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/password'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"enabled\": false, " + 
                    " \"role\": \"Sx8Z9am\", " + 
                    " \"username\": \"azj8CV_4LRdcu\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/credentials")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(16.0))
                .body("'username'", containsString("azj8CV_4LRdcu"))
                .body("'password'", nullValue())
                .body("'enabled'", equalTo(false))
                .body("'role'", containsString("Sx8Z9am"));
        String 
        location_credentials__44 = "/app/api/credentials" + "/" + res_2.extract().body().path("credentialId").toString();
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/password'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(resolveLocation(location_credentials__44, baseUrlOfSut + "/app/api/credentials/SBZ14mjru?password=mhEWLr17Df3T1&username=azj8CV_4LRdcu"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(16.0))
                .body("'username'", containsString("azj8CV_4LRdcu"))
                .body("'password'", nullValue())
                .body("'enabled'", equalTo(false))
                .body("'role'", containsString("Sx8Z9am"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/employees/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_150_getOnApiEmployeReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/manager/hiredate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/employees/6")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'employeeId'", numberMatches(6.0))
                .body("'firstName'", containsString("Khdija"))
                .body("'lastName'", containsString("Ben Ghachame"))
                .body("'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'phone'", containsString("22125144"))
                .body("'hiredate'", containsString("01-01-2559"))
                .body("'job'", containsString("Billing"))
                .body("'salary'", numberMatches(5000.5))
                .body("'manager'.'employeeId'", numberMatches(4.0))
                .body("'manager'.'firstName'", containsString("Soumaya"))
                .body("'manager'.'lastName'", containsString("Hajjem"))
                .body("'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'manager'.'phone'", containsString("22125144"))
                .body("'manager'.'hiredate'", nullValue())
                .body("'manager'.'job'", containsString("Chef service Billing"))
                .body("'manager'.'salary'", numberMatches(6000.0))
                .body("'manager'.'manager'", nullValue())
                .body("'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'manager'.'credential'.'enabled'", equalTo(true))
                .body("'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'department'.'departmentId'", numberMatches(6.0))
                .body("'department'.'departmentName'", containsString("Billing"))
                .body("'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'department'.'location'.'postalCode'", containsString("2016"))
                .body("'department'.'location'.'city'", containsString("LAC2"))
                .body("'credential'.'credentialId'", numberMatches(8.0))
                .body("'credential'.'username'", containsString("kbenghachame"))
                .body("'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'credential'.'enabled'", equalTo(true))
                .body("'credential'.'role'", containsString("ROLE_EMP"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/locations/{id}
    */
    @Test @Timeout(60)
    public void test_151_getOnLocatReturnsObjectUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_528_XYZ_")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/locations/2")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'locationId'", numberMatches(2.0))
                .body("'adr'", containsString("RUE DE BLA BLA"))
                .body("'postalCode'", containsString("2016"))
                .body("'city'", containsString("CHARGUIA"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/projects/{id}
    */
    @Test @Timeout(60)
    public void test_152_getOnProjectReturnsObjectUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/projects/1")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'projectId'", numberMatches(1.0))
                .body("'title'", containsString("TRANSBSCS"))
                .body("'startDate'", containsString("28-09-2020"))
                .body("'endDate'", containsString("04-11-2020"))
                .body("'status'", containsString("COMPLETED"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/locations/{id}
    */
    @Test @Timeout(60)
    public void test_153_getOnLocatReturnsObjectUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/locations/2")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'locationId'", numberMatches(2.0))
                .body("'adr'", containsString("RUE DE BLA BLA"))
                .body("'postalCode'", containsString("2016"))
                .body("'city'", containsString("CHARGUIA"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/app/api/locations
    * 2 - (200) GET:/app/api/locations/{id}
    */
    @Test @Timeout(60)
    public void test_154_getOnLocatReturnsObjectUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 2825L)
                .d("ADR", "\"z\"")
                .d("POSTAL_CODE", "\"gJLxiDbXcI9\"")
                .d("CITY", "\"1OFn8yyfACx\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_528_XYZ_")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"adr\": \"y6vKPa1YGZGqG\", " + 
                    " \"city\": \"huUNUIZw_ow\", " + 
                    " \"postalCode\": \"D6\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/locations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'locationId'", numberMatches(4.0))
                .body("'adr'", containsString("y6vKPa1YGZGqG"))
                .body("'postalCode'", containsString("D6"))
                .body("'city'", containsString("huUNUIZw_ow"));
        String 
        location_locations__829 = "/app/api/locations" + "/" + res_0.extract().body().path("locationId").toString();
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(resolveLocation(location_locations__829, baseUrlOfSut + "/app/api/locations/ia_83gGHYFL_"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'locationId'", numberMatches(4.0))
                .body("'adr'", containsString("y6vKPa1YGZGqG"))
                .body("'postalCode'", containsString("D6"))
                .body("'city'", containsString("huUNUIZw_ow"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/app/api/credentials
    * 2 - (200) GET:/app/api/credentials/{id}
    */
    @Test @Timeout(60)
    public void test_155_getOnCredentiReturnsObject() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 755, " + 
                    " \"enabled\": true, " + 
                    " \"password\": \"_EM_1238_XYZ_\", " + 
                    " \"role\": \"_EM_1239_XYZ_\", " + 
                    " \"username\": \"admin\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/credentials")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(15.0))
                .body("'username'", containsString("admin"))
                .body("'password'", containsString("_EM_1238_XYZ_"))
                .body("'enabled'", equalTo(true))
                .body("'role'", containsString("_EM_1239_XYZ_"));
        String 
        location_credentials__2 = "/app/api/credentials" + "/" + res_0.extract().body().path("credentialId").toString();
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(resolveLocation(location_credentials__2, baseUrlOfSut + "/app/api/credentials/RUE%20DE%20BLA%20BLA"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(15.0))
                .body("'username'", containsString("admin"))
                .body("'password'", containsString("_EM_1238_XYZ_"))
                .body("'enabled'", equalTo(true))
                .body("'role'", containsString("_EM_1239_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/locations/{id}
    */
    @Test @Timeout(60)
    public void test_156_getOnApiLocatWithQueryParamsReturnsObjectUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/locations/2?" + 
                    "password=%242a%2410%246pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78%2FcvOprSR3lsZL2&" + 
                    "username=mayssahassine")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'locationId'", numberMatches(2.0))
                .body("'adr'", containsString("RUE DE BLA BLA"))
                .body("'postalCode'", containsString("2016"))
                .body("'city'", containsString("CHARGUIA"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/employees/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_157_getOnApiEmployeWithQueryParamReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/hiredate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/employees/4?username=soumayahajjem")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'employeeId'", numberMatches(4.0))
                .body("'firstName'", containsString("Soumaya"))
                .body("'lastName'", containsString("Hajjem"))
                .body("'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'phone'", containsString("22125144"))
                .body("'hiredate'", nullValue())
                .body("'job'", containsString("Chef service Billing"))
                .body("'salary'", numberMatches(6000.0))
                .body("'manager'", nullValue())
                .body("'department'.'departmentId'", numberMatches(6.0))
                .body("'department'.'departmentName'", containsString("Billing"))
                .body("'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'department'.'location'.'postalCode'", containsString("2016"))
                .body("'department'.'location'.'city'", containsString("LAC2"))
                .body("'credential'.'credentialId'", numberMatches(5.0))
                .body("'credential'.'username'", containsString("soumayahajjem"))
                .body("'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'credential'.'enabled'", equalTo(true))
                .body("'credential'.'role'", containsString("ROLE_MGR"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/employees/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_158_getOnApiEmployeWithQueryParamsReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/hiredate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/employees/4?" + 
                    "password=%242a%2410%246pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78%2FcvOprSR3lsZL2&" + 
                    "username=soumayahajjem")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'employeeId'", numberMatches(4.0))
                .body("'firstName'", containsString("Soumaya"))
                .body("'lastName'", containsString("Hajjem"))
                .body("'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'phone'", containsString("22125144"))
                .body("'hiredate'", nullValue())
                .body("'job'", containsString("Chef service Billing"))
                .body("'salary'", numberMatches(6000.0))
                .body("'manager'", nullValue())
                .body("'department'.'departmentId'", numberMatches(6.0))
                .body("'department'.'departmentName'", containsString("Billing"))
                .body("'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'department'.'location'.'postalCode'", containsString("2016"))
                .body("'department'.'location'.'city'", containsString("LAC2"))
                .body("'credential'.'credentialId'", numberMatches(5.0))
                .body("'credential'.'username'", containsString("soumayahajjem"))
                .body("'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'credential'.'enabled'", equalTo(true))
                .body("'credential'.'role'", containsString("ROLE_MGR"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/app/api/locations/save
    */
    @Test @Timeout(60)
    public void test_159_postOnSaveReturns200() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"adr\": \"_EM_2145_XYZ_\", " + 
                    " \"city\": \"3TBNYLyC\", " + 
                    " \"locationId\": 2, " + 
                    " \"postalCode\": \"78c3cKdarBnr\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/locations/save?username=_EM_3358_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'locationId'", numberMatches(2.0))
                .body("'adr'", containsString("_EM_2145_XYZ_"))
                .body("'postalCode'", containsString("78c3cKdarBnr"))
                .body("'city'", containsString("3TBNYLyC"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/app/api/projects/save
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_160_postOnProjectsSaveWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("PROJECTS", 4572L)
                .d("TITLE", "\"D7i6_\"")
                .d("STATUS", "\"6w0FNm3TaVw4v\"")
            .and().insertInto("DEPARTMENTS", 4570L)
                .d("DEPARTMENT_NAME", "\"L\"")
            .and().insertInto("DEPARTMENTS", 4567L)
                .d("DEPARTMENT_NAME", "\"o4iTevutRRl_\"")
            .and().insertInto("LOCATIONS", 4565L)
                .d("ADR", "\"LD1d9Itnb\"")
                .d("POSTAL_CODE", "\"GqYRD9yP\"")
                .d("CITY", "\"FWLk\"")
            .and().insertInto("DEPARTMENTS", 4564L)
                .d("DEPARTMENT_NAME", "\"5dJWUpkItEeAq0G\"")
            .and().insertInto("ASSIGNMENTS", 4562L)
                .d("EMPLOYEE_ID", "3")
                .d("PROJECT_ID", "6")
                .d("COMMIT_DATE", "\"2021-11-19 03:31:51\"")
                .d("COMMIT_EMP_DESC", "NULL")
                .d("COMMIT_MGR_DESC", "\"wxAxgRFqyw9\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/endDate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"projectId\": -16376, " + 
                    " \"status\": \"_EM_6109_XYZ_\", " + 
                    " \"title\": \"U4nTdYNda\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/projects/save?" + 
                    "password=sy583QAfKXPcKRu5&" + 
                    "username=_EM_9162_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'projectId'", numberMatches(11.0))
                .body("'title'", containsString("U4nTdYNda"))
                .body("'startDate'", nullValue())
                .body("'endDate'", nullValue())
                .body("'status'", containsString("_EM_6109_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/app/api/credentials/save
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_161_postOnSaveReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/role'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 13, " + 
                    " \"enabled\": false, " + 
                    " \"password\": \"l\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/credentials/save")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(13.0))
                .body("'username'", nullValue())
                .body("'password'", containsString("l"))
                .body("'enabled'", equalTo(false))
                .body("'role'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) POST:/app/api/credentials/save
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_162_postOnSaveReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/password'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"enabled\": true, " + 
                    " \"role\": \"_EM_72_XYZ_\", " + 
                    " \"username\": \"ltx8TeyRS1Y\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/credentials/save")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(15.0))
                .body("'username'", containsString("ltx8TeyRS1Y"))
                .body("'password'", nullValue())
                .body("'enabled'", equalTo(true))
                .body("'role'", containsString("_EM_72_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/app/api/departments/save
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_163_postOnDepartmentsSaveReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/location/city'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"departmentName\": \"Billing\", " + 
                    " \"location\": { " + 
                    " \"adr\": \"_EM_75_XYZ_\", " + 
                    " \"locationId\": 2, " + 
                    " \"postalCode\": \"\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/departments/save")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'departmentId'", numberMatches(1.0))
                .body("'departmentName'", containsString("Billing"))
                .body("'location'.'locationId'", numberMatches(2.0))
                .body("'location'.'adr'", containsString("_EM_75_XYZ_"))
                .body("'location'.'postalCode'", containsString(""))
                .body("'location'.'city'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) POST:/app/api/projects/save
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_164_postOnSaveReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/endDate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"status\": \"NOT_STARTED\", " + 
                    " \"title\": \"Ulf17nf5E72jq\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/projects/save?password=_EM_3353_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'projectId'", numberMatches(10.0))
                .body("'title'", containsString("Ulf17nf5E72jq"))
                .body("'startDate'", nullValue())
                .body("'endDate'", nullValue())
                .body("'status'", containsString("NOT_STARTED"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/app/api/locations/save
    */
    @Test @Timeout(60)
    public void test_165_postOnSaveReturns200() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"adr\": \"oBiApnuYcpGkWX\", " + 
                    " \"city\": \"_EM_842_XYZ_\", " + 
                    " \"locationId\": 4, " + 
                    " \"postalCode\": \"Cxpm_a5j\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/locations/save?password=ZOkWPtBbeq")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'locationId'", numberMatches(3.0))
                .body("'adr'", containsString("oBiApnuYcpGkWX"))
                .body("'postalCode'", containsString("Cxpm_a5j"))
                .body("'city'", containsString("_EM_842_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/app/api/credentials/save
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_166_postOnSaveReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/username'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 502, " + 
                    " \"enabled\": true, " + 
                    " \"password\": \"60818M\", " + 
                    " \"role\": \"6rQFa7ppyuENr\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/credentials/save")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(15.0))
                .body("'username'", nullValue())
                .body("'password'", containsString("60818M"))
                .body("'enabled'", equalTo(true))
                .body("'role'", containsString("6rQFa7ppyuENr"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/app/api/credentials/save
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_167_postOnSaveReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/password'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 13, " + 
                    " \"enabled\": false, " + 
                    " \"username\": \"_EM_3099_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/credentials/save")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(13.0))
                .body("'username'", containsString("_EM_3099_XYZ_"))
                .body("'password'", nullValue())
                .body("'enabled'", equalTo(false))
                .body("'role'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) POST:/app/api/credentials/save
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_168_postOnCredentialsSaveWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 3245L)
                .d("ADR", "\"lIy6ALLAwZTt\"")
                .d("POSTAL_CODE", "\"cX\"")
                .d("CITY", "\"z7bFAT7L400KqgY\"")
            .and().insertInto("DEPARTMENTS", 3244L)
                .d("DEPARTMENT_NAME", "\"makz5Ue264Jt\"")
            .and().insertInto("EMPLOYEES", 3243L)
                .d("FIRST_NAME", "\"yLM5XgyOl5J\"")
                .d("LAST_NAME", "\"Zf_rf0l01iluDbV\"")
                .d("EMAIL", "\"tCv@iH.Gp\"")
                .d("PHONE", "\"j2ePRwGG\"")
                .d("JOB", "\"Jt\"")
                .d("SALARY", "0.22761429867528749")
            .and().insertInto("LOCATIONS", 3242L)
                .d("ADR", "\"HyEnmDLR\"")
                .d("POSTAL_CODE", "\"1C1Hw6WD8GV\"")
                .d("CITY", "\"D9523Ph6GT\"")
            .and().insertInto("DEPARTMENTS", 3241L)
                .d("DEPARTMENT_NAME", "\"_EM_8030_XYZ_\"")
            .and().insertInto("EMPLOYEES", 3240L)
                .d("FIRST_NAME", "\"7l7UUxHZW5U5\"")
                .d("LAST_NAME", "\"BdqRIs\"")
                .d("EMAIL", "\"fz@SSH.dvqT\"")
                .d("PHONE", "\"5mcG_7\"")
                .d("JOB", "\"4J5URCjgVKp1Sxpq\"")
                .d("SALARY", "-0.25687301854491096")
            .and().insertInto("LOCATIONS", 3239L)
                .d("ADR", "\"m\"")
                .d("POSTAL_CODE", "\"_EM_8026_XYZ_\"")
                .d("CITY", "\"0eIrg0vwZ7n\"")
            .and().insertInto("DEPARTMENTS", 3238L)
                .d("DEPARTMENT_NAME", "\"DuGMj0nDGhr2JrK\"")
            .and().insertInto("EMPLOYEES", 3237L)
                .d("FIRST_NAME", "\"rqwR4Og\"")
                .d("LAST_NAME", "\"sthjTzujj\"")
                .d("EMAIL", "\"xcMW@N.On\"")
                .d("PHONE", "\"plNver7x4D5_\"")
                .d("JOB", "\"_EM_8027_XYZ_\"")
                .d("SALARY", "0.1150268215731094")
            .and().insertInto("USER_CREDENTIALS", 3236L)
                .d("USERNAME", "\"wD4VL\"")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "true")
                .d("ROLE", "\"3C0zGmG\"")
                .d("EMPLOYEE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/role'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"enabled\": true, " + 
                    " \"password\": \"H1rW5J\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/credentials/save?" + 
                    "password=_EM_8029_XYZ_&" + 
                    "username=_EM_8025_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(16.0))
                .body("'username'", nullValue())
                .body("'password'", containsString("H1rW5J"))
                .body("'enabled'", equalTo(true))
                .body("'role'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) PUT:/app/api/credentials/update
    */
    @Test @Timeout(60)
    public void test_169_putOnCredentialsUpdateWithQueryParamReturns200() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 530, " + 
                    " \"enabled\": false, " + 
                    " \"password\": \"650LTVr5h4a1WpOg\", " + 
                    " \"role\": \"\", " + 
                    " \"username\": \"sanasaanouni\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/credentials/update?password=hB0qMvhzBzrGq")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(15.0))
                .body("'username'", containsString("sanasaanouni"))
                .body("'password'", containsString("$2a$10$TNVQRH0yD3LYxGR8DN6l1O3psX99RRHkaLMK/1ilTLbVw7t3RMQhW"))
                .body("'enabled'", equalTo(false))
                .body("'role'", containsString(""));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/app/api/locations/update
    */
    @Test @Timeout(60)
    public void test_170_putOnLocationsUpdateWithQueryParamReturns200() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"adr\": \"NFwWQuQ8Wv\", " + 
                    " \"city\": \"9kY\", " + 
                    " \"locationId\": 671, " + 
                    " \"postalCode\": \"dmOMBSF6rKLj\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/locations/update?EMextraParam123=_EM_645_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'locationId'", numberMatches(3.0))
                .body("'adr'", containsString("NFwWQuQ8Wv"))
                .body("'postalCode'", containsString("dmOMBSF6rKLj"))
                .body("'city'", containsString("9kY"));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/app/api/credentials/update
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_171_putOnCredentialsUpdateWithQueryParamsEmptyUsernameUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("DEPARTMENTS", 853L)
                .d("DEPARTMENT_NAME", "\"2c6\"")
            .and().insertInto("DEPARTMENTS", 850L)
                .d("DEPARTMENT_NAME", "\"2IYfA\"")
            .and().insertInto("LOCATIONS", 848L)
                .d("ADR", "\"0cMhVAQV4cT\"")
                .d("POSTAL_CODE", "\"o\"")
                .d("CITY", "\"Sc\"")
            .and().insertInto("DEPARTMENTS", 847L)
                .d("DEPARTMENT_NAME", "\"1DXfeE\"")
            .and().insertInto("USER_CREDENTIALS", 845L)
                .d("USERNAME", "\"cuq_NwWKc9XcJx3\"")
                .d("PASSWORD", "\"x\"")
                .d("ENABLED", "true")
                .d("ROLE", "\"ryed\"")
                .d("EMPLOYEE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/username'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_635_XYZ_")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 74, " + 
                    " \"enabled\": false, " + 
                    " \"password\": \"VMJ3YvF7t\", " + 
                    " \"role\": \"7Durhl9o\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/credentials/update?" + 
                    "EMextraParam123=_EM_634_XYZ_&" + 
                    "username=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(16.0))
                .body("'username'", nullValue())
                .body("'password'", containsString("$2a$10$7Gca5BvEVpRSl9rav7aCGOJhKPMudxQV7/76DNbfuyyqsUoKJwPBS"))
                .body("'enabled'", equalTo(false))
                .body("'role'", containsString("7Durhl9o"));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/app/api/credentials/update
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_172_putOnCredentialsUpdateWithQueryParamsEmptyPassword() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/username'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"enabled\": true, " + 
                    " \"password\": \"_EM_5514_XYZ_\", " + 
                    " \"role\": \"ROLE_EMP\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/credentials/update?" + 
                    "password=&" + 
                    "username=MsmTfrcQL7ag0f7y")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(15.0))
                .body("'username'", nullValue())
                .body("'password'", containsString("$2a$10$cd2k20jxyu52Klk8.LiR/eGBW9Qh7oHli/z.bQHXQ/ubUsc/iYaHG"))
                .body("'enabled'", equalTo(true))
                .body("'role'", containsString("ROLE_EMP"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/app/api/credentials
    * 2 - (200) DELETE:/app/api/credentials/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_173_deleteOnApiCredentiWithQueryParamsEmptyPassword() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/role'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 111, " + 
                    " \"enabled\": false, " + 
                    " \"password\": \"\", " + 
                    " \"username\": \"2tNJ\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/credentials")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(15.0))
                .body("'username'", containsString("2tNJ"))
                .body("'password'", containsString(""))
                .body("'enabled'", equalTo(false))
                .body("'role'", nullValue());
        String 
        location_credentials__2 = "/app/api/credentials" + "/" + res_0.extract().body().path("credentialId").toString();
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .delete(resolveLocation(location_credentials__2, baseUrlOfSut + "/app/api/credentials/S4W8XK1?password=&username=2tNJ"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("true"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/app/api/credentials
    * 2 - (200) DELETE:/app/api/credentials/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_174_deleteOnApiCredentiWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/password'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 826, " + 
                    " \"enabled\": true " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/credentials")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(15.0))
                .body("'username'", nullValue())
                .body("'password'", nullValue())
                .body("'enabled'", equalTo(true))
                .body("'role'", nullValue());
        String 
        location_credentials__2 = "/app/api/credentials" + "/" + res_0.extract().body().path("credentialId").toString();
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(resolveLocation(location_credentials__2, baseUrlOfSut + "/app/api/credentials/kV6bTsx2PN3Su?EMextraParam123=42"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("true"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) PUT:/app/api/locations/update
    * 2 - (400) PUT:/app/api/locations/update
    * 3 - (400) DELETE:/app/api/employees/{id}
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_175_deleteOnEmployeReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1785L)
                .d("ADR", "\"QhZGe02FGeefG_q\"")
                .d("POSTAL_CODE", "\"B_qY\"")
                .d("CITY", "\"wXg}IKoHw6\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"adr\": \"_xGBzBE\", " + 
                    " \"city\": \"h9:\", " + 
                    " \"locationId\": 959, " + 
                    " \"postalCode\": \"E9In\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/locations/update?" + 
                    "password=K3G6F&" + 
                    "username=omf4i")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'locationId'", numberMatches(4.0))
                .body("'adr'", containsString("_xGBzBE"))
                .body("'postalCode'", containsString("E9In"))
                .body("'city'", containsString("h9:"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/locations/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"city\": \"32xie\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/locations/update?username=DXLDGB")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Validation failed for classes [com.pfa.app.model.entity.Location] during persist time for groups [javax.validation.groups.Default, ]\nList of constraint violations:[\n\tConstraintViolationImpl{interpolatedMessage='*Must Not blank**', propertyPath=adr, rootBeanClass=class com.pfa.app.model.entity.Location, messageTemplate='*Must Not blank**'}\n\tConstraintViolationImpl{interpolatedMessage='*Must Not blank**', propertyPath=postalCode, rootBeanClass=class com.pfa.app.model.entity.Location, messageTemplate='*Must Not blank**'}\n]"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .delete(baseUrlOfSut + "/app/api/employees/irBi2:xfHyu2p?" + 
                    "password=t_wNfW9LraB&" + 
                    "username=DXLDGB")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"irBi2:xfHyu2p\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/departments/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_176_getOnApiDepartWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/departments/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/departments/_EM_980_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"_EM_980_XYZ_\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/credentials/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_177_getOnCredentiReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 806L)
                .d("ADR", "\"p8z388\"")
                .d("POSTAL_CODE", "\"ii_LHQKIkGOVU4c\"")
                .d("CITY", "\"_EM_3796_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 805L)
                .d("DEPARTMENT_NAME", "\"k\"")
            .and().insertInto("EMPLOYEES", 804L)
                .d("FIRST_NAME", "\"6/JOCayQE\"")
                .d("LAST_NAME", "\"89YKnpwtr\"")
                .d("EMAIL", "\"pMFf@Ny.SK\"")
                .d("PHONE", "\"_EM_3797_XYZ_\"")
                .d("JOB", "\"L9Srq9gdJ\"")
                .d("SALARY", "0.9771249276377271")
            .and().insertInto("LOCATIONS", 803L)
                .d("ADR", "\"^\"")
                .d("POSTAL_CODE", "\"_EM_3781_XYZ_\"")
                .d("CITY", "\"rFZIzyz9Ok\"")
            .and().insertInto("DEPARTMENTS", 802L)
                .d("DEPARTMENT_NAME", "\"7uJ2e7J\"")
            .and().insertInto("EMPLOYEES", 801L)
                .d("FIRST_NAME", "\"oIAFJXrqYo_YUGFM\"")
                .d("LAST_NAME", "\"_EM_3798_XYZ_\"")
                .d("EMAIL", "\"hpSH@y.haY\"")
                .d("PHONE", "\"vCIIA7uJ3TKTB^n\"")
                .d("JOB", "\"_EM_3774_XYZ_\"")
                .d("SALARY", "2.044997140349349")
            .and().insertInto("LOCATIONS", 800L)
                .d("ADR", "\"_EM_3799_XYZ_\"")
                .d("POSTAL_CODE", "\"hVYIA3FSG7PP4U1U\"")
                .d("CITY", "\"_EM_3800_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 799L)
                .d("DEPARTMENT_NAME", "\"_EM_3801_XYZ_\"")
            .and().insertInto("EMPLOYEES", 798L)
                .d("FIRST_NAME", "\"_EM_3783_XYZ_\"")
                .d("LAST_NAME", "\"Ilj5azGK4MV3\"")
                .d("EMAIL", "\"VcT@Iln.WjX\"")
                .d("PHONE", "\"_EM_3784_XYZ_\"")
                .d("JOB", "\"_EM_3775_XYZ_\"")
                .d("SALARY", "0.8342075618794473")
            .and().insertInto("USER_CREDENTIALS", 797L)
                .d("USERNAME", "\"2kciS8bnNdR5OSqB\"")
                .d("PASSWORD", "\"Ys6zzHczB\"")
                .d("ENABLED", "false")
                .d("ROLE", "\"NMW26E8mKVw0vO\"")
                .d("EMPLOYEE_ID", "3")
            .and().insertInto("PROJECTS", 807L)
                .d("TITLE", "\"kIfvBq8MJdG2VSSy\"")
                .d("START_DATE", "NULL")
                .d("END_DATE", "\"1953-01-31\"")
                .d("STATUS", "\"_EM_3802_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/credentials/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/credentials/srhQ?username=_EM_3780_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"srhQ\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/credentials/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_178_getOnCredentiReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/credentials/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/credentials/_EM_2515_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"_EM_2515_XYZ_\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/departments/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_179_getOnApiDepartWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/departments/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/departments/_?" + 
                    "password=jx&" + 
                    "username=4KXkh3")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"_\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/employees/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_180_getOnApiEmployeWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/employees/1KxgCJo6d?" + 
                    "password=W_Te7XtSj3avd_9&" + 
                    "username=IzrI")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"1KxgCJo6d\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/employees/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_181_getOnApiEmployeWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/app/api/employees/_EM_40_XYZ_?EMextraParam123=_EM_41_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"_EM_40_XYZ_\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/locations/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_182_getOnLocatReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 2825L)
                .d("ADR", "\"z\"")
                .d("POSTAL_CODE", "\"gJLxiDbXcI9\"")
                .d("CITY", "\"1OFn8yyfACx\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/locations/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/locations/ia_83gGHYFL_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"ia_83gGHYFL_\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/projects/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_183_getOnApiProjectReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/projects/_EM_991_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"_EM_991_XYZ_\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/projects/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_184_getOnProjectReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/projects/_EM_2137_XYZ_?username=_EM_2139_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"_EM_2137_XYZ_\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/projects/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_185_getOnProjectReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/projects/N5n?password=0lZj")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"N5n\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/locations/save
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_186_postOnLocationsSaveWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/locations/save'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"adr\": \"_EM_6015_XYZ_\", " + 
                    " \"city\": \"8s7wxHJXusoR27\", " + 
                    " \"locationId\": 5, " + 
                    " \"postalCode\": \"GUoWzRyf\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/locations/save?" + 
                    "password=_EM_6016_XYZ_&" + 
                    "username=0ZxjPZB_n4")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("could not execute statement; SQL [n/a]; constraint [\"PRIMARY KEY ON PUBLIC.LOCATIONS(LOCATION_ID) [1, 'RUE DE LA BOURSE', '2016', 'LAC2']\"; SQL statement:\n/* insert com.pfa.app.model.entity.Location */ insert into locations (location_id, adr, city, postal_code) values (null, ?, ?, ?) [23505-200]]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/projects/save
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_187_postOnSaveReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/save'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_567_XYZ_")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"projectId\": 2, " + 
                    " \"startDate\": \"11-12-2020\", " + 
                    " \"title\": \"ePc2UEdj\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/projects/save?EMextraParam123=_EM_566_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Could not commit JPA transaction; nested exception is javax.persistence.RollbackException: Error while committing the transaction"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/locations/save
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_188_postOnSaveReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/locations/save'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"city\": \"3TBJYLyC\", " + 
                    " \"locationId\": 2 " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/locations/save?username=_EM_2146_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Could not commit JPA transaction; nested exception is javax.persistence.RollbackException: Error while committing the transaction"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/projects/save
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_189_postOnProjectsSaveWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/save'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"status\": \"NOT_STARTED\", " + 
                    " \"title\": \"Ulf17nf5E72jq\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/projects/save?" + 
                    "password=_EM_3353_XYZ_&" + 
                    "username=_EM_3355_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("could not execute statement; SQL [n/a]; constraint [\"PRIMARY KEY ON PUBLIC.PROJECTS(PROJECT_ID) [1, 'TRANSBSCS', DATE '2020-09-28', DATE '2020-11-04', 'COMPLETED']\"; SQL statement:\n/* insert com.pfa.app.model.entity.Project */ insert into projects (project_id, end_date, start_date, status, title) values (null, ?, ?, ?, ?) [23505-200]]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/departments/save
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_190_postOnSaveReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/departments/save'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"departmentId\": 540, " + 
                    " \"departmentName\": \"DxtHFK2N\", " + 
                    " \"location\": { " + 
                    " \"adr\": \"SCAdQc_T\", " + 
                    " \"city\": \"jwNVZ3Kd5432lO0\", " + 
                    " \"locationId\": 558, " + 
                    " \"postalCode\": \"N0fD\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/departments/save?password=jYotKU")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Unable to find com.pfa.app.model.entity.Location with id 558; nested exception is javax.persistence.EntityNotFoundException: Unable to find com.pfa.app.model.entity.Location with id 558"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/assignments/save
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   dd-MM-yyyy
    */
    @Test @Timeout(60)
    public void test_191_postOnSaveReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/save'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"commitMgrDesc\": \"XpTkP3V\", " + 
                    " \"employee\": { " + 
                    " \"credential\": { " + 
                    " \"password\": \"_EM_1983_XYZ_\", " + 
                    " \"role\": \"xT\" " + 
                    " }, " + 
                    " \"department\": { " + 
                    " \"departmentId\": 5, " + 
                    " \"departmentName\": \"Digital\", " + 
                    " \"location\": { " + 
                    " \"postalCode\": \"AMYrbEq_HgRwaAuZ\" " + 
                    " } " + 
                    " }, " + 
                    " \"email\": \"XHdtJ_\", " + 
                    " \"employeeId\": 830, " + 
                    " \"hiredate\": \"dd-MM-yyyy\", " + 
                    " \"job\": \"uSb8bN\", " + 
                    " \"lastName\": \"iSJs5FFW\", " + 
                    " \"phone\": \"_EM_1985_XYZ_\", " + 
                    " \"salary\": 0.9865233490345479 " + 
                    " }, " + 
                    " \"employeeId\": 95, " + 
                    " \"project\": { " + 
                    " \"startDate\": \"_EM_1987_XYZ_\", " + 
                    " \"status\": \"_EM_1988_XYZ_\", " + 
                    " \"title\": \"O87SY\" " + 
                    " }, " + 
                    " \"projectId\": 183 " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/assignments/save")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 251] (through reference chain: com.pfa.app.model.entity.Assignment[\"employee\"]->com.pfa.app.model.entity.Employee[\"hiredate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/assignments/save
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_192_postOnAssignmentsSaveReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("DEPARTMENTS", 6031L)
                .d("DEPARTMENT_NAME", "\"rrdMxT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/save'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"commitEmpDesc\": \"duSUiD4C9IH\", " + 
                    " \"employee\": { " + 
                    " \"credential\": { " + 
                    " \"credentialId\": 201, " + 
                    " \"enabled\": true, " + 
                    " \"password\": \"iOagddyamlQ_\", " + 
                    " \"role\": \"OAjBSizBiiqHgn\" " + 
                    " }, " + 
                    " \"department\": { " + 
                    " \"departmentName\": \"2Z31HZeCsMHB\" " + 
                    " }, " + 
                    " \"employeeId\": 404, " + 
                    " \"firstName\": \"kQ7D4ElIV9GPCz\", " + 
                    " \"job\": \"czSrdz5\", " + 
                    " \"lastName\": \"r9\", " + 
                    " \"salary\": 0.9548946895704555 " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/assignments/save")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/projects/save
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   dd-MM-yyyy
    */
    @Test @Timeout(60)
    public void test_193_postOnSaveReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/save'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"projectId\": 441591064, " + 
                    " \"startDate\": \"dd-MM-yyyy\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/projects/save?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 37] (through reference chain: com.pfa.app.model.entity.Project[\"startDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/credentials/save
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_194_postOnCredentialsSaveWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/credentials/save'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"password\": \"bJQ\", " + 
                    " \"role\": \"fnlsA0hVJ_60p38\", " + 
                    " \"username\": \"_EM_1008_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/credentials/save?EMextraParam123=_EM_1009_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/assignments/save
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_195_postOnSaveReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/save'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"commitDate\": \"19-12-202012:05:23\", " + 
                    " \"commitMgrDesc\": \"mjHe5CkNyR3\", " + 
                    " \"employeeId\": 690 " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/assignments/save")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/assignments/save
    * Found 1 potential fault of type-code 101
    * Using 2 examples:
    *   dd-MM-yyyy
    *   dd-MM-yyyyHH:mm:ss
    */
    @Test @Timeout(60)
    public void test_196_postOnAssignmentsSaveWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 6032L)
                .d("ADR", "\"_iIBe14\"")
                .d("POSTAL_CODE", "\"gD1g_H5GrjWK3Sqk\"")
                .d("CITY", "\"0lGZ\"")
            .and().insertInto("DEPARTMENTS", 6031L)
                .d("DEPARTMENT_NAME", "\"rrdMxT\"")
            .and().insertInto("EMPLOYEES", 6030L)
                .d("FIRST_NAME", "\"rW20ceRMqpjmxG9\"")
                .d("LAST_NAME", "\"Ir5dtw5M\"")
                .d("EMAIL", "\"jaI@xt.hbRY\"")
                .d("PHONE", "\"pVx7D\"")
                .d("JOB", "\"0amtTECKtdwrVo\"")
                .d("SALARY", "0.6562852262682769")
            .and().insertInto("EMPLOYEES", 6027L)
                .d("FIRST_NAME", "\"tiz5LBypG\"")
                .d("LAST_NAME", "\"Xa\"")
                .d("EMAIL", "\"ht@zy.PlpC\"")
                .d("PHONE", "\"\"")
                .d("JOB", "\"P19i8i\"")
                .d("SALARY", "0.5076913498638168")
            .and().insertInto("USER_CREDENTIALS", 6023L)
                .d("USERNAME", "\"kiXy\"")
                .d("PASSWORD", "\"CxCmGFdnUpUPucF\"")
                .d("ENABLED", "true")
                .d("ROLE", "NULL")
                .d("EMPLOYEE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/save'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"commitDate\": \"dd-MM-yyyyHH:mm:ss\", " + 
                    " \"commitEmpDesc\": \"\", " + 
                    " \"commitMgrDesc\": \"9tjO3wr_YWPxTB6V\", " + 
                    " \"employee\": { " + 
                    " \"credential\": { " + 
                    " \"credentialId\": 520, " + 
                    " \"password\": \"6v0XqGuPIRz\" " + 
                    " }, " + 
                    " \"email\": \"od\", " + 
                    " \"employeeId\": 898, " + 
                    " \"firstName\": \"jzsbcXX\", " + 
                    " \"lastName\": \"516I0E\", " + 
                    " \"phone\": \"hKTzRA0HAD\", " + 
                    " \"salary\": 0.6018623955487994 " + 
                    " }, " + 
                    " \"employeeId\": -1690953804, " + 
                    " \"project\": { " + 
                    " \"startDate\": \"dd-MM-yyyy\", " + 
                    " \"status\": \"Q0C\", " + 
                    " \"title\": \"1Fme_G\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/assignments/save?username=Nea6")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDateTime` from String \"dd-MM-yyyyHH:mm:ss\": Failed to deserialize java.time.LocalDateTime: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyyHH:mm:ss' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDateTime` from String \"dd-MM-yyyyHH:mm:ss\": Failed to deserialize java.time.LocalDateTime: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyyHH:mm:ss' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 15] (through reference chain: com.pfa.app.model.entity.Assignment[\"commitDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/assignments/save
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   dd-MM-yyyy
    */
    @Test @Timeout(60)
    public void test_197_postOnSaveReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/save'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"commitDate\": \"jX3CkUgoem1udtw\", " + 
                    " \"commitMgrDesc\": \"WdGEEwlvY6Y0YX\", " + 
                    " \"employeeId\": 14, " + 
                    " \"project\": { " + 
                    " \"endDate\": \"dd-MM-yyyy\", " + 
                    " \"startDate\": \"sUqFWNEse\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/assignments/save")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDateTime` from String \"jX3CkUgoem1udtw\": Failed to deserialize java.time.LocalDateTime: (java.time.format.DateTimeParseException) Text 'jX3CkUgoem1udtw' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDateTime` from String \"jX3CkUgoem1udtw\": Failed to deserialize java.time.LocalDateTime: (java.time.format.DateTimeParseException) Text 'jX3CkUgoem1udtw' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 15] (through reference chain: com.pfa.app.model.entity.Assignment[\"commitDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/departments/save
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_198_postOnSaveReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/departments/save'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"location\": { " + 
                    " \"locationId\": 1, " + 
                    " \"postalCode\": \"pe\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/departments/save?username=KYc")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Validation failed for classes [com.pfa.app.model.entity.Department] during persist time for groups [javax.validation.groups.Default, ]\nList of constraint violations:[\n\tConstraintViolationImpl{interpolatedMessage='*Must not blank**', propertyPath=departmentName, rootBeanClass=class com.pfa.app.model.entity.Department, messageTemplate='*Must not blank**'}\n]"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/employees/save
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_199_postOnSaveReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/save'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"department\": { " + 
                    " \"departmentId\": 478, " + 
                    " \"departmentName\": \"kQ5uoo6LY6GPK\", " + 
                    " \"location\": {} " + 
                    " }, " + 
                    " \"employeeId\": 347, " + 
                    " \"firstName\": \"\", " + 
                    " \"lastName\": \"iDk6DYy\", " + 
                    " \"phone\": \"owt7H\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/employees/save")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", nullValue())
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/locations/save
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_200_postOnSaveReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/locations/save'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"city\": \"3TBJYLyC\", " + 
                    " \"locationId\": 2 " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/locations/save?password=yb2DLHbI9axtStC")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Could not commit JPA transaction; nested exception is javax.persistence.RollbackException: Error while committing the transaction"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/projects/save
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   dd-MM-yyyy
    */
    @Test @Timeout(60)
    public void test_201_postOnSaveReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/save'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_567_XYZ_")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"endDate\": \"dd-MM-yyyy\", " + 
                    " \"startDate\": \"27m\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/projects/save?EMextraParam123=_EM_566_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 12] (through reference chain: com.pfa.app.model.entity.Project[\"endDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/departments/save
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_202_postOnSaveReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/departments/save'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_552_XYZ_")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"departmentId\": 724, " + 
                    " \"departmentName\": \"N8GBXUfWc3JVd\", " + 
                    " \"location\": { " + 
                    " \"adr\": \"2uMDjy8si\", " + 
                    " \"city\": \"G0CaM0\", " + 
                    " \"locationId\": 1208646740 " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/departments/save?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Unable to find com.pfa.app.model.entity.Location with id 1208646740; nested exception is javax.persistence.EntityNotFoundException: Unable to find com.pfa.app.model.entity.Location with id 1208646740"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/assignments/save
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_203_postOnAssignmentsSaveWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/save'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"employeeId\": 8, " + 
                    " \"project\": { " + 
                    " \"endDate\": \"Yo4WmZUPAJdY5\", " + 
                    " \"projectId\": 689, " + 
                    " \"startDate\": \"edV\", " + 
                    " \"title\": \"_EM_2303_XYZ_\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/assignments/save?" + 
                    "password=9kIVGGHhUlGTz_St&" + 
                    "username=_EM_2304_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"Yo4WmZUPAJdY5\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'Yo4WmZUPAJdY5' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"Yo4WmZUPAJdY5\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'Yo4WmZUPAJdY5' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 39] (through reference chain: com.pfa.app.model.entity.Assignment[\"project\"]->com.pfa.app.model.entity.Project[\"endDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/employees/save
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_204_postOnEmployeesSaveWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 6032L)
                .d("ADR", "\"_iIBe14\"")
                .d("POSTAL_CODE", "\"gD1g_H5GrjWK3Sqk\"")
                .d("CITY", "\"0lGZ\"")
            .and().insertInto("DEPARTMENTS", 6031L)
                .d("DEPARTMENT_NAME", "\"rrdMxT\"")
            .and().insertInto("EMPLOYEES", 6030L)
                .d("FIRST_NAME", "\"rW20ceRMqpjmxG9\"")
                .d("LAST_NAME", "\"Ir5dtw5M\"")
                .d("EMAIL", "\"jaI@xt.hbRY\"")
                .d("PHONE", "\"pVx7D\"")
                .d("JOB", "\"0amtTECKtdwrVo\"")
                .d("SALARY", "0.6562852262682769")
            .and().insertInto("EMPLOYEES", 6027L)
                .d("FIRST_NAME", "\"tiz5LBypG\"")
                .d("LAST_NAME", "\"Xa\"")
                .d("EMAIL", "\"ht@zy.PlpC\"")
                .d("PHONE", "\"\"")
                .d("JOB", "\"P19i8i\"")
                .d("SALARY", "0.5076913498638168")
            .and().insertInto("USER_CREDENTIALS", 6023L)
                .d("USERNAME", "\"kiXy\"")
                .d("PASSWORD", "\"CxCmGFdnUpUPucF\"")
                .d("ENABLED", "true")
                .d("ROLE", "NULL")
                .d("EMPLOYEE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/save'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_561_XYZ_")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"email\": \"nGA\", " + 
                    " \"employeeId\": 260, " + 
                    " \"lastName\": \"FtJ8N\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/employees/save?" + 
                    "password=U8xSZhjPX5B1M9&" + 
                    "username=emIhpq0J5DVvWrl")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", nullValue())
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/employees/save
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   dd-MM-yyyy
    */
    @Test @Timeout(60)
    public void test_205_postOnSaveReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/save'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"department\": { " + 
                    " \"departmentId\": 886 " + 
                    " }, " + 
                    " \"email\": \"mI6yI_FexWObMlg\", " + 
                    " \"employeeId\": 592, " + 
                    " \"hiredate\": \"dd-MM-yyyy\", " + 
                    " \"lastName\": \"OZn3nMOo_W7ZD\", " + 
                    " \"salary\": 0.8453263850186647 " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/employees/save")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 93] (through reference chain: com.pfa.app.model.entity.Employee[\"hiredate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/app/api/credentials/save
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_206_postOnCredentialsSaveWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/credentials/save'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 438, " + 
                    " \"enabled\": true, " + 
                    " \"role\": \"H6fnXduJA6\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/credentials/save?" + 
                    "password=_GHKKlcv9&" + 
                    "username=PHZKRnDZQaGhrYv")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("could not execute statement; SQL [n/a]; constraint [\"PRIMARY KEY ON PUBLIC.USER_CREDENTIALS(USER_ID) [1, 'imentouk', '$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2', TRUE, 'ROLE_EMP', 3]\"; SQL statement:\n/* insert com.pfa.app.model.entity.Credential */ insert into user_credentials (user_id, employee_id, enabled, password, role, username) values (null, ?, ?, ?, ?, ?) [23505-200]]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/employees/update
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_207_putOnUpdateReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"department\": { " + 
                    " \"departmentId\": 627, " + 
                    " \"departmentName\": \"_EM_2990_XYZ_\", " + 
                    " \"location\": { " + 
                    " \"adr\": \"_EM_2991_XYZ_\", " + 
                    " \"city\": \"025gSZm1X\", " + 
                    " \"locationId\": 932 " + 
                    " } " + 
                    " }, " + 
                    " \"email\": \"_EM_2993_XYZ_\", " + 
                    " \"employeeId\": 889, " + 
                    " \"lastName\": \"j03h\", " + 
                    " \"phone\": \"22125144\", " + 
                    " \"salary\": 0.10414024628249863 " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/employees/update?username=_EM_2996_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", nullValue())
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/locations/update
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_208_putOnLocationsUpdateWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/locations/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"adr\": \"_xGBzBE\", " + 
                    " \"city\": \"h9:\", " + 
                    " \"locationId\": 959, " + 
                    " \"postalCode\": \"E9In\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/locations/update?" + 
                    "password=K3G6F&" + 
                    "username=omf4i")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("could not execute statement; SQL [n/a]; constraint [\"PRIMARY KEY ON PUBLIC.LOCATIONS(LOCATION_ID) [2, 'RUE DE BLA BLA', '2016', 'CHARGUIA']\"; SQL statement:\n/* insert com.pfa.app.model.entity.Location */ insert into locations (location_id, adr, city, postal_code) values (null, ?, ?, ?) [23505-200]]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/projects/update
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_209_putOnProjectsUpdateWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1207L)
                .d("ADR", "\"Mj_iX\"")
                .d("POSTAL_CODE", "\"pCvxYr09Wt5\"")
                .d("CITY", "\"_EM_5039_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 1206L)
                .d("DEPARTMENT_NAME", "\"wlUrW\"")
            .and().insertInto("EMPLOYEES", 1205L)
                .d("FIRST_NAME", "\"Vk4jylHr33Aw_\"")
                .d("LAST_NAME", "\"xUG9sN\"")
                .d("EMAIL", "\"qUx@IBv.SCp\"")
                .d("PHONE", "\"Gd0T0WabQY\"")
                .d("JOB", "\"_EM_4589_XYZ_\"")
                .d("SALARY", "0.0")
            .and().insertInto("LOCATIONS", 1204L)
                .d("ADR", "\"_EM_5040_XYZ_\"")
                .d("POSTAL_CODE", "\"y4cJ1lODOT\"")
                .d("CITY", "\"ZeLI5LujoR\"")
            .and().insertInto("DEPARTMENTS", 1203L)
                .d("DEPARTMENT_NAME", "\"O5IHaE\"")
            .and().insertInto("EMPLOYEES", 1202L)
                .d("FIRST_NAME", "\"uI\"")
                .d("LAST_NAME", "\"eHBju\"")
                .d("EMAIL", "\"Le@d.ZqR\"")
                .d("PHONE", "\"ufHKnboFeA_LUom1\"")
                .d("JOB", "\"lO\"")
                .d("SALARY", "0.4485495317707172")
            .and().insertInto("LOCATIONS", 1201L)
                .d("ADR", "\"tf7yaKOycAFY\"")
                .d("POSTAL_CODE", "\"3jz5w0d\"")
                .d("CITY", "\"UUH3pDOj\"")
            .and().insertInto("DEPARTMENTS", 1200L)
                .d("DEPARTMENT_NAME", "\"GNDSTHC6VCbtskB\"")
            .and().insertInto("EMPLOYEES", 1199L)
                .d("FIRST_NAME", "\"KpqUW4r46M2\"")
                .d("LAST_NAME", "\"_1rhEHEWLo9\"")
                .d("EMAIL", "\"GjP@PrT.KO\"")
                .d("PHONE", "\"y3\"")
                .d("JOB", "\"RmfYUBxxbTL\"")
                .d("SALARY", "0.0")
            .and().insertInto("USER_CREDENTIALS", 1198L)
                .d("USERNAME", "\"OARU\"")
                .d("PASSWORD", "\"_EO_459U_XYZ_d\"")
                .d("ENABLED", "false")
                .d("ROLE", "\"jKjeZz\"")
                .d("EMPLOYEE_ID", "7")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"projectId\": 450, " + 
                    " \"status\": \"kGQpGJRLXu\", " + 
                    " \"title\": \"zINjeFygiKeLNd1\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/projects/update?" + 
                    "password=3G&" + 
                    "username=%7C2T")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("could not execute statement; SQL [n/a]; constraint [\"PRIMARY KEY ON PUBLIC.PROJECTS(PROJECT_ID) [2, 'SYNCH_BSCS_IMX', DATE '2020-11-26', DATE '2021-03-25', 'IN_PROGRESS']\"; SQL statement:\n/* insert com.pfa.app.model.entity.Project */ insert into projects (project_id, end_date, start_date, status, title) values (null, ?, ?, ?, ?) [23505-200]]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/projects/update
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_210_putOnUpdateReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"projectId\": 3, " + 
                    " \"status\": \"_EM_6718_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/projects/update")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Could not commit JPA transaction; nested exception is javax.persistence.RollbackException: Error while committing the transaction"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/assignments/update
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_211_putOnAssignmentsUpdateWithQueryParamsEmptyUsername() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"commitEmpDesc\": \"ZJbKfcE\", " + 
                    " \"employee\": { " + 
                    " \"department\": { " + 
                    " \"departmentName\": \"T4NfTeG\" " + 
                    " }, " + 
                    " \"email\": \"bVtBl2YaLy4Pk\", " + 
                    " \"firstName\": \"xpSh9n3LU0\", " + 
                    " \"job\": \"ar5J_aGXp3ve43I\" " + 
                    " }, " + 
                    " \"employeeId\": 169, " + 
                    " \"projectId\": 414 " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/assignments/update?" + 
                    "EMextraParam123=42&" + 
                    "password=Fu0ypbtc2Pi1m4U&" + 
                    "username=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("org.hibernate.TransientPropertyValueException: Not-null property references a transient value - transient instance must be saved before current operation : com.pfa.app.model.entity.Assignment.employee -> com.pfa.app.model.entity.Employee; nested exception is java.lang.IllegalStateException: org.hibernate.TransientPropertyValueException: Not-null property references a transient value - transient instance must be saved before current operation : com.pfa.app.model.entity.Assignment.employee -> com.pfa.app.model.entity.Employee"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/assignments/update
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_212_putOnUpdateReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"commitEmpDesc\": \"design first functionality\", " + 
                    " \"commitMgrDesc\": \"_EM_150_XYZ_\", " + 
                    " \"employee\": { " + 
                    " \"credential\": { " + 
                    " \"password\": \"_EM_151_XYZ_\" " + 
                    " }, " + 
                    " \"email\": \"_EM_155_XYZ_\", " + 
                    " \"firstName\": \"Nour\", " + 
                    " \"phone\": \"_EM_156_XYZ_\" " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/assignments/update?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("org.hibernate.TransientPropertyValueException: Not-null property references a transient value - transient instance must be saved before current operation : com.pfa.app.model.entity.Assignment.employee -> com.pfa.app.model.entity.Employee; nested exception is java.lang.IllegalStateException: org.hibernate.TransientPropertyValueException: Not-null property references a transient value - transient instance must be saved before current operation : com.pfa.app.model.entity.Assignment.employee -> com.pfa.app.model.entity.Employee"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/credentials/update
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_213_putOnCredentialsUpdateReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/credentials/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 337, " + 
                    " \"password\": \"y6STSsPRTdDtMOF\", " + 
                    " \"role\": \"ROLE_EMP\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/credentials/update")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/departments/update
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_214_putOnDepartmentsUpdateWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 2987L)
            .and().insertInto("DEPARTMENTS", 2986L)
            .and().insertInto("EMPLOYEES", 2985L)
                .d("EMAIL", "\"r25\"")
                .d("PHONE", "\"4TDsr02AlZH2\"")
            .and().insertInto("EMPLOYEES", 2982L)
                .d("EMAIL", "\"42\"")
                .d("PHONE", "\"[7i\"")
            .and().insertInto("USER_CREDENTIALS", 2978L)
                .d("USERNAME", "\"lEti\"")
                .d("PASSWORD", "\"_EM_7790_XYZ_\"")
                .d("ENABLED", "true")
                .d("ROLE", "\"MUDcCy\"")
                .d("EMPLOYEE_ID", "NULL")
            .and().insertInto("PROJECTS", 2988L)
                .d("TITLE", "\"xHSbOAAa05m\"")
                .d("START_DATE", "NULL")
                .d("END_DATE", "NULL")
                .d("STATUS", "\"kjV3vn2eo70l\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/departments/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"departmentId\": 736, " + 
                    " \"location\": { " + 
                    " \"adr\": \"9_eAO\", " + 
                    " \"locationId\": 240, " + 
                    " \"postalCode\": \"_EM_4402_XYZ_\" " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/departments/update?" + 
                    "password=7&" + 
                    "username=7_86s0DFY")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Unable to find com.pfa.app.model.entity.Location with id 240; nested exception is javax.persistence.EntityNotFoundException: Unable to find com.pfa.app.model.entity.Location with id 240"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/departments/update
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_215_putOnUpdateReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/departments/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"departmentId\": 6, " + 
                    " \"departmentName\": \"Digital\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/departments/update?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Could not commit JPA transaction; nested exception is javax.persistence.RollbackException: Error while committing the transaction"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/departments/update
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_216_putOnDepartmentsUpdateReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/departments/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_637_XYZ_")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"location\": { " + 
                    " \"locationId\": 725 " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/departments/update")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Validation failed for classes [com.pfa.app.model.entity.Department] during persist time for groups [javax.validation.groups.Default, ]\nList of constraint violations:[\n\tConstraintViolationImpl{interpolatedMessage='*Must not blank**', propertyPath=departmentName, rootBeanClass=class com.pfa.app.model.entity.Department, messageTemplate='*Must not blank**'}\n]"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/departments/update
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_217_putOnUpdateReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/departments/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"departmentName\": \"PsDnh\", " + 
                    " \"location\": { " + 
                    " \"city\": \"_EM_1245_XYZ_\", " + 
                    " \"locationId\": 947, " + 
                    " \"postalCode\": \"_EM_479_XYZ_\" " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/departments/update?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("could not execute statement; SQL [n/a]; constraint [FK1_DEPT]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/locations/update
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_218_putOnLocationsUpdateWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/locations/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"adr\": \"SW3TJoIxSShaPj1V\", " + 
                    " \"postalCode\": \"\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/locations/update?" + 
                    "EMextraParam123=_EM_645_XYZ_&" + 
                    "password=1sORmv2FCKj")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Validation failed for classes [com.pfa.app.model.entity.Location] during persist time for groups [javax.validation.groups.Default, ]\nList of constraint violations:[\n\tConstraintViolationImpl{interpolatedMessage='*Must Not blank**', propertyPath=city, rootBeanClass=class com.pfa.app.model.entity.Location, messageTemplate='*Must Not blank**'}\n\tConstraintViolationImpl{interpolatedMessage='*Must Not blank**', propertyPath=postalCode, rootBeanClass=class com.pfa.app.model.entity.Location, messageTemplate='*Must Not blank**'}\n]"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/projects/update
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_219_putOnUpdateReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"projectId\": 117 " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/projects/update?EMextraParam123=_EM_646_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Validation failed for classes [com.pfa.app.model.entity.Project] during persist time for groups [javax.validation.groups.Default, ]\nList of constraint violations:[\n\tConstraintViolationImpl{interpolatedMessage='Must not blank*', propertyPath=title, rootBeanClass=class com.pfa.app.model.entity.Project, messageTemplate='Must not blank*'}\n\tConstraintViolationImpl{interpolatedMessage='Must not blank*', propertyPath=status, rootBeanClass=class com.pfa.app.model.entity.Project, messageTemplate='Must not blank*'}\n]"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/projects/update
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   dd-MM-yyyy
    */
    @Test @Timeout(60)
    public void test_220_putOnUpdateReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"startDate\": \"dd-MM-yyyy\", " + 
                    " \"status\": \"_EM_1096_XYZ_\", " + 
                    " \"title\": \"COMMISION_AUTOMATION\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/projects/update?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 14] (through reference chain: com.pfa.app.model.entity.Project[\"startDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/assignments/update
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   dd-MM-yyyy
    */
    @Test @Timeout(60)
    public void test_221_putOnAssignmentsUpdateReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1620L)
                .d("ADR", "\"SaAbWA\"")
                .d("POSTAL_CODE", "\"y3yhsg7rP2NcSIg\"")
                .d("CITY", "\"OnG\"")
            .and().insertInto("DEPARTMENTS", 1619L)
                .d("DEPARTMENT_NAME", "\"sI23bvEWsb\"")
            .and().insertInto("EMPLOYEES", 1618L)
                .d("FIRST_NAME", "\"WhC0\"")
                .d("LAST_NAME", "\"k\"")
                .d("EMAIL", "\"PH@W.VI\"")
                .d("PHONE", "\"BLt4rDYUou\"")
                .d("JOB", "\"A5PsX7n5PDw7NTY\"")
                .d("SALARY", "0.6355764862062817")
            .and().insertInto("EMPLOYEES", 1615L)
                .d("FIRST_NAME", "\"ix9W65x_\"")
                .d("LAST_NAME", "\"Kg98lSG\"")
                .d("EMAIL", "\"kff@vbv.PT\"")
                .d("PHONE", "\"ogDBdyKl5J\"")
                .d("JOB", "\"m5yD103b\"")
                .d("SALARY", "0.8")
            .and().insertInto("USER_CREDENTIALS", 1611L)
                .d("USERNAME", "\"VzME4R9hjUl\"")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "false")
                .d("ROLE", "\"_EM_5395_XYZ_\"")
                .d("EMPLOYEE_ID", "NULL")
            .and().insertInto("PROJECTS", 1569L)
                .d("TITLE", "\"_EM_5337_XYZ_\"")
                .d("STATUS", "\"qs_7c4\"")
            .and().insertInto("LOCATIONS", 1568L)
                .d("ADR", "\"_EM_3719_XYZ_\"")
                .d("POSTAL_CODE", "\"G\"")
                .d("CITY", "\"CIgoexy1eG0y\"")
            .and().insertInto("DEPARTMENTS", 1567L)
                .d("DEPARTMENT_NAME", "\"Billing\"")
            .and().insertInto("EMPLOYEES", 1566L)
                .d("FIRST_NAME", "\"054Lq8a1UD3cqA\"")
                .d("LAST_NAME", "\"_EM_5388_XYZ_\"")
                .d("EMAIL", "\"gmWB@yDA.tih\"")
                .d("PHONE", "\"_EM_5339_XYZ_\"")
                .d("JOB", "\"P\"")
                .d("SALARY", "0.0")
            .and().insertInto("EMPLOYEES", 1563L)
                .d("FIRST_NAME", "\"_EM_5340_XYZ_\"")
                .d("LAST_NAME", "\"_EM_5341_XYZ_\"")
                .d("EMAIL", "\"Kxa@TFE.EtMC\"")
                .d("PHONE", "\"Tmfqc6uophk\"")
                .d("JOB", "\"_EM_5342_XYZ_\"")
                .d("SALARY", "0.8524167800005203")
            .and().insertInto("USER_CREDENTIALS", 1580L)
                .d("USERNAME", "NULL")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "false")
                .d("ROLE", "\"AK9jTW_RweDl_S\"")
                .r("EMPLOYEE_ID", 1566L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"commitEmpDesc\": \"UBZIxCxAhIVa8i\", " + 
                    " \"employee\": { " + 
                    " \"credential\": { " + 
                    " \"credentialId\": 11, " + 
                    " \"password\": \"cKvL\" " + 
                    " }, " + 
                    " \"department\": { " + 
                    " \"departmentName\": \"_EM_5354_XYZ_\" " + 
                    " }, " + 
                    " \"firstName\": \"_EM_5356_XYZ_\", " + 
                    " \"job\": \"Aiht\" " + 
                    " }, " + 
                    " \"project\": { " + 
                    " \"endDate\": \"dd-MM-yyyy\", " + 
                    " \"startDate\": \"we5G7bc\", " + 
                    " \"status\": \"IN_PROGRESS\" " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/assignments/update")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 215] (through reference chain: com.pfa.app.model.entity.Assignment[\"project\"]->com.pfa.app.model.entity.Project[\"endDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/assignments/update
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_222_putOnUpdateReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"commitEmpDesc\": \"DopfrINMZNE\", " + 
                    " \"commitMgrDesc\": \"RQPrjEbtL\", " + 
                    " \"employeeId\": 496 " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/assignments/update?password=jbY")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/assignments/update
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   dd-MM-yyyy
    */
    @Test @Timeout(60)
    public void test_223_putOnUpdateReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"commitMgrDesc\": \"\", " + 
                    " \"employee\": { " + 
                    " \"department\": {}, " + 
                    " \"firstName\": \"Sana\", " + 
                    " \"hiredate\": \"dd-MM-yyyy\", " + 
                    " \"job\": \"\", " + 
                    " \"lastName\": \"8VkUwsYT9QnC5\", " + 
                    " \"phone\": \"22125144\" " + 
                    " }, " + 
                    " \"employeeId\": 308, " + 
                    " \"projectId\": 638 " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/assignments/update?password=HqyixtwGe_QE6x")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 82] (through reference chain: com.pfa.app.model.entity.Assignment[\"employee\"]->com.pfa.app.model.entity.Employee[\"hiredate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/employees/update
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_224_putOnEmployeesUpdateWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2013_XYZ_")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"department\": { " + 
                    " \"departmentId\": 663 " + 
                    " }, " + 
                    " \"employeeId\": 274, " + 
                    " \"firstName\": \"zKe6\", " + 
                    " \"salary\": 0.5455143118099953 " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/employees/update?" + 
                    "password=5Q&" + 
                    "username=_EM_439_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", nullValue())
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/employees/update
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_225_putOnEmployeesUpdateReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"credential\": { " + 
                    " \"role\": \"yUILtf59D1PV\", " + 
                    " \"username\": \"_EM_3628_XYZ_\" " + 
                    " }, " + 
                    " \"department\": { " + 
                    " \"departmentId\": 6, " + 
                    " \"departmentName\": \"_EM_3629_XYZ_\" " + 
                    " }, " + 
                    " \"employeeId\": 488, " + 
                    " \"firstName\": \"Nour\", " + 
                    " \"lastName\": \"_EM_3633_XYZ_\", " + 
                    " \"phone\": \"Yf4l0KU\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/employees/update")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", nullValue())
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/projects/update
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   dd-MM-yyyy
    */
    @Test @Timeout(60)
    public void test_226_putOnUpdateReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"endDate\": \"dd-MM-yyyy\", " + 
                    " \"projectId\": 81, " + 
                    " \"startDate\": \"2020-06-01\", " + 
                    " \"status\": \"_EM_5284_XYZ_\", " + 
                    " \"title\": \"\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/projects/update")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 12] (through reference chain: com.pfa.app.model.entity.Project[\"endDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/assignments/update
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   dd-MM-yyyy
    */
    @Test @Timeout(60)
    public void test_227_putOnUpdateReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"commitEmpDesc\": \"_EM_1492_XYZ_\", " + 
                    " \"employeeId\": 479, " + 
                    " \"project\": { " + 
                    " \"endDate\": \"dd-MM-yyyy\", " + 
                    " \"startDate\": \"dd-MM-yyyy\" " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/assignments/update")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 74] (through reference chain: com.pfa.app.model.entity.Assignment[\"project\"]->com.pfa.app.model.entity.Project[\"endDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/assignments/update
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   dd-MM-yyyyHH:mm:ss
    */
    @Test @Timeout(60)
    public void test_228_putOnUpdateReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"commitDate\": \"dd-MM-yyyyHH:mm:ss\", " + 
                    " \"commitEmpDesc\": \"\", " + 
                    " \"employeeId\": 328 " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/assignments/update")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDateTime` from String \"dd-MM-yyyyHH:mm:ss\": Failed to deserialize java.time.LocalDateTime: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyyHH:mm:ss' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDateTime` from String \"dd-MM-yyyyHH:mm:ss\": Failed to deserialize java.time.LocalDateTime: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyyHH:mm:ss' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 15] (through reference chain: com.pfa.app.model.entity.Assignment[\"commitDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/employees/update
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   dd-MM-yyyy
    */
    @Test @Timeout(60)
    public void test_229_putOnUpdateReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"department\": {}, " + 
                    " \"hiredate\": \"dd-MM-yyyy\", " + 
                    " \"job\": \"D5Hg\", " + 
                    " \"phone\": \"VbAWfjCRrchNP_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/employees/update?username=dUw6xO")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"dd-MM-yyyy\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'dd-MM-yyyy' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 30] (through reference chain: com.pfa.app.model.entity.Employee[\"hiredate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/app/api/assignments/update
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   dd-MM-yyyy
    */
    @Test @Timeout(60)
    public void test_230_putOnAssignmentsUpdateWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1620L)
                .d("ADR", "\"S]AbWA\"")
                .d("POSTAL_CODE", "\"y3yhsg7rP2NcRIg\"")
                .d("CITY", "\"_EM_5386_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 1619L)
                .d("DEPARTMENT_NAME", "\"sI23bvEWsb\"")
            .and().insertInto("EMPLOYEES", 1618L)
                .d("FIRST_NAME", "\"XhC0\"")
                .d("LAST_NAME", "\"_EM_5582_XYZ_\"")
                .d("EMAIL", "\"QH@X.UJ\"")
                .d("PHONE", "\"BLt4rDYUnu\"")
                .d("JOB", "\"A5PsX7n5PDw7NTY\"")
                .d("SALARY", "0.6355764862062817")
            .and().insertInto("EMPLOYEES", 1615L)
                .d("FIRST_NAME", "\"ix9W65x_\"")
                .d("LAST_NAME", "\"_EM_5583_XYZ_\"")
                .d("EMAIL", "\"kef@vbv.OU\"")
                .d("PHONE", "\"ogDBdyKl5J\"")
                .d("JOB", "\"m5yD103b\"")
                .d("SALARY", "1.9")
            .and().insertInto("USER_CREDENTIALS", 1611L)
                .d("USERNAME", "\"VzME4R9hjUl\"")
                .d("PASSWORD", "\"_EM_5584_XYZ_\"")
                .d("ENABLED", "false")
                .d("ROLE", "\"_EM_5585_XYZ_\"")
                .d("EMPLOYEE_ID", "NULL")
            .and().insertInto("PROJECTS", 1569L)
                .d("TITLE", "\"Gy9qF14M2i:\"")
                .d("STATUS", "\"qs_7c4\"")
            .and().insertInto("LOCATIONS", 1568L)
                .d("ADR", "\"_EM_5568_XYZ_e\"")
                .d("POSTAL_CODE", "\"G\"")
                .d("CITY", "\"zTMadiK5ej_wNhzl\"")
            .and().insertInto("DEPARTMENTS", 1567L)
                .d("DEPARTMENT_NAME", "\"Billingk\"")
            .and().insertInto("EMPLOYEES", 1566L)
                .d("FIRST_NAME", "\"054Lr8a1UD3cqA\"")
                .d("LAST_NAME", "\"_EM_5388_XYZ_7\"")
                .d("EMAIL", "\"gmWB@yDB.tih\"")
                .d("PHONE", "\"_EM_5339_XYZ_\"")
                .d("JOB", "\"T\"")
                .d("SALARY", "-1836.1717721682587")
            .and().insertInto("EMPLOYEES", 1563L)
                .d("FIRST_NAME", "\"elYS3AXFIqMW\"")
                .d("LAST_NAME", "\"_EM_5341_XYZ_\"")
                .d("EMAIL", "\"KxZ@TEE.EtMC\"")
                .d("PHONE", "\"Tmfqc6uohhk\"")
                .d("JOB", "\"1X4lSi8c\"")
                .d("SALARY", "18889.314188789744")
            .and().insertInto("USER_CREDENTIALS", 1580L)
                .d("USERNAME", "NULL")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "true")
                .d("ROLE", "\"AK9jTW_RweDl_S\"")
                .r("EMPLOYEE_ID", 1566L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"commitDate\": \"Ed2UKhFQ\", " + 
                    " \"commitEmpDesc\": \"UBZIxCxAhIVa8\", " + 
                    " \"commitMgrDesc\": \"UBZIxCxAhIVa8\", " + 
                    " \"employee\": { " + 
                    " \"credential\": { " + 
                    " \"credentialId\": 11, " + 
                    " \"password\": \"_EM_5581_XYZ_\", " + 
                    " \"role\": \"iqP\" " + 
                    " }, " + 
                    " \"department\": { " + 
                    " \"departmentName\": \"keKkCXJX\", " + 
                    " \"location\": { " + 
                    " \"city\": \"ZYoKIHIbZH\", " + 
                    " \"locationId\": 980 " + 
                    " } " + 
                    " }, " + 
                    " \"firstName\": \"oz9PBfkUG23NTf\", " + 
                    " \"hiredate\": \"wQv\", " + 
                    " \"job\": \"Aiht\", " + 
                    " \"lastName\": \"BovJ4xvohS0\", " + 
                    " \"phone\": \"22125144\" " + 
                    " }, " + 
                    " \"employeeId\": 81, " + 
                    " \"project\": { " + 
                    " \"endDate\": \"dd-MM-yyyy\", " + 
                    " \"startDate\": \"we5G7bc\", " + 
                    " \"status\": \"IN_PROGRESS\" " + 
                    " }, " + 
                    " \"projectId\": 5064 " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/assignments/update?" + 
                    "password=_EM_5567_XYZ_&" + 
                    "username=_EM_5383_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDateTime` from String \"Ed2UKhFQ\": Failed to deserialize java.time.LocalDateTime: (java.time.format.DateTimeParseException) Text 'Ed2UKhFQ' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDateTime` from String \"Ed2UKhFQ\": Failed to deserialize java.time.LocalDateTime: (java.time.format.DateTimeParseException) Text 'Ed2UKhFQ' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 15] (through reference chain: com.pfa.app.model.entity.Assignment[\"commitDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/credentials/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_231_deleteOnCredentiReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1418L)
                .d("ADR", "\"NbgxMPoHlivBBY\"")
                .d("POSTAL_CODE", "\"dpgPELK\"")
                .d("CITY", "\"ee8iqf2OagIn\"")
            .and().insertInto("DEPARTMENTS", 1417L)
                .d("DEPARTMENT_NAME", "\"wklfI_318yVQmp\"")
            .and().insertInto("EMPLOYEES", 1416L)
                .d("FIRST_NAME", "\"qvQV0VVYDFYRN\"")
                .d("LAST_NAME", "\"0oGM\"")
                .d("EMAIL", "\"wZD@mS.amD\"")
                .d("PHONE", "\"Tjb\"")
                .d("JOB", "\"6r7uBWQZDH3efM5h\"")
                .d("SALARY", "0.1891659569379005")
            .and().insertInto("LOCATIONS", 1415L)
                .d("ADR", "\"b3I\"")
                .d("POSTAL_CODE", "\"tuTSyzpnx9lgCw\"")
                .d("CITY", "\"SqudKZ0rkBQI76\"")
            .and().insertInto("DEPARTMENTS", 1414L)
                .d("DEPARTMENT_NAME", "\"gbqgYj7cv5AFevw\"")
            .and().insertInto("EMPLOYEES", 1413L)
                .d("FIRST_NAME", "\"e4vMoe8MVj7\"")
                .d("LAST_NAME", "\"NF5aUVhhcyn\"")
                .d("EMAIL", "\"mK@N.pzZW\"")
                .d("PHONE", "\"YrrgiWxW4W9f3YBx\"")
                .d("JOB", "\"Z7z5y5sVnm\"")
                .d("SALARY", "0.6561921425869157")
            .and().insertInto("LOCATIONS", 1412L)
                .d("ADR", "\"N\"")
                .d("POSTAL_CODE", "\"MSMYiPEWv3inV\"")
                .d("CITY", "\"WK0\"")
            .and().insertInto("DEPARTMENTS", 1411L)
                .d("DEPARTMENT_NAME", "\"uK\"")
            .and().insertInto("EMPLOYEES", 1410L)
                .d("FIRST_NAME", "\"vwll3M8G_oPt\"")
                .d("LAST_NAME", "\"5\"")
                .d("EMAIL", "\"mA@rO.wj\"")
                .d("PHONE", "\"YSAEby117\"")
                .d("JOB", "\"yOvoB_l\"")
                .d("SALARY", "0.9274173441463406")
            .and().insertInto("USER_CREDENTIALS", 1409L)
                .d("USERNAME", "NULL")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "false")
                .d("ROLE", "\"ew63NYNKQHLwol\"")
                .d("EMPLOYEE_ID", "NULL")
            .and().insertInto("LOCATIONS", 180L)
            .and().insertInto("DEPARTMENTS", 179L)
            .and().insertInto("EMPLOYEES", 178L)
                .d("EMAIL", "\"_EM_2065_XYZ_\"")
                .d("PHONE", "\"g\"")
            .and().insertInto("EMPLOYEES", 175L)
                .d("EMAIL", "\"xOqhSU\"")
                .d("PHONE", "\"_EM_2066_XYZ_\"")
            .and().insertInto("USER_CREDENTIALS", 171L)
                .d("USERNAME", "NULL")
                .d("PASSWORD", "\"abO1Bd3a8\"")
                .d("ENABLED", "false")
                .d("ROLE", "NULL")
                .d("EMPLOYEE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/credentials/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .delete(baseUrlOfSut + "/app/api/credentials/-1")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Credential object FOUND! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/credentials/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_232_deleteOnApiCredentiReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/credentials/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .delete(baseUrlOfSut + "/app/api/credentials/_EM_522_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"_EM_522_XYZ_\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/departments/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_233_deleteOnApiDepartReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/departments/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .delete(baseUrlOfSut + "/app/api/departments/_EM_2761_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"_EM_2761_XYZ_\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/employees/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_234_deleteOnApiEmployeWithQueryParamsEmptyUsername() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .delete(baseUrlOfSut + "/app/api/employees/_EM_3678_XYZ_?" + 
                    "password=zlRGTFyhrYCJky&" + 
                    "username=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"_EM_3678_XYZ_\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/projects/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_235_deleteOnApiProjectReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .delete(baseUrlOfSut + "/app/api/projects/_EM_993_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"_EM_993_XYZ_\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/locations/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_236_deleteOnApiLocatWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/locations/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .delete(baseUrlOfSut + "/app/api/locations/171?" + 
                    "password=_EM_3764_XYZ_&" + 
                    "username=_EM_3765_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Location object FOUND! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/projects/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_237_deleteOnApiProjectWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .delete(baseUrlOfSut + "/app/api/projects/ybq?" + 
                    "password=iS35&" + 
                    "username=SgH")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"ybq\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/employees/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_238_deleteOnApiEmployeReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .delete(baseUrlOfSut + "/app/api/employees/O2Tb")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"O2Tb\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/locations/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_239_deleteOnApiLocatReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/locations/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2255_XYZ_")
                .cookies(cookies_ROLE_EMP)
                .delete(baseUrlOfSut + "/app/api/locations/rI")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"rI\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/departments/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_240_deleteOnApiDepartWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/departments/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .delete(baseUrlOfSut + "/app/api/departments/MdX?" + 
                    "password=gm9ziAi&" + 
                    "username=yJT9iskaFEvDYa8")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"MdX\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/credentials/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_241_deleteOnApiCredentiWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/credentials/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .delete(baseUrlOfSut + "/app/api/credentials/tLzP?" + 
                    "password=%242a%2410%241xbq6vQDlSvwxCly.1gnEezqehgGg15XzeiycPbTy3g6zxnw.U6Ni&" + 
                    "username=U")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"tLzP\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/credentials/username/{username}
    */
    @Test @Timeout(60)
    public void test_242_getOnUsernamReturnsObjectUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("DEPARTMENTS", 832L)
                .d("DEPARTMENT_NAME", "\"W8TscibeJip\"")
            .and().insertInto("USER_CREDENTIALS", 824L)
                .d("USERNAME", "\"0ZxjPZB_n4\"")
                .d("PASSWORD", "\"95yai3J4rC2AYYc\"")
                .d("ENABLED", "false")
                .d("ROLE", "\"nCL0MWQ\"")
                .d("EMPLOYEE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/credentials/username/mounachaouachi?" + 
                    "password=bJQ&" + 
                    "username=_EM_3995_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(14.0))
                .body("'username'", containsString("mounachaouachi"))
                .body("'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'enabled'", equalTo(true))
                .body("'role'", containsString("ROLE_EMP"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/credentials/username/{username}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_243_getOnCredentialsUsernamReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 773L)
                .d("ADR", "\"FYf9dgnWcY4HV\"")
                .d("POSTAL_CODE", "\"d8GT66T_n6F5tzAZ\"")
                .d("CITY", "\"CHARGUIA\"")
            .and().insertInto("DEPARTMENTS", 772L)
                .d("DEPARTMENT_NAME", "\"89QF8aY\"")
            .and().insertInto("EMPLOYEES", 771L)
                .d("FIRST_NAME", "\"_EM_3664_XYZ_\"")
                .d("LAST_NAME", "\"KHLjtG\"")
                .d("EMAIL", "\"jBsP@r.SQa\"")
                .d("PHONE", "\"3c\"")
                .d("JOB", "\"s\"")
                .d("SALARY", "0.07933558368304472")
            .and().insertInto("EMPLOYEES", 768L)
                .d("FIRST_NAME", "\"Badr\"")
                .d("LAST_NAME", "\"ST5HynKjevUawZ\"")
                .d("EMAIL", "\"KRM@kF.ZUHo\"")
                .d("PHONE", "\"Le1cUAVqJb0JwQ\"")
                .d("JOB", "\"_EM_3665_XYZ_\"")
                .d("SALARY", "0.8253582572970452")
            .and().insertInto("USER_CREDENTIALS", 764L)
                .d("USERNAME", "\"d7Fq04ac2UA\"")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "false")
                .d("ROLE", "\"\"")
                .d("EMPLOYEE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/password'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/credentials/username/d7Fq04ac2UA")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(15.0))
                .body("'username'", containsString("d7Fq04ac2UA"))
                .body("'password'", nullValue())
                .body("'enabled'", equalTo(false))
                .body("'role'", containsString(""));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/employees/username/{username}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_244_getOnUsernamReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/manager/hiredate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/employees/username/mayssahassine?" + 
                    "EMextraParam123=42&" + 
                    "password=%242a%2410%246pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78%2FcvOprSR3lsZL2")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'employeeId'", numberMatches(12.0))
                .body("'firstName'", containsString("Mayssa"))
                .body("'lastName'", containsString("Hassine"))
                .body("'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'phone'", containsString("22125144"))
                .body("'hiredate'", containsString("30-04-2019"))
                .body("'job'", containsString("Data Warehouse"))
                .body("'salary'", numberMatches(5000.0))
                .body("'manager'.'employeeId'", numberMatches(5.0))
                .body("'manager'.'firstName'", containsString("Nour"))
                .body("'manager'.'lastName'", containsString("Larguech"))
                .body("'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'manager'.'phone'", containsString("22125144"))
                .body("'manager'.'hiredate'", nullValue())
                .body("'manager'.'job'", containsString("Chef service Data Warehouse"))
                .body("'manager'.'salary'", numberMatches(6000.0))
                .body("'manager'.'manager'", nullValue())
                .body("'manager'.'department'.'departmentId'", numberMatches(4.0))
                .body("'manager'.'department'.'departmentName'", containsString("DWH"))
                .body("'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'manager'.'credential'.'credentialId'", numberMatches(6.0))
                .body("'manager'.'credential'.'username'", containsString("nourlarguech"))
                .body("'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'manager'.'credential'.'enabled'", equalTo(true))
                .body("'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'department'.'departmentId'", numberMatches(4.0))
                .body("'department'.'departmentName'", containsString("DWH"))
                .body("'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'department'.'location'.'postalCode'", containsString("2016"))
                .body("'department'.'location'.'city'", containsString("LAC2"))
                .body("'credential'.'credentialId'", numberMatches(13.0))
                .body("'credential'.'username'", containsString("mayssahassine"))
                .body("'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'credential'.'enabled'", equalTo(true))
                .body("'credential'.'role'", containsString("ROLE_EMP"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/employees/username/{username}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_245_getOnUsernamReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1207L)
                .d("ADR", "\"Mj_iX\"")
                .d("POSTAL_CODE", "\"pCvxYr09Wt5\"")
                .d("CITY", "\"_EM_5039_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 1206L)
                .d("DEPARTMENT_NAME", "\"wlUrW\"")
            .and().insertInto("EMPLOYEES", 1205L)
                .d("FIRST_NAME", "\"Vk4jylHr33Aw_9\"")
                .d("LAST_NAME", "\"xUG9s\"")
                .d("EMAIL", "\"qUx@IBv.SCp\"")
                .d("PHONE", "\"Gd0T0WabQY\"")
                .d("JOB", "\"_EM_4589_XYZ_\"")
                .d("SALARY", "0.0")
            .and().insertInto("LOCATIONS", 1204L)
                .d("ADR", "\"_EM_5040_XYZ_\"")
                .d("POSTAL_CODE", "\"y4cJ1lODOT\"")
                .d("CITY", "\"ZeLI5LujoR\"")
            .and().insertInto("DEPARTMENTS", 1203L)
                .d("DEPARTMENT_NAME", "\"O5IHaE\"")
            .and().insertInto("EMPLOYEES", 1202L)
                .d("FIRST_NAME", "\"uI\"")
                .d("LAST_NAME", "\"eHBju\"")
                .d("EMAIL", "\"Le@d.ZqR\"")
                .d("PHONE", "\"ufHKnboFeA_LUom1\"")
                .d("JOB", "\"lO\"")
                .d("SALARY", "0.4485495317707172")
            .and().insertInto("LOCATIONS", 1201L)
                .d("ADR", "\"tf7yaKOycAFY\"")
                .d("POSTAL_CODE", "\"3jz5w0d\"")
                .d("CITY", "\"G3H3nDOj\"")
            .and().insertInto("DEPARTMENTS", 1200L)
                .d("DEPARTMENT_NAME", "\"GNDSTHC6VCbtskB\"")
            .and().insertInto("EMPLOYEES", 1199L)
                .d("FIRST_NAME", "\"KpqUW4r46M2\"")
                .d("LAST_NAME", "\"_1rhEHEWLo9\"")
                .d("EMAIL", "\"GjP@PrT.KO\"")
                .d("PHONE", "\"y3\"")
                .d("JOB", "\"RmfYUBxxbTL\"")
                .d("SALARY", "0.0")
            .and().insertInto("USER_CREDENTIALS", 1198L)
                .d("USERNAME", "\"OARU\"")
                .d("PASSWORD", "\"_EM_4592_XYZ_d\"")
                .d("ENABLED", "false")
                .d("ROLE", "\"_EM_5041_XYZ_\"")
                .d("EMPLOYEE_ID", "7")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/hiredate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/employees/username/johndoe?" + 
                    "password=_EM_5038_XYZ_&" + 
                    "username=S")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'employeeId'", numberMatches(9.0))
                .body("'firstName'", containsString("John"))
                .body("'lastName'", containsString("Doe"))
                .body("'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'phone'", containsString("22125144"))
                .body("'hiredate'", nullValue())
                .body("'job'", containsString("Chef service digital"))
                .body("'salary'", numberMatches(6000.0))
                .body("'manager'", nullValue())
                .body("'department'.'departmentId'", numberMatches(5.0))
                .body("'department'.'departmentName'", containsString("Digital"))
                .body("'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'department'.'location'.'postalCode'", containsString("2016"))
                .body("'department'.'location'.'city'", containsString("LAC2"))
                .body("'credential'.'credentialId'", numberMatches(7.0))
                .body("'credential'.'username'", containsString("johndoe"))
                .body("'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'credential'.'enabled'", equalTo(true))
                .body("'credential'.'role'", containsString("ROLE_MGR"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/app/api/credentials
    * 2 - (404) GET:/app/api/credentials/username/{username}
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_246_getOnUsernamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/password'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 603, " + 
                    " \"enabled\": true " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/credentials")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(15.0))
                .body("'username'", nullValue())
                .body("'password'", nullValue())
                .body("'enabled'", equalTo(true))
                .body("'role'", nullValue());
        String 
        location_credentials__2 = "/app/api/credentials" + "/" + res_0.extract().body().path("credentialId").toString();
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(resolveLocation(location_credentials__2, baseUrlOfSut + "/app/api/credentials/username/Opi2v2L2y"))
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/employees/username/{username}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_247_getOnEmployeesUsernamWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/hiredate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/employees/username/nourlarguech?username=nourlarguech")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'employeeId'", numberMatches(5.0))
                .body("'firstName'", containsString("Nour"))
                .body("'lastName'", containsString("Larguech"))
                .body("'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'phone'", containsString("22125144"))
                .body("'hiredate'", nullValue())
                .body("'job'", containsString("Chef service Data Warehouse"))
                .body("'salary'", numberMatches(6000.0))
                .body("'manager'", nullValue())
                .body("'department'.'departmentId'", numberMatches(4.0))
                .body("'department'.'departmentName'", containsString("DWH"))
                .body("'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'department'.'location'.'postalCode'", containsString("2016"))
                .body("'department'.'location'.'city'", containsString("LAC2"))
                .body("'credential'.'credentialId'", numberMatches(6.0))
                .body("'credential'.'username'", containsString("nourlarguech"))
                .body("'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'credential'.'enabled'", equalTo(true))
                .body("'credential'.'role'", containsString("ROLE_MGR"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/credentials/username/{username}
    */
    @Test @Timeout(60)
    public void test_248_getOnUsernamReturnsObjectUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 854L)
                .d("ADR", "\"_EM_4026_XYZ_\"")
                .d("POSTAL_CODE", "\"Px3i\"")
                .d("CITY", "\"G\"")
            .and().insertInto("DEPARTMENTS", 853L)
                .d("DEPARTMENT_NAME", "\"2c6\"")
            .and().insertInto("EMPLOYEES", 852L)
                .d("FIRST_NAME", "\"NXyxp_SfuSQ\"")
                .d("LAST_NAME", "\"_EM_4027_XYZ_\"")
                .d("EMAIL", "\"TCI@RXe.QcZv\"")
                .d("PHONE", "\"_EM_4028_XYZ_\"")
                .d("JOB", "\"W\"")
                .d("SALARY", "0.8114936904168821")
            .and().insertInto("LOCATIONS", 851L)
                .d("ADR", "\"Fs4\"")
                .d("POSTAL_CODE", "\"u@V\"")
                .d("CITY", "\"36JNnbLLkAH\"")
            .and().insertInto("DEPARTMENTS", 850L)
                .d("DEPARTMENT_NAME", "\"2IYfA\"")
            .and().insertInto("EMPLOYEES", 849L)
                .d("FIRST_NAME", "\"_EM_4029_XYZ_\"")
                .d("LAST_NAME", "\"OzU\"")
                .d("EMAIL", "\"ii@R.We\"")
                .d("PHONE", "\"ng\"")
                .d("JOB", "\"quLRtclpMyvJzaY\"")
                .d("SALARY", "0.2562718707922996")
            .and().insertInto("LOCATIONS", 848L)
                .d("ADR", "\"0cMhVAQV4cT\"")
                .d("POSTAL_CODE", "\"o\"")
                .d("CITY", "\"Sc\"")
            .and().insertInto("DEPARTMENTS", 847L)
                .d("DEPARTMENT_NAME", "\"1DXfeE\"")
            .and().insertInto("EMPLOYEES", 846L)
                .d("FIRST_NAME", "\"_EM_4030_XYZ_\"")
                .d("LAST_NAME", "\"cz\"")
                .d("EMAIL", "\"cdgb@GzW.CyZ\"")
                .d("PHONE", "\"HrXyKXY7Sb\"")
                .d("JOB", "\"_EM_4031_XYZ_\"")
                .d("SALARY", "0.676428400230313")
            .and().insertInto("USER_CREDENTIALS", 845L)
                .d("USERNAME", "\"cuq_NwWKc9XcJx3\"")
                .d("PASSWORD", "\"x\"")
                .d("ENABLED", "true")
                .d("ROLE", "\"ryed\"")
                .d("EMPLOYEE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/credentials/username/nourlarguech?" + 
                    "password=_EM_4025_XYZ_&" + 
                    "username=t")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(6.0))
                .body("'username'", containsString("nourlarguech"))
                .body("'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'enabled'", equalTo(true))
                .body("'role'", containsString("ROLE_MGR"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/employees/username/{username}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_249_getOnUsernamReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1207L)
                .d("ADR", "\"Mj_iX\"")
                .d("POSTAL_CODE", "\"pCvxYr09Wt5\"")
                .d("CITY", "\"Pvx9\"")
            .and().insertInto("DEPARTMENTS", 1206L)
                .d("DEPARTMENT_NAME", "\"olUrW\"")
            .and().insertInto("EMPLOYEES", 1205L)
                .d("FIRST_NAME", "\"Vk4jylHr33Aw_9\"")
                .d("LAST_NAME", "\"xUG9s\"")
                .d("EMAIL", "\"qUx@IBv.SCp\"")
                .d("PHONE", "\"Gd0T0WabQY\"")
                .d("JOB", "\"_EM_4589_XYZ_\"")
                .d("SALARY", "0.7925956449954059")
            .and().insertInto("LOCATIONS", 1204L)
                .d("ADR", "\"_EM_4590_XYZ_\"")
                .d("POSTAL_CODE", "\"y4cJ1lODOT\"")
                .d("CITY", "\"ZeLI5LujoR\"")
            .and().insertInto("DEPARTMENTS", 1203L)
                .d("DEPARTMENT_NAME", "\"O5IHaE\"")
            .and().insertInto("EMPLOYEES", 1202L)
                .d("FIRST_NAME", "\"_EM_5035_XYZ_\"")
                .d("LAST_NAME", "\"eHBju\"")
                .d("EMAIL", "\"Le@d.ZqR\"")
                .d("PHONE", "\"_EM_5036_XYZ_\"")
                .d("JOB", "\"l\"")
                .d("SALARY", "0.4485495317707172")
            .and().insertInto("LOCATIONS", 1201L)
                .d("ADR", "\"tf7yaKOycAFY\"")
                .d("POSTAL_CODE", "\"3jz5w0d\"")
                .d("CITY", "\"G3H3nDOj\"")
            .and().insertInto("DEPARTMENTS", 1200L)
                .d("DEPARTMENT_NAME", "\"GNDSTHC6VCctskB\"")
            .and().insertInto("EMPLOYEES", 1199L)
                .d("FIRST_NAME", "\"KpqUW4r46M2\"")
                .d("LAST_NAME", "\"_1rhEHEWLo9\"")
                .d("EMAIL", "\"GjP@PrS.KO\"")
                .d("PHONE", "\"y\"")
                .d("JOB", "\"RmfWUBxxbTL\"")
                .d("SALARY", "-1739.2678717739777")
            .and().insertInto("USER_CREDENTIALS", 1198L)
                .d("USERNAME", "\"OARU\"")
                .d("PASSWORD", "\"_EM_4592_XYZ_d\"")
                .d("ENABLED", "true")
                .d("ROLE", "\"SjGtn3whr0g2\"")
                .r("EMPLOYEE_ID", 1205L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/manager/hiredate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/employees/username/imentouk?" + 
                    "password=_EM_5034_XYZ_&" + 
                    "username=S")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'employeeId'", numberMatches(3.0))
                .body("'firstName'", containsString("Imen"))
                .body("'lastName'", containsString("Touk"))
                .body("'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'phone'", containsString("22125144"))
                .body("'hiredate'", containsString("15-04-2019"))
                .body("'job'", containsString("Data Warehouse"))
                .body("'salary'", numberMatches(5000.0))
                .body("'manager'.'employeeId'", numberMatches(5.0))
                .body("'manager'.'firstName'", containsString("Nour"))
                .body("'manager'.'lastName'", containsString("Larguech"))
                .body("'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'manager'.'phone'", containsString("22125144"))
                .body("'manager'.'hiredate'", nullValue())
                .body("'manager'.'job'", containsString("Chef service Data Warehouse"))
                .body("'manager'.'salary'", numberMatches(6000.0))
                .body("'manager'.'manager'", nullValue())
                .body("'manager'.'department'.'departmentId'", numberMatches(4.0))
                .body("'manager'.'department'.'departmentName'", containsString("DWH"))
                .body("'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'manager'.'credential'.'credentialId'", numberMatches(6.0))
                .body("'manager'.'credential'.'username'", containsString("nourlarguech"))
                .body("'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'manager'.'credential'.'enabled'", equalTo(true))
                .body("'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'department'.'departmentId'", numberMatches(4.0))
                .body("'department'.'departmentName'", containsString("DWH"))
                .body("'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'department'.'location'.'postalCode'", containsString("2016"))
                .body("'department'.'location'.'city'", containsString("LAC2"))
                .body("'credential'.'credentialId'", numberMatches(1.0))
                .body("'credential'.'username'", containsString("imentouk"))
                .body("'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'credential'.'enabled'", equalTo(true))
                .body("'credential'.'role'", containsString("ROLE_EMP"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/credentials/username/{username}
    */
    @Test @Timeout(60)
    public void test_250_getOnUsernamReturnsObjectUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 854L)
                .d("ADR", "\"nF5DVW5eIcJVq3\"")
                .d("POSTAL_CODE", "\"_EM_5633_XYZ_\"")
                .d("CITY", "\"G\"")
            .and().insertInto("DEPARTMENTS", 853L)
                .d("DEPARTMENT_NAME", "\"2c6\"")
            .and().insertInto("EMPLOYEES", 852L)
                .d("FIRST_NAME", "\"NXyxp_SfuSQ\"")
                .d("LAST_NAME", "\"_EM_4027_XYZ_\"")
                .d("EMAIL", "\"SCI@RXe.QbZv\"")
                .d("PHONE", "\"_EM_4028_XYZ_\"")
                .d("JOB", "\"W\"")
                .d("SALARY", "0.8114936904168821")
            .and().insertInto("LOCATIONS", 851L)
                .d("ADR", "\"Fs4\"")
                .d("POSTAL_CODE", "\"u@V\"")
                .d("CITY", "\"_EM_5634_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 850L)
                .d("DEPARTMENT_NAME", "\"2IYfAN\"")
            .and().insertInto("EMPLOYEES", 849L)
                .d("FIRST_NAME", "\"_EM_4029_XYZ_\"")
                .d("LAST_NAME", "\"_EM_5635_XYZ_\"")
                .d("EMAIL", "\"ii@R.We\"")
                .d("PHONE", "\"ng\"")
                .d("JOB", "\"quLRtclpMyvJzaY\"")
                .d("SALARY", "0.2563")
            .and().insertInto("LOCATIONS", 848L)
                .d("ADR", "\"UcO`UAQUUbT\"")
                .d("POSTAL_CODE", "\"oe\"")
                .d("CITY", "\"Sc\"")
            .and().insertInto("DEPARTMENTS", 847L)
                .d("DEPARTMENT_NAME", "\"1DXfeE\"")
            .and().insertInto("EMPLOYEES", 846L)
                .d("FIRST_NAME", "\"_EM_4030_XYZ_\"")
                .d("LAST_NAME", "\"cz\"")
                .d("EMAIL", "\"cdha@GzW.yZ\"")
                .d("PHONE", "\"HrXyKXY7Sb\"")
                .d("JOB", "\"_EM_4031_XYZ_\"")
                .d("SALARY", "0.0")
            .and().insertInto("USER_CREDENTIALS", 845L)
                .d("USERNAME", "\"cuq_NwWKc9XcJx3\"")
                .d("PASSWORD", "\"x\"")
                .d("ENABLED", "true")
                .d("ROLE", "\"ryed\"")
                .d("EMPLOYEE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/credentials/username/sanasaanouni?" + 
                    "password=_EM_4025_XYZ_&" + 
                    "username=t")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(11.0))
                .body("'username'", containsString("sanasaanouni"))
                .body("'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'enabled'", equalTo(true))
                .body("'role'", containsString("ROLE_EMP"));
    }
    
    
    /**
    * Calls:
    * (200) DELETE:/app/api/credentials/delete/{id}
    */
    @Test @Timeout(60)
    public void test_251_deleteOnCredentialsDeletWithQueryParamReturns200UsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .delete(baseUrlOfSut + "/app/api/credentials/delete/10?username=sanasaanouni")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("true"));
    }
    
    
    /**
    * Calls:
    * (200) DELETE:/app/api/credentials/username/{username}
    */
    @Test @Timeout(60)
    public void test_252_deleteOnUsernamReturns200UsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 884L)
                .d("ADR", "\"N_tzBdveLc\"")
                .d("POSTAL_CODE", "\"835ewtzd6FPkI2a\"")
                .d("CITY", "\"1tf3w8RyUQ\"")
            .and().insertInto("DEPARTMENTS", 883L)
                .d("DEPARTMENT_NAME", "\"CvY3vYlk1Gq\"")
            .and().insertInto("EMPLOYEES", 882L)
                .d("FIRST_NAME", "\"CL\"")
                .d("LAST_NAME", "\".\"")
                .d("EMAIL", "\"Eq@MRL.tWEY\"")
                .d("PHONE", "\"ihgea2vvVtyMpp5\"")
                .d("JOB", "\"_EM_4152_XYZ_\"")
                .d("SALARY", "0.13902850559572044")
            .and().insertInto("LOCATIONS", 881L)
                .d("ADR", "\"O0Aa7ggQ6zlU\"")
                .d("POSTAL_CODE", "\"cB\"")
                .d("CITY", "\"xySLF\"")
            .and().insertInto("DEPARTMENTS", 880L)
                .d("DEPARTMENT_NAME", "\"I7KaXjuKwx\"")
            .and().insertInto("EMPLOYEES", 879L)
                .d("FIRST_NAME", "\"_EM_4153_XYZ_\"")
                .d("LAST_NAME", "\"_EM_4154_XYZ_\"")
                .d("EMAIL", "\"MJr@E.Mq\"")
                .d("PHONE", "\"_EM_4155_XYZ_\"")
                .d("JOB", "\"ijZKX\"")
                .d("SALARY", "0.9598")
            .and().insertInto("LOCATIONS", 878L)
                .d("ADR", "\"K2zbAKZFA\"")
                .d("POSTAL_CODE", "\"RLnxe\"")
                .d("CITY", "\"_EM_4156_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 877L)
                .d("DEPARTMENT_NAME", "\"hiQQt_hsjsp\"")
            .and().insertInto("EMPLOYEES", 876L)
                .d("FIRST_NAME", "\"xC\"")
                .d("LAST_NAME", "\"hM\"")
                .d("EMAIL", "\"jzxV@s.Rj\"")
                .d("PHONE", "\"DaOXbBQasLwcq94A\"")
                .d("JOB", "\"_EM_4157_XYZ_\"")
                .d("SALARY", "0.3524888767618677")
            .and().insertInto("USER_CREDENTIALS", 875L)
                .d("USERNAME", "\"l\"")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "true")
                .d("ROLE", "\"\"")
                .d("EMPLOYEE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .delete(baseUrlOfSut + "/app/api/credentials/username/marwenmejri?" + 
                    "password=_EM_4150_XYZ_&" + 
                    "username=_EM_4151_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("true"));
    }
    
    
    /**
    * Calls:
    * (200) DELETE:/app/api/employees/username/{username}
    */
    @Test @Timeout(60)
    public void test_253_deleteOnEmployeesUsernamWithQueryParamsReturns200UsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1365L)
                .d("ADR", "\"G\"")
                .d("POSTAL_CODE", "\"_EM_4912_XYZ_\"")
                .d("CITY", "\"_EM_4913_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 1364L)
                .d("DEPARTMENT_NAME", "\"rhPQJ\"")
            .and().insertInto("EMPLOYEES", 1363L)
                .d("FIRST_NAME", "\"AWLcbN8a93a\"")
                .d("LAST_NAME", "\"Fv0HW6\"")
                .d("EMAIL", "\"We@CNj.EdtL\"")
                .d("PHONE", "\"_EM_4903_XYZ_A9\"")
                .d("JOB", "\"4vmuQIXfT\"")
                .d("SALARY", "3.1408761041252378")
            .and().insertInto("EMPLOYEES", 1360L)
                .d("FIRST_NAME", "\"0uD4GBNbW1L\"")
                .d("LAST_NAME", "\"CXgBl2W83Jtzwpq\"")
                .d("EMAIL", "\"bo@V.EzBv\"")
                .d("PHONE", "\"DkMaU3UUKj9U\"")
                .d("JOB", "\"7IgAuNKu\"")
                .d("SALARY", "1.502423678474481")
            .and().insertInto("USER_CREDENTIALS", 1356L)
                .d("USERNAME", "\"az7hlbDAk\"")
                .d("PASSWORD", "\"cEvXEpfosjOA2mn2\"")
                .d("ENABLED", "true")
                .d("ROLE", "\"d\"")
                .d("EMPLOYEE_ID", "14")
            .and().insertInto("PROJECTS", 3942L)
                .d("TITLE", "\"o7H8t\"")
                .d("STATUS", "\"OP9O87mI0PxV8q9f\"")
            .and().insertInto("LOCATIONS", 3941L)
                .d("ADR", "\"_EM_8700_XYZ_\"")
                .d("POSTAL_CODE", "\"GMtVWUx9N94\"")
                .d("CITY", "\"_EM_8701_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 3940L)
                .d("DEPARTMENT_NAME", "\"_EM_8702_XYZ_\"")
            .and().insertInto("EMPLOYEES", 3939L)
                .d("FIRST_NAME", "\"BGpmqUoR86rxRq\"")
                .d("LAST_NAME", "\"HUt53JM\"")
                .d("EMAIL", "\"Rm@zTH.uRy\"")
                .d("PHONE", "\"\"")
                .d("JOB", "\"l\"")
                .d("SALARY", "0.16818688337143994")
            .and().insertInto("LOCATIONS", 3938L)
                .d("ADR", "\"zPmF2NdY\"")
                .d("POSTAL_CODE", "\"pTSBihreptD\"")
                .d("CITY", "\"dvNscMzQqKbTqe5\"")
            .and().insertInto("DEPARTMENTS", 3937L)
                .d("DEPARTMENT_NAME", "\"129ZqB\"")
            .and().insertInto("EMPLOYEES", 3936L)
                .d("FIRST_NAME", "\"X\"")
                .d("LAST_NAME", "\"d\"")
                .d("EMAIL", "\"IjF@NVh.GST\"")
                .d("PHONE", "\"aCK7Tri\"")
                .d("JOB", "\"0kDZm\"")
                .d("SALARY", "0.11726316683480409")
            .and().insertInto("LOCATIONS", 3935L)
                .d("ADR", "\"_EM_8703_XYZ_\"")
                .d("POSTAL_CODE", "\"_HIBkSIUmJdD\"")
                .d("CITY", "\"Jayx\"")
            .and().insertInto("DEPARTMENTS", 3934L)
                .d("DEPARTMENT_NAME", "\"LNu8cMqG0AuIGfh\"")
            .and().insertInto("EMPLOYEES", 3933L)
                .d("FIRST_NAME", "\"taVdGU5HEZ13j\"")
                .d("LAST_NAME", "\"7rMnyejCpy5eRl\"")
                .d("EMAIL", "\"fcbi@oUf.UZ\"")
                .d("PHONE", "\"dx0oBx9\"")
                .d("JOB", "\"a\"")
                .d("SALARY", "0.6446426691658951")
            .and().insertInto("ASSIGNMENTS", 3932L)
                .d("EMPLOYEE_ID", "7")
                .d("PROJECT_ID", "4")
                .d("COMMIT_DATE", "\"1968-06-21 00:59:24\"")
                .d("COMMIT_EMP_DESC", "NULL")
                .d("COMMIT_MGR_DESC", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .delete(baseUrlOfSut + "/app/api/employees/username/sanasaanouni?" + 
                    "password=JYj1qRh0&" + 
                    "username=JbftLB")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("true"));
    }
    
    
    /**
    * Calls:
    * (200) DELETE:/app/api/employees/username/{username}
    */
    @Test @Timeout(60)
    public void test_254_deleteOnEmployeesUsernamWithQueryParamReturns200UsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1365L)
                .d("ADR", "\"G\"")
                .d("POSTAL_CODE", "\"_EM_4912_XYZ_\"")
                .d("CITY", "\"_EM_4913_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 1364L)
                .d("DEPARTMENT_NAME", "\"rhPQJ\"")
            .and().insertInto("EMPLOYEES", 1363L)
                .d("FIRST_NAME", "\"AWLcbN8a93a\"")
                .d("LAST_NAME", "\"Fv0HY6\"")
                .d("EMAIL", "\"We@CNj.EdtL\"")
                .d("PHONE", "\"_EM_4903_XYZ_A\"")
                .d("JOB", "\"4vmuQIXfT\"")
                .d("SALARY", "3.1408761041252378")
            .and().insertInto("EMPLOYEES", 1360L)
                .d("FIRST_NAME", "\"0uD4GBNbW1L\"")
                .d("LAST_NAME", "\"CXgBl2W83Jt~wpq\"")
                .d("EMAIL", "\"bo@V.EzBv\"")
                .d("PHONE", "\"DkMaU3UUKj9U\"")
                .d("JOB", "\"7IgAuNKu\"")
                .d("SALARY", "1.502423678474481")
            .and().insertInto("USER_CREDENTIALS", 1356L)
                .d("USERNAME", "\"az7hlbDAk\"")
                .d("PASSWORD", "\"cEvXEpfosjOA2mn2\"")
                .d("ENABLED", "false")
                .d("ROLE", "\"d\"")
                .r("EMPLOYEE_ID", 1363L)
            .and().insertInto("PROJECTS", 1376L)
            .and().insertInto("LOCATIONS", 1375L)
            .and().insertInto("DEPARTMENTS", 1374L)
            .and().insertInto("EMPLOYEES", 1373L)
                .d("EMAIL", "\"yPQIdjFGG8XT8\"")
                .d("PHONE", "\"72q4P0qRAL6S_\"")
            .and().insertInto("LOCATIONS", 1372L)
            .and().insertInto("DEPARTMENTS", 1371L)
            .and().insertInto("EMPLOYEES", 1370L)
                .d("EMAIL", "\"TweURZ4jzC\"")
                .d("PHONE", "\"_EM_8467_XYZ_\"")
            .and().insertInto("LOCATIONS", 1369L)
            .and().insertInto("DEPARTMENTS", 1368L)
            .and().insertInto("EMPLOYEES", 1367L)
                .d("EMAIL", "\"92NlJZQnbiH\"")
                .d("PHONE", "\"itPugrjnUUZPDrtO1\"")
            .and().insertInto("ASSIGNMENTS", 1366L)
                .d("EMPLOYEE_ID", "8")
                .d("PROJECT_ID", "9")
                .d("COMMIT_DATE", "\"1941-12-27 05:15:46\"")
                .d("COMMIT_EMP_DESC", "\"DDwNHXhsUpb\"")
                .d("COMMIT_MGR_DESC", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .delete(baseUrlOfSut + "/app/api/employees/username/sanasaanouni?username=AZz")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("true"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) PUT:/app/api/locations
    * 2 - (405) DELETE:/app/api/locations/delete/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_255_deleteOnDeletReturnsMismatchResponseWithSchema() throws Exception {
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"adr\": \"_EM_298_XYZ_\", " + 
                    " \"city\": \"CHARGUIA\", " + 
                    " \"locationId\": 894, " + 
                    " \"postalCode\": \"2016\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/locations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'locationId'", numberMatches(3.0))
                .body("'adr'", containsString("_EM_298_XYZ_"))
                .body("'postalCode'", containsString("2016"))
                .body("'city'", containsString("CHARGUIA"));
        String 
        location_locations__2 = "/app/api/locations" + "/" + res_0.extract().body().path("locationId").toString();
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 405 not defined for path '/api/locations/delete/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(resolveLocation(location_locations__2, baseUrlOfSut + "/app/api/locations/delete/H5JM"))
                .then()
                .statusCode(405)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/app/api/credentials
    * 2 - (405) DELETE:/app/api/credentials/delete/{id}
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_256_deleteOnCredentialsDeletReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/username'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"enabled\": true, " + 
                    " \"password\": \"$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2\", " + 
                    " \"role\": \"ROLE_ADMIN\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/credentials")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(15.0))
                .body("'username'", nullValue())
                .body("'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'enabled'", equalTo(true))
                .body("'role'", containsString("ROLE_ADMIN"));
        String 
        location_credentials__2 = "/app/api/credentials" + "/" + res_0.extract().body().path("credentialId").toString();
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 405 not defined for path '/api/credentials/delete/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .delete(resolveLocation(location_credentials__2, baseUrlOfSut + "/app/api/credentials/delete/_EM_1192_XYZ_"))
                .then()
                .statusCode(405)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) DELETE:/app/api/credentials/delete/{id}
    */
    @Test @Timeout(60)
    public void test_257_deleteOnCredentialsDeletWithQueryParamsReturns200UsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .delete(baseUrlOfSut + "/app/api/credentials/delete/10?" + 
                    "password=%242a%2410%246pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78%2FcvOprSR3lsZL2&" + 
                    "username=sanasaanouni")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("true"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/app/api/credentials
    * 2 - (405) DELETE:/app/api/credentials/username/{username}
    * Found 2 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_258_deleteOnUsernamReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/password'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"enabled\": true, " + 
                    " \"username\": \"18fcZ\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/credentials")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(15.0))
                .body("'username'", containsString("18fcZ"))
                .body("'password'", nullValue())
                .body("'enabled'", equalTo(true))
                .body("'role'", nullValue());
        String 
        location_credentials__2 = "/app/api/credentials" + "/" + res_0.extract().body().path("credentialId").toString();
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 405 not defined for path '/api/credentials/username/{username}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .delete(resolveLocation(location_credentials__2, baseUrlOfSut + "/app/api/credentials/username/_8y18QSQ1mcJtuk?password=VVy"))
                .then()
                .statusCode(405)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/app/api/credentials
    * 2 - (200) GET:/app/api/credentials/{id}
    * 3 - (400) DELETE:/app/api/projects/delete/{id}
    * Found 3 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_259_deleteOnProjectsDeletWithQueryParamEmptyUsernameUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 806L)
                .d("ADR", "\"p8z388\"")
                .d("POSTAL_CODE", "\"ii_LHQKIkGOVU4c\"")
                .d("CITY", "\"_EM_3796_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 805L)
                .d("DEPARTMENT_NAME", "\"k\"")
            .and().insertInto("EMPLOYEES", 804L)
                .d("FIRST_NAME", "\"6/JOCayQE\"")
                .d("LAST_NAME", "\"89YKnpwtr\"")
                .d("EMAIL", "\"pMFf@Ny.SK\"")
                .d("PHONE", "\"_EM_3797_XYZ_\"")
                .d("JOB", "\"L9Srq9gdJ\"")
                .d("SALARY", "0.9771249276377271")
            .and().insertInto("LOCATIONS", 803L)
                .d("ADR", "\"^\"")
                .d("POSTAL_CODE", "\"_EM_3781_XYZ_\"")
                .d("CITY", "\"rFZIzyz9Ok\"")
            .and().insertInto("DEPARTMENTS", 802L)
                .d("DEPARTMENT_NAME", "\"7uJ2e7J\"")
            .and().insertInto("EMPLOYEES", 801L)
                .d("FIRST_NAME", "\"oIAFJXrqYo_YUGFM\"")
                .d("LAST_NAME", "\"_EM_3798_XYZ_\"")
                .d("EMAIL", "\"hpSH@y.haY\"")
                .d("PHONE", "\"vCIIA7uJ3TKTB^n\"")
                .d("JOB", "\"_EM_3774_XYZ_\"")
                .d("SALARY", "2.044997140349349")
            .and().insertInto("LOCATIONS", 800L)
                .d("ADR", "\"_EM_3799_XYZ_\"")
                .d("POSTAL_CODE", "\"hVYIA3FSG7PP4U1U\"")
                .d("CITY", "\"_EM_3800_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 799L)
                .d("DEPARTMENT_NAME", "\"_EM_3801_XYZ_\"")
            .and().insertInto("EMPLOYEES", 798L)
                .d("FIRST_NAME", "\"_EM_3783_XYZ_\"")
                .d("LAST_NAME", "\"Ilj5azGK4MV3\"")
                .d("EMAIL", "\"VcT@Iln.WjX\"")
                .d("PHONE", "\"_EM_3784_XYZ_\"")
                .d("JOB", "\"_EM_3775_XYZ_\"")
                .d("SALARY", "0.8342075618794473")
            .and().insertInto("USER_CREDENTIALS", 797L)
                .d("USERNAME", "\"2kciS8bnNdR5OSqB\"")
                .d("PASSWORD", "\"Ys6zzHczB\"")
                .d("ENABLED", "false")
                .d("ROLE", "\"NMW26E8mKVw0vO\"")
                .d("EMPLOYEE_ID", "3")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/role'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 424, " + 
                    " \"enabled\": true, " + 
                    " \"password\": \"S1hSVTnEqdy1\", " + 
                    " \"username\": \"_EM_3780_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/credentials")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(16.0))
                .body("'username'", containsString("_EM_3780_XYZ_"))
                .body("'password'", containsString("S1hSVTnEqdy1"))
                .body("'enabled'", equalTo(true))
                .body("'role'", nullValue());
        String 
        location_credentials__20 = "/app/api/credentials" + "/" + res_0.extract().body().path("credentialId").toString();
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/role'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(resolveLocation(location_credentials__20, baseUrlOfSut + "/app/api/credentials/srhQ?username=_EM_3780_XYZ_"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(16.0))
                .body("'username'", containsString("_EM_3780_XYZ_"))
                .body("'password'", containsString("S1hSVTnEqdy1"))
                .body("'enabled'", equalTo(true))
                .body("'role'", nullValue());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/delete/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_EMP)
                .delete(baseUrlOfSut + "/app/api/projects/delete/A81_1jV?username=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"A81_1jV\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (200) DELETE:/app/api/credentials/username/{username}
    */
    @Test @Timeout(60)
    public void test_260_deleteOnUsernamReturns200UsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 884L)
                .d("ADR", "\"N_tzBdveLc\"")
                .d("POSTAL_CODE", "\"835ewtzd6FPkI2aW\"")
                .d("CITY", "\"1tf3w8RyUQ\"")
            .and().insertInto("DEPARTMENTS", 883L)
                .d("DEPARTMENT_NAME", "\"CvY3vYlk1Gq\"")
            .and().insertInto("EMPLOYEES", 882L)
                .d("FIRST_NAME", "\"CN\"")
                .d("LAST_NAME", "\".t\"")
                .d("EMAIL", "\"Eq@MRL.tWDY\"")
                .d("PHONE", "\"_EM_4160_XYZ_\"")
                .d("JOB", "\"7ZSyTsW\"")
                .d("SALARY", "0.13902850559572044")
            .and().insertInto("LOCATIONS", 881L)
                .d("ADR", "\"_EM_4161_XYZ_\"")
                .d("POSTAL_CODE", "\"cB\"")
                .d("CITY", "\"xySLF\"")
            .and().insertInto("DEPARTMENTS", 880L)
                .d("DEPARTMENT_NAME", "\"I7KaXjuKwx\"")
            .and().insertInto("EMPLOYEES", 879L)
                .d("FIRST_NAME", "\"_EM_4153_XYZ_\"")
                .d("LAST_NAME", "\"_EM_4162_XYZ_\"")
                .d("EMAIL", "\"MJr@E.Mq\"")
                .d("PHONE", "\"1xjRwS4\"")
                .d("JOB", "\"ijZKX\"")
                .d("SALARY", "0.9598")
            .and().insertInto("LOCATIONS", 878L)
                .d("ADR", "\"K2zbAKZFA\"")
                .d("POSTAL_CODE", "\"RLnxe\"")
                .d("CITY", "\"WPl3jSrlFEMtXk\"")
            .and().insertInto("DEPARTMENTS", 877L)
                .d("DEPARTMENT_NAME", "\"hiSQt_hsjsp\"")
            .and().insertInto("EMPLOYEES", 876L)
                .d("FIRST_NAME", "\"_EM_4163_XYZ_\"")
                .d("LAST_NAME", "\"hM\"")
                .d("EMAIL", "\"jzxV@s.Rj\"")
                .d("PHONE", "\"DaOXbBQasLwcq94A\"")
                .d("JOB", "\"_EM_4157_XYZ_\"")
                .d("SALARY", "0.35248887676187")
            .and().insertInto("USER_CREDENTIALS", 875L)
                .d("USERNAME", "\"_EM_4164_XYZ_\"")
                .d("PASSWORD", "\"vFdx\"")
                .d("ENABLED", "true")
                .d("ROLE", "\"\"")
                .r("EMPLOYEE_ID", 879L)
            .and().insertInto("LOCATIONS", 945L)
                .d("ADR", "\"_EM_4166_XYZ_\"")
                .d("POSTAL_CODE", "\"bFxPxGFmESyV\"")
                .d("CITY", "\"_EM_4167_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 944L)
                .d("DEPARTMENT_NAME", "\"2d6deOU1CX4dO\"")
            .and().insertInto("EMPLOYEES", 943L)
                .d("FIRST_NAME", "\"3_ryhYFgAGX\"")
                .d("LAST_NAME", "\"__ld99jF9kUc\"")
                .d("EMAIL", "\"pgq@X.cdx\"")
                .d("PHONE", "\"_EM_4168_XYZ_\"")
                .d("JOB", "\"dzFar\"")
                .d("SALARY", "0.8899517475533311")
            .and().insertInto("EMPLOYEES", 940L)
                .d("FIRST_NAME", "\"STk9MALQ3pe\"")
                .d("LAST_NAME", "\"FbF6BBI0zmpjih\"")
                .d("EMAIL", "\"UYMK@CDD.SsX\"")
                .d("PHONE", "\"FCs\"")
                .d("JOB", "\"fbm\"")
                .d("SALARY", "0.5967670316983216")
            .and().insertInto("ASSIGNMENTS", 936L)
                .d("EMPLOYEE_ID", "11")
                .d("PROJECT_ID", "6")
                .d("COMMIT_DATE", "\"1955-05-24 15:28:20\"")
                .d("COMMIT_EMP_DESC", "\"FF88NZedYrf0ri\"")
                .d("COMMIT_MGR_DESC", "\"pvb58yNq4N2zdb\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .delete(baseUrlOfSut + "/app/api/credentials/username/maryemtlemseni?" + 
                    "password=_EM_4150_XYZ_&" + 
                    "username=_EM_4159_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("true"));
    }
    
    
    /**
    * Calls:
    * 1 - (400) POST:/app/api/credentials/save
    * 2 - (400) POST:/app/api/employees
    * 3 - (400) PUT:/app/api/employees
    * 4 - (200) DELETE:/app/api/employees/username/{username}
    * Found 3 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_261_deleteOnEmployeesUsernamReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1365L)
                .d("ADR", "\"G\"")
                .d("POSTAL_CODE", "\"_EM_4912_XYZ_\"")
                .d("CITY", "\"_EM_4913_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 1364L)
                .d("DEPARTMENT_NAME", "\"rhPQJf\"")
            .and().insertInto("EMPLOYEES", 1363L)
                .d("FIRST_NAME", "\"AWLcbN8a93a\"")
                .d("LAST_NAME", "\"Fv0HY6\"")
                .d("EMAIL", "\"We@CNj.EctL\"")
                .d("PHONE", "\"h_EM_4903_XYZ_A\"")
                .d("JOB", "\"4vmuQIXfT\"")
                .d("SALARY", "3.1408761041252378")
            .and().insertInto("EMPLOYEES", 1360L)
                .d("FIRST_NAME", "\"0uD4GBNbW1L\"")
                .d("LAST_NAME", "\"UXUCl3W83Jt~wpq\"")
                .d("EMAIL", "\"cp@U.EzBv\"")
                .d("PHONE", "\"DkM_U3UUKj9U\"")
                .d("JOB", "\"7IgAuNKu\"")
                .d("SALARY", "1.502423678474481")
            .and().insertInto("USER_CREDENTIALS", 1356L)
                .d("USERNAME", "\"az7hlbDAk\"")
                .d("PASSWORD", "\"cEvXEpfosjOA2mn2\"")
                .d("ENABLED", "false")
                .d("ROLE", "\"d\"")
                .r("EMPLOYEE_ID", 1363L)
            .and().insertInto("LOCATIONS", 1375L)
            .and().insertInto("DEPARTMENTS", 1374L)
            .and().insertInto("EMPLOYEES", 1373L)
                .d("EMAIL", "\"yPQIdlFGG8XT8\"")
                .d("PHONE", "\"72q4P0qRAL6S_\"")
            .and().insertInto("LOCATIONS", 1372L)
            .and().insertInto("DEPARTMENTS", 1371L)
            .and().insertInto("EMPLOYEES", 1370L)
                .d("EMAIL", "\"TweURZ4jzC\"")
                .d("PHONE", "\"Ksr8bbzoL_\"")
            .and().insertInto("LOCATIONS", 1369L)
            .and().insertInto("DEPARTMENTS", 1368L)
            .and().insertInto("EMPLOYEES", 1367L)
                .d("EMAIL", "\"92NlJZQnbiH\"")
                .d("PHONE", "\"itPugrjnUUZPDrtO1\"")
            .and().insertInto("ASSIGNMENTS", 1366L)
                .r("EMPLOYEE_ID", 1370L)
                .d("PROJECT_ID", "9")
                .d("COMMIT_DATE", "\"1941-12-27 05:15:46\"")
                .d("COMMIT_EMP_DESC", "\"DDwNHXhsUpb\"")
                .d("COMMIT_MGR_DESC", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/credentials/save'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 370, " + 
                    " \"password\": \"j\", " + 
                    " \"role\": \"mEsi_og\", " + 
                    " \"username\": \"FLZBZ\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/credentials/save")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"credential\": { " + 
                    " \"credentialId\": 303, " + 
                    " \"enabled\": true, " + 
                    " \"password\": \"JHMe3N0rzlQuCl7J\", " + 
                    " \"role\": \"VpIXpLT1Ae0_\" " + 
                    " }, " + 
                    " \"email\": \"S5Xyd\", " + 
                    " \"employeeId\": 695, " + 
                    " \"hiredate\": \"yHHrXVeIs\", " + 
                    " \"job\": \"NvkLwcVlPZRH\", " + 
                    " \"salary\": 0.34986215957001254 " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/employees")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"yHHrXVeIs\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'yHHrXVeIs' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"yHHrXVeIs\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'yHHrXVeIs' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 153] (through reference chain: com.pfa.app.model.entity.Employee[\"hiredate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"credential\": { " + 
                    " \"credentialId\": 18, " + 
                    " \"password\": \"diF\", " + 
                    " \"role\": \"of\", " + 
                    " \"username\": \"Pjipypn\" " + 
                    " }, " + 
                    " \"employeeId\": 588, " + 
                    " \"job\": \"2tO\", " + 
                    " \"salary\": 0.2523191466263136 " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/employees?" + 
                    "password=7c5CdIs&" + 
                    "username=AZz")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", nullValue())
                .body("'status'", containsString("BAD_REQUEST"));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .delete(baseUrlOfSut + "/app/api/employees/username/sanasaanouni")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("true"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/app/api/locations
    * 2 - (400) DELETE:/app/api/locations/delete/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_262_deleteOnLocationsDeletReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 5237L)
                .d("ADR", "\"haN2\"")
                .d("POSTAL_CODE", "\"8_vUvcANdOT\"")
                .d("CITY", "\"Tm7Dd2YUB\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"adr\": \"fMVtw\", " + 
                    " \"city\": \"ArPi3wVS4NAqYosx\", " + 
                    " \"locationId\": 2, " + 
                    " \"postalCode\": \"2016\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/locations?" + 
                    "password=GeFN1jKdX&" + 
                    "username=_EM_9620_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'locationId'", numberMatches(2.0))
                .body("'adr'", containsString("fMVtw"))
                .body("'postalCode'", containsString("2016"))
                .body("'city'", containsString("ArPi3wVS4NAqYosx"));
        String 
        location_locations__2 = "/app/api/locations" + "/" + res_0.extract().body().path("locationId").toString();
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/locations/delete/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .delete(resolveLocation(location_locations__2, baseUrlOfSut + "/app/api/locations/delete/-126"))
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Location object FOUND! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/assignments/{employeeId}/{projectId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_263_getOnWithQueryParamsReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1620L)
                .d("ADR", "\"S]AbWA\"")
                .d("POSTAL_CODE", "\"y3yhsg7rP2NcRIg\"")
                .d("CITY", "\"_EM_5386_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 1619L)
                .d("DEPARTMENT_NAME", "\"sI23bvEWsb\"")
            .and().insertInto("EMPLOYEES", 1618L)
                .d("FIRST_NAME", "\"XhC0\"")
                .d("LAST_NAME", "\"_EM_5582_XYZ_\"")
                .d("EMAIL", "\"QH@X.UJ\"")
                .d("PHONE", "\"BLt4rDYUnu\"")
                .d("JOB", "\"A5PsX7n5PDw7NTY\"")
                .d("SALARY", "0.6355764862062817")
            .and().insertInto("EMPLOYEES", 1615L)
                .d("FIRST_NAME", "\"ix9W65x_\"")
                .d("LAST_NAME", "\"_EM_5583_XYZ_\"")
                .d("EMAIL", "\"kef@vbv.OU\"")
                .d("PHONE", "\"ogDBdyKl5J\"")
                .d("JOB", "\"m5yD103b\"")
                .d("SALARY", "1.9")
            .and().insertInto("USER_CREDENTIALS", 1611L)
                .d("USERNAME", "\"VzME4R9hjUl\"")
                .d("PASSWORD", "\"_EM_5584_XYZ_\"")
                .d("ENABLED", "false")
                .d("ROLE", "\"_EM_5585_XYZ_\"")
                .d("EMPLOYEE_ID", "NULL")
            .and().insertInto("PROJECTS", 1569L)
                .d("TITLE", "\"Gy9qF14M2i:\"")
                .d("STATUS", "\"qs_7c4\"")
            .and().insertInto("LOCATIONS", 1568L)
                .d("ADR", "\"_EM_5568_XYZ_e\"")
                .d("POSTAL_CODE", "\"G\"")
                .d("CITY", "\"zTMadiK5ej_wNhzl\"")
            .and().insertInto("DEPARTMENTS", 1567L)
                .d("DEPARTMENT_NAME", "\"Billingk\"")
            .and().insertInto("EMPLOYEES", 1566L)
                .d("FIRST_NAME", "\"054Lr8a1UD3cqA\"")
                .d("LAST_NAME", "\"_EM_5388_XYZ_7\"")
                .d("EMAIL", "\"gmWB@yDB.tih\"")
                .d("PHONE", "\"_EM_5339_XYZ_\"")
                .d("JOB", "\"T\"")
                .d("SALARY", "-1836.1717721682587")
            .and().insertInto("EMPLOYEES", 1563L)
                .d("FIRST_NAME", "\"elYS3AXFIqMW\"")
                .d("LAST_NAME", "\"_EM_5341_XYZ_\"")
                .d("EMAIL", "\"KxZ@TEE.EtMC\"")
                .d("PHONE", "\"Tmfqc6uohhk\"")
                .d("JOB", "\"1X4lSi8c\"")
                .d("SALARY", "18889.314188789744")
            .and().insertInto("USER_CREDENTIALS", 1580L)
                .d("USERNAME", "NULL")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "true")
                .d("ROLE", "\"AK9jTW_RweDl_S\"")
                .r("EMPLOYEE_ID", 1566L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/{employeeId}/{projectId}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/assignments/_EM_5384_XYZ_/bpQNYk9WSun?" + 
                    "password=_EM_5567_XYZ_&" + 
                    "username=_EM_5383_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("HttpStatus must not be null"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/assignments/{employeeId}/{projectId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_264_getOnAssignReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/{employeeId}/{projectId}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/assignments/s/IKDk17DNL?EMextraParam123=_EM_511_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("HttpStatus must not be null"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/assignments/{employeeId}/{projectId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_265_getOnWithQueryParamEmptyPasswordReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1620L)
                .d("ADR", "\"SaAbWA\"")
                .d("POSTAL_CODE", "\"y3yhsg7rP2NcSIg\"")
                .d("CITY", "\"OnG\"")
            .and().insertInto("DEPARTMENTS", 1619L)
                .d("DEPARTMENT_NAME", "\"sI23bvEWsb\"")
            .and().insertInto("EMPLOYEES", 1618L)
                .d("FIRST_NAME", "\"WhC0\"")
                .d("LAST_NAME", "\"k\"")
                .d("EMAIL", "\"PH@W.VI\"")
                .d("PHONE", "\"BLt4rDYUou\"")
                .d("JOB", "\"A5PsX7n5PDw7NTY\"")
                .d("SALARY", "0.6355764862062817")
            .and().insertInto("EMPLOYEES", 1615L)
                .d("FIRST_NAME", "\"ix9W65x_\"")
                .d("LAST_NAME", "\"Kg98lSG\"")
                .d("EMAIL", "\"kff@vbv.PT\"")
                .d("PHONE", "\"ogDBdyKl5J\"")
                .d("JOB", "\"m5yD103b\"")
                .d("SALARY", "0.8")
            .and().insertInto("USER_CREDENTIALS", 1611L)
                .d("USERNAME", "\"VzME4R9hjUl\"")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "false")
                .d("ROLE", "\"_EM_5395_XYZ_\"")
                .d("EMPLOYEE_ID", "NULL")
            .and().insertInto("PROJECTS", 1569L)
                .d("TITLE", "\"_EM_5337_XYZ_\"")
                .d("STATUS", "\"qs_7c4\"")
            .and().insertInto("LOCATIONS", 1568L)
                .d("ADR", "\"_EM_3719_XYZ_\"")
                .d("POSTAL_CODE", "\"G\"")
                .d("CITY", "\"CIgoexy1eG0y\"")
            .and().insertInto("DEPARTMENTS", 1567L)
                .d("DEPARTMENT_NAME", "\"Billing\"")
            .and().insertInto("EMPLOYEES", 1566L)
                .d("FIRST_NAME", "\"054Lq8a1UD3cqA\"")
                .d("LAST_NAME", "\"_EM_5388_XYZ_\"")
                .d("EMAIL", "\"gmWB@yDA.tih\"")
                .d("PHONE", "\"_EM_5339_XYZ_\"")
                .d("JOB", "\"P\"")
                .d("SALARY", "0.0")
            .and().insertInto("EMPLOYEES", 1563L)
                .d("FIRST_NAME", "\"_EM_5340_XYZ_\"")
                .d("LAST_NAME", "\"_EM_5341_XYZ_\"")
                .d("EMAIL", "\"Kxa@TFE.EtMC\"")
                .d("PHONE", "\"Tmfqc6uophk\"")
                .d("JOB", "\"_EM_5342_XYZ_\"")
                .d("SALARY", "0.8524167800005203")
            .and().insertInto("USER_CREDENTIALS", 1580L)
                .d("USERNAME", "NULL")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "false")
                .d("ROLE", "\"AK9jTW_RweDl_S\"")
                .r("EMPLOYEE_ID", 1566L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/{employeeId}/{projectId}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/assignments/_EM_5384_XYZ_/bpQNYk9WSun?password=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("HttpStatus must not be null"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/credentials/username/{username}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_266_getOnCredentialsUsernamWithQueryParamsEmptyPasswordUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1620L)
                .d("ADR", "\"SaAbWA\"")
                .d("POSTAL_CODE", "\"y3yhsg7rP2NcSIg\"")
                .d("CITY", "\"OnG\"")
            .and().insertInto("DEPARTMENTS", 1619L)
                .d("DEPARTMENT_NAME", "\"sI23bvEWsb\"")
            .and().insertInto("EMPLOYEES", 1618L)
                .d("FIRST_NAME", "\"WhC0\"")
                .d("LAST_NAME", "\"k\"")
                .d("EMAIL", "\"PH@W.VI\"")
                .d("PHONE", "\"BLt4rDYUou\"")
                .d("JOB", "\"A5PsX7n5PDw7NTY\"")
                .d("SALARY", "0.6355764862062817")
            .and().insertInto("EMPLOYEES", 1615L)
                .d("FIRST_NAME", "\"ix9W65x_\"")
                .d("LAST_NAME", "\"Kg98lSG\"")
                .d("EMAIL", "\"kff@vbv.PT\"")
                .d("PHONE", "\"ogDBdyKl5J\"")
                .d("JOB", "\"m5yD103b\"")
                .d("SALARY", "0.8")
            .and().insertInto("USER_CREDENTIALS", 1611L)
                .d("USERNAME", "\"VzME4R9hjUl\"")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "false")
                .d("ROLE", "\"_EM_5395_XYZ_\"")
                .d("EMPLOYEE_ID", "NULL")
            .and().insertInto("PROJECTS", 1569L)
                .d("TITLE", "\"_EM_5337_XYZ_\"")
                .d("STATUS", "\"qs_7c4\"")
            .and().insertInto("LOCATIONS", 1568L)
                .d("ADR", "\"_EM_3719_XYZ_\"")
                .d("POSTAL_CODE", "\"G\"")
                .d("CITY", "\"CIgoexy1eG0y\"")
            .and().insertInto("DEPARTMENTS", 1567L)
                .d("DEPARTMENT_NAME", "\"Billing\"")
            .and().insertInto("EMPLOYEES", 1566L)
                .d("FIRST_NAME", "\"054Lq8a1UD3cqA\"")
                .d("LAST_NAME", "\"_EM_5388_XYZ_\"")
                .d("EMAIL", "\"gmWB@yDA.tih\"")
                .d("PHONE", "\"_EM_5339_XYZ_\"")
                .d("JOB", "\"P\"")
                .d("SALARY", "0.0")
            .and().insertInto("EMPLOYEES", 1563L)
                .d("FIRST_NAME", "\"_EM_5340_XYZ_\"")
                .d("LAST_NAME", "\"_EM_5341_XYZ_\"")
                .d("EMAIL", "\"Kxa@TFE.EtMC\"")
                .d("PHONE", "\"Tmfqc6uophk\"")
                .d("JOB", "\"_EM_5342_XYZ_\"")
                .d("SALARY", "0.8524167800005203")
            .and().insertInto("USER_CREDENTIALS", 1580L)
                .d("USERNAME", "NULL")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "false")
                .d("ROLE", "\"AK9jTW_RweDl_S\"")
                .r("EMPLOYEE_ID", 1566L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/credentials/username/{username}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/credentials/username/9T1~K?" + 
                    "password=&" + 
                    "username=9T1%7EK")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Credential object FOUND with username: 9T1~K ! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/employees/username/{username}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_267_getOnUsernamReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 976L)
            .and().insertInto("DEPARTMENTS", 975L)
            .and().insertInto("EMPLOYEES", 974L)
                .d("EMAIL", "\"_EM_4334_XYZ_\"")
                .d("PHONE", "\"_EM_4366_XYZ_\"")
            .and().insertInto("LOCATIONS", 973L)
            .and().insertInto("DEPARTMENTS", 972L)
            .and().insertInto("EMPLOYEES", 971L)
                .d("EMAIL", "\"KlZELrp\"")
                .d("PHONE", "\"_EM_4367_XYZ_\"")
            .and().insertInto("LOCATIONS", 970L)
            .and().insertInto("DEPARTMENTS", 969L)
            .and().insertInto("EMPLOYEES", 968L)
                .d("EMAIL", "\"_EM_4335_XYZ_\"")
                .d("PHONE", "\"y4RrOA\"")
            .and().insertInto("USER_CREDENTIALS", 967L)
                .d("USERNAME", "\"nb3qgAgKMqO\"")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "true")
                .d("ROLE", "\"HDqnUDgLUVAM5\"")
                .d("EMPLOYEE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/username/{username}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/employees/username/_EM_3181_XYZ_?" + 
                    "password=_EM_3183_XYZ_&" + 
                    "username=ceudEd")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Credential object FOUND with username: _EM_3181_XYZ_ ! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/credentials/username/{username}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_268_getOnUsernamReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/credentials/username/{username}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_519_XYZ_")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/credentials/username/_EM_518_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Credential object FOUND with username: _EM_518_XYZ_ ! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/credentials/username/{username}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_269_getOnUsernamReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1620L)
                .d("ADR", "\"S]AbWA\"")
                .d("POSTAL_CODE", "\"y3yhsg7rP2NcRIg\"")
                .d("CITY", "\"_EM_5386_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 1619L)
                .d("DEPARTMENT_NAME", "\"sI23bvEWsb\"")
            .and().insertInto("EMPLOYEES", 1618L)
                .d("FIRST_NAME", "\"XhC0\"")
                .d("LAST_NAME", "\"_EM_5582_XYZ_\"")
                .d("EMAIL", "\"QH@X.UJ\"")
                .d("PHONE", "\"BLt4rDYUnu\"")
                .d("JOB", "\"A5PsX7n5PDw7NTY\"")
                .d("SALARY", "0.6355764862062817")
            .and().insertInto("EMPLOYEES", 1615L)
                .d("FIRST_NAME", "\"ix9W65x_\"")
                .d("LAST_NAME", "\"_EM_5583_XYZ_\"")
                .d("EMAIL", "\"kef@vbv.OU\"")
                .d("PHONE", "\"ogDBdyKl5J\"")
                .d("JOB", "\"m5yD103b\"")
                .d("SALARY", "1.9")
            .and().insertInto("USER_CREDENTIALS", 1611L)
                .d("USERNAME", "\"VzME4R9hjUl\"")
                .d("PASSWORD", "\"_EM_5584_XYZ_\"")
                .d("ENABLED", "false")
                .d("ROLE", "\"_EM_5585_XYZ_\"")
                .d("EMPLOYEE_ID", "NULL")
            .and().insertInto("PROJECTS", 1569L)
                .d("TITLE", "\"Gy9qF14M2i:\"")
                .d("STATUS", "\"qs_7c4\"")
            .and().insertInto("LOCATIONS", 1568L)
                .d("ADR", "\"_EM_5568_XYZ_e\"")
                .d("POSTAL_CODE", "\"G\"")
                .d("CITY", "\"zTMadiK5ej_wNhzl\"")
            .and().insertInto("DEPARTMENTS", 1567L)
                .d("DEPARTMENT_NAME", "\"Billingk\"")
            .and().insertInto("EMPLOYEES", 1566L)
                .d("FIRST_NAME", "\"054Lr8a1UD3cqA\"")
                .d("LAST_NAME", "\"_EM_5388_XYZ_7\"")
                .d("EMAIL", "\"gmWB@yDB.tih\"")
                .d("PHONE", "\"_EM_5339_XYZ_\"")
                .d("JOB", "\"T\"")
                .d("SALARY", "-1836.1717721682587")
            .and().insertInto("EMPLOYEES", 1563L)
                .d("FIRST_NAME", "\"elYS3AXFIqMW\"")
                .d("LAST_NAME", "\"_EM_5341_XYZ_\"")
                .d("EMAIL", "\"KxZ@TEE.EtMC\"")
                .d("PHONE", "\"Tmfqc6uohhk\"")
                .d("JOB", "\"1X4lSi8c\"")
                .d("SALARY", "18889.314188789744")
            .and().insertInto("USER_CREDENTIALS", 1580L)
                .d("USERNAME", "NULL")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "true")
                .d("ROLE", "\"AK9jTW_RweDl_S\"")
                .r("EMPLOYEE_ID", 1566L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/credentials/username/{username}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/credentials/username/_EM_5383_XYZ_?password=_EM_5567_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Credential object FOUND with username: _EM_5383_XYZ_ ! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/credentials/username/{username}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_270_getOnUsernamReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/credentials/username/{username}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/credentials/username/_EM_1397_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Credential object FOUND with username: _EM_1397_XYZ_ ! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/employees/username/{username}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_271_getOnUsernamReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 986L)
                .d("ADR", "\"AVkjLVBn44x\"")
                .d("POSTAL_CODE", "\"mfZ2gYqTfJO\"")
                .d("CITY", "\"_EM_4346_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 985L)
                .d("DEPARTMENT_NAME", "\"_EM_4347_XYZ_\"")
            .and().insertInto("EMPLOYEES", 984L)
                .d("FIRST_NAME", "\"p6RIzoIQUzcoha\"")
                .d("LAST_NAME", "\"_EM_4348_XYZ_\"")
                .d("EMAIL", "\"mRk@QE.xFZh\"")
                .d("PHONE", "\"jIjBh5toIOZ\"")
                .d("JOB", "\"Fg34QqR\"")
                .d("SALARY", "0.6351130821005029")
            .and().insertInto("EMPLOYEES", 981L)
                .d("FIRST_NAME", "\"d\"")
                .d("LAST_NAME", "\"bra1v\"")
                .d("EMAIL", "\"Ki@bQx.eQN\"")
                .d("PHONE", "\"_EM_4349_XYZ_\"")
                .d("JOB", "\"gy\"")
                .d("SALARY", "0.8065160373800221")
            .and().insertInto("USER_CREDENTIALS", 977L)
                .d("USERNAME", "\"Wc4gw\"")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "true")
                .d("ROLE", "\"_EM_4350_XYZ_\"")
                .d("EMPLOYEE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/username/{username}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/employees/username/_EM_3181_XYZ_?" + 
                    "password=ZxaJFsVNUUnsr&" + 
                    "username=ceudEd")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Credential object FOUND with username: _EM_3181_XYZ_ ! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/employees/username/{username}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_272_getOnUsernamReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1036L)
                .d("ADR", "\"_EM_4376_XYZ_\"")
                .d("POSTAL_CODE", "\"fq0nXYC3WjQ4pl\"")
                .d("CITY", "\"SDAIxyzUGyeZngj\"")
            .and().insertInto("DEPARTMENTS", 1035L)
                .d("DEPARTMENT_NAME", "\"n\"")
            .and().insertInto("EMPLOYEES", 1034L)
                .d("FIRST_NAME", "\"yDVVmnaC4mQS\"")
                .d("LAST_NAME", "\"Q2nMqZLWmM8zE\"")
                .d("EMAIL", "\"Ec@rLi.vsi\"")
                .d("PHONE", "\"JMAMbNh\"")
                .d("JOB", "\"zKnPrgLg1vqPgTV\"")
                .d("SALARY", "2.4693969409650243")
            .and().insertInto("LOCATIONS", 1033L)
                .d("ADR", "\"?\"")
                .d("POSTAL_CODE", "\"yIo6boDW6gcvWRea\"")
                .d("CITY", "\"FFoU5mfv\"")
            .and().insertInto("DEPARTMENTS", 1032L)
                .d("DEPARTMENT_NAME", "\"AU\"")
            .and().insertInto("EMPLOYEES", 1031L)
                .d("FIRST_NAME", "\"Lau_hQ3A07x\"")
                .d("LAST_NAME", "\"HvZg\"")
                .d("EMAIL", "\"rW@y.HZ\"")
                .d("PHONE", "\"uph\"")
                .d("JOB", "\"Cy\"")
                .d("SALARY", "0.6885796852074761")
            .and().insertInto("LOCATIONS", 1030L)
                .d("ADR", "\"NwbKm0g6pj2t5_9O\"")
                .d("POSTAL_CODE", "\"_EM_4377_XYZ_\"")
                .d("CITY", "\"Se0JwwUcYSL\"")
            .and().insertInto("DEPARTMENTS", 1029L)
                .d("DEPARTMENT_NAME", "\"_EM_4378_XYZ_\"")
            .and().insertInto("EMPLOYEES", 1028L)
                .d("FIRST_NAME", "\"_EM_4379_XYZ_\"")
                .d("LAST_NAME", "\"ouS\"")
                .d("EMAIL", "\"RYt@QRh.Ap\"")
                .d("PHONE", "\"\"")
                .d("JOB", "\"bwvHXAlJ\"")
                .d("SALARY", "0.8")
            .and().insertInto("USER_CREDENTIALS", 1027L)
                .d("USERNAME", "\"9EBvsFfKj\"")
                .d("PASSWORD", "\"M\"")
                .d("ENABLED", "false")
                .d("ROLE", "\"1yYpPzcKbG2si\"")
                .d("EMPLOYEE_ID", "3")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/username/{username}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/employees/username/_EM_4373_XYZ_?" + 
                    "password=_EM_4374_XYZ_&" + 
                    "username=_EM_4375_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Credential object FOUND with username: _EM_4373_XYZ_ ! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/employees/username/{username}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_273_getOnUsernamReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1006L)
                .d("ADR", "\"Ac\"")
                .d("POSTAL_CODE", "\"yt8R4QGiHtFLi4l\"")
                .d("CITY", "\"vJxAWaoPwZoPw\"")
            .and().insertInto("DEPARTMENTS", 1005L)
                .d("DEPARTMENT_NAME", "\"uukG\"")
            .and().insertInto("EMPLOYEES", 1004L)
                .d("FIRST_NAME", "\"xo_xPC2kg3K\"")
                .d("LAST_NAME", "\"EnZjyKFZr\"")
                .d("EMAIL", "\"cVy@H.avj\"")
                .d("PHONE", "\"dsvr\"")
                .d("JOB", "\"Q\"")
                .d("SALARY", "0.6001815552975356")
            .and().insertInto("LOCATIONS", 1003L)
                .d("ADR", "\"eIINd\"")
                .d("POSTAL_CODE", "\"r4rMMIfavq\"")
                .d("CITY", "\"SzIiUze\"")
            .and().insertInto("DEPARTMENTS", 1002L)
                .d("DEPARTMENT_NAME", "\"_EM_4633_XYZ_\"")
            .and().insertInto("EMPLOYEES", 1001L)
                .d("FIRST_NAME", "\"YlQvjgMXe43g\"")
                .d("LAST_NAME", "\"U[_XNAUcnh2hoBf\"")
                .d("EMAIL", "\"RgWm@dqu.SC\"")
                .d("PHONE", "\"UgN\"")
                .d("JOB", "\"J9taD7nDL3oOq\"")
                .d("SALARY", "0.5600389872462136")
            .and().insertInto("LOCATIONS", 1000L)
                .d("ADR", "\"CK8eNN\"")
                .d("POSTAL_CODE", "\"AQt4\"")
                .d("CITY", "\"2kJ0lRmlcPPD\"")
            .and().insertInto("DEPARTMENTS", 999L)
                .d("DEPARTMENT_NAME", "\"h\"")
            .and().insertInto("EMPLOYEES", 998L)
                .d("FIRST_NAME", "\"WTr7aYlDIUfCq\"")
                .d("LAST_NAME", "\"D\"")
                .d("EMAIL", "\"sg@YO.cXj\"")
                .d("PHONE", "\"iNB5b97x\"")
                .d("JOB", "\"_EM_4634_XYZ_\"")
                .d("SALARY", "0.18715265642167211")
            .and().insertInto("USER_CREDENTIALS", 997L)
                .d("USERNAME", "\"GfJOnUv2mh\"")
                .d("PASSWORD", "\"StTB1LOPbhKo\"")
                .d("ENABLED", "false")
                .d("ROLE", "\"dU7SUmUUU\"")
                .d("EMPLOYEE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/username/{username}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/employees/username/_EM_4632_XYZ_?" + 
                    "password=bYgQoIO6yqo&" + 
                    "username=FAEaSGjLA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Credential object FOUND with username: _EM_4632_XYZ_ ! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/credentials/username/{username}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_274_getOnCredentialsUsernamWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1609L)
                .d("ADR", "\"QAh0M\"")
                .d("POSTAL_CODE", "\"_EM_5362_XYZ_\"")
                .d("CITY", "\"_EM_5363_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 1608L)
                .d("DEPARTMENT_NAME", "\"sHS\"")
            .and().insertInto("EMPLOYEES", 1607L)
                .d("FIRST_NAME", "\"saxJl9t0fZ1gc3ER\"")
                .d("LAST_NAME", "\"_EM_5364_XYZ_\"")
                .d("EMAIL", "\"jk@jZ.fdy\"")
                .d("PHONE", "\"vNsEVgjzSgoTL\"")
                .d("JOB", "\"fGPlm_y5Q\"")
                .d("SALARY", "1.7889506955613577")
            .and().insertInto("EMPLOYEES", 1604L)
                .d("FIRST_NAME", "\"98WF\"")
                .d("LAST_NAME", "\"O\"")
                .d("EMAIL", "\"Ps@dO.jJGV\"")
                .d("PHONE", "\"I\"")
                .d("JOB", "\"xJqhZ6OGaAm\"")
                .d("SALARY", "0.06290188018689713")
            .and().insertInto("USER_CREDENTIALS", 1600L)
                .d("USERNAME", "\"dDvj7VcZYCh\"")
                .d("PASSWORD", "\"5anhB3z6nTqeyj\"")
                .d("ENABLED", "false")
                .d("ROLE", "\"n\"")
                .d("EMPLOYEE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/credentials/username/{username}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/credentials/username/_EM_5360_XYZ_?" + 
                    "password=_EM_5361_XYZ_&" + 
                    "username=R0Wf1vMVvq0")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Credential object FOUND with username: _EM_5360_XYZ_ ! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/credentials/username/{username}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_275_getOnUsernamReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1670L)
                .d("ADR", "\"n0cf1I\"")
                .d("POSTAL_CODE", "\"_EM_5441_XYZ_\"")
                .d("CITY", "\"_EM_5442_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 1669L)
                .d("DEPARTMENT_NAME", "\"OQPByapixGyIAf\"")
            .and().insertInto("EMPLOYEES", 1668L)
                .d("FIRST_NAME", "\"MVr1COYGsj\"")
                .d("LAST_NAME", "\"gi_f2XSqr2z\"")
                .d("EMAIL", "\"cJo@O.Obf\"")
                .d("PHONE", "\"QVu/\"")
                .d("JOB", "\"W86erl7\"")
                .d("SALARY", "0.30412")
            .and().insertInto("LOCATIONS", 1667L)
                .d("ADR", "\"t02FJ_M_TCvwVL3p\"")
                .d("POSTAL_CODE", "\"_EM_5443_XYZ_\"")
                .d("CITY", "\"PG4lI\"")
            .and().insertInto("DEPARTMENTS", 1666L)
                .d("DEPARTMENT_NAME", "\"_EM_5444_XYZ_\"")
            .and().insertInto("EMPLOYEES", 1665L)
                .d("FIRST_NAME", "\"tq97\"")
                .d("LAST_NAME", "\"uNwTkjD7i\"")
                .d("EMAIL", "\"mnha@yS.Ja\"")
                .d("PHONE", "\"UIn1\"")
                .d("JOB", "\"SPoVJXL\"")
                .d("SALARY", "0.1970857905289598")
            .and().insertInto("LOCATIONS", 1664L)
                .d("ADR", "\"O80Xkw\"")
                .d("POSTAL_CODE", "\"_EM_5445_XYZ_\"")
                .d("CITY", "\"_EM_5446_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 1663L)
                .d("DEPARTMENT_NAME", "\"rd_Z0tSDF4mMvVoZ\"")
            .and().insertInto("EMPLOYEES", 1662L)
                .d("FIRST_NAME", "\"ZUbCF4_ehN\"")
                .d("LAST_NAME", "\"f5emN19Mlsd\"")
                .d("EMAIL", "\"SV@U.zQR\"")
                .d("PHONE", "\"ff\"")
                .d("JOB", "\"dv\"")
                .d("SALARY", "0.5229042392")
            .and().insertInto("USER_CREDENTIALS", 1661L)
                .d("USERNAME", "\"5P1\"")
                .d("PASSWORD", "\"VEWsCdU9cVljbqVB\"")
                .d("ENABLED", "true")
                .d("ROLE", "\"4tc2LfugHXQ80\"")
                .d("EMPLOYEE_ID", "NULL")
            .and().insertInto("LOCATIONS", 773L)
                .d("ADR", "\"FYf9dgnWcY4HV\"")
                .d("POSTAL_CODE", "\"d8GT66Tcn6F5tzAZ\"")
                .d("CITY", "\"CHARGUIA\"")
            .and().insertInto("DEPARTMENTS", 772L)
                .d("DEPARTMENT_NAME", "\"89QF8aY\"")
            .and().insertInto("EMPLOYEES", 771L)
                .d("FIRST_NAME", "\"NeGJHhI\"")
                .d("LAST_NAME", "\"KHLjtF\"")
                .d("EMAIL", "\"jBsP@r.SQa\"")
                .d("PHONE", "\"3c\"")
                .d("JOB", "\"s\"")
                .d("SALARY", "-0.6197727130852351")
            .and().insertInto("EMPLOYEES", 768L)
                .d("FIRST_NAME", "\"Badq\"")
                .d("LAST_NAME", "\"ST5HynKjevUawZ\"")
                .d("EMAIL", "\"KRM@kF.ZUHo\"")
                .d("PHONE", "\"_EM_5447_XYZ_\"")
                .d("JOB", "\"_EM_3665_XYZ_\"")
                .d("SALARY", "0.8253582572970452")
            .and().insertInto("USER_CREDENTIALS", 764L)
                .d("USERNAME", "\"\\7Fq04ac2UA\"")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "false")
                .d("ROLE", "\"\"")
                .d("EMPLOYEE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/credentials/username/{username}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/credentials/username/%5C7Fq04ac2UA?username=%5C7Fq04ac2UA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/credentials/delete/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_276_deleteOnCredentialsDeletWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/credentials/delete/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .delete(baseUrlOfSut + "/app/api/credentials/delete/_EM_512_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"_EM_512_XYZ_\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/departments/delete/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_277_deleteOnDepartmentsDeletWithQueryParamsUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 2987L)
            .and().insertInto("DEPARTMENTS", 2986L)
            .and().insertInto("EMPLOYEES", 2985L)
                .d("EMAIL", "\"r25\"")
                .d("PHONE", "\"4TDsr02AlZH2\"")
            .and().insertInto("EMPLOYEES", 2982L)
                .d("EMAIL", "\"42\"")
                .d("PHONE", "\"[7i\"")
            .and().insertInto("USER_CREDENTIALS", 2978L)
                .d("USERNAME", "\"lEti\"")
                .d("PASSWORD", "\"_EM_7790_XYZ_\"")
                .d("ENABLED", "true")
                .d("ROLE", "\"MUDcCy\"")
                .d("EMPLOYEE_ID", "NULL")
            .and().insertInto("PROJECTS", 2988L)
                .d("TITLE", "\"xHSbOAAa05m\"")
                .d("START_DATE", "NULL")
                .d("END_DATE", "NULL")
                .d("STATUS", "\"kjV3vn2eo70l\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/departments/delete/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .delete(baseUrlOfSut + "/app/api/departments/delete/867?" + 
                    "password=MmK&" + 
                    "username=j8A8EzcGOCI2y0")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Department object FOUND! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/projects/delete/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_278_deleteOnProjectsDeletWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/delete/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_MGR)
                .delete(baseUrlOfSut + "/app/api/projects/delete/999?" + 
                    "password=Gkj_PUH&" + 
                    "username=97yh")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Project object FOUND! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/locations/delete/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_279_deleteOnDeletReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/locations/delete/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .delete(baseUrlOfSut + "/app/api/locations/delete/898")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Location object FOUND! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/employees/delete/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_280_deleteOnEmployeesDeletWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/delete/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .delete(baseUrlOfSut + "/app/api/employees/delete/976?" + 
                    "password=a_bz&" + 
                    "username=_EM_2357_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Employee object FOUND! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/locations/delete/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_281_deleteOnDeletReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/locations/delete/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .delete(baseUrlOfSut + "/app/api/locations/delete/_EM_973_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"_EM_973_XYZ_\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/projects/delete/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_282_deleteOnProjectsDeletWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 2987L)
            .and().insertInto("DEPARTMENTS", 2986L)
            .and().insertInto("EMPLOYEES", 2985L)
                .d("EMAIL", "\"r25\"")
                .d("PHONE", "\"4TDsr02AlZH2\"")
            .and().insertInto("EMPLOYEES", 2982L)
                .d("EMAIL", "\"42\"")
                .d("PHONE", "\"[7i\"")
            .and().insertInto("USER_CREDENTIALS", 2978L)
                .d("USERNAME", "\"lEti\"")
                .d("PASSWORD", "\"_EM_7790_XYZ_\"")
                .d("ENABLED", "true")
                .d("ROLE", "\"MUDcCy\"")
                .d("EMPLOYEE_ID", "NULL")
            .and().insertInto("PROJECTS", 2988L)
                .d("TITLE", "\"xHSbOAAa05m\"")
                .d("START_DATE", "NULL")
                .d("END_DATE", "NULL")
                .d("STATUS", "\"kjV3vn2eo70l\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/delete/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .delete(baseUrlOfSut + "/app/api/projects/delete/999?username=jUUnbm3Y2k")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Project object FOUND! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/locations/delete/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_283_deleteOnDeletReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/locations/delete/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .delete(baseUrlOfSut + "/app/api/locations/delete/_EM_2557_XYZ_?password=WYDgK")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"_EM_2557_XYZ_\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/credentials/username/{username}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_284_deleteOnUsernamReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/credentials/username/{username}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_521_XYZ_")
                .cookies(cookies_ROLE_ADMIN)
                .delete(baseUrlOfSut + "/app/api/credentials/username/_EM_520_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Credential object FOUND with username: _EM_520_XYZ_ ! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/credentials/username/{username}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_285_deleteOnCredentialsUsernamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/credentials/username/{username}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_32_XYZ_")
                .delete(baseUrlOfSut + "/app/api/credentials/username/_EM_30_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Credential object FOUND with username: _EM_30_XYZ_ ! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/employees/username/{username}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_286_deleteOnUsernamReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1365L)
                .d("ADR", "\"G\"")
                .d("POSTAL_CODE", "\"_EM_4912_XYZ_\"")
                .d("CITY", "\"_EM_4913_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 1364L)
                .d("DEPARTMENT_NAME", "\"rhPQJ\"")
            .and().insertInto("EMPLOYEES", 1363L)
                .d("FIRST_NAME", "\"AWLcbN8a93a\"")
                .d("LAST_NAME", "\"Fv0HW6\"")
                .d("EMAIL", "\"We@CNj.EdtL\"")
                .d("PHONE", "\"_EM_4903_XYZ_A\"")
                .d("JOB", "\"4vmuQIXfT\"")
                .d("SALARY", "3.1408761041252378")
            .and().insertInto("EMPLOYEES", 1360L)
                .d("FIRST_NAME", "\"0uD4GBNbW1L\"")
                .d("LAST_NAME", "\"CXgBl2W83Jtzwpq\"")
                .d("EMAIL", "\"bo@V.EzBv\"")
                .d("PHONE", "\"DkMaU3UUKj9U\"")
                .d("JOB", "\"7IgAuNKu\"")
                .d("SALARY", "1.502423678474481")
            .and().insertInto("USER_CREDENTIALS", 1356L)
                .d("USERNAME", "\"az7hlbDAk\"")
                .d("PASSWORD", "\"cEvXEpfosjOA2mn2\"")
                .d("ENABLED", "false")
                .d("ROLE", "\"d\"")
                .d("EMPLOYEE_ID", "3")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/username/{username}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .delete(baseUrlOfSut + "/app/api/employees/username/nourlarguech?" + 
                    "password=_EM_4911_XYZ_&" + 
                    "username=UsgCAEvJx")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("could not execute statement; SQL [n/a]; constraint [\"FK2_EMP: PUBLIC.EMPLOYEES FOREIGN KEY(MANAGER_ID) REFERENCES PUBLIC.EMPLOYEES(EMPLOYEE_ID) (5)\"; SQL statement:\n/* delete com.pfa.app.model.entity.Employee */ delete from employees where employee_id=? [23503-200]]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/departments/delete/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_287_deleteOnDepartmentsDeletWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/departments/delete/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .delete(baseUrlOfSut + "/app/api/departments/delete/_EM_1390_XYZ_?EMextraParam123=_EM_1391_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"_EM_1390_XYZ_\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/employees/delete/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_288_deleteOnEmployeesDeletReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/delete/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .delete(baseUrlOfSut + "/app/api/employees/delete/_EM_2819_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"_EM_2819_XYZ_\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/projects/delete/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_289_deleteOnProjectsDeletWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/delete/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .delete(baseUrlOfSut + "/app/api/projects/delete/0EXYql?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"0EXYql\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/employees/username/{username}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_290_deleteOnUsernamReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/username/{username}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .delete(baseUrlOfSut + "/app/api/employees/username/_EM_6713_XYZ_?password=8qz4X0l")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Credential object FOUND with username: _EM_6713_XYZ_ ! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/employees/username/{username}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_291_deleteOnUsernamReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/username/{username}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1402_XYZ_")
                .cookies(cookies_ROLE_MGR)
                .delete(baseUrlOfSut + "/app/api/employees/username/_EM_1401_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Credential object FOUND with username: _EM_1401_XYZ_ ! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/locations/delete/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_292_deleteOnDeletReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/locations/delete/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .delete(baseUrlOfSut + "/app/api/locations/delete/_EM_2651_XYZ_?username=0ImVTIIN95")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"_EM_2651_XYZ_\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/employees/username/{username}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_293_deleteOnEmployeesUsernamWithQueryParams() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/username/{username}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .delete(baseUrlOfSut + "/app/api/employees/username/_EM_3186_XYZ_?" + 
                    "password=blxR3_EoQ&" + 
                    "username=oR")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Credential object FOUND with username: _EM_3186_XYZ_ ! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/projects/delete/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_294_deleteOnProjectsDeletWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 806L)
                .d("ADR", "\"p8y388\"")
                .d("POSTAL_CODE", "\"UELU3811UXYZ_\"")
                .d("CITY", "\"_EM_3796_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 805L)
                .d("DEPARTMENT_NAME", "\"kW\"")
            .and().insertInto("EMPLOYEES", 804L)
                .d("FIRST_NAME", "\"6/JOCayQE\"")
                .d("LAST_NAME", "\"89YKnpwtrI\"")
                .d("EMAIL", "\"pMFf@Ny.SK\"")
                .d("PHONE", "\"Az\"")
                .d("JOB", "\"L9Srq9gd\"")
                .d("SALARY", "0.0")
            .and().insertInto("LOCATIONS", 803L)
                .d("ADR", "\"^\"")
                .d("POSTAL_CODE", "\"_EM_3781_XYZ_\"")
                .d("CITY", "\"rFZIzyz9Ok\"")
            .and().insertInto("DEPARTMENTS", 802L)
                .d("DEPARTMENT_NAME", "\"7uH2e7J\"")
            .and().insertInto("EMPLOYEES", 801L)
                .d("FIRST_NAME", "\"oIAFJXrqYo_YUGFMOb\"")
                .d("LAST_NAME", "\"_J8cBpHHMOMxg\"")
                .d("EMAIL", "\"hpSH@y.haY\"")
                .d("PHONE", "\"vCIIA7uJ3TKTB^n\"")
                .d("JOB", "\"_EM_3813_XYZ_\"")
                .d("SALARY", "2.04499714")
            .and().insertInto("LOCATIONS", 800L)
                .d("ADR", "\"_EM_3799_XYZ_\"")
                .d("POSTAL_CODE", "\"_EM_3814_XYZ_\"")
                .d("CITY", "\"_EMW340U]UYUU\"")
            .and().insertInto("DEPARTMENTS", 799L)
                .d("DEPARTMENT_NAME", "\"_EM_3801_XYZ_\"")
            .and().insertInto("EMPLOYEES", 798L)
                .d("FIRST_NAME", "\"VsQQaWEojs2JfpD\"")
                .d("LAST_NAME", "\"_EM_3827_XYZ_\"")
                .d("EMAIL", "\"UcT@Ilm.WiX\"")
                .d("PHONE", "\"_EM_3?84_UYU_\"")
                .d("JOB", "\"QIx5yRyxdLl2mNcqR\"")
                .d("SALARY", "0.8342075618794473")
            .and().insertInto("USER_CREDENTIALS", 797L)
                .d("USERNAME", "\"2kciS8bnNdR5OSqB\"")
                .d("PASSWORD", "\"Ys6zzHczB\"")
                .d("ENABLED", "false")
                .d("ROLE", "\"OMW26E8mKVw0vO\"")
                .d("EMPLOYEE_ID", "3")
            .and().insertInto("PROJECTS", 807L)
                .d("TITLE", "\"kIfvBq8MJdG2VSSq\"")
                .d("START_DATE", "NULL")
                .d("END_DATE", "\"2000-06-30\"")
                .d("STATUS", "\"_EM_3802_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/delete/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .delete(baseUrlOfSut + "/app/api/projects/delete/-4193305?" + 
                    "password=lanDhH&" + 
                    "username=_EM_3826_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Project object FOUND! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/employees/username/{username}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_295_deleteOnUsernamReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1217L)
                .d("ADR", "\"iskm\"")
                .d("POSTAL_CODE", "\"5rrl4t\"")
                .d("CITY", "\"8tjfU_OD6BnxmoF\"")
            .and().insertInto("DEPARTMENTS", 1216L)
                .d("DEPARTMENT_NAME", "\"HP_X2hcLRL\"")
            .and().insertInto("EMPLOYEES", 1215L)
                .d("FIRST_NAME", "\"J\"")
                .d("LAST_NAME", "\"1BDrKuUwBvOTmwh0\"")
                .d("EMAIL", "\"fT@fR.agqE\"")
                .d("PHONE", "\"_EM_4666_XYZ_\"")
                .d("JOB", "\"86XeOeKw\"")
                .d("SALARY", "0.5541756")
            .and().insertInto("LOCATIONS", 1214L)
                .d("ADR", "\"_N\"")
                .d("POSTAL_CODE", "\"_EM_4667_XYZ_\"")
                .d("CITY", "\"zuqThCt6xZU\"")
            .and().insertInto("DEPARTMENTS", 1213L)
                .d("DEPARTMENT_NAME", "\"yVE60LstGKmr4io\"")
            .and().insertInto("EMPLOYEES", 1212L)
                .d("FIRST_NAME", "\"TKJFSZ_In\"")
                .d("LAST_NAME", "\"uv20Kt4eYsEUjPhD\"")
                .d("EMAIL", "\"bxkM@JmR.jWB\"")
                .d("PHONE", "\"tcxLeG\"")
                .d("JOB", "\"kFIUJs84x7VPHSaF\"")
                .d("SALARY", "0.5740844087347364")
            .and().insertInto("LOCATIONS", 1211L)
                .d("ADR", "\"rScJqq5MqMKM\"")
                .d("POSTAL_CODE", "\"_EM_4668_XYZ_\"")
                .d("CITY", "\"pBr\"")
            .and().insertInto("DEPARTMENTS", 1210L)
                .d("DEPARTMENT_NAME", "\"xbU0j2pwLz\"")
            .and().insertInto("EMPLOYEES", 1209L)
                .d("FIRST_NAME", "\"aI8x6Zd4ltvvUL\"")
                .d("LAST_NAME", "\"lJLat0\"")
                .d("EMAIL", "\"OO@u.bT\"")
                .d("PHONE", "\"HW8qoom\"")
                .d("JOB", "\"57Uy5HVVpDP\"")
                .d("SALARY", "0.6193330115149124")
            .and().insertInto("USER_CREDENTIALS", 1208L)
                .d("USERNAME", "NULL")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "true")
                .d("ROLE", "\"aOYA5VL\"")
                .d("EMPLOYEE_ID", "5")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/username/{username}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .delete(baseUrlOfSut + "/app/api/employees/username/_EM_4664_XYZ_?" + 
                    "password=_EM_4665_XYZ_&" + 
                    "username=tn98")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Credential object FOUND with username: _EM_4664_XYZ_ ! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/employees/username/{username}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_296_deleteOnUsernamReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1355L)
                .d("ADR", "\"_EM_4893_XYZ_\"")
                .d("POSTAL_CODE", "\"_EM_4888_XYZ_\"")
                .d("CITY", "\"6f\"")
            .and().insertInto("DEPARTMENTS", 1354L)
                .d("DEPARTMENT_NAME", "\"8587xQdo\"")
            .and().insertInto("EMPLOYEES", 1353L)
                .d("FIRST_NAME", "\"G69\"")
                .d("LAST_NAME", "\"gp\"")
                .d("EMAIL", "\"hXo@FP.tHC\"")
                .d("PHONE", "\"Yb48189KELrueba9\"")
                .d("JOB", "\"PL\"")
                .d("SALARY", "0.710649211041559")
            .and().insertInto("LOCATIONS", 1352L)
                .d("ADR", "\"_EM_4894_XYZ_\"")
                .d("POSTAL_CODE", "\"pkWdFZ2mRpQz\"")
                .d("CITY", "\"_EM_4895_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 1351L)
                .d("DEPARTMENT_NAME", "\"lVu,wPHZf\"")
            .and().insertInto("EMPLOYEES", 1350L)
                .d("FIRST_NAME", "\"_EM_4889_XYZ_\"")
                .d("LAST_NAME", "\"_EM_4890_XYZ_\"")
                .d("EMAIL", "\"yVR@jRY.cO\"")
                .d("PHONE", "\"9aTlYh\"")
                .d("JOB", "\"h2BI9F1B\"")
                .d("SALARY", "0.4412177489959207")
            .and().insertInto("LOCATIONS", 1349L)
                .d("ADR", "\"rynqfeWT7CA\"")
                .d("POSTAL_CODE", "\"_EM_4896_XYZ_\"")
                .d("CITY", "\"CIMWvsYm9qrbTDSc\"")
            .and().insertInto("DEPARTMENTS", 1348L)
                .d("DEPARTMENT_NAME", "\"hKyMyc\"")
            .and().insertInto("EMPLOYEES", 1347L)
                .d("FIRST_NAME", "\"NkBJ1FKISrcxA1iw\"")
                .d("LAST_NAME", "\"ikA8S8QfYe0Re43w\"")
                .d("EMAIL", "\"vUwV@Y.Vx\"")
                .d("PHONE", "\"VN4m5lwVn9uu7n\"")
                .d("JOB", "\"ITHuOoFY\"")
                .d("SALARY", "-37945.49592881108")
            .and().insertInto("USER_CREDENTIALS", 1346L)
                .d("USERNAME", "\"Z81t\"")
                .d("PASSWORD", "\"HrhV\"")
                .d("ENABLED", "true")
                .d("ROLE", "\"_EM_4897_XYZ_\"")
                .d("EMPLOYEE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/username/{username}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .delete(baseUrlOfSut + "/app/api/employees/username/_EM_983_XYZ_?" + 
                    "password=_EM_4892_XYZ_&" + 
                    "username=UsgCAEvJx")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Credential object FOUND with username: _EM_983_XYZ_ ! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/employees/username/{username}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_297_deleteOnUsernamReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1386L)
                .d("ADR", "\"0USKo28\"")
                .d("POSTAL_CODE", "\"jQaTMs\"")
                .d("CITY", "\"VDL2CHcl4Kg\"")
            .and().insertInto("DEPARTMENTS", 1385L)
                .d("DEPARTMENT_NAME", "\"_EM_8329_XYZ_\"")
            .and().insertInto("EMPLOYEES", 1384L)
                .d("FIRST_NAME", "\"_EM_4932_XYZ_\"")
                .d("LAST_NAME", "\"BrYJ3Y\"")
                .d("EMAIL", "\"oU@Zd.qd\"")
                .d("PHONE", "\"MLF\"")
                .d("JOB", "\"3lggOcmy\"")
                .d("SALARY", "0.9")
            .and().insertInto("EMPLOYEES", 1381L)
                .d("FIRST_NAME", "\"J28n\"")
                .d("LAST_NAME", "\"LzFF\"")
                .d("EMAIL", "\"kHb@PM.lx\"")
                .d("PHONE", "\"hdP\"")
                .d("JOB", "\"JwdrGw1\"")
                .d("SALARY", "0.2473508824159686")
            .and().insertInto("USER_CREDENTIALS", 1377L)
                .d("USERNAME", "\"aIjNprng8\"")
                .d("PASSWORD", "\"2mHStbk4LfTdTqk\"")
                .d("ENABLED", "true")
                .d("ROLE", "NULL")
                .d("EMPLOYEE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/username/{username}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .delete(baseUrlOfSut + "/app/api/employees/username/_EM_983_XYZ_?" + 
                    "password=XCJ1H&" + 
                    "username=UsgCAEvJx")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Credential object FOUND with username: _EM_983_XYZ_ ! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/employees/username/{username}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_298_deleteOnUsernamReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/username/{username}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .delete(baseUrlOfSut + "/app/api/employees/username/_EM_3780_XYZ_?password=rJj7zJq5RpxyC")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Credential object FOUND with username: _EM_3780_XYZ_ ! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/employees/username/{username}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_299_deleteOnUsernamReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1355L)
                .d("ADR", "\"69l62nvo\"")
                .d("POSTAL_CODE", "\"_EM_4888_XYZ_\"")
                .d("CITY", "\"5f\"")
            .and().insertInto("DEPARTMENTS", 1354L)
                .d("DEPARTMENT_NAME", "\"4587xQdo\"")
            .and().insertInto("EMPLOYEES", 1353L)
                .d("FIRST_NAME", "\"G69\"")
                .d("LAST_NAME", "\"gp/\"")
                .d("EMAIL", "\"hYo@PGP.HC\"")
                .d("PHONE", "\"Yb48189KELrueba9\"")
                .d("JOB", "\"PL\"")
                .d("SALARY", "0.710649211041559")
            .and().insertInto("LOCATIONS", 1352L)
                .d("ADR", "\"ldpm9LXZNMVs__\"")
                .d("POSTAL_CODE", "\"pkWdFZ2mRpQz\"")
                .d("CITY", "\"RQkju51T\"")
            .and().insertInto("DEPARTMENTS", 1351L)
                .d("DEPARTMENT_NAME", "\"lVu0wPHZf\"")
            .and().insertInto("EMPLOYEES", 1350L)
                .d("FIRST_NAME", "\"_EM_4889_XYZ_\"")
                .d("LAST_NAME", "\"_EM_4890_XYZ_\"")
                .d("EMAIL", "\"yVR@kQY.cO\"")
                .d("PHONE", "\"9aTlYhQ\"")
                .d("JOB", "\"h2BI9G1Bs\"")
                .d("SALARY", "0.4412177489959207")
            .and().insertInto("LOCATIONS", 1349L)
                .d("ADR", "\"rynqfeWT7CA\"")
                .d("POSTAL_CODE", "\"8YITeVJKxUd\"")
                .d("CITY", "\"CIMWvsYm9qrbTDSc\"")
            .and().insertInto("DEPARTMENTS", 1348L)
                .d("DEPARTMENT_NAME", "\"hKyMuc\"")
            .and().insertInto("EMPLOYEES", 1347L)
                .d("FIRST_NAME", "\"NkBJ1FKISrcxA1iw\"")
                .d("LAST_NAME", "\"ikA8S8QnYe0Re43w\"")
                .d("EMAIL", "\"vUwV@Y.Vw\"")
                .d("PHONE", "\"VN4m5lwVn9uu7n\"")
                .d("JOB", "\"ITHuOoFY\"")
                .d("SALARY", "0.6995047622103294")
            .and().insertInto("USER_CREDENTIALS", 1346L)
                .d("USERNAME", "\"Z:1r\"")
                .d("PASSWORD", "\"HrhZ\"")
                .d("ENABLED", "false")
                .d("ROLE", "\"pHnCjMS3VQu\"")
                .d("EMPLOYEE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/username/{username}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .delete(baseUrlOfSut + "/app/api/employees/username/_EM_983_XYZ_?" + 
                    "password=XCJ1H&" + 
                    "username=UsgCAFvJx")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Credential object FOUND with username: _EM_983_XYZ_ ! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/assignments/data/project-commit/{projectId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_300_getOnDataProject_commitWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.format.date-time. [Path '/collection/0/commitDate'] String "2020-12-12T17:25:48" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_498_XYZ_")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/assignments/data/project-commit/1?" + 
                    "password=%242a%2410%246pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78%2FcvOprSR3lsZL2&" + 
                    "username=malekaissa")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(8))
                .body("'collection'[0].'commitDate'", containsString("2020-12-12T17:25:48"))
                .body("'collection'[0].'commitEmpDesc'", containsString("created new customer suspension"))
                .body("'collection'[0].'commitMgrDesc'", containsString("-"))
                .body("'collection'[0].'lastName'", containsString("Horri"))
                .body("'collection'[0].'firstName'", containsString("Selim"))
                .body("'collection'[0].'projectId'", numberMatches(1.0))
                .body("'collection'[0].'employeeId'", numberMatches(1.0))
                .body("'collection'[1].'commitDate'", containsString("2020-12-12T17:04:30"))
                .body("'collection'[1].'commitEmpDesc'", containsString("suspe"))
                .body("'collection'[1].'commitMgrDesc'", containsString("-"))
                .body("'collection'[1].'lastName'", containsString("Horri"))
                .body("'collection'[1].'firstName'", containsString("Selim"))
                .body("'collection'[1].'projectId'", numberMatches(1.0))
                .body("'collection'[1].'employeeId'", numberMatches(1.0))
                .body("'collection'[2].'commitDate'", containsString("2020-12-12T17:04:14"))
                .body("'collection'[2].'commitEmpDesc'", containsString("suspend customers..."))
                .body("'collection'[2].'commitMgrDesc'", containsString("-"))
                .body("'collection'[2].'lastName'", containsString("Horri"))
                .body("'collection'[2].'firstName'", containsString("Selim"))
                .body("'collection'[2].'projectId'", numberMatches(1.0))
                .body("'collection'[2].'employeeId'", numberMatches(1.0))
                ; // Skipping assertions on the remaining 5 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/employees/data/department/{departmentId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_301_getOnDepartReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/0/manager/hiredate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/employees/data/department/5?password=%242a%2410%246pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78%2FcvOprSR3lsZL2")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(4))
                .body("'collection'[0].'employeeId'", numberMatches(2.0))
                .body("'collection'[0].'firstName'", containsString("Badr"))
                .body("'collection'[0].'lastName'", containsString("Idoudi"))
                .body("'collection'[0].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'phone'", containsString("22125144"))
                .body("'collection'[0].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[0].'job'", containsString("Digital"))
                .body("'collection'[0].'salary'", numberMatches(5000.0))
                .body("'collection'[0].'manager'.'employeeId'", numberMatches(9.0))
                .body("'collection'[0].'manager'.'firstName'", containsString("John"))
                .body("'collection'[0].'manager'.'lastName'", containsString("Doe"))
                .body("'collection'[0].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[0].'manager'.'hiredate'", nullValue())
                .body("'collection'[0].'manager'.'job'", containsString("Chef service digital"))
                .body("'collection'[0].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[0].'manager'.'manager'", nullValue())
                .body("'collection'[0].'manager'.'department'.'departmentId'", numberMatches(5.0))
                .body("'collection'[0].'manager'.'department'.'departmentName'", containsString("Digital"))
                .body("'collection'[0].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'manager'.'credential'.'credentialId'", numberMatches(7.0))
                .body("'collection'[0].'manager'.'credential'.'username'", containsString("johndoe"))
                .body("'collection'[0].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[0].'department'.'departmentId'", numberMatches(5.0))
                .body("'collection'[0].'department'.'departmentName'", containsString("Digital"))
                .body("'collection'[0].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'credential'.'credentialId'", numberMatches(2.0))
                .body("'collection'[0].'credential'.'username'", containsString("badridoudi"))
                .body("'collection'[0].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'employeeId'", numberMatches(9.0))
                .body("'collection'[1].'firstName'", containsString("John"))
                .body("'collection'[1].'lastName'", containsString("Doe"))
                .body("'collection'[1].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'phone'", containsString("22125144"))
                .body("'collection'[1].'hiredate'", nullValue())
                .body("'collection'[1].'job'", containsString("Chef service digital"))
                .body("'collection'[1].'salary'", numberMatches(6000.0))
                .body("'collection'[1].'manager'", nullValue())
                .body("'collection'[1].'department'.'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'department'.'departmentName'", containsString("Digital"))
                .body("'collection'[1].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'credential'.'credentialId'", numberMatches(7.0))
                .body("'collection'[1].'credential'.'username'", containsString("johndoe"))
                .body("'collection'[1].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[2].'employeeId'", numberMatches(10.0))
                .body("'collection'[2].'firstName'", containsString("Sana"))
                .body("'collection'[2].'lastName'", containsString("Saanouni"))
                .body("'collection'[2].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'phone'", containsString("22125144"))
                .body("'collection'[2].'hiredate'", nullValue())
                .body("'collection'[2].'job'", containsString("Digital"))
                .body("'collection'[2].'salary'", numberMatches(5000.0))
                .body("'collection'[2].'manager'.'employeeId'", numberMatches(9.0))
                .body("'collection'[2].'manager'.'firstName'", containsString("John"))
                .body("'collection'[2].'manager'.'lastName'", containsString("Doe"))
                .body("'collection'[2].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[2].'manager'.'hiredate'", nullValue())
                .body("'collection'[2].'manager'.'job'", containsString("Chef service digital"))
                .body("'collection'[2].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[2].'manager'.'manager'", nullValue())
                .body("'collection'[2].'manager'.'department'.'departmentId'", numberMatches(5.0))
                .body("'collection'[2].'manager'.'department'.'departmentName'", containsString("Digital"))
                .body("'collection'[2].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'manager'.'credential'.'credentialId'", numberMatches(7.0))
                .body("'collection'[2].'manager'.'credential'.'username'", containsString("johndoe"))
                .body("'collection'[2].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[2].'department'.'departmentId'", numberMatches(5.0))
                .body("'collection'[2].'department'.'departmentName'", containsString("Digital"))
                .body("'collection'[2].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'credential'.'credentialId'", numberMatches(11.0))
                .body("'collection'[2].'credential'.'username'", containsString("sanasaanouni"))
                .body("'collection'[2].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'credential'.'role'", containsString("ROLE_EMP"))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/employees/data/department/{departmentId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_302_getOnDepartReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/0/manager/hiredate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/employees/data/department/4?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(4))
                .body("'collection'[0].'employeeId'", numberMatches(3.0))
                .body("'collection'[0].'firstName'", containsString("Imen"))
                .body("'collection'[0].'lastName'", containsString("Touk"))
                .body("'collection'[0].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'phone'", containsString("22125144"))
                .body("'collection'[0].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[0].'job'", containsString("Data Warehouse"))
                .body("'collection'[0].'salary'", numberMatches(5000.0))
                .body("'collection'[0].'manager'.'employeeId'", numberMatches(5.0))
                .body("'collection'[0].'manager'.'firstName'", containsString("Nour"))
                .body("'collection'[0].'manager'.'lastName'", containsString("Larguech"))
                .body("'collection'[0].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[0].'manager'.'hiredate'", nullValue())
                .body("'collection'[0].'manager'.'job'", containsString("Chef service Data Warehouse"))
                .body("'collection'[0].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[0].'manager'.'manager'", nullValue())
                .body("'collection'[0].'manager'.'department'.'departmentId'", numberMatches(4.0))
                .body("'collection'[0].'manager'.'department'.'departmentName'", containsString("DWH"))
                .body("'collection'[0].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'manager'.'credential'.'credentialId'", numberMatches(6.0))
                .body("'collection'[0].'manager'.'credential'.'username'", containsString("nourlarguech"))
                .body("'collection'[0].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[0].'department'.'departmentId'", numberMatches(4.0))
                .body("'collection'[0].'department'.'departmentName'", containsString("DWH"))
                .body("'collection'[0].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'credential'.'credentialId'", numberMatches(1.0))
                .body("'collection'[0].'credential'.'username'", containsString("imentouk"))
                .body("'collection'[0].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'employeeId'", numberMatches(5.0))
                .body("'collection'[1].'firstName'", containsString("Nour"))
                .body("'collection'[1].'lastName'", containsString("Larguech"))
                .body("'collection'[1].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'phone'", containsString("22125144"))
                .body("'collection'[1].'hiredate'", nullValue())
                .body("'collection'[1].'job'", containsString("Chef service Data Warehouse"))
                .body("'collection'[1].'salary'", numberMatches(6000.0))
                .body("'collection'[1].'manager'", nullValue())
                .body("'collection'[1].'department'.'departmentId'", numberMatches(4.0))
                .body("'collection'[1].'department'.'departmentName'", containsString("DWH"))
                .body("'collection'[1].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'credential'.'credentialId'", numberMatches(6.0))
                .body("'collection'[1].'credential'.'username'", containsString("nourlarguech"))
                .body("'collection'[1].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[2].'employeeId'", numberMatches(12.0))
                .body("'collection'[2].'firstName'", containsString("Mayssa"))
                .body("'collection'[2].'lastName'", containsString("Hassine"))
                .body("'collection'[2].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'phone'", containsString("22125144"))
                .body("'collection'[2].'hiredate'", containsString("30-04-2019"))
                .body("'collection'[2].'job'", containsString("Data Warehouse"))
                .body("'collection'[2].'salary'", numberMatches(5000.0))
                .body("'collection'[2].'manager'.'employeeId'", numberMatches(5.0))
                .body("'collection'[2].'manager'.'firstName'", containsString("Nour"))
                .body("'collection'[2].'manager'.'lastName'", containsString("Larguech"))
                .body("'collection'[2].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[2].'manager'.'hiredate'", nullValue())
                .body("'collection'[2].'manager'.'job'", containsString("Chef service Data Warehouse"))
                .body("'collection'[2].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[2].'manager'.'manager'", nullValue())
                .body("'collection'[2].'manager'.'department'.'departmentId'", numberMatches(4.0))
                .body("'collection'[2].'manager'.'department'.'departmentName'", containsString("DWH"))
                .body("'collection'[2].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'manager'.'credential'.'credentialId'", numberMatches(6.0))
                .body("'collection'[2].'manager'.'credential'.'username'", containsString("nourlarguech"))
                .body("'collection'[2].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[2].'department'.'departmentId'", numberMatches(4.0))
                .body("'collection'[2].'department'.'departmentName'", containsString("DWH"))
                .body("'collection'[2].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'credential'.'credentialId'", numberMatches(13.0))
                .body("'collection'[2].'credential'.'username'", containsString("mayssahassine"))
                .body("'collection'[2].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'credential'.'role'", containsString("ROLE_EMP"))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/employees/data/employee-project-data/{employeeId}
    */
    @Test @Timeout(60)
    public void test_303_getOnDataEmployee_project_dataWithQueryParamsReturnsObjectUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 558L)
                .d("ADR", "\"Rir4TYnS2q\"")
                .d("POSTAL_CODE", "\"lsFEpJQtUblmz_U\"")
                .d("CITY", "\"KuIfz5G\"")
            .and().insertInto("DEPARTMENTS", 557L)
                .d("DEPARTMENT_NAME", "\"Jhh4OD\"")
            .and().insertInto("EMPLOYEES", 556L)
                .d("FIRST_NAME", "\"_EM_3170_XYZ_\"")
                .d("LAST_NAME", "\"wnBRI5r2FF8\"")
                .d("EMAIL", "\"yiM@Aj.MFg\"")
                .d("PHONE", "\"\"")
                .d("JOB", "\"jUJxIAksmZqn\"")
                .d("SALARY", "0.09802613348359335")
            .and().insertInto("LOCATIONS", 555L)
                .d("ADR", "\"euySJ\"")
                .d("POSTAL_CODE", "\"InWAkP\"")
                .d("CITY", "\"IZ\"")
            .and().insertInto("DEPARTMENTS", 554L)
                .d("DEPARTMENT_NAME", "\"_EM_3171_XYZ_\"")
            .and().insertInto("EMPLOYEES", 553L)
                .d("FIRST_NAME", "\"yt3HGNlh\"")
                .d("LAST_NAME", "\"_EM_3172_XYZ_\"")
                .d("EMAIL", "\"IW@M.mOpg\"")
                .d("PHONE", "\"_EM_3173_XYZ_\"")
                .d("JOB", "\"krQ\"")
                .d("SALARY", "0.18113705424180637")
            .and().insertInto("LOCATIONS", 552L)
                .d("ADR", "\"KfWQXIyK0ar0ZA\"")
                .d("POSTAL_CODE", "\"_EM_3174_XYZ_\"")
                .d("CITY", "\"5UDUGoDIOHwr\"")
            .and().insertInto("DEPARTMENTS", 551L)
                .d("DEPARTMENT_NAME", "\"_EM_3175_XYZ_\"")
            .and().insertInto("EMPLOYEES", 550L)
                .d("FIRST_NAME", "\"ttTYI6\"")
                .d("LAST_NAME", "\"bd_O3dUFdJ95\"")
                .d("EMAIL", "\"Xs@lXq.aKb\"")
                .d("PHONE", "\"I\"")
                .d("JOB", "\"wBgbqi9\"")
                .d("SALARY", "0.23590781925751658")
            .and().insertInto("ASSIGNMENTS", 549L)
                .d("EMPLOYEE_ID", "5")
                .d("PROJECT_ID", "2")
                .d("COMMIT_DATE", "\"1954-09-19 13:02:32\"")
                .d("COMMIT_EMP_DESC", "\"kjiVcnts3rK2m\"")
                .d("COMMIT_MGR_DESC", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/employees/data/employee-project-data/65745?" + 
                    "password=LsP3F0EPx&" + 
                    "username=qHl4jd54MilD1g")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * 1 - (400) POST:/app/api/departments
    * 2 - (400) GET:/app/api/assignments/data/project-commit/{employeeId}/{projectId}/{commitDate}
    * 3 - (400) POST:/app/api/authenticate
    * 4 - (400) POST:/app/api/authenticate
    * 5 - (200) POST:/app/api/credentials
    * 6 - (200) GET:/app/api/credentials/{id}
    * 7 - (200) GET:/app/api/employees/data/employee-project-data/{employeeId}
    * Found 6 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_304_getOnEmployee_project_dataReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/departments'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"departmentId\": 557, " + 
                    " \"location\": { " + 
                    " \"locationId\": 721, " + 
                    " \"postalCode\": \"_EM_2520_XYZ_\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/departments?password=_EM_2521_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Unable to find com.pfa.app.model.entity.Location with id 721; nested exception is javax.persistence.EntityNotFoundException: Unable to find com.pfa.app.model.entity.Location with id 721"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/data/project-commit/{employeeId}/{projectId}/{commitDate}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/assignments/data/project-commit/xcGDEeTBnzD2/SAjpuAcXEMSQ4KyN/W")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"xcGDEeTBnzD2\""))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/authenticate'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/app/api/authenticate?password=Y6nrMQ0")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Bad credentials"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/authenticate'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"username\": \"A19mEByk\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/authenticate?" + 
                    "password=%242a%2410%241xbq6vQDlSvwxCly.1gnEezqehgGg15XzeiycPbTy3g6zxnw.U6Ni&" + 
                    "username=h_0IXnhI8aIlegrp")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Bad credentials"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/password'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"enabled\": false " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/credentials")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(15.0))
                .body("'username'", nullValue())
                .body("'password'", nullValue())
                .body("'enabled'", equalTo(false))
                .body("'role'", nullValue());
        String 
        location_credentials__103 = "/app/api/credentials" + "/" + res_4.extract().body().path("credentialId").toString();
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/password'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(resolveLocation(location_credentials__103, baseUrlOfSut + "/app/api/credentials/nogy?password=650LTVr5h4a1WpOg"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(15.0))
                .body("'username'", nullValue())
                .body("'password'", nullValue())
                .body("'enabled'", equalTo(false))
                .body("'role'", nullValue());
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/employees/data/employee-project-data/12?username=_EM_2530_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(2))
                .body("'collection'[0].'startDate'", containsString("2020-11-02"))
                .body("'collection'[0].'endDate'", containsString("2021-05-01"))
                .body("'collection'[0].'projectId'", numberMatches(8.0))
                .body("'collection'[0].'status'", containsString("IN_PROGRESS"))
                .body("'collection'[0].'title'", containsString("GREENPLUME_UPGRADE"))
                .body("'collection'[1].'startDate'", containsString("2020-06-01"))
                .body("'collection'[1].'endDate'", containsString("2021-03-02"))
                .body("'collection'[1].'projectId'", numberMatches(9.0))
                .body("'collection'[1].'status'", containsString("IN_PROGRESS"))
                .body("'collection'[1].'title'", containsString("COMMISION_AUTOMATION"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/employees/data/employee-project-data/{employeeId}
    */
    @Test @Timeout(60)
    public void test_305_getOnDataEmployee_project_dataWithQueryParamReturnsObjectUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/employees/data/employee-project-data/5?username=sanasaanouni")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/employees/data/manager-project-data/{employeeId}
    */
    @Test @Timeout(60)
    public void test_306_getOnDataManager_project_dataWithQueryParamsReturnsObject() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/employees/data/manager-project-data/16?" + 
                    "password=%242a%2410%246pNV34gbMAEj6vuyVmQMdOfSKk.suxOUOeucg78%2FcvOprSR3lsZL2&" + 
                    "username=_EM_2933_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/employees/data/manager-project-data/{employeeId}
    */
    @Test @Timeout(60)
    public void test_307_getOnDataManager_project_dataWithQueryParamReturnsObject() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/employees/data/manager-project-data/14?EMextraParam123=_EM_1384_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/assignments/data/project-commit/{projectId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_308_getOnDataProject_commitWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.format.date-time. [Path '/collection/0/commitDate'] String "2020-12-19T12:05:23" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/assignments/data/project-commit/2?username=imentouk")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(10))
                .body("'collection'[0].'commitDate'", containsString("2020-12-19T12:05:23"))
                .body("'collection'[0].'commitEmpDesc'", containsString("Generate new XML file for CRMIMX2"))
                .body("'collection'[0].'commitMgrDesc'", containsString("-"))
                .body("'collection'[0].'lastName'", containsString("Horri"))
                .body("'collection'[0].'firstName'", containsString("Selim"))
                .body("'collection'[0].'projectId'", numberMatches(2.0))
                .body("'collection'[0].'employeeId'", numberMatches(1.0))
                .body("'collection'[1].'commitDate'", containsString("2020-12-17T19:29:17"))
                .body("'collection'[1].'commitEmpDesc'", containsString("take it easy with Spring Boot***********"))
                .body("'collection'[1].'commitMgrDesc'", containsString("-"))
                .body("'collection'[1].'lastName'", containsString("Horri"))
                .body("'collection'[1].'firstName'", containsString("Selim"))
                .body("'collection'[1].'projectId'", numberMatches(2.0))
                .body("'collection'[1].'employeeId'", numberMatches(1.0))
                .body("'collection'[2].'commitDate'", containsString("2020-12-12T16:43:48"))
                .body("'collection'[2].'commitEmpDesc'", containsString("synchronize xml and Java file"))
                .body("'collection'[2].'commitMgrDesc'", containsString("-"))
                .body("'collection'[2].'lastName'", containsString("Horri"))
                .body("'collection'[2].'firstName'", containsString("Selim"))
                .body("'collection'[2].'projectId'", numberMatches(2.0))
                .body("'collection'[2].'employeeId'", numberMatches(1.0))
                ; // Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/employees/data/department/{departmentId}
    */
    @Test @Timeout(60)
    public void test_309_getOnDepartReturnsObjectUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1620L)
                .d("ADR", "\"SaAbWA\"")
                .d("POSTAL_CODE", "\"y3yhsg7rP2NcSIg\"")
                .d("CITY", "\"OnG\"")
            .and().insertInto("DEPARTMENTS", 1619L)
                .d("DEPARTMENT_NAME", "\"sI23bvEWsb\"")
            .and().insertInto("EMPLOYEES", 1618L)
                .d("FIRST_NAME", "\"WhC0\"")
                .d("LAST_NAME", "\"k\"")
                .d("EMAIL", "\"PH@W.VI\"")
                .d("PHONE", "\"BLt4rDYUou\"")
                .d("JOB", "\"A5PsX7n5PDw7NTY\"")
                .d("SALARY", "0.6355764862062817")
            .and().insertInto("EMPLOYEES", 1615L)
                .d("FIRST_NAME", "\"ix9W65x_\"")
                .d("LAST_NAME", "\"Kg98lSG\"")
                .d("EMAIL", "\"kff@vbv.PT\"")
                .d("PHONE", "\"ogDBdyKl5J\"")
                .d("JOB", "\"m5yD103b\"")
                .d("SALARY", "0.8")
            .and().insertInto("USER_CREDENTIALS", 1611L)
                .d("USERNAME", "\"VzME4R9hjUl\"")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "false")
                .d("ROLE", "\"_EM_5395_XYZ_\"")
                .d("EMPLOYEE_ID", "NULL")
            .and().insertInto("PROJECTS", 1569L)
                .d("TITLE", "\"_EM_5337_XYZ_\"")
                .d("STATUS", "\"qs_7c4\"")
            .and().insertInto("LOCATIONS", 1568L)
                .d("ADR", "\"_EM_3719_XYZ_\"")
                .d("POSTAL_CODE", "\"G\"")
                .d("CITY", "\"CIgoexy1eG0y\"")
            .and().insertInto("DEPARTMENTS", 1567L)
                .d("DEPARTMENT_NAME", "\"Billing\"")
            .and().insertInto("EMPLOYEES", 1566L)
                .d("FIRST_NAME", "\"054Lq8a1UD3cqA\"")
                .d("LAST_NAME", "\"_EM_5388_XYZ_\"")
                .d("EMAIL", "\"gmWB@yDA.tih\"")
                .d("PHONE", "\"_EM_5339_XYZ_\"")
                .d("JOB", "\"P\"")
                .d("SALARY", "0.0")
            .and().insertInto("EMPLOYEES", 1563L)
                .d("FIRST_NAME", "\"_EM_5340_XYZ_\"")
                .d("LAST_NAME", "\"_EM_5341_XYZ_\"")
                .d("EMAIL", "\"Kxa@TFE.EtMC\"")
                .d("PHONE", "\"Tmfqc6uophk\"")
                .d("JOB", "\"_EM_5342_XYZ_\"")
                .d("SALARY", "0.8524167800005203")
            .and().insertInto("USER_CREDENTIALS", 1580L)
                .d("USERNAME", "NULL")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "false")
                .d("ROLE", "\"AK9jTW_RweDl_S\"")
                .r("EMPLOYEE_ID", 1566L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/employees/data/department/546?username=9T1%7EK")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/assignments/data/project-commit/{projectId}
    */
    @Test @Timeout(60)
    public void test_310_getOnProject_commitReturnsObject() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/app/api/assignments/data/project-commit/150")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/assignments/data/project-commit/{projectId}
    */
    @Test @Timeout(60)
    public void test_311_getOnDataProject_commitReturnsObjectUsingSql() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/app/api/assignments/data/project-commit/-65386")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/assignments/data/project-commit/{projectId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_312_getOnDataProject_commitWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.format.date-time. [Path '/collection/0/commitDate'] String "2020-12-19T16:13:17" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/assignments/data/project-commit/9?" + 
                    "password=_EM_3028_XYZ_&" + 
                    "username=_EM_3029_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(4))
                .body("'collection'[0].'commitDate'", containsString("2020-12-19T16:13:17"))
                .body("'collection'[0].'commitEmpDesc'", containsString("create new workspace"))
                .body("'collection'[0].'commitMgrDesc'", containsString("-"))
                .body("'collection'[0].'lastName'", containsString("Chaouachi"))
                .body("'collection'[0].'firstName'", containsString("Mouna"))
                .body("'collection'[0].'projectId'", numberMatches(9.0))
                .body("'collection'[0].'employeeId'", numberMatches(13.0))
                .body("'collection'[1].'commitDate'", containsString("2020-12-19T16:13:01"))
                .body("'collection'[1].'commitEmpDesc'", containsString("get first ids"))
                .body("'collection'[1].'commitMgrDesc'", containsString("-"))
                .body("'collection'[1].'lastName'", containsString("Chaouachi"))
                .body("'collection'[1].'firstName'", containsString("Mouna"))
                .body("'collection'[1].'projectId'", numberMatches(9.0))
                .body("'collection'[1].'employeeId'", numberMatches(13.0))
                .body("'collection'[2].'commitDate'", containsString("2020-12-19T16:11:20"))
                .body("'collection'[2].'commitEmpDesc'", containsString("design second functionality"))
                .body("'collection'[2].'commitMgrDesc'", containsString("-"))
                .body("'collection'[2].'lastName'", containsString("Hassine"))
                .body("'collection'[2].'firstName'", containsString("Mayssa"))
                .body("'collection'[2].'projectId'", numberMatches(9.0))
                .body("'collection'[2].'employeeId'", numberMatches(12.0))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/employees/data/department/{departmentId}
    */
    @Test @Timeout(60)
    public void test_313_getOnDepartReturnsObjectUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1620L)
                .d("ADR", "\"S]AbWA\"")
                .d("POSTAL_CODE", "\"y3yhsg7rP2NcRIg\"")
                .d("CITY", "\"_EM_5386_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 1619L)
                .d("DEPARTMENT_NAME", "\"sI23bvEWsb\"")
            .and().insertInto("EMPLOYEES", 1618L)
                .d("FIRST_NAME", "\"XhC0\"")
                .d("LAST_NAME", "\"_EM_5582_XYZ_\"")
                .d("EMAIL", "\"QH@X.UJ\"")
                .d("PHONE", "\"BLt4rDYUnu\"")
                .d("JOB", "\"A5PsX7n5PDw7NTY\"")
                .d("SALARY", "0.6355764862062817")
            .and().insertInto("EMPLOYEES", 1615L)
                .d("FIRST_NAME", "\"ix9W65x_\"")
                .d("LAST_NAME", "\"_EM_5583_XYZ_\"")
                .d("EMAIL", "\"kef@vbv.OU\"")
                .d("PHONE", "\"ogDBdyKl5J\"")
                .d("JOB", "\"m5yD103b\"")
                .d("SALARY", "1.9")
            .and().insertInto("USER_CREDENTIALS", 1611L)
                .d("USERNAME", "\"VzME4R9hjUl\"")
                .d("PASSWORD", "\"_EM_5584_XYZ_\"")
                .d("ENABLED", "false")
                .d("ROLE", "\"_EM_5585_XYZ_\"")
                .d("EMPLOYEE_ID", "NULL")
            .and().insertInto("PROJECTS", 1569L)
                .d("TITLE", "\"Gy9qF14M2i:\"")
                .d("STATUS", "\"qs_7c4\"")
            .and().insertInto("LOCATIONS", 1568L)
                .d("ADR", "\"_EM_5568_XYZ_e\"")
                .d("POSTAL_CODE", "\"G\"")
                .d("CITY", "\"zTMadiK5ej_wNhzl\"")
            .and().insertInto("DEPARTMENTS", 1567L)
                .d("DEPARTMENT_NAME", "\"Billingk\"")
            .and().insertInto("EMPLOYEES", 1566L)
                .d("FIRST_NAME", "\"054Lr8a1UD3cqA\"")
                .d("LAST_NAME", "\"_EM_5388_XYZ_7\"")
                .d("EMAIL", "\"gmWB@yDB.tih\"")
                .d("PHONE", "\"_EM_5339_XYZ_\"")
                .d("JOB", "\"T\"")
                .d("SALARY", "-1836.1717721682587")
            .and().insertInto("EMPLOYEES", 1563L)
                .d("FIRST_NAME", "\"elYS3AXFIqMW\"")
                .d("LAST_NAME", "\"_EM_5341_XYZ_\"")
                .d("EMAIL", "\"KxZ@TEE.EtMC\"")
                .d("PHONE", "\"Tmfqc6uohhk\"")
                .d("JOB", "\"1X4lSi8c\"")
                .d("SALARY", "18889.314188789744")
            .and().insertInto("USER_CREDENTIALS", 1580L)
                .d("USERNAME", "NULL")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "true")
                .d("ROLE", "\"AK9jTW_RweDl_S\"")
                .r("EMPLOYEE_ID", 1566L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/employees/data/department/-64990?password=_EM_5567_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/assignments/data/project-commit/{projectId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_314_getOnDataProject_commitWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/data/project-commit/{projectId}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/assignments/data/project-commit/_EM_960_XYZ_?EMextraParam123=_EM_961_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"_EM_960_XYZ_\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/assignments/{employeeId}/{projectId}/{commitDate}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_315_getOnAssignReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/{employeeId}/{projectId}/{commitDate}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/assignments/0/397/BYCa?" + 
                    "password=_EM_3271_XYZ_&" + 
                    "username=wjOamfNizJ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Text 'BYCa' could not be parsed at index 0"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/assignments/{employeeId}/{projectId}/{commitDate}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_316_getOnAssignReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/{employeeId}/{projectId}/{commitDate}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/assignments/11/_EM_500_XYZ_/_EM_499_XYZ_?EMextraParam123=_EM_501_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"_EM_500_XYZ_\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/assignments/{employeeId}/{projectId}/{commitDate}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_317_getOnAssignReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/{employeeId}/{projectId}/{commitDate}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/assignments/_EM_7391_XYZ_/1/_EM_7390_XYZ_?" + 
                    "password=_EM_1238_XYZ_&" + 
                    "username=YSim")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"_EM_7391_XYZ_\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/assignments/{employeeId}/{projectId}/{commitDate}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_318_getOnAssignReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/{employeeId}/{projectId}/{commitDate}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_11_XYZ_")
                .get(baseUrlOfSut + "/app/api/assignments/_EM_9_XYZ_/_EM_10_XYZ_/_EM_8_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"_EM_9_XYZ_\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/employees/data/department/{departmentId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_319_getOnDepartReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/data/department/{departmentId}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/app/api/employees/data/department/9ajgN7HAG2T?EMextraParam123=_EM_15_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"9ajgN7HAG2T\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/employees/data/employee-project-data/{employeeId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_320_getOnEmployee_project_dataReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/data/employee-project-data/{employeeId}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/employees/data/employee-project-data/tHUw?EMextraParam123=_EM_1869_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"tHUw\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/employees/data/manager-project-data/{employeeId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_321_getOnManager_project_dataReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/data/manager-project-data/{employeeId}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/app/api/employees/data/manager-project-data/ogeYxL")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"ogeYxL\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/assignments/{employeeId}/{projectId}/{commitDate}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_322_deleteOnAssignReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/{employeeId}/{projectId}/{commitDate}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .delete(baseUrlOfSut + "/app/api/assignments/164/_EM_2707_XYZ_/_EM_2709_XYZ_?" + 
                    "password=4MrtmLBUFxXcp&" + 
                    "username=iZyPMLGg")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"_EM_2707_XYZ_\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/assignments/{employeeId}/{projectId}/{commitDate}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_323_deleteOnAssignReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/{employeeId}/{projectId}/{commitDate}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .delete(baseUrlOfSut + "/app/api/assignments/_EM_2003_XYZ_/C/26-11-202010:49:41?" + 
                    "EMextraParam123=_EM_504_XYZ_&" + 
                    "username=johndoe")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"_EM_2003_XYZ_\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/assignments/{employeeId}/{projectId}/{commitDate}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_324_deleteOnWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/{employeeId}/{projectId}/{commitDate}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .delete(baseUrlOfSut + "/app/api/assignments/_EM_2697_XYZ_/eeSX47R6K37QH/Afg0EaM5zgMzca?password=bJQ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"_EM_2697_XYZ_\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (405) DELETE:/app/api/assignments/{employeeId}/{projectId}/{commitDate}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_325_deleteOnAssignReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 405 not defined for path '/api/assignments/{employeeId}/{projectId}/{commitDate}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .delete(baseUrlOfSut + "/app/api/assignments/_EM_2505_XYZ_/_EM_2707_XYZ_/Vo;1c?" + 
                    "password=_EM_2506_XYZ_&" + 
                    "username=_EM_2708_XYZ_")
                .then()
                .statusCode(405)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/assignments/data/project-commit/{employeeId}/{projectId}
    */
    @Test @Timeout(60)
    public void test_326_getOnWithQueryParamReturnsObjectUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/assignments/data/project-commit/11/8?password=%242a%2410%246pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78%2FcvOprSR3lsZL2")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/assignments/data/project-commit/{employeeId}/{projectId}
    */
    @Test @Timeout(60)
    public void test_327_getOnWithQueryParamsReturnsObjectUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/assignments/data/project-commit/11/8?" + 
                    "password=%242a%2410%246pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78%2FcvOprSR3lsZL2&" + 
                    "username=imentouk")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/assignments/data/project-commit/{employeeId}/{projectId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_328_getOnProject_commitReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/data/project-commit/{employeeId}/{projectId}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/assignments/data/project-commit/8/_EM_492_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"_EM_492_XYZ_\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/assignments/data/project-commit/{employeeId}/{projectId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_329_getOnProject_commitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/data/project-commit/{employeeId}/{projectId}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_4_XYZ_")
                .get(baseUrlOfSut + "/app/api/assignments/data/project-commit/_EM_2_XYZ_/NR8?EMextraParam123=_EM_3_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"_EM_2_XYZ_\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/assignments/data/project-commit/{employeeId}/{projectId}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_330_getOnProject_commitReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/data/project-commit/{employeeId}/{projectId}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/assignments/data/project-commit/QIG%5C;GV:ef/F7dimZEH41G?" + 
                    "password=2IoHEq7PT&" + 
                    "username=QVtMe1k")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/assignments/delete/{employeeId}/{projectId}/{commitDate}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_331_deleteOnWithQueryParamReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1620L)
                .d("ADR", "\"SaAbWA\"")
                .d("POSTAL_CODE", "\"y3yhsg7rP2NcSIg\"")
                .d("CITY", "\"OnG\"")
            .and().insertInto("DEPARTMENTS", 1619L)
                .d("DEPARTMENT_NAME", "\"sI23bvEWsb\"")
            .and().insertInto("EMPLOYEES", 1618L)
                .d("FIRST_NAME", "\"WhC0\"")
                .d("LAST_NAME", "\"k\"")
                .d("EMAIL", "\"PH@W.VI\"")
                .d("PHONE", "\"BLt4rDYUou\"")
                .d("JOB", "\"A5PsX7n5PDw7NTY\"")
                .d("SALARY", "0.6355764862062817")
            .and().insertInto("EMPLOYEES", 1615L)
                .d("FIRST_NAME", "\"ix9W65x_\"")
                .d("LAST_NAME", "\"Kg98lSG\"")
                .d("EMAIL", "\"kff@vbv.PT\"")
                .d("PHONE", "\"ogDBdyKl5J\"")
                .d("JOB", "\"m5yD103b\"")
                .d("SALARY", "0.8")
            .and().insertInto("USER_CREDENTIALS", 1611L)
                .d("USERNAME", "\"VzME4R9hjUl\"")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "false")
                .d("ROLE", "\"_EM_5395_XYZ_\"")
                .d("EMPLOYEE_ID", "NULL")
            .and().insertInto("PROJECTS", 1569L)
                .d("TITLE", "\"_EM_5337_XYZ_\"")
                .d("STATUS", "\"qs_7c4\"")
            .and().insertInto("LOCATIONS", 1568L)
                .d("ADR", "\"_EM_3719_XYZ_\"")
                .d("POSTAL_CODE", "\"G\"")
                .d("CITY", "\"CIgoexy1eG0y\"")
            .and().insertInto("DEPARTMENTS", 1567L)
                .d("DEPARTMENT_NAME", "\"Billing\"")
            .and().insertInto("EMPLOYEES", 1566L)
                .d("FIRST_NAME", "\"054Lq8a1UD3cqA\"")
                .d("LAST_NAME", "\"_EM_5388_XYZ_\"")
                .d("EMAIL", "\"gmWB@yDA.tih\"")
                .d("PHONE", "\"_EM_5339_XYZ_\"")
                .d("JOB", "\"P\"")
                .d("SALARY", "0.0")
            .and().insertInto("EMPLOYEES", 1563L)
                .d("FIRST_NAME", "\"_EM_5340_XYZ_\"")
                .d("LAST_NAME", "\"_EM_5341_XYZ_\"")
                .d("EMAIL", "\"Kxa@TFE.EtMC\"")
                .d("PHONE", "\"Tmfqc6uophk\"")
                .d("JOB", "\"_EM_5342_XYZ_\"")
                .d("SALARY", "0.8524167800005203")
            .and().insertInto("USER_CREDENTIALS", 1580L)
                .d("USERNAME", "NULL")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "false")
                .d("ROLE", "\"AK9jTW_RweDl_S\"")
                .r("EMPLOYEE_ID", 1566L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/delete/{employeeId}/{projectId}/{commitDate}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .delete(baseUrlOfSut + "/app/api/assignments/delete/827/bpQNYk9WSun/vhi70ilFFp28ye_7?username=9T1%7EK")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"bpQNYk9WSun\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/assignments/delete/{employeeId}/{projectId}/{commitDate}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_332_deleteOnWithQueryParamsReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1620L)
                .d("ADR", "\"S]AbWA\"")
                .d("POSTAL_CODE", "\"y3yhsg7rP2NcRIg\"")
                .d("CITY", "\"_EM_5386_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 1619L)
                .d("DEPARTMENT_NAME", "\"sI23bvEWsb\"")
            .and().insertInto("EMPLOYEES", 1618L)
                .d("FIRST_NAME", "\"XhC0\"")
                .d("LAST_NAME", "\"_EM_5582_XYZ_\"")
                .d("EMAIL", "\"QH@X.UJ\"")
                .d("PHONE", "\"BLt4rDYUnu\"")
                .d("JOB", "\"A5PsX7n5PDw7NTY\"")
                .d("SALARY", "0.6355764862062817")
            .and().insertInto("EMPLOYEES", 1615L)
                .d("FIRST_NAME", "\"ix9W65x_\"")
                .d("LAST_NAME", "\"_EM_5583_XYZ_\"")
                .d("EMAIL", "\"kef@vbv.OU\"")
                .d("PHONE", "\"ogDBdyKl5J\"")
                .d("JOB", "\"m5yD103b\"")
                .d("SALARY", "1.9")
            .and().insertInto("USER_CREDENTIALS", 1611L)
                .d("USERNAME", "\"VzME4R9hjUl\"")
                .d("PASSWORD", "\"_EM_5584_XYZ_\"")
                .d("ENABLED", "false")
                .d("ROLE", "\"_EM_5585_XYZ_\"")
                .d("EMPLOYEE_ID", "NULL")
            .and().insertInto("PROJECTS", 1569L)
                .d("TITLE", "\"Gy9qF14M2i:\"")
                .d("STATUS", "\"qs_7c4\"")
            .and().insertInto("LOCATIONS", 1568L)
                .d("ADR", "\"_EM_5568_XYZ_e\"")
                .d("POSTAL_CODE", "\"G\"")
                .d("CITY", "\"zTMadiK5ej_wNhzl\"")
            .and().insertInto("DEPARTMENTS", 1567L)
                .d("DEPARTMENT_NAME", "\"Billingk\"")
            .and().insertInto("EMPLOYEES", 1566L)
                .d("FIRST_NAME", "\"054Lr8a1UD3cqA\"")
                .d("LAST_NAME", "\"_EM_5388_XYZ_7\"")
                .d("EMAIL", "\"gmWB@yDB.tih\"")
                .d("PHONE", "\"_EM_5339_XYZ_\"")
                .d("JOB", "\"T\"")
                .d("SALARY", "-1836.1717721682587")
            .and().insertInto("EMPLOYEES", 1563L)
                .d("FIRST_NAME", "\"elYS3AXFIqMW\"")
                .d("LAST_NAME", "\"_EM_5341_XYZ_\"")
                .d("EMAIL", "\"KxZ@TEE.EtMC\"")
                .d("PHONE", "\"Tmfqc6uohhk\"")
                .d("JOB", "\"1X4lSi8c\"")
                .d("SALARY", "18889.314188789744")
            .and().insertInto("USER_CREDENTIALS", 1580L)
                .d("USERNAME", "NULL")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "true")
                .d("ROLE", "\"AK9jTW_RweDl_S\"")
                .r("EMPLOYEE_ID", 1566L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/delete/{employeeId}/{projectId}/{commitDate}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .delete(baseUrlOfSut + "/app/api/assignments/delete/_EM_5384_XYZ_/bpQNYk9WSun/_EM_5566_XYZ_?" + 
                    "password=_EM_5567_XYZ_&" + 
                    "username=_EM_5383_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"_EM_5384_XYZ_\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/assignments/delete/{employeeId}/{projectId}/{commitDate}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_333_deleteOnDeletReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/delete/{employeeId}/{projectId}/{commitDate}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .delete(baseUrlOfSut + "/app/api/assignments/delete/_EM_495_XYZ_/Fnd/_EM_494_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"_EM_495_XYZ_\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/assignments/delete/{employeeId}/{projectId}/{commitDate}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_334_deleteOnDeletReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/delete/{employeeId}/{projectId}/{commitDate}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .delete(baseUrlOfSut + "/app/api/assignments/delete/827/_EM_2448_XYZ_/_EM_4485_XYZ_?" + 
                    "password=z_vpIOmCx69n3I9i&" + 
                    "username=qopFyP")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"_EM_2448_XYZ_\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/app/api/assignments/delete/{employeeId}/{projectId}/{commitDate}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_335_deleteOnDeletReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/delete/{employeeId}/{projectId}/{commitDate}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .delete(baseUrlOfSut + "/app/api/assignments/delete/-31941/ZO7BKIPvk8p7SCG/UR?" + 
                    "password=8H3A1ZTFv&" + 
                    "username=_EM_2500_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"ZO7BKIPvk8p7SCG\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/app/api/assignments/data/project-commit/{employeeId}/{projectId}/{commitDate}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test @Timeout(60)
    public void test_336_getOnProject_commitShowsFaults_100_101() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault100. HTTP Status 500. com/pfa/app/security/UserDetailsImpl_29_getUsername.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/api/assignments/data/project-commit/{employeeId}/{projectId}/{commitDate}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/assignments/data/project-commit/_EU_3;54%60XUZU/524288/_EM_3351_XYZ_?" + 
                    "password=_EM_3356_XYZ_&" + 
                    "username=_EM_3357_XYZ_")
                .then()
                .statusCode(500)// com/pfa/app/security/UserDetailsImpl_29_getUsername
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/assignments/data/project-commit/{employeeId}/{projectId}/{commitDate}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_337_getOnWithQueryParamsReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/data/project-commit/{employeeId}/{projectId}/{commitDate}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2070_XYZ_")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/assignments/data/project-commit/6/3/19-12-202011:17:12?" + 
                    "EMextraParam123=hSMZITNaQYuVFgA&" + 
                    "password=%242a%2410%246pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78%2FcvOprSR3lsZL2&" + 
                    "username=soumayahajjem")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO ProjectCommit object FOUND! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/assignments/data/project-commit/{employeeId}/{projectId}/{commitDate}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_338_getOnProject_commitReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/data/project-commit/{employeeId}/{projectId}/{commitDate}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/assignments/data/project-commit/_EM_2904_XYZ_/_EM_2905_XYZ_/19-12-202011:17:44")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"_EM_2904_XYZ_\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/assignments/data/project-commit/{employeeId}/{projectId}/{commitDate}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_339_getOnProject_commitReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/data/project-commit/{employeeId}/{projectId}/{commitDate}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/assignments/data/project-commit/8/_EM_490_XYZ_/_EM_489_XYZ_?EMextraParam123=_EM_491_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"_EM_490_XYZ_\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/app/api/assignments/data/project-commit/{employeeId}/{projectId}/{commitDate}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_340_getOnProject_commitReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/data/project-commit/{employeeId}/{projectId}/{commitDate}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/assignments/data/project-commit/252/524288/_EM_3360_XYZ_?" + 
                    "password=_EM_3356_XYZ_&" + 
                    "username=_EM_3357_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Text '_EM_3360_XYZ_' could not be parsed at index 0"))
                .body("'status'", containsString("BAD_REQUEST"));
    }


}
