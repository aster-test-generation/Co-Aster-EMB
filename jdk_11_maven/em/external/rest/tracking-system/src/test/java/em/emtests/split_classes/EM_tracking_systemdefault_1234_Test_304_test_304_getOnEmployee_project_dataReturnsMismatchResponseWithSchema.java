package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-17T13:43:22.813939-04:00[America/New_York]
 * <br>
*  The generated test suite contains 341 tests
 * <br>
*  Covered targets: 1793
 * <br>
*  Used time: 1h 5m 1s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  
*/

public class EM_tracking_systemdefault_1234_Test_304_test_304_getOnEmployee_project_dataReturnsMismatchResponseWithSchema {
    

    
    private static final SutHandler controller = new em.external.com.pfa.app.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/tracking-system-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("ASSIGNMENTS","DEPARTMENTS","EMPLOYEES","LOCATIONS","PROJECTS","USER_CREDENTIALS","assignments","departments","employees","locations","projects","user_credentials"));
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (400) POST:/app/api/departments
    * 2 - (400) GET:/app/api/assignments/data/project-commit/{employeeId}/{projectId}/{commitDate}
    * 3 - (400) POST:/app/api/authenticate
    * 4 - (400) POST:/app/api/authenticate
    * 5 - (200) POST:/app/api/credentials
    * 6 - (200) GET:/app/api/credentials/{id}
    * 7 - (200) GET:/app/api/employees/data/employee-project-data/{employeeId}
    * Found 6 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_304_getOnEmployee_project_dataReturnsMismatchResponseWithSchema() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/departments'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"departmentId\": 557, " + 
                    " \"location\": { " + 
                    " \"locationId\": 721, " + 
                    " \"postalCode\": \"_EM_2520_XYZ_\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/departments?password=_EM_2521_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Unable to find com.pfa.app.model.entity.Location with id 721; nested exception is javax.persistence.EntityNotFoundException: Unable to find com.pfa.app.model.entity.Location with id 721"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/data/project-commit/{employeeId}/{projectId}/{commitDate}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/assignments/data/project-commit/xcGDEeTBnzD2/SAjpuAcXEMSQ4KyN/W")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"xcGDEeTBnzD2\""))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/authenticate'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/app/api/authenticate?password=Y6nrMQ0")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Bad credentials"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/authenticate'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"username\": \"A19mEByk\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/authenticate?" + 
                    "password=%242a%2410%241xbq6vQDlSvwxCly.1gnEezqehgGg15XzeiycPbTy3g6zxnw.U6Ni&" + 
                    "username=h_0IXnhI8aIlegrp")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Bad credentials"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/password'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        ValidatableResponse res_4 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"enabled\": false " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/credentials")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(15.0))
                .body("'username'", nullValue())
                .body("'password'", nullValue())
                .body("'enabled'", equalTo(false))
                .body("'role'", nullValue());
        String 
        location_credentials__103 = "/app/api/credentials" + "/" + res_4.extract().body().path("credentialId").toString();
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/password'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(resolveLocation(location_credentials__103, baseUrlOfSut + "/app/api/credentials/nogy?password=650LTVr5h4a1WpOg"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(15.0))
                .body("'username'", nullValue())
                .body("'password'", nullValue())
                .body("'enabled'", equalTo(false))
                .body("'role'", nullValue());
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/employees/data/employee-project-data/12?username=_EM_2530_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(2))
                .body("'collection'[0].'startDate'", containsString("2020-11-02"))
                .body("'collection'[0].'endDate'", containsString("2021-05-01"))
                .body("'collection'[0].'projectId'", numberMatches(8.0))
                .body("'collection'[0].'status'", containsString("IN_PROGRESS"))
                .body("'collection'[0].'title'", containsString("GREENPLUME_UPGRADE"))
                .body("'collection'[1].'startDate'", containsString("2020-06-01"))
                .body("'collection'[1].'endDate'", containsString("2021-03-02"))
                .body("'collection'[1].'projectId'", numberMatches(9.0))
                .body("'collection'[1].'status'", containsString("IN_PROGRESS"))
                .body("'collection'[1].'title'", containsString("COMMISION_AUTOMATION"));
    }
}
