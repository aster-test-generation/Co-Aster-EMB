package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-17T13:43:22.813939-04:00[America/New_York]
 * <br>
*  The generated test suite contains 341 tests
 * <br>
*  Covered targets: 1793
 * <br>
*  Used time: 1h 5m 1s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  
*/

public class EM_tracking_systemdefault_1234_Test_81_test_81_postOnEmployeesReturnsMismatchResponseWithSchemaUsingSql {
    

    
    private static final SutHandler controller = new em.external.com.pfa.app.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/tracking-system-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("ASSIGNMENTS","DEPARTMENTS","EMPLOYEES","LOCATIONS","PROJECTS","USER_CREDENTIALS","assignments","departments","employees","locations","projects","user_credentials"));
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (400) POST:/app/api/departments
    * 2 - (400) DELETE:/app/api/assignments/delete/{employeeId}/{projectId}/{commitDate}
    * 3 - (200) POST:/app/api/credentials
    * 4 - (200) GET:/app/api/credentials/
    * 5 - (200) GET:/app/api/credentials/username/{username}
    * 6 - (400) POST:/app/api/employees
    * Found 3 potential faults of type-code 101
    * Using 2 examples:
    *   dd-MM-yyyy
    *   dd-MM-yyyyHH:mm:ss
    */
    @Test @Timeout(60)
    public void test_81_postOnEmployeesReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1620L)
                .d("ADR", "\"SaAbWA\"")
                .d("POSTAL_CODE", "\"y3yhsg7rP2NcSIg\"")
                .d("CITY", "\"OnG\"")
            .and().insertInto("DEPARTMENTS", 1619L)
                .d("DEPARTMENT_NAME", "\"sI23bvEWsb\"")
            .and().insertInto("EMPLOYEES", 1618L)
                .d("FIRST_NAME", "\"WhC0\"")
                .d("LAST_NAME", "\"k\"")
                .d("EMAIL", "\"PH@W.VI\"")
                .d("PHONE", "\"BLt4rDYUou\"")
                .d("JOB", "\"A5PsX7n5PDw7NTY\"")
                .d("SALARY", "0.6355764862062817")
            .and().insertInto("EMPLOYEES", 1615L)
                .d("FIRST_NAME", "\"ix9W65x_\"")
                .d("LAST_NAME", "\"Kg98lSG\"")
                .d("EMAIL", "\"kff@vbv.PT\"")
                .d("PHONE", "\"ogDBdyKl5J\"")
                .d("JOB", "\"m5yD103b\"")
                .d("SALARY", "0.8")
            .and().insertInto("USER_CREDENTIALS", 1611L)
                .d("USERNAME", "\"VzME4R9hjUl\"")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "false")
                .d("ROLE", "\"_EM_5395_XYZ_\"")
                .d("EMPLOYEE_ID", "NULL")
            .and().insertInto("LOCATIONS", 1568L)
                .d("ADR", "\"_EM_3719_XYZ_\"")
                .d("POSTAL_CODE", "\"G\"")
                .d("CITY", "\"CIgoexy1eG0y\"")
            .and().insertInto("DEPARTMENTS", 1567L)
                .d("DEPARTMENT_NAME", "\"Billing\"")
            .and().insertInto("EMPLOYEES", 1566L)
                .d("FIRST_NAME", "\"054Lq8a1UD3cqA\"")
                .d("LAST_NAME", "\"_EM_5388_XYZ_\"")
                .d("EMAIL", "\"gmWB@yDA.tih\"")
                .d("PHONE", "\"_EM_5339_XYZ_\"")
                .d("JOB", "\"P\"")
                .d("SALARY", "0.0")
            .and().insertInto("EMPLOYEES", 1563L)
                .d("FIRST_NAME", "\"_EM_5340_XYZ_\"")
                .d("LAST_NAME", "\"_EM_5341_XYZ_\"")
                .d("EMAIL", "\"Kxa@TFE.EtMC\"")
                .d("PHONE", "\"Tmfqc6uophk\"")
                .d("JOB", "\"_EM_5342_XYZ_\"")
                .d("SALARY", "0.8524167800005203")
            .and().insertInto("USER_CREDENTIALS", 1580L)
                .d("USERNAME", "NULL")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "false")
                .d("ROLE", "\"AK9jTW_RweDl_S\"")
                .r("EMPLOYEE_ID", 1566L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/departments'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"departmentName\": \"\", " + 
                    " \"location\": { " + 
                    " \"adr\": \"_EM_5336_XYZ_\", " + 
                    " \"city\": \"keKkCXJX\", " + 
                    " \"locationId\": 81, " + 
                    " \"postalCode\": \"\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/departments?" + 
                    "password=&" + 
                    "username=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Validation failed for classes [com.pfa.app.model.entity.Department] during persist time for groups [javax.validation.groups.Default, ]\nList of constraint violations:[\n\tConstraintViolationImpl{interpolatedMessage='*Must not blank**', propertyPath=departmentName, rootBeanClass=class com.pfa.app.model.entity.Department, messageTemplate='*Must not blank**'}\n]"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/assignments/delete/{employeeId}/{projectId}/{commitDate}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .delete(baseUrlOfSut + "/app/api/assignments/delete/827/bpQNYk9WSun/vhi70ilFFp28ye_7?username=9T1%7EK")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"bpQNYk9WSun\""))
                .body("'status'", containsString("BAD_REQUEST"));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 465, " + 
                    " \"enabled\": false, " + 
                    " \"password\": \"\", " + 
                    " \"role\": \"8Z0ldSa7M\", " + 
                    " \"username\": \"9T1~K\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/credentials")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(17.0))
                .body("'username'", containsString("9T1~K"))
                .body("'password'", containsString(""))
                .body("'enabled'", equalTo(false))
                .body("'role'", containsString("8Z0ldSa7M"));
        String 
        location_credentials__120 = "/app/api/credentials" + "/" + res_2.extract().body().path("credentialId").toString();
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(resolveLocation(location_credentials__120, baseUrlOfSut + "/app/api/credentials/?username=9T1%7EK"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(17.0))
                .body("'username'", containsString("9T1~K"))
                .body("'password'", containsString(""))
                .body("'enabled'", equalTo(false))
                .body("'role'", containsString("8Z0ldSa7M"));
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/credentials/username/9T1~K?" + 
                    "password=&" + 
                    "username=9T1%7EK")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(17.0))
                .body("'username'", containsString("9T1~K"))
                .body("'password'", containsString(""))
                .body("'enabled'", equalTo(false))
                .body("'role'", containsString("8Z0ldSa7M"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"department\": { " + 
                    " \"departmentName\": \"q\" " + 
                    " }, " + 
                    " \"email\": \"OS@czg.ib\", " + 
                    " \"employeeId\": 1049097, " + 
                    " \"firstName\": \"_EM_5346_XYZ_\", " + 
                    " \"hiredate\": \"Weg67\", " + 
                    " \"salary\": 0.7142280752997343 " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/employees")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"Weg67\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'Weg67' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"Weg67\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'Weg67' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 122] (through reference chain: com.pfa.app.model.entity.Employee[\"hiredate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
}
