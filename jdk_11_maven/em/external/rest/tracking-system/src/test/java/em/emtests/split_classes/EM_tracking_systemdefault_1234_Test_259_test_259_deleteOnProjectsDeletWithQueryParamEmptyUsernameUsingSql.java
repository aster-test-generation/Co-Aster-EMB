package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-17T13:43:22.813939-04:00[America/New_York]
 * <br>
*  The generated test suite contains 341 tests
 * <br>
*  Covered targets: 1793
 * <br>
*  Used time: 1h 5m 1s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  
*/

public class EM_tracking_systemdefault_1234_Test_259_test_259_deleteOnProjectsDeletWithQueryParamEmptyUsernameUsingSql {
    

    
    private static final SutHandler controller = new em.external.com.pfa.app.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/tracking-system-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("ASSIGNMENTS","DEPARTMENTS","EMPLOYEES","LOCATIONS","PROJECTS","USER_CREDENTIALS","assignments","departments","employees","locations","projects","user_credentials"));
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (200) POST:/app/api/credentials
    * 2 - (200) GET:/app/api/credentials/{id}
    * 3 - (400) DELETE:/app/api/projects/delete/{id}
    * Found 3 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_259_deleteOnProjectsDeletWithQueryParamEmptyUsernameUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 806L)
                .d("ADR", "\"p8z388\"")
                .d("POSTAL_CODE", "\"ii_LHQKIkGOVU4c\"")
                .d("CITY", "\"_EM_3796_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 805L)
                .d("DEPARTMENT_NAME", "\"k\"")
            .and().insertInto("EMPLOYEES", 804L)
                .d("FIRST_NAME", "\"6/JOCayQE\"")
                .d("LAST_NAME", "\"89YKnpwtr\"")
                .d("EMAIL", "\"pMFf@Ny.SK\"")
                .d("PHONE", "\"_EM_3797_XYZ_\"")
                .d("JOB", "\"L9Srq9gdJ\"")
                .d("SALARY", "0.9771249276377271")
            .and().insertInto("LOCATIONS", 803L)
                .d("ADR", "\"^\"")
                .d("POSTAL_CODE", "\"_EM_3781_XYZ_\"")
                .d("CITY", "\"rFZIzyz9Ok\"")
            .and().insertInto("DEPARTMENTS", 802L)
                .d("DEPARTMENT_NAME", "\"7uJ2e7J\"")
            .and().insertInto("EMPLOYEES", 801L)
                .d("FIRST_NAME", "\"oIAFJXrqYo_YUGFM\"")
                .d("LAST_NAME", "\"_EM_3798_XYZ_\"")
                .d("EMAIL", "\"hpSH@y.haY\"")
                .d("PHONE", "\"vCIIA7uJ3TKTB^n\"")
                .d("JOB", "\"_EM_3774_XYZ_\"")
                .d("SALARY", "2.044997140349349")
            .and().insertInto("LOCATIONS", 800L)
                .d("ADR", "\"_EM_3799_XYZ_\"")
                .d("POSTAL_CODE", "\"hVYIA3FSG7PP4U1U\"")
                .d("CITY", "\"_EM_3800_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 799L)
                .d("DEPARTMENT_NAME", "\"_EM_3801_XYZ_\"")
            .and().insertInto("EMPLOYEES", 798L)
                .d("FIRST_NAME", "\"_EM_3783_XYZ_\"")
                .d("LAST_NAME", "\"Ilj5azGK4MV3\"")
                .d("EMAIL", "\"VcT@Iln.WjX\"")
                .d("PHONE", "\"_EM_3784_XYZ_\"")
                .d("JOB", "\"_EM_3775_XYZ_\"")
                .d("SALARY", "0.8342075618794473")
            .and().insertInto("USER_CREDENTIALS", 797L)
                .d("USERNAME", "\"2kciS8bnNdR5OSqB\"")
                .d("PASSWORD", "\"Ys6zzHczB\"")
                .d("ENABLED", "false")
                .d("ROLE", "\"NMW26E8mKVw0vO\"")
                .d("EMPLOYEE_ID", "3")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/role'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 424, " + 
                    " \"enabled\": true, " + 
                    " \"password\": \"S1hSVTnEqdy1\", " + 
                    " \"username\": \"_EM_3780_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/credentials")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(16.0))
                .body("'username'", containsString("_EM_3780_XYZ_"))
                .body("'password'", containsString("S1hSVTnEqdy1"))
                .body("'enabled'", equalTo(true))
                .body("'role'", nullValue());
        String 
        location_credentials__20 = "/app/api/credentials" + "/" + res_0.extract().body().path("credentialId").toString();
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/role'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(resolveLocation(location_credentials__20, baseUrlOfSut + "/app/api/credentials/srhQ?username=_EM_3780_XYZ_"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(16.0))
                .body("'username'", containsString("_EM_3780_XYZ_"))
                .body("'password'", containsString("S1hSVTnEqdy1"))
                .body("'enabled'", equalTo(true))
                .body("'role'", nullValue());
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/delete/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_EMP)
                .delete(baseUrlOfSut + "/app/api/projects/delete/A81_1jV?username=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"A81_1jV\""))
                .body("'status'", containsString("BAD_REQUEST"));
    }
}
