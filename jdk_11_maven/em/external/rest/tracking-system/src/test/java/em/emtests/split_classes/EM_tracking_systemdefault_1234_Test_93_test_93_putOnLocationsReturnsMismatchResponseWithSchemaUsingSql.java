package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-17T13:43:22.813939-04:00[America/New_York]
 * <br>
*  The generated test suite contains 341 tests
 * <br>
*  Covered targets: 1793
 * <br>
*  Used time: 1h 5m 1s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  
*/

public class EM_tracking_systemdefault_1234_Test_93_test_93_putOnLocationsReturnsMismatchResponseWithSchemaUsingSql {
    

    
    private static final SutHandler controller = new em.external.com.pfa.app.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/tracking-system-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("ASSIGNMENTS","DEPARTMENTS","EMPLOYEES","LOCATIONS","PROJECTS","USER_CREDENTIALS","assignments","departments","employees","locations","projects","user_credentials"));
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (400) POST:/app/api/departments
    * 2 - (200) GET:/app/api/departments
    * 3 - (400) PUT:/app/api/locations
    * Found 3 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_93_putOnLocationsReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 5185L)
                .d("ADR", "\"dkJswJqO\"")
                .d("POSTAL_CODE", "\"Q1JDSgS\"")
                .d("CITY", "\"8XPV2PHMm7a\"")
            .and().insertInto("LOCATIONS", 5189L)
                .d("ADR", "\"Iqgi4B\"")
                .d("POSTAL_CODE", "\"f2UoDWtzM\"")
                .d("CITY", "\"B_aIcP0r66wh\"")
            .and().insertInto("DEPARTMENTS", 5188L)
                .d("DEPARTMENT_NAME", "\"OItgYLdEqZbWehn\"")
                .d("LOCATION_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/departments'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"departmentId\": 782, " + 
                    " \"departmentName\": \"szHtvE\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/departments?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Validation failed for classes [com.pfa.app.model.entity.Department] during persist time for groups [javax.validation.groups.Default, ]\nList of constraint violations:[\n\tConstraintViolationImpl{interpolatedMessage='*Must not NULL**', propertyPath=location, rootBeanClass=class com.pfa.app.model.entity.Department, messageTemplate='*Must not NULL**'}\n]"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/3/location'] Instance type (null) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/departments?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(4))
                .body("'collection'[0].'departmentId'", numberMatches(4.0))
                .body("'collection'[0].'departmentName'", containsString("DWH"))
                .body("'collection'[0].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'departmentName'", containsString("Digital"))
                .body("'collection'[1].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'departmentName'", containsString("Billing"))
                .body("'collection'[2].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'location'.'city'", containsString("LAC2"))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/locations'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_528_XYZ_")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"city\": \"wVQ_Icx5t\", " + 
                    " \"locationId\": -1075002874, " + 
                    " \"postalCode\": \"bFIiw\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/locations")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Validation failed for classes [com.pfa.app.model.entity.Location] during persist time for groups [javax.validation.groups.Default, ]\nList of constraint violations:[\n\tConstraintViolationImpl{interpolatedMessage='*Must Not blank**', propertyPath=adr, rootBeanClass=class com.pfa.app.model.entity.Location, messageTemplate='*Must Not blank**'}\n]"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
}
