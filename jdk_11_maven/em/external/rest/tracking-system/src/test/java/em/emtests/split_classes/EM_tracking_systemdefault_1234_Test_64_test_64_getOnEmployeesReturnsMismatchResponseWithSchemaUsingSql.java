package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-17T13:43:22.813939-04:00[America/New_York]
 * <br>
*  The generated test suite contains 341 tests
 * <br>
*  Covered targets: 1793
 * <br>
*  Used time: 1h 5m 1s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  
*/

public class EM_tracking_systemdefault_1234_Test_64_test_64_getOnEmployeesReturnsMismatchResponseWithSchemaUsingSql {
    

    
    private static final SutHandler controller = new em.external.com.pfa.app.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/tracking-system-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("ASSIGNMENTS","DEPARTMENTS","EMPLOYEES","LOCATIONS","PROJECTS","USER_CREDENTIALS","assignments","departments","employees","locations","projects","user_credentials"));
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (200) GET:/app/api/employees/
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_64_getOnEmployeesReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("DEPARTMENTS", 400L)
                .d("DEPARTMENT_NAME", "\"V9iniSU\"")
                .d("LOCATION_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/0/manager/hiredate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/employees/?password=SdhFee0N5Oz_vKe")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(14))
                .body("'collection'[0].'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'firstName'", containsString("Selim"))
                .body("'collection'[0].'lastName'", containsString("Horri"))
                .body("'collection'[0].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'phone'", containsString("22125144"))
                .body("'collection'[0].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[0].'job'", containsString("Billing"))
                .body("'collection'[0].'salary'", numberMatches(5000.0))
                .body("'collection'[0].'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[0].'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[0].'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[0].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[0].'manager'.'hiredate'", nullValue())
                .body("'collection'[0].'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[0].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[0].'manager'.'manager'", nullValue())
                .body("'collection'[0].'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[0].'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[0].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[0].'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[0].'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[0].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'employeeId'", numberMatches(2.0))
                .body("'collection'[1].'firstName'", containsString("Badr"))
                .body("'collection'[1].'lastName'", containsString("Idoudi"))
                .body("'collection'[1].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'phone'", containsString("22125144"))
                .body("'collection'[1].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[1].'job'", containsString("Digital"))
                .body("'collection'[1].'salary'", numberMatches(5000.0))
                .body("'collection'[1].'manager'.'employeeId'", numberMatches(9.0))
                .body("'collection'[1].'manager'.'firstName'", containsString("John"))
                .body("'collection'[1].'manager'.'lastName'", containsString("Doe"))
                .body("'collection'[1].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[1].'manager'.'hiredate'", nullValue())
                .body("'collection'[1].'manager'.'job'", containsString("Chef service digital"))
                .body("'collection'[1].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[1].'manager'.'manager'", nullValue())
                .body("'collection'[1].'manager'.'department'.'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'manager'.'department'.'departmentName'", containsString("Digital"))
                .body("'collection'[1].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'manager'.'credential'.'credentialId'", numberMatches(7.0))
                .body("'collection'[1].'manager'.'credential'.'username'", containsString("johndoe"))
                .body("'collection'[1].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[1].'department'.'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'department'.'departmentName'", containsString("Digital"))
                .body("'collection'[1].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'credential'.'credentialId'", numberMatches(2.0))
                .body("'collection'[1].'credential'.'username'", containsString("badridoudi"))
                .body("'collection'[1].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'employeeId'", numberMatches(3.0))
                .body("'collection'[2].'firstName'", containsString("Imen"))
                .body("'collection'[2].'lastName'", containsString("Touk"))
                .body("'collection'[2].'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'phone'", containsString("22125144"))
                .body("'collection'[2].'hiredate'", containsString("15-04-2019"))
                .body("'collection'[2].'job'", containsString("Data Warehouse"))
                .body("'collection'[2].'salary'", numberMatches(5000.0))
                .body("'collection'[2].'manager'.'employeeId'", numberMatches(5.0))
                .body("'collection'[2].'manager'.'firstName'", containsString("Nour"))
                .body("'collection'[2].'manager'.'lastName'", containsString("Larguech"))
                .body("'collection'[2].'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'manager'.'phone'", containsString("22125144"))
                .body("'collection'[2].'manager'.'hiredate'", nullValue())
                .body("'collection'[2].'manager'.'job'", containsString("Chef service Data Warehouse"))
                .body("'collection'[2].'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[2].'manager'.'manager'", nullValue())
                .body("'collection'[2].'manager'.'department'.'departmentId'", numberMatches(4.0))
                .body("'collection'[2].'manager'.'department'.'departmentName'", containsString("DWH"))
                .body("'collection'[2].'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'manager'.'credential'.'credentialId'", numberMatches(6.0))
                .body("'collection'[2].'manager'.'credential'.'username'", containsString("nourlarguech"))
                .body("'collection'[2].'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[2].'department'.'departmentId'", numberMatches(4.0))
                .body("'collection'[2].'department'.'departmentName'", containsString("DWH"))
                .body("'collection'[2].'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'credential'.'credentialId'", numberMatches(1.0))
                .body("'collection'[2].'credential'.'username'", containsString("imentouk"))
                .body("'collection'[2].'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'credential'.'role'", containsString("ROLE_EMP"))
                ; // Skipping assertions on the remaining 11 elements. This limit of 3 elements can be increased in the configurations
    }
}
