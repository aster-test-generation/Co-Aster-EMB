package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-17T13:43:22.813939-04:00[America/New_York]
 * <br>
*  The generated test suite contains 341 tests
 * <br>
*  Covered targets: 1793
 * <br>
*  Used time: 1h 5m 1s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  
*/

public class EM_tracking_systemdefault_1234_Test_70_test_70_getOnCredentialsReturnsMismatchResponseWithSchemaUsingSql {
    

    
    private static final SutHandler controller = new em.external.com.pfa.app.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/tracking-system-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("ASSIGNMENTS","DEPARTMENTS","EMPLOYEES","LOCATIONS","PROJECTS","USER_CREDENTIALS","assignments","departments","employees","locations","projects","user_credentials"));
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (400) PUT:/app/api/projects/update
    * 2 - (400) PUT:/app/api/projects/update
    * 3 - (200) POST:/app/api/credentials
    * 4 - (200) GET:/app/api/credentials/
    * Found 3 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_70_getOnCredentialsReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 5248L)
                .d("ADR", "\"OhgTZQMUZ\"")
                .d("POSTAL_CODE", "\"1kjSnJ\"")
                .d("CITY", "\"o\"")
            .and().insertInto("DEPARTMENTS", 5247L)
                .d("DEPARTMENT_NAME", "\"cfrb\"")
            .and().insertInto("EMPLOYEES", 5246L)
                .d("FIRST_NAME", "\"qHm5RX\"")
                .d("LAST_NAME", "\"gpBNlSMOfaTmBT\"")
                .d("EMAIL", "\"fSSB@tRB.mu\"")
                .d("PHONE", "\"6w\"")
                .d("JOB", "\"A8Y2\"")
                .d("SALARY", "0.29448291604020016")
            .and().insertInto("EMPLOYEES", 5243L)
                .d("FIRST_NAME", "\"IP5Um_ynD\"")
                .d("LAST_NAME", "\"QnC9zklcnm\"")
                .d("EMAIL", "\"wj@f.Sgj\"")
                .d("PHONE", "\"Pa7bk_PMfgvC5tgX\"")
                .d("JOB", "\"DARkoDgMqwWqO\"")
                .d("SALARY", "0.3483772277232007")
            .and().insertInto("EMPLOYEES", 5240L)
                .d("FIRST_NAME", "\"HPyuTqnkCWDr\"")
                .d("LAST_NAME", "\"RfnNa96ls\"")
                .d("EMAIL", "\"hy@q.VqLs\"")
                .d("PHONE", "\"RX084Blo\"")
                .d("HIREDATE", "\"2005-12-14\"")
                .d("JOB", "\"UZGfljp3zd8\"")
                .d("SALARY", "0.9857939412248721")
                .d("MANAGER_ID", "NULL")
                .d("DEPARTMENT_ID", "NULL")
            .and().insertInto("LOCATIONS", 5258L)
                .d("ADR", "\"rElZN6PsXNgZq6WC\"")
                .d("POSTAL_CODE", "\"z1GeYsHDUz8WOHv\"")
                .d("CITY", "\"_o\"")
            .and().insertInto("DEPARTMENTS", 5257L)
                .d("DEPARTMENT_NAME", "\"L4\"")
            .and().insertInto("EMPLOYEES", 5256L)
                .d("FIRST_NAME", "\"YReB19Q\"")
                .d("LAST_NAME", "\"vCV_XCsIMK5\"")
                .d("EMAIL", "\"Cqh@bgb.wwM\"")
                .d("PHONE", "\"We\"")
                .d("JOB", "\"Xjia4Jk\"")
                .d("SALARY", "0.3383180473170083")
            .and().insertInto("EMPLOYEES", 5253L)
                .d("FIRST_NAME", "\"Irfpmc\"")
                .d("LAST_NAME", "\"0nkVTx7l\"")
                .d("EMAIL", "\"tEJ@Arx.tZsf\"")
                .d("PHONE", "\"TDhVghOz1czc0\"")
                .d("JOB", "\"xm92WiSWa\"")
                .d("SALARY", "0.20986144252087247")
            .and().insertInto("ASSIGNMENTS", 5249L)
                .d("EMPLOYEE_ID", "13")
                .d("PROJECT_ID", "5")
                .d("COMMIT_DATE", "\"2100-12-15 05:27:22\"")
                .d("COMMIT_EMP_DESC", "\"\"")
                .d("COMMIT_MGR_DESC", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"title\": \"S00KD1oqVJbI9lj\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/projects/update")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Validation failed for classes [com.pfa.app.model.entity.Project] during persist time for groups [javax.validation.groups.Default, ]\nList of constraint violations:[\n\tConstraintViolationImpl{interpolatedMessage='Must not blank*', propertyPath=status, rootBeanClass=class com.pfa.app.model.entity.Project, messageTemplate='Must not blank*'}\n]"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"endDate\": \"vB\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/projects/update?" + 
                    "password=CfpSM9&" + 
                    "username=XeU")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String \"vB\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'vB' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String \"vB\": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'vB' could not be parsed at index 0\n at [Source: (ByteArrayInputStream); line: 1, column: 12] (through reference chain: com.pfa.app.model.entity.Project[\"endDate\"])"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/username'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        ValidatableResponse res_2 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 462, " + 
                    " \"enabled\": false, " + 
                    " \"password\": \"_EM_9789_XYZ_\", " + 
                    " \"role\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/credentials")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(15.0))
                .body("'username'", nullValue())
                .body("'password'", containsString("_EM_9789_XYZ_"))
                .body("'enabled'", equalTo(false))
                .body("'role'", containsString(""));
        String 
        location_credentials__944 = "/app/api/credentials" + "/" + res_2.extract().body().path("credentialId").toString();
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(resolveLocation(location_credentials__944, baseUrlOfSut + "/app/api/credentials/?password=_EM_9789_XYZ_&username=nP2SbLbbLgMq"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(15.0))
                .body("'username'", nullValue())
                .body("'password'", containsString("_EM_9789_XYZ_"))
                .body("'enabled'", equalTo(false))
                .body("'role'", containsString(""));
    }
}
