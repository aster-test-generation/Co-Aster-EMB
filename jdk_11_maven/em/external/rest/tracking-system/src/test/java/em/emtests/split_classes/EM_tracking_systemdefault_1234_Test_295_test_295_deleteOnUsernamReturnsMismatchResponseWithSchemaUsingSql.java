package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-17T13:43:22.813939-04:00[America/New_York]
 * <br>
*  The generated test suite contains 341 tests
 * <br>
*  Covered targets: 1793
 * <br>
*  Used time: 1h 5m 1s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  
*/

public class EM_tracking_systemdefault_1234_Test_295_test_295_deleteOnUsernamReturnsMismatchResponseWithSchemaUsingSql {
    

    
    private static final SutHandler controller = new em.external.com.pfa.app.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/tracking-system-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("ASSIGNMENTS","DEPARTMENTS","EMPLOYEES","LOCATIONS","PROJECTS","USER_CREDENTIALS","assignments","departments","employees","locations","projects","user_credentials"));
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (400) DELETE:/app/api/employees/username/{username}
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_295_deleteOnUsernamReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1217L)
                .d("ADR", "\"iskm\"")
                .d("POSTAL_CODE", "\"5rrl4t\"")
                .d("CITY", "\"8tjfU_OD6BnxmoF\"")
            .and().insertInto("DEPARTMENTS", 1216L)
                .d("DEPARTMENT_NAME", "\"HP_X2hcLRL\"")
            .and().insertInto("EMPLOYEES", 1215L)
                .d("FIRST_NAME", "\"J\"")
                .d("LAST_NAME", "\"1BDrKuUwBvOTmwh0\"")
                .d("EMAIL", "\"fT@fR.agqE\"")
                .d("PHONE", "\"_EM_4666_XYZ_\"")
                .d("JOB", "\"86XeOeKw\"")
                .d("SALARY", "0.5541756")
            .and().insertInto("LOCATIONS", 1214L)
                .d("ADR", "\"_N\"")
                .d("POSTAL_CODE", "\"_EM_4667_XYZ_\"")
                .d("CITY", "\"zuqThCt6xZU\"")
            .and().insertInto("DEPARTMENTS", 1213L)
                .d("DEPARTMENT_NAME", "\"yVE60LstGKmr4io\"")
            .and().insertInto("EMPLOYEES", 1212L)
                .d("FIRST_NAME", "\"TKJFSZ_In\"")
                .d("LAST_NAME", "\"uv20Kt4eYsEUjPhD\"")
                .d("EMAIL", "\"bxkM@JmR.jWB\"")
                .d("PHONE", "\"tcxLeG\"")
                .d("JOB", "\"kFIUJs84x7VPHSaF\"")
                .d("SALARY", "0.5740844087347364")
            .and().insertInto("LOCATIONS", 1211L)
                .d("ADR", "\"rScJqq5MqMKM\"")
                .d("POSTAL_CODE", "\"_EM_4668_XYZ_\"")
                .d("CITY", "\"pBr\"")
            .and().insertInto("DEPARTMENTS", 1210L)
                .d("DEPARTMENT_NAME", "\"xbU0j2pwLz\"")
            .and().insertInto("EMPLOYEES", 1209L)
                .d("FIRST_NAME", "\"aI8x6Zd4ltvvUL\"")
                .d("LAST_NAME", "\"lJLat0\"")
                .d("EMAIL", "\"OO@u.bT\"")
                .d("PHONE", "\"HW8qoom\"")
                .d("JOB", "\"57Uy5HVVpDP\"")
                .d("SALARY", "0.6193330115149124")
            .and().insertInto("USER_CREDENTIALS", 1208L)
                .d("USERNAME", "NULL")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "true")
                .d("ROLE", "\"aOYA5VL\"")
                .d("EMPLOYEE_ID", "5")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/username/{username}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .delete(baseUrlOfSut + "/app/api/employees/username/_EM_4664_XYZ_?" + 
                    "password=_EM_4665_XYZ_&" + 
                    "username=tn98")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Credential object FOUND with username: _EM_4664_XYZ_ ! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
    }
}
