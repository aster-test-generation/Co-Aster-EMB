package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-17T13:43:22.813939-04:00[America/New_York]
 * <br>
*  The generated test suite contains 341 tests
 * <br>
*  Covered targets: 1793
 * <br>
*  Used time: 1h 5m 1s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  
*/

public class EM_tracking_systemdefault_1234_Test_124_test_124_putOnEmployeesReturnsMismatchResponseWithSchemaUsingSql {
    

    
    private static final SutHandler controller = new em.external.com.pfa.app.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/tracking-system-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("ASSIGNMENTS","DEPARTMENTS","EMPLOYEES","LOCATIONS","PROJECTS","USER_CREDENTIALS","assignments","departments","employees","locations","projects","user_credentials"));
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (400) PUT:/app/api/employees
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_124_putOnEmployeesReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1365L)
                .d("ADR", "\"G\"")
                .d("POSTAL_CODE", "\"_EM_4912_XYZ_\"")
                .d("CITY", "\"_EM_4913_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 1364L)
                .d("DEPARTMENT_NAME", "\"rhPQJ\"")
            .and().insertInto("EMPLOYEES", 1363L)
                .d("FIRST_NAME", "\"AWLcbN8a93a\"")
                .d("LAST_NAME", "\"Fv0HY6\"")
                .d("EMAIL", "\"We@CNj.EdtL\"")
                .d("PHONE", "\"_EM_4903_XYZ_A\"")
                .d("JOB", "\"4vmuQIXfT\"")
                .d("SALARY", "3.1408761041252378")
            .and().insertInto("EMPLOYEES", 1360L)
                .d("FIRST_NAME", "\"0uD4GBNbW1L\"")
                .d("LAST_NAME", "\"CXgBl2W83Jt~wpq\"")
                .d("EMAIL", "\"bo@V.EzBv\"")
                .d("PHONE", "\"DkMaU3UUKj9U\"")
                .d("JOB", "\"7IgAuNKu\"")
                .d("SALARY", "1.502423678474481")
            .and().insertInto("USER_CREDENTIALS", 1356L)
                .d("USERNAME", "\"az7hlbDAk\"")
                .d("PASSWORD", "\"cEvXEpfosjOA2mn2\"")
                .d("ENABLED", "false")
                .d("ROLE", "\"d\"")
                .r("EMPLOYEE_ID", 1363L)
            .and().insertInto("PROJECTS", 1376L)
            .and().insertInto("LOCATIONS", 1375L)
            .and().insertInto("DEPARTMENTS", 1374L)
            .and().insertInto("EMPLOYEES", 1373L)
                .d("EMAIL", "\"yPQIdjFGG8XT8\"")
                .d("PHONE", "\"72q4P0qRAL6S_\"")
            .and().insertInto("LOCATIONS", 1372L)
            .and().insertInto("DEPARTMENTS", 1371L)
            .and().insertInto("EMPLOYEES", 1370L)
                .d("EMAIL", "\"TweURZ4jzC\"")
                .d("PHONE", "\"_EM_8467_XYZ_\"")
            .and().insertInto("LOCATIONS", 1369L)
            .and().insertInto("DEPARTMENTS", 1368L)
            .and().insertInto("EMPLOYEES", 1367L)
                .d("EMAIL", "\"92NlJZQnbiH\"")
                .d("PHONE", "\"itPugrjnUUZPDrtO1\"")
            .and().insertInto("ASSIGNMENTS", 1366L)
                .d("EMPLOYEE_ID", "8")
                .d("PROJECT_ID", "9")
                .d("COMMIT_DATE", "\"1941-12-27 05:15:46\"")
                .d("COMMIT_EMP_DESC", "\"DDwNHXhsUpb\"")
                .d("COMMIT_MGR_DESC", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"credential\": { " + 
                    " \"credentialId\": 18, " + 
                    " \"password\": \"diF\", " + 
                    " \"role\": \"of\", " + 
                    " \"username\": \"Pjipypn\" " + 
                    " }, " + 
                    " \"employeeId\": 588, " + 
                    " \"job\": \"2tO\", " + 
                    " \"salary\": 0.2523191466263136 " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/employees?" + 
                    "password=7c5CdIs&" + 
                    "username=AZz")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", nullValue())
                .body("'status'", containsString("BAD_REQUEST"));
    }
}
