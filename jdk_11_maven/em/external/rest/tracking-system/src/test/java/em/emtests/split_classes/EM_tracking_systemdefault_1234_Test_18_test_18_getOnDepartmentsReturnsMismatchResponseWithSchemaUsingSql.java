package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-17T13:43:22.813939-04:00[America/New_York]
 * <br>
*  The generated test suite contains 341 tests
 * <br>
*  Covered targets: 1793
 * <br>
*  Used time: 1h 5m 1s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  
*/

public class EM_tracking_systemdefault_1234_Test_18_test_18_getOnDepartmentsReturnsMismatchResponseWithSchemaUsingSql {
    

    
    private static final SutHandler controller = new em.external.com.pfa.app.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/tracking-system-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("ASSIGNMENTS","DEPARTMENTS","EMPLOYEES","LOCATIONS","PROJECTS","USER_CREDENTIALS","assignments","departments","employees","locations","projects","user_credentials"));
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (200) GET:/app/api/departments/
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_18_getOnDepartmentsReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("PROJECTS", 170L)
                .d("TITLE", "\"FY2MGkX\"")
                .d("STATUS", "\"8s0KId5S9zJCZdi\"")
            .and().insertInto("LOCATIONS", 169L)
                .d("ADR", "\"NnSyFUCck\"")
                .d("POSTAL_CODE", "\"ePHlwJt2IQlu\"")
                .d("CITY", "\"JkAXPnZyNKovk\"")
            .and().insertInto("DEPARTMENTS", 168L)
                .d("DEPARTMENT_NAME", "\"mpxZJMIC3\"")
            .and().insertInto("EMPLOYEES", 167L)
                .d("FIRST_NAME", "\"shnPRzXcCTxW\"")
                .d("LAST_NAME", "\"QVOT\"")
                .d("EMAIL", "\"NqpT@Ze.iQ\"")
                .d("PHONE", "\"D64LZ\"")
                .d("JOB", "\"cfohytEPs\"")
                .d("SALARY", "0.19409175516553356")
            .and().insertInto("LOCATIONS", 166L)
                .d("ADR", "\"RClltXFKBZPh\"")
                .d("POSTAL_CODE", "\"AtzhMpqBTHDOB\"")
                .d("CITY", "\"Wk_\"")
            .and().insertInto("DEPARTMENTS", 165L)
                .d("DEPARTMENT_NAME", "\"7_WOIFFmdGWuE\"")
            .and().insertInto("EMPLOYEES", 164L)
                .d("FIRST_NAME", "\"p\"")
                .d("LAST_NAME", "\"vljOvdfCXa\"")
                .d("EMAIL", "\"xvja@DaV.JtL\"")
                .d("PHONE", "\"xbHqJfsIy\"")
                .d("JOB", "\"Fc6lq3g\"")
                .d("SALARY", "0.8533293413097808")
            .and().insertInto("LOCATIONS", 163L)
                .d("ADR", "\"lKRXhZ2mi_9bdDA\"")
                .d("POSTAL_CODE", "\"eUsK\"")
                .d("CITY", "\"wmf\"")
            .and().insertInto("DEPARTMENTS", 162L)
                .d("DEPARTMENT_NAME", "\"OXc\"")
            .and().insertInto("EMPLOYEES", 161L)
                .d("FIRST_NAME", "\"lqawObaCh_t0Q\"")
                .d("LAST_NAME", "\"5S6etiTxqFj\"")
                .d("EMAIL", "\"ib@U.iU\"")
                .d("PHONE", "\"_OpJIUOH\"")
                .d("JOB", "\"bkefKgbRjRGqB\"")
                .d("SALARY", "0.07952904538163086")
            .and().insertInto("ASSIGNMENTS", 160L)
                .d("EMPLOYEE_ID", "13")
                .d("PROJECT_ID", "9")
                .d("COMMIT_DATE", "\"2071-05-31 00:07:36\"")
                .d("COMMIT_EMP_DESC", "\"xA_ZoWjTg0XqYBR\"")
                .d("COMMIT_MGR_DESC", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/3/location'] Instance type (null) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/departments/")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(6))
                .body("'collection'[0].'departmentId'", numberMatches(4.0))
                .body("'collection'[0].'departmentName'", containsString("DWH"))
                .body("'collection'[0].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'departmentName'", containsString("Digital"))
                .body("'collection'[1].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'departmentName'", containsString("Billing"))
                .body("'collection'[2].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'location'.'city'", containsString("LAC2"))
                ; // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
    }
}
