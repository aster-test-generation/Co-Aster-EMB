package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-17T13:43:22.813939-04:00[America/New_York]
 * <br>
*  The generated test suite contains 341 tests
 * <br>
*  Covered targets: 1793
 * <br>
*  Used time: 1h 5m 1s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  
*/

public class EM_tracking_systemdefault_1234_Test_15_test_15_getOnCredentialsCredentialsWithQueryParamUsingSql {
    

    
    private static final SutHandler controller = new em.external.com.pfa.app.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/tracking-system-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("ASSIGNMENTS","DEPARTMENTS","EMPLOYEES","LOCATIONS","PROJECTS","USER_CREDENTIALS","assignments","departments","employees","locations","projects","user_credentials"));
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (200) GET:/app/api/credentials/
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_15_getOnCredentialsCredentialsWithQueryParamUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 1620L)
                .d("ADR", "\"SaAbWA\"")
                .d("POSTAL_CODE", "\"y3yhsg7rP2NcSIg\"")
                .d("CITY", "\"OnG\"")
            .and().insertInto("DEPARTMENTS", 1619L)
                .d("DEPARTMENT_NAME", "\"sI23bvEWsb\"")
            .and().insertInto("EMPLOYEES", 1618L)
                .d("FIRST_NAME", "\"WhC0\"")
                .d("LAST_NAME", "\"k\"")
                .d("EMAIL", "\"PH@W.VI\"")
                .d("PHONE", "\"BLt4rDYUou\"")
                .d("JOB", "\"A5PsX7n5PDw7NTY\"")
                .d("SALARY", "0.6355764862062817")
            .and().insertInto("EMPLOYEES", 1615L)
                .d("FIRST_NAME", "\"ix9W65x_\"")
                .d("LAST_NAME", "\"Kg98lSG\"")
                .d("EMAIL", "\"kff@vbv.PT\"")
                .d("PHONE", "\"ogDBdyKl5J\"")
                .d("JOB", "\"m5yD103b\"")
                .d("SALARY", "0.8")
            .and().insertInto("USER_CREDENTIALS", 1611L)
                .d("USERNAME", "\"VzME4R9hjUl\"")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "false")
                .d("ROLE", "\"_EM_5395_XYZ_\"")
                .d("EMPLOYEE_ID", "NULL")
            .and().insertInto("PROJECTS", 1569L)
                .d("TITLE", "\"_EM_5337_XYZ_\"")
                .d("STATUS", "\"qs_7c4\"")
            .and().insertInto("LOCATIONS", 1568L)
                .d("ADR", "\"_EM_3719_XYZ_\"")
                .d("POSTAL_CODE", "\"G\"")
                .d("CITY", "\"CIgoexy1eG0y\"")
            .and().insertInto("DEPARTMENTS", 1567L)
                .d("DEPARTMENT_NAME", "\"Billing\"")
            .and().insertInto("EMPLOYEES", 1566L)
                .d("FIRST_NAME", "\"054Lq8a1UD3cqA\"")
                .d("LAST_NAME", "\"_EM_5388_XYZ_\"")
                .d("EMAIL", "\"gmWB@yDA.tih\"")
                .d("PHONE", "\"_EM_5339_XYZ_\"")
                .d("JOB", "\"P\"")
                .d("SALARY", "0.0")
            .and().insertInto("EMPLOYEES", 1563L)
                .d("FIRST_NAME", "\"_EM_5340_XYZ_\"")
                .d("LAST_NAME", "\"_EM_5341_XYZ_\"")
                .d("EMAIL", "\"Kxa@TFE.EtMC\"")
                .d("PHONE", "\"Tmfqc6uophk\"")
                .d("JOB", "\"_EM_5342_XYZ_\"")
                .d("SALARY", "0.8524167800005203")
            .and().insertInto("USER_CREDENTIALS", 1580L)
                .d("USERNAME", "NULL")
                .d("PASSWORD", "NULL")
                .d("ENABLED", "false")
                .d("ROLE", "\"AK9jTW_RweDl_S\"")
                .r("EMPLOYEE_ID", 1566L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/14/password'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/credentials/?username=9T1%7EK")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(16))
                .body("'collection'[0].'credentialId'", numberMatches(1.0))
                .body("'collection'[0].'username'", containsString("imentouk"))
                .body("'collection'[0].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'enabled'", equalTo(true))
                .body("'collection'[0].'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'credentialId'", numberMatches(2.0))
                .body("'collection'[1].'username'", containsString("badridoudi"))
                .body("'collection'[1].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'enabled'", equalTo(true))
                .body("'collection'[1].'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'credentialId'", numberMatches(3.0))
                .body("'collection'[2].'username'", containsString("selimhorri"))
                .body("'collection'[2].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'enabled'", equalTo(true))
                .body("'collection'[2].'role'", containsString("ROLE_EMP"))
                ; // Skipping assertions on the remaining 13 elements. This limit of 3 elements can be increased in the configurations
    }
}
