package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-17T13:43:22.813939-04:00[America/New_York]
 * <br>
*  The generated test suite contains 341 tests
 * <br>
*  Covered targets: 1793
 * <br>
*  Used time: 1h 5m 1s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  
*/

public class EM_tracking_systemdefault_1234_Test_250_test_250_getOnUsernamReturnsObjectUsingSql {
    

    
    private static final SutHandler controller = new em.external.com.pfa.app.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/tracking-system-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("ASSIGNMENTS","DEPARTMENTS","EMPLOYEES","LOCATIONS","PROJECTS","USER_CREDENTIALS","assignments","departments","employees","locations","projects","user_credentials"));
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (200) GET:/app/api/credentials/username/{username}
    */
    @Test @Timeout(60)
    public void test_250_getOnUsernamReturnsObjectUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 854L)
                .d("ADR", "\"nF5DVW5eIcJVq3\"")
                .d("POSTAL_CODE", "\"_EM_5633_XYZ_\"")
                .d("CITY", "\"G\"")
            .and().insertInto("DEPARTMENTS", 853L)
                .d("DEPARTMENT_NAME", "\"2c6\"")
            .and().insertInto("EMPLOYEES", 852L)
                .d("FIRST_NAME", "\"NXyxp_SfuSQ\"")
                .d("LAST_NAME", "\"_EM_4027_XYZ_\"")
                .d("EMAIL", "\"SCI@RXe.QbZv\"")
                .d("PHONE", "\"_EM_4028_XYZ_\"")
                .d("JOB", "\"W\"")
                .d("SALARY", "0.8114936904168821")
            .and().insertInto("LOCATIONS", 851L)
                .d("ADR", "\"Fs4\"")
                .d("POSTAL_CODE", "\"u@V\"")
                .d("CITY", "\"_EM_5634_XYZ_\"")
            .and().insertInto("DEPARTMENTS", 850L)
                .d("DEPARTMENT_NAME", "\"2IYfAN\"")
            .and().insertInto("EMPLOYEES", 849L)
                .d("FIRST_NAME", "\"_EM_4029_XYZ_\"")
                .d("LAST_NAME", "\"_EM_5635_XYZ_\"")
                .d("EMAIL", "\"ii@R.We\"")
                .d("PHONE", "\"ng\"")
                .d("JOB", "\"quLRtclpMyvJzaY\"")
                .d("SALARY", "0.2563")
            .and().insertInto("LOCATIONS", 848L)
                .d("ADR", "\"UcO`UAQUUbT\"")
                .d("POSTAL_CODE", "\"oe\"")
                .d("CITY", "\"Sc\"")
            .and().insertInto("DEPARTMENTS", 847L)
                .d("DEPARTMENT_NAME", "\"1DXfeE\"")
            .and().insertInto("EMPLOYEES", 846L)
                .d("FIRST_NAME", "\"_EM_4030_XYZ_\"")
                .d("LAST_NAME", "\"cz\"")
                .d("EMAIL", "\"cdha@GzW.yZ\"")
                .d("PHONE", "\"HrXyKXY7Sb\"")
                .d("JOB", "\"_EM_4031_XYZ_\"")
                .d("SALARY", "0.0")
            .and().insertInto("USER_CREDENTIALS", 845L)
                .d("USERNAME", "\"cuq_NwWKc9XcJx3\"")
                .d("PASSWORD", "\"x\"")
                .d("ENABLED", "true")
                .d("ROLE", "\"ryed\"")
                .d("EMPLOYEE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/credentials/username/sanasaanouni?" + 
                    "password=_EM_4025_XYZ_&" + 
                    "username=t")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(11.0))
                .body("'username'", containsString("sanasaanouni"))
                .body("'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'enabled'", equalTo(true))
                .body("'role'", containsString("ROLE_EMP"));
    }
}
