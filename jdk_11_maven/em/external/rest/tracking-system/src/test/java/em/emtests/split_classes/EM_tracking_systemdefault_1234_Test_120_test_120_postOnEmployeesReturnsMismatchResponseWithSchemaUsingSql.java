package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-17T13:43:22.813939-04:00[America/New_York]
 * <br>
*  The generated test suite contains 341 tests
 * <br>
*  Covered targets: 1793
 * <br>
*  Used time: 1h 5m 1s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  
*/

public class EM_tracking_systemdefault_1234_Test_120_test_120_postOnEmployeesReturnsMismatchResponseWithSchemaUsingSql {
    

    
    private static final SutHandler controller = new em.external.com.pfa.app.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/tracking-system-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("ASSIGNMENTS","DEPARTMENTS","EMPLOYEES","LOCATIONS","PROJECTS","USER_CREDENTIALS","assignments","departments","employees","locations","projects","user_credentials"));
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * 1 - (400) DELETE:/app/api/employees/{id}
    * 2 - (400) PUT:/app/api/departments/update
    * 3 - (400) DELETE:/app/api/projects/delete/{id}
    * 4 - (400) DELETE:/app/api/projects/{id}
    * 5 - (400) POST:/app/api/authenticate
    * 6 - (400) DELETE:/app/api/locations/delete/{id}
    * 7 - (400) DELETE:/app/api/credentials/delete/{id}
    * 8 - (400) POST:/app/api/employees
    * Found 8 potential faults of type-code 101
    */
    @Test @Timeout(60)
    public void test_120_postOnEmployeesReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 2987L)
            .and().insertInto("DEPARTMENTS", 2986L)
            .and().insertInto("EMPLOYEES", 2985L)
                .d("EMAIL", "\"r25\"")
                .d("PHONE", "\"4TDsr02AlZH2\"")
            .and().insertInto("EMPLOYEES", 2982L)
                .d("EMAIL", "\"42\"")
                .d("PHONE", "\"[7i\"")
            .and().insertInto("USER_CREDENTIALS", 2978L)
                .d("USERNAME", "\"lEti\"")
                .d("PASSWORD", "\"_EM_7787_XYZ_\"")
                .d("ENABLED", "true")
                .d("ROLE", "\"MUDcCy\"")
                .d("EMPLOYEE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .delete(baseUrlOfSut + "/app/api/employees/ARmc%5C5S7=0?" + 
                    "password=4FS0FQYZ&" + 
                    "username=_EM_7783_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/departments/update'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"departmentId\": 736, " + 
                    " \"location\": { " + 
                    " \"locationId\": 240, " + 
                    " \"postalCode\": \"_EM_4402_XYZ_\" " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/departments/update?" + 
                    "password=7&" + 
                    "username=7_86s0DFY")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Unable to find com.pfa.app.model.entity.Location with id 240; nested exception is javax.persistence.EntityNotFoundException: Unable to find com.pfa.app.model.entity.Location with id 240"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/delete/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .delete(baseUrlOfSut + "/app/api/projects/delete/871?password=_EM_7463_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Project object FOUND! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/projects/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/app/api/projects/251?" + 
                    "password=_EM_8757_XYZ_&" + 
                    "username=_EM_7785_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Project object FOUND! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/authenticate'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .contentType("application/json")
                .body(" { " + 
                    " \"password\": \"_EM_1238_XYZ_\", " + 
                    " \"username\": \"MmWDu\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/authenticate?" + 
                    "password=650LTVr5h4a1WpOg&" + 
                    "username=_EM_7467_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("Bad credentials"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/locations/delete/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .delete(baseUrlOfSut + "/app/api/locations/delete/RcurPH0G3us1?password=_EM_8758_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("For input string: \"RcurPH0G3us1\""))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/credentials/delete/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/app/api/credentials/delete/951?" + 
                    "password=DXW4_QyEuZfhxDKp&" + 
                    "username=PyRlssvzHgPbLzu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", containsString("###### NO Credential object FOUND! ######"))
                .body("'status'", containsString("BAD_REQUEST"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/employees'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"department\": { " + 
                    " \"departmentName\": \"qd_d\" " + 
                    " }, " + 
                    " \"email\": \"Tj@t.NcsO\", " + 
                    " \"lastName\": \"rteQoU8ErWijME\", " + 
                    " \"phone\": \"HKLitz\", " + 
                    " \"salary\": 0.6445297104829252 " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/employees")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'msg'", nullValue())
                .body("'status'", containsString("BAD_REQUEST"));
    }
}
