package em.emtests.split_classes;
/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-17T13:43:22.813939-04:00[America/New_York]
 * <br>
*  The generated test suite contains 341 tests
 * <br>
*  Covered targets: 1793
 * <br>
*  Used time: 1h 5m 1s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  
*/

public class EM_tracking_systemdefault_1234_Test_58_test_58_getOnAssignmentsAssignmentsWithQueryParams {
    

    
    private static final SutHandler controller = new em.external.com.pfa.app.ExternalEvoMasterController("/home/rhuang329/coaster/EMB/exp2/tracking-system-sut.jar");
    private static String baseUrlOfSut;

    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }

    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("ASSIGNMENTS","DEPARTMENTS","EMPLOYEES","LOCATIONS","PROJECTS","USER_CREDENTIALS","assignments","departments","employees","locations","projects","user_credentials"));
        controller.resetStateOfSUT();
    }

    /**
    * Calls:
    * (200) GET:/app/api/assignments/
    * Found 1 potential fault of type-code 101
    */
    @Test @Timeout(60)
    public void test_58_getOnAssignmentsAssignmentsWithQueryParams() throws Exception {
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/collection/0/commitEmpDesc'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/assignments/?" + 
                    "EMextraParam123=42&" + 
                    "password=_EM_1238_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(59))
                .body("'collection'[0].'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'projectId'", numberMatches(1.0))
                .body("'collection'[0].'commitDate'", containsString("26-11-202010:50:09"))
                .body("'collection'[0].'commitEmpDesc'", nullValue())
                .body("'collection'[0].'commitMgrDesc'", containsString("init"))
                .body("'collection'[0].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[0].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[0].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[0].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[0].'employee'.'job'", containsString("Billing"))
                .body("'collection'[0].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[0].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[0].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[0].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[0].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[0].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[0].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[0].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[0].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[0].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[0].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[0].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[0].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[0].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[0].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[0].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[0].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[0].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[0].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[0].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[0].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[0].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[0].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[0].'project'.'status'", containsString("COMPLETED"))
                .body("'collection'[1].'employeeId'", numberMatches(1.0))
                .body("'collection'[1].'projectId'", numberMatches(1.0))
                .body("'collection'[1].'commitDate'", containsString("26-11-202013:14:22"))
                .body("'collection'[1].'commitEmpDesc'", containsString("set up some configs"))
                .body("'collection'[1].'commitMgrDesc'", containsString("you need to implement sec solution"))
                .body("'collection'[1].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[1].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[1].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[1].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[1].'employee'.'job'", containsString("Billing"))
                .body("'collection'[1].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[1].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[1].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[1].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[1].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[1].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[1].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[1].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[1].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[1].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[1].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[1].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[1].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[1].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[1].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[1].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[1].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[1].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[1].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[1].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[1].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[1].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[1].'project'.'status'", containsString("COMPLETED"))
                .body("'collection'[2].'employeeId'", numberMatches(1.0))
                .body("'collection'[2].'projectId'", numberMatches(1.0))
                .body("'collection'[2].'commitDate'", containsString("12-12-202016:49:42"))
                .body("'collection'[2].'commitEmpDesc'", containsString("implement customer by invoice"))
                .body("'collection'[2].'commitMgrDesc'", nullValue())
                .body("'collection'[2].'employee'.'employeeId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'firstName'", containsString("Selim"))
                .body("'collection'[2].'employee'.'lastName'", containsString("Horri"))
                .body("'collection'[2].'employee'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'employee'.'phone'", containsString("22125144"))
                .body("'collection'[2].'employee'.'hiredate'", containsString("15-04-2019"))
                .body("'collection'[2].'employee'.'job'", containsString("Billing"))
                .body("'collection'[2].'employee'.'salary'", numberMatches(5000.0))
                .body("'collection'[2].'employee'.'manager'.'employeeId'", numberMatches(4.0))
                .body("'collection'[2].'employee'.'manager'.'firstName'", containsString("Soumaya"))
                .body("'collection'[2].'employee'.'manager'.'lastName'", containsString("Hajjem"))
                .body("'collection'[2].'employee'.'manager'.'email'", containsString("springabcxyzboot@gmail.com"))
                .body("'collection'[2].'employee'.'manager'.'phone'", containsString("22125144"))
                .body("'collection'[2].'employee'.'manager'.'hiredate'", nullValue())
                .body("'collection'[2].'employee'.'manager'.'job'", containsString("Chef service Billing"))
                .body("'collection'[2].'employee'.'manager'.'salary'", numberMatches(6000.0))
                .body("'collection'[2].'employee'.'manager'.'manager'", nullValue())
                .body("'collection'[2].'employee'.'manager'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'employee'.'manager'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'employee'.'manager'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'credentialId'", numberMatches(5.0))
                .body("'collection'[2].'employee'.'manager'.'credential'.'username'", containsString("soumayahajjem"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'employee'.'manager'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'employee'.'manager'.'credential'.'role'", containsString("ROLE_MGR"))
                .body("'collection'[2].'employee'.'department'.'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'employee'.'department'.'departmentName'", containsString("Billing"))
                .body("'collection'[2].'employee'.'department'.'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'employee'.'department'.'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'employee'.'department'.'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'employee'.'department'.'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'employee'.'credential'.'credentialId'", numberMatches(3.0))
                .body("'collection'[2].'employee'.'credential'.'username'", containsString("selimhorri"))
                .body("'collection'[2].'employee'.'credential'.'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'employee'.'credential'.'enabled'", equalTo(true))
                .body("'collection'[2].'employee'.'credential'.'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'project'.'projectId'", numberMatches(1.0))
                .body("'collection'[2].'project'.'title'", containsString("TRANSBSCS"))
                .body("'collection'[2].'project'.'startDate'", containsString("28-09-2020"))
                .body("'collection'[2].'project'.'endDate'", containsString("04-11-2020"))
                .body("'collection'[2].'project'.'status'", containsString("COMPLETED"))
                ; // Skipping assertions on the remaining 56 elements. This limit of 3 elements can be increased in the configurations
    }
}
